From oharboe at mail.berlios.de  Thu Apr  2 12:17:42 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Thu, 2 Apr 2009 12:17:42 +0200
Subject: [Openocd-svn] r1436 - trunk/src/jtag zy1000/trunk/build/include
	zy1000/trunk/build/menu zy1000/trunk/build/tcl
Message-ID: <200904021017.n32AHgT2013088@sheep.berlios.de>

Author: oharboe
Date: 2009-04-02 12:17:36 +0200 (Thu, 02 Apr 2009)
New Revision: 1436

Modified:
   trunk/src/jtag/zy1000.c
   zy1000/trunk/build/include/rom.h
   zy1000/trunk/build/menu/zy1000menu.xml
   zy1000/trunk/build/tcl/guiupload.tcl
Log:
zy1000 1.50 snapshot. fix problem with empty file names.

Modified: trunk/src/jtag/zy1000.c
===================================================================
--- trunk/src/jtag/zy1000.c	2009-03-30 19:52:30 UTC (rev 1435)
+++ trunk/src/jtag/zy1000.c	2009-04-02 10:17:36 UTC (rev 1436)
@@ -32,7 +32,7 @@
 
 #include <stdlib.h>
 
-#define ZYLIN_VERSION "1.49"
+#define ZYLIN_VERSION "1.50"
 #define ZYLIN_DATE __DATE__
 #define ZYLIN_TIME __TIME__
 #define ZYLIN_OPENOCD "$Revision: 1241 $"

Modified: zy1000/trunk/build/include/rom.h
===================================================================
--- zy1000/trunk/build/include/rom.h	2009-03-30 19:52:30 UTC (rev 1435)
+++ zy1000/trunk/build/include/rom.h	2009-04-02 10:17:36 UTC (rev 1436)
@@ -1,726 +1,774 @@
 /* This is a generated file. Do not edit. */
 
 static CYGBLD_ATTRIB_ALIGN(4) const unsigned char filedata[] = {
-    0x2e, 0x6d, 0x6f, 0x52, 0xb3, 0x00, 0x00, 0x00,
-    0xa0, 0xea, 0x07, 0x00, 0x04, 0x03, 0x02, 0x01,
+    0x2e, 0x6d, 0x6f, 0x52, 0xbf, 0x00, 0x00, 0x00,
+    0x20, 0x17, 0x08, 0x00, 0x04, 0x03, 0x02, 0x01,
     0x52, 0x4f, 0x4d, 0x46, 0x53, 0x20, 0x76, 0x31,
     0x2e, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x01, 0x00, 0x6f, 0x01, 0x0a, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x05, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0x80, 0x16, 0x00, 0x00,
+    0x50, 0x90, 0xd4, 0x49, 0x00, 0x18, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xe0, 0x8f, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0x20, 0x31, 0x00, 0x00,
+    0xc4, 0x8f, 0xd4, 0x49, 0x20, 0x34, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x40, 0x02, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0xe0, 0x1b, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xc0, 0x02, 0x00, 0x00,
+    0x4e, 0x90, 0xd4, 0x49, 0x60, 0x1d, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xa8, 0x37, 0x00, 0x00,
-    0xf4, 0xa2, 0x9a, 0x49, 0x00, 0xc1, 0x00, 0x00,
+    0xd1, 0x8f, 0xd4, 0x49, 0x00, 0xc4, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x96, 0x2b, 0x00, 0x00,
-    0xf4, 0xa2, 0x9a, 0x49, 0xc0, 0xf8, 0x00, 0x00,
+    0xd1, 0x8f, 0xd4, 0x49, 0xc0, 0xfb, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x34, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x20, 0x1e, 0x00, 0x00,
+    0x4e, 0x90, 0xd4, 0x49, 0x20, 0x20, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xb4, 0x37, 0x00, 0x00,
-    0xf4, 0xa2, 0x9a, 0x49, 0x60, 0x24, 0x01, 0x00,
+    0xd2, 0x8f, 0xd4, 0x49, 0x60, 0x27, 0x01, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x9d, 0x2f, 0x00, 0x00,
-    0xf4, 0xa2, 0x9a, 0x49, 0x20, 0x5c, 0x01, 0x00,
+    0xd3, 0x8f, 0xd4, 0x49, 0x20, 0x5f, 0x01, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xff, 0x2d, 0x00, 0x00,
-    0xf4, 0xa2, 0x9a, 0x49, 0xc0, 0x8b, 0x01, 0x00,
+    0xd3, 0x8f, 0xd4, 0x49, 0xc0, 0x8e, 0x01, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x9e, 0x00, 0x00, 0x00,
-    0xf5, 0xa2, 0x9a, 0x49, 0xc0, 0xb9, 0x01, 0x00,
+    0xd3, 0x8f, 0xd4, 0x49, 0xc0, 0xbc, 0x01, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x90, 0x38, 0x00, 0x00,
-    0xf5, 0xa2, 0x9a, 0x49, 0x60, 0xba, 0x01, 0x00,
+    0xd3, 0x8f, 0xd4, 0x49, 0x60, 0xbd, 0x01, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x18, 0x2e, 0x00, 0x00,
-    0xf5, 0xa2, 0x9a, 0x49, 0x00, 0xf3, 0x01, 0x00,
+    0xd4, 0x8f, 0xd4, 0x49, 0x00, 0xf6, 0x01, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x8b, 0x65, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0x20, 0x21, 0x02, 0x00,
+    0xc4, 0x8f, 0xd4, 0x49, 0x20, 0x24, 0x02, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x32, 0x3e,
     0x08, 0x00, 0x6f, 0x01, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x92, 0x02, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0x00, 0xe8, 0x07, 0x00,
+    0xc4, 0x8f, 0xd4, 0x49, 0x80, 0x14, 0x08, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xf3, 0x2e, 0x00, 0x00,
-    0xf6, 0xa2, 0x9a, 0x49, 0xc0, 0x86, 0x02, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x5b, 0x2f, 0x00, 0x00,
+    0xd5, 0x8f, 0xd4, 0x49, 0xc0, 0x89, 0x02, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xbb, 0x39, 0x00, 0x00,
-    0xf6, 0xa2, 0x9a, 0x49, 0xc0, 0xb5, 0x02, 0x00,
+    0xd6, 0x8f, 0xd4, 0x49, 0x20, 0xb9, 0x02, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x35, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x80, 0x03, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x80, 0x1e, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xe0, 0x03, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x80, 0x20, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x59, 0x26, 0x00, 0x00,
-    0xf6, 0xa2, 0x9a, 0x49, 0x80, 0xef, 0x02, 0x00,
+    0xd6, 0x8f, 0xd4, 0x49, 0xe0, 0xf2, 0x02, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x22, 0x03, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0xe0, 0x15, 0x03, 0x00,
+    0xc4, 0x8f, 0xd4, 0x49, 0x40, 0x19, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x6a, 0x08, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0x20, 0x19, 0x03, 0x00,
+    0xc4, 0x8f, 0xd4, 0x49, 0x80, 0x1c, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x39, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xc0, 0x02, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0x00, 0x22, 0x00, 0x00,
+    0xd1, 0x8f, 0xd4, 0x49, 0x60, 0x24, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xf2, 0x08, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0xa0, 0x21, 0x03, 0x00,
+    0xcc, 0x8f, 0xd4, 0x49, 0x00, 0x25, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xdd, 0x2a, 0x00, 0x00,
-    0xfb, 0xa2, 0x9a, 0x49, 0xa0, 0x2a, 0x03, 0x00,
+    0xdb, 0x8f, 0xd4, 0x49, 0x00, 0x2e, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x19, 0x30, 0x00, 0x00,
-    0xfb, 0xa2, 0x9a, 0x49, 0x80, 0x55, 0x03, 0x00,
+    0xdb, 0x8f, 0xd4, 0x49, 0xe0, 0x58, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xdb, 0x32, 0x00, 0x00,
-    0xfb, 0xa2, 0x9a, 0x49, 0xa0, 0x85, 0x03, 0x00,
+    0xdb, 0x8f, 0xd4, 0x49, 0x00, 0x89, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x0d, 0x29, 0x00, 0x00,
-    0xfc, 0xa2, 0x9a, 0x49, 0x80, 0xb8, 0x03, 0x00,
+    0xdb, 0x8f, 0xd4, 0x49, 0xe0, 0xbb, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x07, 0x2e, 0x00, 0x00,
-    0xfc, 0xa2, 0x9a, 0x49, 0xa0, 0xe1, 0x03, 0x00,
+    0xdb, 0x8f, 0xd4, 0x49, 0x00, 0xe5, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x26, 0x01, 0x00, 0x00,
-    0xfc, 0xa2, 0x9a, 0x49, 0xc0, 0x0f, 0x04, 0x00,
+    0xdc, 0x8f, 0xd4, 0x49, 0x20, 0x13, 0x04, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x3f, 0x0b, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0x00, 0x11, 0x04, 0x00,
+    0xcd, 0x8f, 0xd4, 0x49, 0x60, 0x14, 0x04, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x91, 0x30, 0x00, 0x00,
-    0xfd, 0xa2, 0x9a, 0x49, 0x40, 0x1c, 0x04, 0x00,
+    0xdc, 0x8f, 0xd4, 0x49, 0xa0, 0x1f, 0x04, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x41, 0x07, 0x00, 0x00,
-    0xfd, 0xa2, 0x9a, 0x49, 0xe0, 0x4c, 0x04, 0x00,
+    0xdc, 0x8f, 0xd4, 0x49, 0x40, 0x50, 0x04, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x30, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x80, 0x06, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0xc0, 0x24, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x20, 0x07, 0x00, 0x00,
+    0x50, 0x90, 0xd4, 0x49, 0x20, 0x27, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x22, 0x48, 0x00, 0x00,
-    0xfd, 0xa2, 0x9a, 0x49, 0x40, 0x54, 0x04, 0x00,
+    0xdd, 0x8f, 0xd4, 0x49, 0xa0, 0x57, 0x04, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x32, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x04, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x00, 0x01, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0x40, 0x2b, 0x00, 0x00,
+    0x50, 0x90, 0xd4, 0x49, 0x40, 0x2e, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xca, 0x2e, 0x00, 0x00,
-    0xfd, 0xa2, 0x9a, 0x49, 0x80, 0x9c, 0x04, 0x00,
+    0xdd, 0x8f, 0xd4, 0x49, 0xe0, 0x9f, 0x04, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x34, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x00, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0x40, 0x2c, 0x00, 0x00,
+    0x50, 0x90, 0xd4, 0x49, 0x40, 0x2f, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xab, 0x30, 0x00, 0x00,
-    0xfd, 0xa2, 0x9a, 0x49, 0x60, 0xcb, 0x04, 0x00,
+    0xdd, 0x8f, 0xd4, 0x49, 0xc0, 0xce, 0x04, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x70, 0x01, 0x00, 0x00,
-    0xfe, 0xa2, 0x9a, 0x49, 0x20, 0xfc, 0x04, 0x00,
+    0xdd, 0x8f, 0xd4, 0x49, 0x80, 0xff, 0x04, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x37, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x00, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0xa0, 0x2c, 0x00, 0x00,
+    0x50, 0x90, 0xd4, 0x49, 0xa0, 0x2f, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xb3, 0x35, 0x00, 0x00,
-    0xfe, 0xa2, 0x9a, 0x49, 0xa0, 0xfd, 0x04, 0x00,
+    0xdd, 0x8f, 0xd4, 0x49, 0x00, 0x01, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x13, 0x06, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0x60, 0x33, 0x05, 0x00,
+    0xcd, 0x8f, 0xd4, 0x49, 0xc0, 0x36, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x65, 0x03, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0x80, 0x39, 0x05, 0x00,
+    0xc4, 0x8f, 0xd4, 0x49, 0xe0, 0x3c, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xce, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x00, 0x3d, 0x05, 0x00,
+    0x4e, 0x90, 0xd4, 0x49, 0x60, 0x40, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x51, 0x08, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0xe0, 0x3d, 0x05, 0x00,
+    0x4e, 0x90, 0xd4, 0x49, 0x40, 0x41, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x62, 0x09, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x40, 0x46, 0x05, 0x00,
+    0x4e, 0x90, 0xd4, 0x49, 0xa0, 0x49, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x14, 0x04, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0xc0, 0x4f, 0x05, 0x00,
+    0x4e, 0x90, 0xd4, 0x49, 0x20, 0x53, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0xe0, 0x53, 0x05, 0x00,
+    0x4e, 0x90, 0xd4, 0x49, 0x40, 0x57, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xbe, 0x07, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x40, 0x54, 0x05, 0x00,
+    0x4e, 0x90, 0xd4, 0x49, 0xa0, 0x57, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x11, 0x0a, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x00, 0x5c, 0x05, 0x00,
+    0x4e, 0x90, 0xd4, 0x49, 0x60, 0x5f, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x23, 0x01, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x20, 0x66, 0x05, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x75, 0x00, 0x00, 0x00,
+    0x4e, 0x90, 0xd4, 0x49, 0x80, 0x69, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x64, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x60, 0x67, 0x05, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x23, 0x01, 0x00, 0x00,
+    0x4e, 0x90, 0xd4, 0x49, 0x00, 0x6a, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xc4, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0xe0, 0x67, 0x05, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x7a, 0x00, 0x00, 0x00,
+    0x4e, 0x90, 0xd4, 0x49, 0x40, 0x6b, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x89, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0xc0, 0x68, 0x05, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x64, 0x00, 0x00, 0x00,
+    0x4e, 0x90, 0xd4, 0x49, 0xc0, 0x6b, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x69, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x60, 0x69, 0x05, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xc4, 0x00, 0x00, 0x00,
+    0x4e, 0x90, 0xd4, 0x49, 0x40, 0x6c, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xa9, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0xe0, 0x69, 0x05, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x89, 0x00, 0x00, 0x00,
+    0x4e, 0x90, 0xd4, 0x49, 0x20, 0x6d, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x4b, 0x0c, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0xa0, 0x6a, 0x05, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x83, 0x10, 0x00, 0x00,
+    0x4e, 0x90, 0xd4, 0x49, 0xc0, 0x6d, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x5c, 0x03, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x00, 0x77, 0x05, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x69, 0x00, 0x00, 0x00,
+    0x4e, 0x90, 0xd4, 0x49, 0x60, 0x7e, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xe0, 0x8f, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x60, 0x7a, 0x05, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xa9, 0x00, 0x00, 0x00,
+    0x4e, 0x90, 0xd4, 0x49, 0xe0, 0x7e, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x85, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x40, 0x0a, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x8c, 0x00, 0x00, 0x00,
+    0x4e, 0x90, 0xd4, 0x49, 0xa0, 0x7f, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x3d, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0xe0, 0x0a, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x4b, 0x0c, 0x00, 0x00,
+    0x4e, 0x90, 0xd4, 0x49, 0x40, 0x80, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x87, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x20, 0x0b, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x5c, 0x03, 0x00, 0x00,
+    0x4e, 0x90, 0xd4, 0x49, 0xa0, 0x8c, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xfc, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0xc0, 0x0b, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xe0, 0x8f, 0x00, 0x00,
+    0x4e, 0x90, 0xd4, 0x49, 0x00, 0x90, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xfe, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0xc0, 0x0c, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x30, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xe0, 0x1f, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xb4, 0x01, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0xc0, 0x0d, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x85, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x20, 0x20, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x3a, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x80, 0x0f, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x3d, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xc0, 0x20, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x11, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0xc0, 0x0f, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x87, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x00, 0x21, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xee, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0xe0, 0x0f, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xfc, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xa0, 0x21, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x26, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0xe0, 0x10, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xfe, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xa0, 0x22, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x7b, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x20, 0x11, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xb4, 0x01, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xa0, 0x23, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x7b, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0xa0, 0x11, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x3a, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x60, 0x25, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xa5, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x20, 0x12, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x11, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xa0, 0x25, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x72, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0xe0, 0x12, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xee, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xc0, 0x25, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x86, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x60, 0x13, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x26, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xc0, 0x26, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x75, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x00, 0x14, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x79, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x00, 0x27, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x99, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x80, 0x14, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x7b, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x80, 0x27, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x8f, 0x01, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x20, 0x15, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xa5, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x00, 0x28, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xad, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0xc0, 0x16, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x72, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xc0, 0x28, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x72, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x80, 0x17, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x86, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x40, 0x29, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x74, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x00, 0x18, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x75, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xe0, 0x29, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x26, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x80, 0x18, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xb7, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x60, 0x2a, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x79, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0xc0, 0x18, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x8f, 0x01, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x20, 0x2b, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x6f, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x40, 0x19, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xad, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xc0, 0x2c, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x50, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0xc0, 0x19, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x4d, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x80, 0x2d, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x8d, 0x00, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x20, 0x1a, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x51, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xe0, 0x2d, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x35, 0x01, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0xc0, 0x1a, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x26, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x40, 0x2e, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x33, 0x01, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0x00, 0x1c, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x59, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x80, 0x2e, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x6c, 0x01, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0x40, 0x1d, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x79, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xe0, 0x2e, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x36, 0x01, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0xc0, 0x1e, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x8b, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x60, 0x2f, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x5d, 0x01, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0x00, 0x20, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x6e, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x00, 0x30, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x4a, 0x01, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0x60, 0x21, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x8d, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x80, 0x30, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xc6, 0x01, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0xc0, 0x22, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x5f, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x20, 0x31, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xc0, 0x03, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0xa0, 0x24, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x35, 0x01, 0x00, 0x00,
+    0xcc, 0x8f, 0xd4, 0x49, 0x80, 0x31, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x0a, 0x0c, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0x60, 0x28, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x33, 0x01, 0x00, 0x00,
+    0xcc, 0x8f, 0xd4, 0x49, 0xc0, 0x32, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x5f, 0x01, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0x80, 0x34, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x6c, 0x01, 0x00, 0x00,
+    0xcc, 0x8f, 0xd4, 0x49, 0x00, 0x34, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x19, 0x01, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0xe0, 0x35, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x36, 0x01, 0x00, 0x00,
+    0xcc, 0x8f, 0xd4, 0x49, 0x80, 0x35, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x09, 0x01, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0x00, 0x37, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x5d, 0x01, 0x00, 0x00,
+    0xcc, 0x8f, 0xd4, 0x49, 0xc0, 0x36, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x60, 0x01, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0x20, 0x38, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x4a, 0x01, 0x00, 0x00,
+    0xcc, 0x8f, 0xd4, 0x49, 0x20, 0x38, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x31, 0x01, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0x80, 0x39, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xc6, 0x01, 0x00, 0x00,
+    0xcc, 0x8f, 0xd4, 0x49, 0x80, 0x39, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xa9, 0x00, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0xc0, 0x3a, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xc0, 0x03, 0x00, 0x00,
+    0xcc, 0x8f, 0xd4, 0x49, 0x60, 0x3b, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xf1, 0x08, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0x80, 0x3b, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x0a, 0x0c, 0x00, 0x00,
+    0xcc, 0x8f, 0xd4, 0x49, 0x20, 0x3f, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x86, 0x01, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0x80, 0x44, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x5f, 0x01, 0x00, 0x00,
+    0xcc, 0x8f, 0xd4, 0x49, 0x40, 0x4b, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x65, 0x01, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0x20, 0x46, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x19, 0x01, 0x00, 0x00,
+    0xcc, 0x8f, 0xd4, 0x49, 0xa0, 0x4c, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x84, 0x0f, 0x00, 0x00,
-    0xf3, 0xa2, 0x9a, 0x49, 0xa0, 0x47, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x09, 0x01, 0x00, 0x00,
+    0xcc, 0x8f, 0xd4, 0x49, 0xc0, 0x4d, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x8a, 0x06, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x40, 0x57, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x60, 0x01, 0x00, 0x00,
+    0xcc, 0x8f, 0xd4, 0x49, 0xe0, 0x4e, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x27, 0x07, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0xe0, 0x5d, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x31, 0x01, 0x00, 0x00,
+    0xcc, 0x8f, 0xd4, 0x49, 0x40, 0x50, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x47, 0x05, 0x00, 0x00,
-    0x28, 0xa3, 0x9a, 0x49, 0x20, 0x65, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xa9, 0x00, 0x00, 0x00,
+    0xcc, 0x8f, 0xd4, 0x49, 0x80, 0x51, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x37, 0x06, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x80, 0x6a, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xf1, 0x08, 0x00, 0x00,
+    0xcc, 0x8f, 0xd4, 0x49, 0x40, 0x52, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xfa, 0x03, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0xc0, 0x70, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x86, 0x01, 0x00, 0x00,
+    0xcc, 0x8f, 0xd4, 0x49, 0x40, 0x5b, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x9f, 0x03, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0xc0, 0x74, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x65, 0x01, 0x00, 0x00,
+    0xcc, 0x8f, 0xd4, 0x49, 0xe0, 0x5c, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xf2, 0x05, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x60, 0x78, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x84, 0x0f, 0x00, 0x00,
+    0xcc, 0x8f, 0xd4, 0x49, 0x60, 0x5e, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x01, 0x03, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x60, 0x7e, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x8a, 0x06, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x00, 0x6e, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x77, 0x04, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x80, 0x81, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x27, 0x07, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xa0, 0x74, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x1d, 0x07, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x00, 0x86, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x47, 0x05, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xe0, 0x7b, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x17, 0x03, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x20, 0x8d, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x37, 0x06, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x40, 0x81, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xe2, 0x05, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x40, 0x90, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xfa, 0x03, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x80, 0x87, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x19, 0x05, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x40, 0x96, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x9f, 0x03, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x80, 0x8b, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xc2, 0x04, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x60, 0x9b, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xdf, 0x02, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x20, 0x8f, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xbd, 0x04, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x40, 0xa0, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xf2, 0x05, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x00, 0x92, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xf6, 0x03, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x00, 0xa5, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x01, 0x03, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x00, 0x98, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xa2, 0x05, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x00, 0xa9, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x77, 0x04, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x20, 0x9b, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x34, 0x00, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0xc0, 0xae, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x1d, 0x07, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xa0, 0x9f, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x31, 0x00, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x00, 0xaf, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x3c, 0x05, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xc0, 0xa6, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x4c, 0x04, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x40, 0xaf, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x17, 0x03, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x00, 0xac, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x25, 0x03, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0xa0, 0xb3, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xe2, 0x05, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x20, 0xaf, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x14, 0x01, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0xe0, 0xb6, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x17, 0x03, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x20, 0xb5, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x3c, 0x06, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x00, 0xb8, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x19, 0x05, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x40, 0xb8, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x55, 0x04, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x40, 0xbe, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xc2, 0x04, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x60, 0xbd, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x88, 0x09, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0xa0, 0xc2, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xbd, 0x04, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x40, 0xc2, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x15, 0x02, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x40, 0xcc, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xf6, 0x03, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x00, 0xc7, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x9b, 0x05, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x60, 0xce, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x88, 0x06, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x00, 0xcb, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x00, 0xd4, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x34, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xa0, 0xd1, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x98, 0x05, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x20, 0xd8, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x31, 0x00, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xe0, 0xd1, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xe3, 0x03, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0xc0, 0xdd, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x4c, 0x04, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x20, 0xd2, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x3f, 0x04, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0xc0, 0xe1, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x25, 0x03, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x80, 0xd6, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x4e, 0x02, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x00, 0xe6, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x14, 0x01, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xc0, 0xd9, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x97, 0x05, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x60, 0xe8, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x50, 0x04, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xe0, 0xda, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x67, 0x02, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x00, 0xee, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x3d, 0x06, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x40, 0xdf, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x33, 0x01, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x80, 0xf0, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x55, 0x04, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x80, 0xe5, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x02, 0x03, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0xc0, 0xf1, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x88, 0x09, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xe0, 0xe9, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x84, 0x05, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0xe0, 0xf4, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x15, 0x02, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x80, 0xf3, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x2d, 0x05, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x80, 0xfa, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x9d, 0x05, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0xa0, 0xf5, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x49, 0x05, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0xc0, 0xff, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x18, 0x03, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x40, 0xfb, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xfd, 0x04, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x20, 0x05, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x60, 0xfe, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x5e, 0x05, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x20, 0x0a, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x98, 0x05, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x80, 0x02, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x9e, 0x06, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x80, 0x0f, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xe3, 0x03, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x20, 0x08, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x84, 0x07, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0x20, 0x16, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x3f, 0x04, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x20, 0x0c, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xf0, 0x04, 0x00, 0x00,
-    0x29, 0xa3, 0x9a, 0x49, 0xc0, 0x1d, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x4e, 0x02, 0x00, 0x00,
+    0x4f, 0x90, 0xd4, 0x49, 0x60, 0x10, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xcc, 0x01, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0xc0, 0x22, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x97, 0x05, 0x00, 0x00,
+    0x50, 0x90, 0xd4, 0x49, 0xc0, 0x12, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x5a, 0x00, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0xa0, 0x24, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x67, 0x02, 0x00, 0x00,
+    0x50, 0x90, 0xd4, 0x49, 0x60, 0x18, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x21, 0x0f, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0x00, 0x25, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x33, 0x01, 0x00, 0x00,
+    0x50, 0x90, 0xd4, 0x49, 0xe0, 0x1a, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xfa, 0x09, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0x40, 0x34, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x02, 0x03, 0x00, 0x00,
+    0x50, 0x90, 0xd4, 0x49, 0x20, 0x1c, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xf5, 0x0b, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0x40, 0x3e, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x84, 0x05, 0x00, 0x00,
+    0x50, 0x90, 0xd4, 0x49, 0x40, 0x1f, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x2c, 0x05, 0x00, 0x00,
+    0x50, 0x90, 0xd4, 0x49, 0xe0, 0x24, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x32, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x49, 0x05, 0x00, 0x00,
+    0x50, 0x90, 0xd4, 0x49, 0x20, 0x2a, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x33, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xfd, 0x04, 0x00, 0x00,
+    0x50, 0x90, 0xd4, 0x49, 0x80, 0x2f, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x34, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x5e, 0x05, 0x00, 0x00,
+    0x50, 0x90, 0xd4, 0x49, 0x80, 0x34, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x35, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x9e, 0x06, 0x00, 0x00,
+    0x50, 0x90, 0xd4, 0x49, 0xe0, 0x39, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x36, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x84, 0x07, 0x00, 0x00,
+    0x50, 0x90, 0xd4, 0x49, 0x80, 0x40, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x37, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x19, 0x07, 0x00, 0x00,
+    0x50, 0x90, 0xd4, 0x49, 0x20, 0x48, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x38, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xcc, 0x01, 0x00, 0x00,
+    0x50, 0x90, 0xd4, 0x49, 0x40, 0x4f, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x39, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x5a, 0x00, 0x00, 0x00,
+    0x50, 0x90, 0xd4, 0x49, 0x20, 0x51, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x30, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x21, 0x0f, 0x00, 0x00,
+    0x50, 0x90, 0xd4, 0x49, 0x80, 0x51, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x31, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xfa, 0x09, 0x00, 0x00,
+    0x50, 0x90, 0xd4, 0x49, 0xc0, 0x60, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x32, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xf5, 0x0b, 0x00, 0x00,
+    0x50, 0x90, 0xd4, 0x49, 0xc0, 0x6a, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x33, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x7f, 0x06, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0x40, 0x4a, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x32, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0xc0, 0x76, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x34, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x04, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x80, 0x00, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0x00, 0x2d, 0x00, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x33, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0x00, 0x30, 0x00, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x35, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x03, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x00, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0x80, 0x2d, 0x00, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x34, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0x80, 0x30, 0x00, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x88, 0x0e, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0xc0, 0x50, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x35, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0x40, 0x7d, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xe0, 0x06, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0x60, 0x5f, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x36, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0xe0, 0x8b, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x5e, 0x02, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0x40, 0x66, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x37, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0xc0, 0x92, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x39, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x03, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x00, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0xe0, 0x2d, 0x00, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x38, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0xe0, 0x30, 0x00, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x30, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x03, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x00, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0x40, 0x2e, 0x00, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x39, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0x40, 0x31, 0x00, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x31, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x00, 0x01, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0xa0, 0x2e, 0x00, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x30, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0xa0, 0x31, 0x00, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x18, 0x0c, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0xa0, 0x68, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x31, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0x20, 0x95, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x21, 0x0f, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0xc0, 0x74, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x32, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0x40, 0xa1, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xa9, 0x10, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0x00, 0x84, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x33, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0x80, 0xb0, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x66, 0x01, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0xc0, 0x94, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x34, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0x40, 0xc1, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xaf, 0x05, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0x40, 0x96, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x35, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0xc0, 0xc2, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xcf, 0x0e, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0x00, 0x9c, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x36, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0x80, 0xc8, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x38, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xa0, 0x00, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0xa0, 0x2f, 0x00, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x37, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0xa0, 0x32, 0x00, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xec, 0x00, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0xe0, 0xaa, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x38, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0x60, 0xd7, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xf1, 0x1d, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0xe0, 0xab, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x39, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0x60, 0xd8, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xf6, 0x11, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0xe0, 0xc9, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x30, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0x60, 0xf6, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x32, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xe0, 0x00, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0x40, 0x30, 0x00, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x31, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0x40, 0x33, 0x00, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x79, 0x00, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0xe0, 0xdb, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x32, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0x60, 0x08, 0x08, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x77, 0x00, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0x60, 0xdc, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x33, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0xe0, 0x08, 0x08, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x78, 0x00, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0xe0, 0xdc, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x34, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0x60, 0x09, 0x08, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x78, 0x00, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0x60, 0xdd, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x35, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0xe0, 0x09, 0x08, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x79, 0x00, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0xe0, 0xdd, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x36, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0x60, 0x0a, 0x08, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x58, 0x03, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0x60, 0xde, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x37, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0xe0, 0x0a, 0x08, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x38, 0x06, 0x00, 0x00,
-    0x2a, 0xa3, 0x9a, 0x49, 0xc0, 0xe1, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x38, 0x3e,
+    0x50, 0x90, 0xd4, 0x49, 0x40, 0x0e, 0x08, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x39, 0x30, 0x3e,
     0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
     0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -930,30 +978,46 @@
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x31, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00,
+    0x6b, 0x65, 0x69, 0x6c, 0x5f, 0x6d, 0x63, 0x62,
+    0x32, 0x31, 0x34, 0x30, 0x2e, 0x63, 0x66, 0x67,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x32, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00,
     0x6c, 0x6f, 0x67, 0x69, 0x63, 0x70, 0x64, 0x5f,
     0x69, 0x6d, 0x78, 0x32, 0x37, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x32, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00,
+    0x33, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
+    0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78, 0x5f, 0x6c,
+    0x70, 0x63, 0x5f, 0x68, 0x32, 0x31, 0x34, 0x38,
+    0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
+    0x34, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00,
     0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78, 0x5f, 0x73,
     0x61, 0x6d, 0x37, 0x5f, 0x65, 0x78, 0x32, 0x35,
     0x36, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00,
-    0x33, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
+    0x35, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00,
     0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78, 0x5f, 0x73,
     0x61, 0x6d, 0x39, 0x5f, 0x6c, 0x39, 0x32, 0x36,
     0x30, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00,
-    0x34, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00,
+    0x36, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00,
     0x70, 0x69, 0x63, 0x2d, 0x70, 0x33, 0x32, 0x6d,
     0x78, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x35, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00,
+    0x37, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
+    0x73, 0x68, 0x65, 0x65, 0x76, 0x61, 0x70, 0x6c,
+    0x75, 0x67, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x38, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00,
     0x73, 0x74, 0x6d, 0x33, 0x32, 0x31, 0x30, 0x65,
     0x5f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x36, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00,
+    0x39, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00,
     0x73, 0x74, 0x6d, 0x33, 0x32, 0x66, 0x31, 0x30,
     0x78, 0x5f, 0x31, 0x32, 0x38, 0x6b, 0x5f, 0x65,
     0x76, 0x61, 0x6c, 0x2e, 0x63, 0x66, 0x67, 0x00,
-    0x37, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00,
+    0x3a, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00,
+    0x74, 0x69, 0x5f, 0x62, 0x65, 0x61, 0x67, 0x6c,
+    0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63,
+    0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x3b, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00,
     0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
     0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x61, 0x74,
     0x6d, 0x65, 0x6c, 0x2d, 0x61, 0x74, 0x39, 0x31,
@@ -961,7 +1025,7 @@
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x38, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00,
+    0x3c, 0x00, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00,
     0x78, 0x33, 0x30, 0x30, 0x74, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -973,7 +1037,7 @@
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x39, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0x3d, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x61, 0x74, 0x39, 0x31, 0x65, 0x62, 0x34, 0x30,
     0x61, 0x2e, 0x65, 0x6c, 0x66, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -985,110 +1049,122 @@
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x3a, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0x3e, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0x61, 0x72, 0x6d, 0x2d, 0x6a, 0x74, 0x61, 0x67,
+    0x2d, 0x65, 0x77, 0x2e, 0x63, 0x66, 0x67, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x3f, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
     0x61, 0x72, 0x6d, 0x2d, 0x75, 0x73, 0x62, 0x2d,
     0x6f, 0x63, 0x64, 0x2e, 0x63, 0x66, 0x67, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x3b, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
+    0x40, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
     0x61, 0x74, 0x39, 0x31, 0x72, 0x6d, 0x39, 0x32,
     0x30, 0x30, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x3c, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
+    0x41, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
     0x61, 0x78, 0x6d, 0x30, 0x34, 0x33, 0x32, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x3d, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
+    0x42, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
     0x63, 0x61, 0x6c, 0x61, 0x6f, 0x2d, 0x75, 0x73,
     0x62, 0x2d, 0x61, 0x39, 0x32, 0x36, 0x30, 0x2d,
     0x63, 0x30, 0x31, 0x2e, 0x63, 0x66, 0x67, 0x00,
-    0x3e, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
+    0x43, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
     0x63, 0x61, 0x6c, 0x61, 0x6f, 0x2d, 0x75, 0x73,
     0x62, 0x2d, 0x61, 0x39, 0x32, 0x36, 0x30, 0x2d,
     0x63, 0x30, 0x32, 0x2e, 0x63, 0x66, 0x67, 0x00,
-    0x3f, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
+    0x44, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00,
     0x63, 0x61, 0x6c, 0x61, 0x6f, 0x2d, 0x75, 0x73,
     0x62, 0x2d, 0x61, 0x39, 0x32, 0x36, 0x30, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x40, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00,
+    0x45, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00,
     0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f,
     0x6e, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x41, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00,
+    0x46, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00,
     0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x42, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00,
+    0x47, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
     0x66, 0x6c, 0x79, 0x73, 0x77, 0x61, 0x74, 0x74,
     0x65, 0x72, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x43, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
+    0x48, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00,
     0x6a, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x44, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00,
+    0x49, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00,
     0x6a, 0x74, 0x61, 0x67, 0x6b, 0x65, 0x79, 0x2d,
     0x74, 0x69, 0x6e, 0x79, 0x2e, 0x63, 0x66, 0x67,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x45, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00,
+    0x4a, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00,
     0x6a, 0x74, 0x61, 0x67, 0x6b, 0x65, 0x79, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x46, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00,
+    0x4b, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
     0x6c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79,
     0x2d, 0x6c, 0x69, 0x62, 0x66, 0x74, 0x64, 0x69,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
-    0x47, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
+    0x4c, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00,
     0x6c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79,
     0x2d, 0x6c, 0x6d, 0x33, 0x73, 0x38, 0x31, 0x31,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
-    0x48, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00,
+    0x4d, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00,
     0x6c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x49, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00,
+    0x4e, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00,
     0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78, 0x2d, 0x61,
     0x72, 0x6d, 0x2d, 0x75, 0x73, 0x62, 0x2d, 0x6f,
     0x63, 0x64, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00,
-    0x4a, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00,
+    0x4f, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
     0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78, 0x2d, 0x6a,
     0x74, 0x61, 0x67, 0x2d, 0x74, 0x69, 0x6e, 0x79,
     0x2d, 0x61, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00,
-    0x4b, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
+    0x50, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00,
     0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78, 0x2d, 0x6a,
     0x74, 0x61, 0x67, 0x2d, 0x74, 0x69, 0x6e, 0x79,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
-    0x4c, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00,
+    0x51, 0x00, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00,
     0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x63, 0x64, 0x2d,
     0x75, 0x73, 0x62, 0x2e, 0x63, 0x66, 0x67, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x4d, 0x00, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00,
+    0x52, 0x00, 0x00, 0x00, 0xe0, 0x02, 0x00, 0x00,
     0x70, 0x61, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x4e, 0x00, 0x00, 0x00, 0xe0, 0x02, 0x00, 0x00,
+    0x53, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
     0x70, 0x61, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x5f,
     0x64, 0x6c, 0x63, 0x35, 0x2e, 0x63, 0x66, 0x67,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x4f, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
+    0x54, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00,
     0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x50, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00,
+    0x55, 0x00, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00,
+    0x73, 0x68, 0x65, 0x65, 0x76, 0x61, 0x70, 0x6c,
+    0x75, 0x67, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x56, 0x00, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00,
     0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
     0x65, 0x72, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x51, 0x00, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00,
+    0x57, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00,
     0x73, 0x74, 0x6d, 0x33, 0x32, 0x2d, 0x73, 0x74,
     0x69, 0x63, 0x6b, 0x2e, 0x63, 0x66, 0x67, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x52, 0x00, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00,
+    0x58, 0x00, 0x00, 0x00, 0xa0, 0x03, 0x00, 0x00,
     0x73, 0x74, 0x72, 0x39, 0x2d, 0x63, 0x6f, 0x6d,
     0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x53, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00,
+    0x59, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00,
     0x74, 0x75, 0x72, 0x74, 0x65, 0x6c, 0x69, 0x7a,
     0x65, 0x72, 0x32, 0x2e, 0x63, 0x66, 0x67, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x5a, 0x00, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00,
+    0x75, 0x73, 0x62, 0x70, 0x72, 0x6f, 0x67, 0x2e,
+    0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x14, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
     0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -1097,79 +1173,79 @@
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x54, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0x5b, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x62,
     0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x6e,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x55, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
+    0x5c, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
     0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74,
     0x6f, 0x70, 0x2e, 0x70, 0x6e, 0x67, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x56, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
+    0x5d, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
     0x68, 0x5f, 0x74, 0x61, 0x62, 0x31, 0x2e, 0x70,
     0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x57, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
+    0x5e, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
     0x68, 0x5f, 0x74, 0x61, 0x62, 0x31, 0x5f, 0x73,
     0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x2e,
     0x70, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x58, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
+    0x5f, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
     0x68, 0x5f, 0x74, 0x61, 0x62, 0x32, 0x2e, 0x70,
     0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x59, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
+    0x60, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
     0x68, 0x5f, 0x74, 0x61, 0x62, 0x32, 0x5f, 0x73,
     0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x2e,
     0x70, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x5a, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00,
+    0x61, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00,
     0x68, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x66, 0x72,
     0x65, 0x65, 0x2e, 0x70, 0x6e, 0x67, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x5b, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00,
+    0x62, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00,
     0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x62, 0x6f, 0x74,
     0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x6e, 0x67, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x5c, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00,
+    0x63, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00,
     0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
     0x2e, 0x70, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x5d, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
+    0x64, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
     0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x6f,
     0x74, 0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x6e, 0x67,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x5e, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00,
+    0x65, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00,
     0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x6f,
     0x70, 0x2e, 0x70, 0x6e, 0x67, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x5f, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00,
+    0x66, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00,
     0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x6f,
     0x70, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x2e,
     0x70, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x60, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00,
+    0x67, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00,
     0x74, 0x6f, 0x70, 0x5f, 0x72, 0x69, 0x67, 0x68,
     0x74, 0x2e, 0x70, 0x6e, 0x67, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x61, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
+    0x68, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
     0x76, 0x5f, 0x31, 0x2e, 0x70, 0x6e, 0x67, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x62, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00,
+    0x69, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00,
     0x76, 0x5f, 0x32, 0x5f, 0x74, 0x69, 0x6c, 0x65,
     0x2e, 0x70, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x63, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00,
+    0x6a, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00,
     0x76, 0x5f, 0x33, 0x2e, 0x70, 0x6e, 0x67, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x64, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00,
+    0x6b, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00,
     0x76, 0x5f, 0x74, 0x61, 0x62, 0x2e, 0x70, 0x6e,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x65, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
+    0x6c, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
     0x76, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x73, 0x65,
     0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x70,
     0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x66, 0x00, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00,
+    0x6d, 0x00, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00,
     0x7a, 0x79, 0x6c, 0x69, 0x6e, 0x5f, 0x6c, 0x6f,
     0x67, 0x6f, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f,
     0x6d, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x2e, 0x50,
@@ -1185,183 +1261,203 @@
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x67, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0x6e, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x61, 0x64, 0x75, 0x63, 0x37, 0x30, 0x32, 0x78,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x68, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
+    0x6f, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
     0x61, 0x74, 0x39, 0x31, 0x65, 0x62, 0x34, 0x30,
     0x61, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x69, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
+    0x70, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
     0x61, 0x74, 0x39, 0x31, 0x72, 0x34, 0x30, 0x30,
     0x30, 0x38, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x6a, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
+    0x71, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
     0x61, 0x74, 0x39, 0x31, 0x72, 0x6d, 0x39, 0x32,
     0x30, 0x30, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x6b, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
+    0x72, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
     0x61, 0x74, 0x39, 0x31, 0x73, 0x61, 0x6d, 0x39,
     0x32, 0x36, 0x30, 0x2e, 0x63, 0x66, 0x67, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x6c, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
+    0x73, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
     0x65, 0x70, 0x63, 0x39, 0x33, 0x30, 0x31, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x6d, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00,
+    0x74, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00,
+    0x66, 0x65, 0x72, 0x6f, 0x63, 0x65, 0x6f, 0x6e,
+    0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x75, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00,
     0x69, 0x6d, 0x6f, 0x74, 0x65, 0x32, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x6e, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00,
+    0x76, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00,
     0x69, 0x6d, 0x78, 0x32, 0x31, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x6f, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00,
+    0x77, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
     0x69, 0x6d, 0x78, 0x32, 0x37, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x70, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
+    0x78, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00,
     0x69, 0x6d, 0x78, 0x33, 0x31, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x71, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00,
+    0x79, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00,
+    0x69, 0x6d, 0x78, 0x33, 0x35, 0x2e, 0x63, 0x66,
+    0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x7a, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00,
     0x69, 0x70, 0x78, 0x34, 0x32, 0x78, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x72, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00,
+    0x7b, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
     0x69, 0x73, 0x35, 0x31, 0x31, 0x34, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x73, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00,
+    0x7c, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00,
+    0x69, 0x78, 0x70, 0x34, 0x32, 0x78, 0x2e, 0x63,
+    0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x7d, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00,
     0x6c, 0x6d, 0x33, 0x73, 0x33, 0x37, 0x34, 0x38,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x74, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
+    0x7e, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00,
     0x6c, 0x6d, 0x33, 0x73, 0x36, 0x39, 0x36, 0x35,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x75, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00,
+    0x7f, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
     0x6c, 0x6d, 0x33, 0x73, 0x38, 0x31, 0x31, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x76, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00,
+    0x80, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00,
     0x6c, 0x70, 0x63, 0x32, 0x31, 0x32, 0x39, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x77, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00,
+    0x81, 0x00, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00,
     0x6c, 0x70, 0x63, 0x32, 0x31, 0x34, 0x38, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x78, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
+    0x82, 0x00, 0x00, 0x00, 0xe0, 0x02, 0x00, 0x00,
     0x6c, 0x70, 0x63, 0x32, 0x31, 0x34, 0x38, 0x5f,
     0x32, 0x6d, 0x68, 0x7a, 0x2e, 0x63, 0x66, 0x67,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x79, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00,
+    0x83, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
     0x6c, 0x70, 0x63, 0x32, 0x31, 0x34, 0x38, 0x5f,
     0x72, 0x63, 0x6c, 0x6b, 0x2e, 0x63, 0x66, 0x67,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x7a, 0x00, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00,
+    0x84, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00,
     0x6c, 0x70, 0x63, 0x32, 0x32, 0x39, 0x34, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x7b, 0x00, 0x00, 0x00, 0xe0, 0x02, 0x00, 0x00,
+    0x85, 0x00, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00,
     0x6e, 0x65, 0x74, 0x78, 0x35, 0x30, 0x30, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x7c, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
+    0x86, 0x00, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00,
     0x6e, 0x73, 0x6c, 0x75, 0x32, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x7d, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00,
+    0x87, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00,
+    0x6f, 0x6d, 0x61, 0x70, 0x33, 0x35, 0x33, 0x30,
+    0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x88, 0x00, 0x00, 0x00, 0xa0, 0x03, 0x00, 0x00,
     0x6f, 0x6d, 0x61, 0x70, 0x35, 0x39, 0x31, 0x32,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x7e, 0x00, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00,
+    0x89, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00,
     0x70, 0x69, 0x63, 0x33, 0x32, 0x6d, 0x78, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x7f, 0x00, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00,
+    0x8a, 0x00, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00,
     0x70, 0x78, 0x61, 0x32, 0x35, 0x35, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x80, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00,
+    0x8b, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
     0x70, 0x78, 0x61, 0x32, 0x35, 0x35, 0x5f, 0x73,
     0x73, 0x74, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x81, 0x00, 0x00, 0x00, 0xa0, 0x03, 0x00, 0x00,
+    0x8c, 0x00, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00,
     0x70, 0x78, 0x61, 0x32, 0x37, 0x30, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x82, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00,
+    0x8d, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00,
+    0x70, 0x78, 0x69, 0x34, 0x32, 0x78, 0x2e, 0x63,
+    0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x8e, 0x00, 0x00, 0x00, 0x60, 0x04, 0x00, 0x00,
     0x73, 0x61, 0x6d, 0x37, 0x73, 0x65, 0x35, 0x31,
     0x32, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x83, 0x00, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00,
+    0x8f, 0x00, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00,
     0x73, 0x61, 0x6d, 0x37, 0x78, 0x32, 0x35, 0x36,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x84, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
+    0x90, 0x00, 0x00, 0x00, 0xa0, 0x04, 0x00, 0x00,
     0x73, 0x61, 0x6d, 0x73, 0x75, 0x6e, 0x67, 0x5f,
     0x73, 0x33, 0x63, 0x32, 0x34, 0x31, 0x30, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x85, 0x00, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00,
+    0x91, 0x00, 0x00, 0x00, 0xc0, 0x04, 0x00, 0x00,
     0x73, 0x61, 0x6d, 0x73, 0x75, 0x6e, 0x67, 0x5f,
     0x73, 0x33, 0x63, 0x32, 0x34, 0x34, 0x30, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x86, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00,
+    0x92, 0x00, 0x00, 0x00, 0xe0, 0x04, 0x00, 0x00,
     0x73, 0x61, 0x6d, 0x73, 0x75, 0x6e, 0x67, 0x5f,
     0x73, 0x33, 0x63, 0x34, 0x35, 0x31, 0x30, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x87, 0x00, 0x00, 0x00, 0x60, 0x04, 0x00, 0x00,
+    0x93, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
     0x73, 0x61, 0x6d, 0x73, 0x75, 0x6e, 0x67, 0x5f,
     0x73, 0x33, 0x63, 0x36, 0x34, 0x31, 0x30, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x88, 0x00, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00,
+    0x94, 0x00, 0x00, 0x00, 0x20, 0x05, 0x00, 0x00,
     0x73, 0x68, 0x61, 0x72, 0x70, 0x5f, 0x6c, 0x68,
     0x37, 0x39, 0x35, 0x33, 0x32, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x89, 0x00, 0x00, 0x00, 0xa0, 0x04, 0x00, 0x00,
+    0x95, 0x00, 0x00, 0x00, 0x40, 0x05, 0x00, 0x00,
     0x73, 0x6d, 0x64, 0x6b, 0x36, 0x34, 0x31, 0x30,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x8a, 0x00, 0x00, 0x00, 0xc0, 0x04, 0x00, 0x00,
+    0x96, 0x00, 0x00, 0x00, 0x60, 0x05, 0x00, 0x00,
     0x73, 0x6d, 0x70, 0x38, 0x36, 0x33, 0x34, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x8b, 0x00, 0x00, 0x00, 0xe0, 0x04, 0x00, 0x00,
+    0x97, 0x00, 0x00, 0x00, 0x80, 0x05, 0x00, 0x00,
     0x73, 0x74, 0x6d, 0x33, 0x32, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x8c, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
+    0x98, 0x00, 0x00, 0x00, 0xa0, 0x05, 0x00, 0x00,
     0x73, 0x74, 0x6d, 0x33, 0x32, 0x73, 0x74, 0x69,
     0x63, 0x6b, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x8d, 0x00, 0x00, 0x00, 0x20, 0x05, 0x00, 0x00,
+    0x99, 0x00, 0x00, 0x00, 0xc0, 0x05, 0x00, 0x00,
     0x73, 0x74, 0x72, 0x37, 0x31, 0x30, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x8e, 0x00, 0x00, 0x00, 0x40, 0x05, 0x00, 0x00,
+    0x9a, 0x00, 0x00, 0x00, 0xe0, 0x05, 0x00, 0x00,
     0x73, 0x74, 0x72, 0x37, 0x33, 0x30, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x8f, 0x00, 0x00, 0x00, 0x60, 0x05, 0x00, 0x00,
+    0x9b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
     0x73, 0x74, 0x72, 0x37, 0x35, 0x30, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x90, 0x00, 0x00, 0x00, 0x80, 0x05, 0x00, 0x00,
+    0x9c, 0x00, 0x00, 0x00, 0x20, 0x06, 0x00, 0x00,
     0x73, 0x74, 0x72, 0x39, 0x31, 0x30, 0x2d, 0x65,
     0x76, 0x61, 0x6c, 0x2e, 0x63, 0x66, 0x67, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x91, 0x00, 0x00, 0x00, 0xa0, 0x05, 0x00, 0x00,
+    0x9d, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x00,
     0x73, 0x74, 0x72, 0x39, 0x31, 0x32, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x92, 0x00, 0x00, 0x00, 0xc0, 0x05, 0x00, 0x00,
+    0x9e, 0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00,
     0x73, 0x74, 0x72, 0x39, 0x63, 0x6f, 0x6d, 0x73,
     0x74, 0x69, 0x63, 0x6b, 0x2e, 0x63, 0x66, 0x67,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x93, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
+    0x9f, 0x00, 0x00, 0x00, 0xa0, 0x06, 0x00, 0x00,
     0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
     0x65, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x74, 0x61,
     0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e,
@@ -1369,19 +1465,19 @@
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x94, 0x00, 0x00, 0x00, 0x20, 0x06, 0x00, 0x00,
+    0xa0, 0x00, 0x00, 0x00, 0xc0, 0x06, 0x00, 0x00,
     0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e,
     0x74, 0x61, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f,
     0x72, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00,
-    0x95, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x00,
+    0xa1, 0x00, 0x00, 0x00, 0xe0, 0x06, 0x00, 0x00,
     0x77, 0x69, 0x2d, 0x39, 0x63, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x96, 0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00,
+    0xa2, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00,
     0x78, 0x62, 0x61, 0x5f, 0x72, 0x65, 0x76, 0x41,
     0x33, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x97, 0x00, 0x00, 0x00, 0x80, 0x06, 0x00, 0x00,
+    0xa3, 0x00, 0x00, 0x00, 0x20, 0x07, 0x00, 0x00,
     0x7a, 0x79, 0x31, 0x30, 0x30, 0x30, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -1393,27 +1489,27 @@
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x98, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0xa4, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x62, 0x69, 0x74, 0x73, 0x62, 0x79, 0x74, 0x65,
     0x73, 0x2e, 0x74, 0x63, 0x6c, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x99, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
+    0xa5, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
     0x63, 0x68, 0x69, 0x70, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x9a, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
+    0xa6, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
     0x63, 0x70, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x9b, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
+    0xa7, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
     0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x74,
     0x63, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x9c, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
+    0xa8, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
     0x6d, 0x6d, 0x72, 0x5f, 0x68, 0x65, 0x6c, 0x70,
     0x65, 0x72, 0x73, 0x2e, 0x74, 0x63, 0x6c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x9d, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
+    0xa9, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
     0x72, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65,
     0x2e, 0x74, 0x63, 0x6c, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -1425,7 +1521,7 @@
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xb1, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0xbd, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x31, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -1437,11 +1533,11 @@
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xb2, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0xbe, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x68, 0x61,
     0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x62, 0x69,
     0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x99, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
+    0xa5, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
     0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -1449,15 +1545,15 @@
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x9e, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0xaa, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x61, 0x74, 0x6d, 0x65, 0x6c, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x9f, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
+    0xab, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
     0x73, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x9a, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
+    0xa6, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
     0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -1465,111 +1561,111 @@
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xab, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0xb7, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x61, 0x72, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x9e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
+    0xaa, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
     0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x99, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
+    0xa5, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0xac, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x61, 0x74, 0x39, 0x31, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x9f, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
+    0xab, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
     0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x99, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
+    0xa5, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa7, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0xb3, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x73, 0x74, 0x6d, 0x33, 0x32, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa0, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
+    0xac, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
     0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x9e, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
+    0xaa, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa1, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0xad, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x61, 0x69, 0x63, 0x2e, 0x74, 0x63, 0x6c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa2, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
+    0xae, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
     0x61, 0x74, 0x39, 0x31, 0x73, 0x61, 0x6d, 0x37,
     0x78, 0x31, 0x32, 0x38, 0x2e, 0x74, 0x63, 0x6c,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa3, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
+    0xaf, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
     0x61, 0x74, 0x39, 0x31, 0x73, 0x61, 0x6d, 0x37,
     0x78, 0x32, 0x35, 0x36, 0x2e, 0x74, 0x63, 0x6c,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa4, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
+    0xb0, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
     0x70, 0x6d, 0x63, 0x2e, 0x74, 0x63, 0x6c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa5, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
+    0xb1, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
     0x72, 0x74, 0x74, 0x2e, 0x74, 0x63, 0x6c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa6, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
+    0xb2, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
     0x75, 0x73, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x74,
     0x63, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa7, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
+    0xb3, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
     0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x9f, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
+    0xab, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa8, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0xb4, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x73, 0x74, 0x6d, 0x33, 0x32, 0x2e, 0x74, 0x63,
     0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa9, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
+    0xb5, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
     0x73, 0x74, 0x6d, 0x33, 0x32, 0x5f, 0x72, 0x63,
     0x63, 0x2e, 0x74, 0x63, 0x6c, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xaa, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
+    0xb6, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
     0x73, 0x74, 0x6d, 0x33, 0x32, 0x5f, 0x72, 0x65,
     0x67, 0x73, 0x2e, 0x74, 0x63, 0x6c, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xab, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
+    0xb7, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
     0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x9a, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
+    0xa6, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xac, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0xb8, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x61, 0x72, 0x6d, 0x37, 0x74, 0x64, 0x6d, 0x69,
     0x2e, 0x74, 0x63, 0x6c, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xad, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
+    0xb9, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
     0x61, 0x72, 0x6d, 0x39, 0x32, 0x30, 0x2e, 0x74,
     0x63, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xae, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
+    0xba, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
     0x61, 0x72, 0x6d, 0x39, 0x34, 0x36, 0x2e, 0x74,
     0x63, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xaf, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
+    0xbb, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
     0x61, 0x72, 0x6d, 0x39, 0x36, 0x36, 0x2e, 0x74,
     0x63, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xb0, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
+    0xbc, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
     0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x5f, 0x6d,
     0x33, 0x2e, 0x74, 0x63, 0x6c, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -21331,7 +21427,20 @@
     0x69, 0x6f, 0x6e, 0x20, 0x22, 0x55, 0x70, 0x6c,
     0x6f, 0x61, 0x64, 0x22, 0x5d, 0x3d, 0x3d, 0x30,
     0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x69, 0x66, 0x20, 0x7b, 0x5b, 0x63,
+    0x09, 0x09, 0x69, 0x66, 0x20, 0x7b, 0x5b, 0x73,
+    0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x65,
+    0x6e, 0x67, 0x74, 0x68, 0x20, 0x24, 0x66, 0x6f,
+    0x72, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e,
+    0x61, 0x6d, 0x65, 0x5d, 0x3d, 0x3d, 0x30, 0x7d,
+    0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
+    0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20,
+    0x22, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x66,
+    0x69, 0x6c, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65,
+    0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6c, 0x6c,
+    0x6f, 0x77, 0x65, 0x64, 0x22, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x7d, 0x20, 0x65, 0x6c,
+    0x73, 0x65, 0x69, 0x66, 0x20, 0x7b, 0x5b, 0x63,
     0x61, 0x74, 0x63, 0x68, 0x20, 0x7b, 0x77, 0x72,
     0x69, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x20,
     0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x69, 0x6c,
@@ -22200,7 +22309,6 @@
     0x65, 0x72, 0x0d, 0x0a, 0x65, 0x6e, 0x64, 0x5f,
     0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x0d,
     0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
     0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x2e,
     0x74, 0x63, 0x6c, 0x20, 0x62, 0x79, 0x20, 0x68,
@@ -44229,6 +44337,22 @@
     0x30, 0x30, 0x30, 0x63, 0x0d, 0x0a, 0x7d, 0x0d,
     0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x4b, 0x65, 0x69,
+    0x6c, 0x20, 0x4d, 0x43, 0x42, 0x32, 0x31, 0x34,
+    0x30, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x20, 0x62,
+    0x6f, 0x61, 0x72, 0x64, 0x0d, 0x0a, 0x23, 0x0d,
+    0x0a, 0x23, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a,
+    0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x6b, 0x65,
+    0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d,
+    0x63, 0x62, 0x32, 0x31, 0x34, 0x30, 0x2f, 0x70,
+    0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x61,
+    0x73, 0x70, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20,
+    0x5b, 0x66, 0x69, 0x6e, 0x64, 0x20, 0x74, 0x61,
+    0x72, 0x67, 0x65, 0x74, 0x2f, 0x6c, 0x70, 0x63,
+    0x32, 0x31, 0x34, 0x38, 0x2e, 0x63, 0x66, 0x67,
+    0x5d, 0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x20, 0x54, 0x68, 0x65, 0x20, 0x4c, 0x6f,
     0x67, 0x69, 0x63, 0x50, 0x44, 0x20, 0x45, 0x76,
     0x61, 0x6c, 0x20, 0x49, 0x4d, 0x58, 0x32, 0x37,
@@ -44269,6 +44393,22 @@
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x4f, 0x6c, 0x69,
+    0x6d, 0x65, 0x78, 0x20, 0x4c, 0x50, 0x43, 0x2d,
+    0x48, 0x32, 0x31, 0x34, 0x38, 0x20, 0x65, 0x76,
+    0x61, 0x6c, 0x20, 0x62, 0x6f, 0x61, 0x72, 0x64,
+    0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x23, 0x20, 0x68,
+    0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
+    0x77, 0x2e, 0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78,
+    0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x76,
+    0x2f, 0x6c, 0x70, 0x63, 0x2d, 0x68, 0x32, 0x31,
+    0x34, 0x38, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x0d,
+    0x0a, 0x23, 0x0d, 0x0a, 0x0d, 0x0a, 0x73, 0x6f,
+    0x75, 0x72, 0x63, 0x65, 0x20, 0x5b, 0x66, 0x69,
+    0x6e, 0x64, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65,
+    0x74, 0x2f, 0x6c, 0x70, 0x63, 0x32, 0x31, 0x34,
+    0x38, 0x2e, 0x63, 0x66, 0x67, 0x5d, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x20, 0x4f, 0x6c, 0x69, 0x6d, 0x65, 0x78,
     0x20, 0x53, 0x41, 0x4d, 0x37, 0x2d, 0x45, 0x58,
     0x32, 0x35, 0x36, 0x20, 0x68, 0x61, 0x73, 0x20,
@@ -44333,6 +44473,538 @@
     0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x20, 0x4d, 0x61, 0x72, 0x76, 0x65, 0x6c,
+    0x6c, 0x20, 0x53, 0x68, 0x65, 0x65, 0x76, 0x61,
+    0x50, 0x6c, 0x75, 0x67, 0x20, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20,
+    0x5b, 0x66, 0x69, 0x6e, 0x64, 0x20, 0x69, 0x6e,
+    0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
+    0x73, 0x68, 0x65, 0x65, 0x76, 0x61, 0x70, 0x6c,
+    0x75, 0x67, 0x2e, 0x63, 0x66, 0x67, 0x5d, 0x0d,
+    0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20,
+    0x5b, 0x66, 0x69, 0x6e, 0x64, 0x20, 0x74, 0x61,
+    0x72, 0x67, 0x65, 0x74, 0x2f, 0x66, 0x65, 0x72,
+    0x6f, 0x63, 0x65, 0x6f, 0x6e, 0x2e, 0x63, 0x66,
+    0x67, 0x5d, 0x0d, 0x0a, 0x0d, 0x0a, 0x24, 0x5f,
+    0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41,
+    0x4d, 0x45, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
+    0x67, 0x75, 0x72, 0x65, 0x20, 0x5c, 0x0d, 0x0a,
+    0x09, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61,
+    0x72, 0x65, 0x61, 0x2d, 0x70, 0x68, 0x79, 0x73,
+    0x20, 0x30, 0x78, 0x31, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x20, 0x5c, 0x0d, 0x0a, 0x09,
+    0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72,
+    0x65, 0x61, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x20,
+    0x36, 0x35, 0x35, 0x33, 0x36, 0x20, 0x5c, 0x0d,
+    0x0a, 0x09, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d,
+    0x61, 0x72, 0x65, 0x61, 0x2d, 0x62, 0x61, 0x63,
+    0x6b, 0x75, 0x70, 0x20, 0x30, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x61, 0x72, 0x6d, 0x37, 0x5f, 0x39, 0x20,
+    0x64, 0x63, 0x63, 0x5f, 0x64, 0x6f, 0x77, 0x6e,
+    0x6c, 0x6f, 0x61, 0x64, 0x73, 0x20, 0x65, 0x6e,
+    0x61, 0x62, 0x6c, 0x65, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x23, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61,
+    0x73, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x20, 0x74,
+    0x68, 0x65, 0x20, 0x68, 0x61, 0x72, 0x64, 0x77,
+    0x61, 0x72, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61,
+    0x75, 0x6c, 0x74, 0x20, 0x70, 0x65, 0x72, 0x69,
+    0x70, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x20,
+    0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
+    0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20,
+    0x75, 0x2d, 0x42, 0x6f, 0x6f, 0x74, 0x20, 0x6d,
+    0x6f, 0x76, 0x65, 0x73, 0x20, 0x69, 0x74, 0x0d,
+    0x0a, 0x6e, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x65,
+    0x76, 0x69, 0x63, 0x65, 0x20, 0x6f, 0x72, 0x69,
+    0x6f, 0x6e, 0x20, 0x30, 0x20, 0x30, 0x78, 0x64,
+    0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x20,
+    0x73, 0x68, 0x65, 0x65, 0x76, 0x61, 0x70, 0x6c,
+    0x75, 0x67, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x20,
+    0x7b, 0x20, 0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x09, 0x23, 0x20, 0x57, 0x65, 0x20, 0x6e,
+    0x65, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61,
+    0x73, 0x73, 0x65, 0x72, 0x74, 0x20, 0x44, 0x42,
+    0x47, 0x52, 0x51, 0x20, 0x77, 0x68, 0x69, 0x6c,
+    0x65, 0x20, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
+    0x67, 0x20, 0x6e, 0x53, 0x52, 0x53, 0x54, 0x20,
+    0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x0d, 0x0a, 0x09,
+    0x23, 0x20, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65,
+    0x72, 0x20, 0x44, 0x42, 0x47, 0x41, 0x43, 0x4b,
+    0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65,
+    0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x6e, 0x6c,
+    0x79, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x6e,
+    0x53, 0x52, 0x53, 0x54, 0x20, 0x69, 0x73, 0x20,
+    0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
+    0x2e, 0x0d, 0x0a, 0x09, 0x6a, 0x74, 0x61, 0x67,
+    0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x30,
+    0x20, 0x31, 0x0d, 0x0a, 0x09, 0x68, 0x61, 0x6c,
+    0x74, 0x20, 0x30, 0x0d, 0x0a, 0x09, 0x6a, 0x74,
+    0x61, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74,
+    0x20, 0x30, 0x20, 0x30, 0x0d, 0x0a, 0x09, 0x77,
+    0x61, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x6c, 0x74,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x61, 0x72, 0x6d,
+    0x39, 0x32, 0x36, 0x65, 0x6a, 0x73, 0x20, 0x63,
+    0x70, 0x31, 0x35, 0x20, 0x30, 0x20, 0x30, 0x20,
+    0x31, 0x20, 0x30, 0x20, 0x30, 0x78, 0x30, 0x30,
+    0x30, 0x35, 0x32, 0x30, 0x37, 0x38, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30,
+    0x78, 0x44, 0x30, 0x30, 0x30, 0x31, 0x34, 0x30,
+    0x30, 0x20, 0x30, 0x78, 0x34, 0x33, 0x30, 0x30,
+    0x30, 0x43, 0x33, 0x30, 0x20, 0x23, 0x20, 0x20,
+    0x44, 0x44, 0x52, 0x20, 0x53, 0x44, 0x52, 0x41,
+    0x4d, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
+    0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
+    0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
+    0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30,
+    0x78, 0x44, 0x30, 0x30, 0x30, 0x31, 0x34, 0x30,
+    0x34, 0x20, 0x30, 0x78, 0x33, 0x39, 0x35, 0x34,
+    0x33, 0x30, 0x30, 0x30, 0x20, 0x23, 0x20, 0x20,
+    0x44, 0x75, 0x6e, 0x69, 0x74, 0x20, 0x43, 0x6f,
+    0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x20, 0x4c, 0x6f,
+    0x77, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
+    0x65, 0x72, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x20, 0x30, 0x78, 0x44, 0x30, 0x30, 0x30, 0x31,
+    0x34, 0x30, 0x38, 0x20, 0x30, 0x78, 0x32, 0x32,
+    0x31, 0x32, 0x35, 0x34, 0x35, 0x31, 0x20, 0x23,
+    0x20, 0x20, 0x44, 0x44, 0x52, 0x20, 0x53, 0x44,
+    0x52, 0x41, 0x4d, 0x20, 0x54, 0x69, 0x6d, 0x69,
+    0x6e, 0x67, 0x20, 0x28, 0x4c, 0x6f, 0x77, 0x29,
+    0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
+    0x72, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
+    0x30, 0x78, 0x44, 0x30, 0x30, 0x30, 0x31, 0x34,
+    0x30, 0x43, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x38, 0x33, 0x33, 0x20, 0x23, 0x20,
+    0x20, 0x44, 0x44, 0x52, 0x20, 0x53, 0x44, 0x52,
+    0x41, 0x4d, 0x20, 0x54, 0x69, 0x6d, 0x69, 0x6e,
+    0x67, 0x20, 0x28, 0x48, 0x69, 0x67, 0x68, 0x29,
+    0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
+    0x72, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
+    0x30, 0x78, 0x44, 0x30, 0x30, 0x30, 0x31, 0x34,
+    0x31, 0x30, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x43, 0x43, 0x20, 0x23, 0x20,
+    0x20, 0x44, 0x44, 0x52, 0x20, 0x53, 0x44, 0x52,
+    0x41, 0x4d, 0x20, 0x41, 0x64, 0x64, 0x72, 0x65,
+    0x73, 0x73, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72,
+    0x6f, 0x6c, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73,
+    0x74, 0x65, 0x72, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
+    0x77, 0x20, 0x30, 0x78, 0x44, 0x30, 0x30, 0x30,
+    0x31, 0x34, 0x31, 0x34, 0x20, 0x30, 0x78, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20,
+    0x23, 0x20, 0x20, 0x44, 0x44, 0x52, 0x20, 0x53,
+    0x44, 0x52, 0x41, 0x4d, 0x20, 0x4f, 0x70, 0x65,
+    0x6e, 0x20, 0x50, 0x61, 0x67, 0x65, 0x73, 0x20,
+    0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x20,
+    0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
+    0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30,
+    0x78, 0x44, 0x30, 0x30, 0x30, 0x31, 0x34, 0x31,
+    0x38, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x20, 0x23, 0x20, 0x20,
+    0x44, 0x44, 0x52, 0x20, 0x53, 0x44, 0x52, 0x41,
+    0x4d, 0x20, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
+    0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x67, 0x69,
+    0x73, 0x74, 0x65, 0x72, 0x0d, 0x0a, 0x09, 0x6d,
+    0x77, 0x77, 0x20, 0x30, 0x78, 0x44, 0x30, 0x30,
+    0x30, 0x31, 0x34, 0x31, 0x43, 0x20, 0x30, 0x78,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x43, 0x35, 0x32,
+    0x20, 0x23, 0x20, 0x20, 0x44, 0x44, 0x52, 0x20,
+    0x53, 0x44, 0x52, 0x41, 0x4d, 0x20, 0x4d, 0x6f,
+    0x64, 0x65, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73,
+    0x74, 0x65, 0x72, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
+    0x77, 0x20, 0x30, 0x78, 0x44, 0x30, 0x30, 0x30,
+    0x31, 0x34, 0x32, 0x30, 0x20, 0x30, 0x78, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x32, 0x20,
+    0x23, 0x20, 0x20, 0x44, 0x44, 0x52, 0x20, 0x53,
+    0x44, 0x52, 0x41, 0x4d, 0x20, 0x45, 0x78, 0x74,
+    0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x4d, 0x6f,
+    0x64, 0x65, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73,
+    0x74, 0x65, 0x72, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
+    0x77, 0x20, 0x30, 0x78, 0x44, 0x30, 0x30, 0x30,
+    0x31, 0x34, 0x32, 0x34, 0x20, 0x30, 0x78, 0x30,
+    0x30, 0x30, 0x30, 0x46, 0x31, 0x37, 0x46, 0x20,
+    0x23, 0x20, 0x20, 0x44, 0x75, 0x6e, 0x69, 0x74,
+    0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
+    0x20, 0x48, 0x69, 0x67, 0x68, 0x20, 0x52, 0x65,
+    0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x0d, 0x0a,
+    0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x44,
+    0x30, 0x30, 0x30, 0x31, 0x34, 0x32, 0x38, 0x20,
+    0x30, 0x78, 0x30, 0x30, 0x30, 0x38, 0x35, 0x35,
+    0x32, 0x30, 0x20, 0x23, 0x20, 0x20, 0x44, 0x75,
+    0x6e, 0x69, 0x74, 0x20, 0x43, 0x6f, 0x6e, 0x74,
+    0x72, 0x6f, 0x6c, 0x20, 0x48, 0x69, 0x67, 0x68,
+    0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
+    0x72, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
+    0x30, 0x78, 0x44, 0x30, 0x30, 0x30, 0x31, 0x34,
+    0x37, 0x63, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
+    0x30, 0x38, 0x35, 0x35, 0x32, 0x20, 0x23, 0x20,
+    0x20, 0x44, 0x75, 0x6e, 0x69, 0x74, 0x20, 0x43,
+    0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x20, 0x48,
+    0x69, 0x67, 0x68, 0x20, 0x52, 0x65, 0x67, 0x69,
+    0x73, 0x74, 0x65, 0x72, 0x0d, 0x0a, 0x09, 0x6d,
+    0x77, 0x77, 0x20, 0x30, 0x78, 0x44, 0x30, 0x30,
+    0x30, 0x31, 0x35, 0x30, 0x34, 0x20, 0x30, 0x78,
+    0x30, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x31,
+    0x20, 0x23, 0x20, 0x20, 0x43, 0x53, 0x30, 0x6e,
+    0x20, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x52, 0x65,
+    0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x0d, 0x0a,
+    0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x44,
+    0x30, 0x30, 0x30, 0x31, 0x35, 0x30, 0x38, 0x20,
+    0x30, 0x78, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x20, 0x23, 0x20, 0x20, 0x43, 0x53,
+    0x31, 0x6e, 0x20, 0x42, 0x61, 0x73, 0x65, 0x20,
+    0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
+    0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30,
+    0x78, 0x44, 0x30, 0x30, 0x30, 0x31, 0x35, 0x30,
+    0x43, 0x20, 0x30, 0x78, 0x30, 0x46, 0x46, 0x46,
+    0x46, 0x46, 0x46, 0x35, 0x20, 0x23, 0x20, 0x20,
+    0x43, 0x53, 0x31, 0x6e, 0x20, 0x53, 0x69, 0x7a,
+    0x65, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
+    0x65, 0x72, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x20, 0x30, 0x78, 0x44, 0x30, 0x30, 0x30, 0x31,
+    0x35, 0x31, 0x34, 0x20, 0x30, 0x78, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x23,
+    0x20, 0x20, 0x43, 0x53, 0x32, 0x6e, 0x20, 0x53,
+    0x69, 0x7a, 0x65, 0x20, 0x52, 0x65, 0x67, 0x69,
+    0x73, 0x74, 0x65, 0x72, 0x0d, 0x0a, 0x09, 0x6d,
+    0x77, 0x77, 0x20, 0x30, 0x78, 0x44, 0x30, 0x30,
+    0x30, 0x31, 0x35, 0x31, 0x43, 0x20, 0x30, 0x78,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x20, 0x23, 0x20, 0x20, 0x43, 0x53, 0x33, 0x6e,
+    0x20, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x52, 0x65,
+    0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x0d, 0x0a,
+    0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x44,
+    0x30, 0x30, 0x30, 0x31, 0x34, 0x39, 0x34, 0x20,
+    0x30, 0x78, 0x30, 0x30, 0x33, 0x43, 0x30, 0x30,
+    0x30, 0x30, 0x20, 0x23, 0x20, 0x20, 0x44, 0x44,
+    0x52, 0x32, 0x20, 0x53, 0x44, 0x52, 0x41, 0x4d,
+    0x20, 0x4f, 0x44, 0x54, 0x20, 0x43, 0x6f, 0x6e,
+    0x74, 0x72, 0x6f, 0x6c, 0x20, 0x28, 0x4c, 0x6f,
+    0x77, 0x29, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73,
+    0x74, 0x65, 0x72, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
+    0x77, 0x20, 0x30, 0x78, 0x44, 0x30, 0x30, 0x30,
+    0x31, 0x34, 0x39, 0x38, 0x20, 0x30, 0x78, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20,
+    0x23, 0x20, 0x20, 0x44, 0x44, 0x52, 0x32, 0x20,
+    0x53, 0x44, 0x52, 0x41, 0x4d, 0x20, 0x4f, 0x44,
+    0x54, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
+    0x6c, 0x20, 0x28, 0x48, 0x69, 0x67, 0x68, 0x29,
+    0x20, 0x52, 0x45, 0x67, 0x69, 0x73, 0x74, 0x65,
+    0x72, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
+    0x30, 0x78, 0x44, 0x30, 0x30, 0x30, 0x31, 0x34,
+    0x39, 0x43, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
+    0x30, 0x46, 0x38, 0x30, 0x46, 0x20, 0x23, 0x20,
+    0x20, 0x44, 0x44, 0x52, 0x32, 0x20, 0x44, 0x75,
+    0x6e, 0x69, 0x74, 0x20, 0x4f, 0x44, 0x54, 0x20,
+    0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x20,
+    0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
+    0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30,
+    0x78, 0x44, 0x30, 0x30, 0x30, 0x31, 0x34, 0x38,
+    0x30, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x31, 0x20, 0x23, 0x20, 0x20,
+    0x44, 0x44, 0x52, 0x20, 0x53, 0x44, 0x52, 0x41,
+    0x4d, 0x20, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
+    0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
+    0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
+    0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
+    0x72, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
+    0x30, 0x78, 0x44, 0x30, 0x30, 0x32, 0x30, 0x32,
+    0x30, 0x34, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x23, 0x20,
+    0x20, 0x4d, 0x61, 0x69, 0x6e, 0x20, 0x49, 0x52,
+    0x51, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72,
+    0x75, 0x70, 0x74, 0x20, 0x4d, 0x61, 0x73, 0x6b,
+    0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
+    0x72, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
+    0x30, 0x78, 0x44, 0x30, 0x30, 0x32, 0x30, 0x32,
+    0x30, 0x34, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x23, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x0d, 0x0a,
+    0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x44,
+    0x30, 0x30, 0x32, 0x30, 0x32, 0x30, 0x34, 0x20,
+    0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x20, 0x23, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x22, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
+    0x77, 0x20, 0x30, 0x78, 0x44, 0x30, 0x30, 0x32,
+    0x30, 0x32, 0x30, 0x34, 0x20, 0x30, 0x78, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20,
+    0x23, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22,
+    0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30,
+    0x78, 0x44, 0x30, 0x30, 0x32, 0x30, 0x32, 0x30,
+    0x34, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x20, 0x23, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x22, 0x0d, 0x0a, 0x09,
+    0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x44, 0x30,
+    0x30, 0x32, 0x30, 0x32, 0x30, 0x34, 0x20, 0x30,
+    0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x20, 0x23, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x22, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x20, 0x30, 0x78, 0x44, 0x30, 0x30, 0x32, 0x30,
+    0x32, 0x30, 0x34, 0x20, 0x30, 0x78, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x23,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x0d,
+    0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78,
+    0x44, 0x30, 0x30, 0x32, 0x30, 0x32, 0x30, 0x34,
+    0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x20, 0x23, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x22, 0x0d, 0x0a, 0x09, 0x6d,
+    0x77, 0x77, 0x20, 0x30, 0x78, 0x44, 0x30, 0x30,
+    0x32, 0x30, 0x32, 0x30, 0x34, 0x20, 0x30, 0x78,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x20, 0x23, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x22, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
+    0x30, 0x78, 0x44, 0x30, 0x30, 0x32, 0x30, 0x32,
+    0x30, 0x34, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x23, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x0d, 0x0a,
+    0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x44,
+    0x30, 0x30, 0x32, 0x30, 0x32, 0x30, 0x34, 0x20,
+    0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x20, 0x23, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x22, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
+    0x77, 0x20, 0x30, 0x78, 0x44, 0x30, 0x30, 0x32,
+    0x30, 0x32, 0x30, 0x34, 0x20, 0x30, 0x78, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20,
+    0x23, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22,
+    0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30,
+    0x78, 0x44, 0x30, 0x30, 0x32, 0x30, 0x32, 0x30,
+    0x34, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x20, 0x23, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x22, 0x0d, 0x0a, 0x09,
+    0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x44, 0x30,
+    0x30, 0x32, 0x30, 0x32, 0x30, 0x34, 0x20, 0x30,
+    0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x20, 0x23, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x22, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x20, 0x30, 0x78, 0x44, 0x30, 0x30, 0x32, 0x30,
+    0x32, 0x30, 0x34, 0x20, 0x30, 0x78, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x23,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x0d,
+    0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78,
+    0x44, 0x30, 0x30, 0x32, 0x30, 0x32, 0x30, 0x34,
+    0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x20, 0x23, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x22, 0x0d, 0x0a, 0x09, 0x6d,
+    0x77, 0x77, 0x20, 0x30, 0x78, 0x44, 0x30, 0x30,
+    0x32, 0x30, 0x32, 0x30, 0x34, 0x20, 0x30, 0x78,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x20, 0x23, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x22, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
+    0x30, 0x78, 0x44, 0x30, 0x30, 0x32, 0x30, 0x32,
+    0x30, 0x34, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x23, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x0d, 0x0a,
+    0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x44,
+    0x30, 0x30, 0x32, 0x30, 0x32, 0x30, 0x34, 0x20,
+    0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x20, 0x23, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x22, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
+    0x77, 0x20, 0x30, 0x78, 0x44, 0x30, 0x30, 0x32,
+    0x30, 0x32, 0x30, 0x34, 0x20, 0x30, 0x78, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20,
+    0x23, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22,
+    0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30,
+    0x78, 0x44, 0x30, 0x30, 0x32, 0x30, 0x32, 0x30,
+    0x34, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x20, 0x23, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x22, 0x0d, 0x0a, 0x09,
+    0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x44, 0x30,
+    0x30, 0x32, 0x30, 0x32, 0x30, 0x34, 0x20, 0x30,
+    0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x20, 0x23, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x22, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x20, 0x30, 0x78, 0x44, 0x30, 0x30, 0x32, 0x30,
+    0x32, 0x30, 0x34, 0x20, 0x30, 0x78, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x23,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x0d,
+    0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78,
+    0x44, 0x30, 0x30, 0x32, 0x30, 0x32, 0x30, 0x34,
+    0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x20, 0x23, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x22, 0x0d, 0x0a, 0x09, 0x6d,
+    0x77, 0x77, 0x20, 0x30, 0x78, 0x44, 0x30, 0x30,
+    0x32, 0x30, 0x32, 0x30, 0x34, 0x20, 0x30, 0x78,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x20, 0x23, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x22, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
+    0x30, 0x78, 0x44, 0x30, 0x30, 0x32, 0x30, 0x32,
+    0x30, 0x34, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x23, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x0d, 0x0a,
+    0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x44,
+    0x30, 0x30, 0x32, 0x30, 0x32, 0x30, 0x34, 0x20,
+    0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x20, 0x23, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x22, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
+    0x77, 0x20, 0x30, 0x78, 0x44, 0x30, 0x30, 0x32,
+    0x30, 0x32, 0x30, 0x34, 0x20, 0x30, 0x78, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20,
+    0x23, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22,
+    0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30,
+    0x78, 0x44, 0x30, 0x30, 0x32, 0x30, 0x32, 0x30,
+    0x34, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x20, 0x23, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x22, 0x0d, 0x0a, 0x09,
+    0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x44, 0x30,
+    0x30, 0x32, 0x30, 0x32, 0x30, 0x34, 0x20, 0x30,
+    0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x20, 0x23, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x22, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x20, 0x30, 0x78, 0x44, 0x30, 0x30, 0x32, 0x30,
+    0x32, 0x30, 0x34, 0x20, 0x30, 0x78, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x23,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x0d,
+    0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78,
+    0x44, 0x30, 0x30, 0x32, 0x30, 0x32, 0x30, 0x34,
+    0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x20, 0x23, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x22, 0x0d, 0x0a, 0x09, 0x6d,
+    0x77, 0x77, 0x20, 0x30, 0x78, 0x44, 0x30, 0x30,
+    0x32, 0x30, 0x32, 0x30, 0x34, 0x20, 0x30, 0x78,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x20, 0x23, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x22, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
+    0x30, 0x78, 0x44, 0x30, 0x30, 0x32, 0x30, 0x32,
+    0x30, 0x34, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x23, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x0d, 0x0a,
+    0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x44,
+    0x30, 0x30, 0x32, 0x30, 0x32, 0x30, 0x34, 0x20,
+    0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x20, 0x23, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x22, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
+    0x77, 0x20, 0x30, 0x78, 0x44, 0x30, 0x30, 0x32,
+    0x30, 0x32, 0x30, 0x34, 0x20, 0x30, 0x78, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20,
+    0x23, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22,
+    0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30,
+    0x78, 0x44, 0x30, 0x30, 0x32, 0x30, 0x32, 0x30,
+    0x34, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x20, 0x23, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x22, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78,
+    0x44, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30,
+    0x20, 0x30, 0x78, 0x30, 0x31, 0x31, 0x31, 0x31,
+    0x31, 0x31, 0x31, 0x20, 0x23, 0x20, 0x20, 0x4d,
+    0x50, 0x50, 0x20, 0x20, 0x30, 0x20, 0x74, 0x6f,
+    0x20, 0x37, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x20, 0x30, 0x78, 0x44, 0x30, 0x30, 0x31, 0x30,
+    0x30, 0x30, 0x34, 0x20, 0x30, 0x78, 0x31, 0x31,
+    0x31, 0x31, 0x33, 0x33, 0x32, 0x32, 0x20, 0x23,
+    0x20, 0x20, 0x4d, 0x50, 0x50, 0x20, 0x20, 0x38,
+    0x20, 0x74, 0x6f, 0x20, 0x31, 0x35, 0x0d, 0x0a,
+    0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x44,
+    0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x38, 0x20,
+    0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31,
+    0x31, 0x31, 0x20, 0x23, 0x20, 0x20, 0x4d, 0x50,
+    0x50, 0x20, 0x31, 0x36, 0x20, 0x74, 0x6f, 0x20,
+    0x32, 0x33, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x6d,
+    0x77, 0x77, 0x20, 0x30, 0x78, 0x44, 0x30, 0x30,
+    0x31, 0x30, 0x34, 0x31, 0x38, 0x20, 0x30, 0x78,
+    0x30, 0x30, 0x33, 0x45, 0x30, 0x37, 0x43, 0x46,
+    0x20, 0x23, 0x20, 0x20, 0x4e, 0x41, 0x4e, 0x44,
+    0x20, 0x52, 0x65, 0x61, 0x64, 0x20, 0x50, 0x61,
+    0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
+    0x20, 0x52, 0x45, 0x67, 0x69, 0x73, 0x74, 0x65,
+    0x72, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
+    0x30, 0x78, 0x44, 0x30, 0x30, 0x31, 0x30, 0x34,
+    0x31, 0x43, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
+    0x46, 0x30, 0x46, 0x30, 0x46, 0x20, 0x23, 0x20,
+    0x20, 0x4e, 0x41, 0x4e, 0x44, 0x20, 0x57, 0x72,
+    0x69, 0x74, 0x65, 0x20, 0x50, 0x61, 0x72, 0x61,
+    0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x20, 0x52,
+    0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x0d,
+    0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78,
+    0x44, 0x30, 0x30, 0x31, 0x30, 0x34, 0x37, 0x30,
+    0x20, 0x30, 0x78, 0x30, 0x31, 0x43, 0x37, 0x44,
+    0x39, 0x34, 0x33, 0x20, 0x23, 0x20, 0x20, 0x4e,
+    0x41, 0x4e, 0x44, 0x20, 0x46, 0x6c, 0x61, 0x73,
+    0x68, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
+    0x6c, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
+    0x65, 0x72, 0x0d, 0x0a, 0x0d, 0x0a, 0x7d, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x20,
+    0x73, 0x68, 0x65, 0x65, 0x76, 0x61, 0x70, 0x6c,
+    0x75, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x61,
+    0x73, 0x68, 0x5f, 0x75, 0x62, 0x6f, 0x6f, 0x74,
+    0x20, 0x7b, 0x20, 0x7d, 0x20, 0x7b, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x09, 0x23, 0x20, 0x72, 0x65, 0x66,
+    0x6c, 0x61, 0x73, 0x68, 0x20, 0x74, 0x68, 0x65,
+    0x20, 0x75, 0x2d, 0x42, 0x6f, 0x6f, 0x74, 0x20,
+    0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x20, 0x61,
+    0x6e, 0x64, 0x20, 0x72, 0x65, 0x62, 0x6f, 0x6f,
+    0x74, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x69,
+    0x74, 0x0d, 0x0a, 0x09, 0x73, 0x68, 0x65, 0x65,
+    0x76, 0x61, 0x70, 0x6c, 0x75, 0x67, 0x5f, 0x69,
+    0x6e, 0x69, 0x74, 0x0d, 0x0a, 0x09, 0x6e, 0x61,
+    0x6e, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x62, 0x65,
+    0x20, 0x30, 0x0d, 0x0a, 0x09, 0x6e, 0x61, 0x6e,
+    0x64, 0x20, 0x65, 0x72, 0x61, 0x73, 0x65, 0x20,
+    0x30, 0x20, 0x30, 0x20, 0x34, 0x0d, 0x0a, 0x09,
+    0x6e, 0x61, 0x6e, 0x64, 0x20, 0x77, 0x72, 0x69,
+    0x74, 0x65, 0x20, 0x30, 0x20, 0x75, 0x62, 0x6f,
+    0x6f, 0x74, 0x2e, 0x62, 0x69, 0x6e, 0x20, 0x30,
+    0x0d, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74,
+    0x20, 0x72, 0x75, 0x6e, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x70, 0x72, 0x6f,
+    0x63, 0x20, 0x73, 0x68, 0x65, 0x65, 0x76, 0x61,
+    0x70, 0x6c, 0x75, 0x67, 0x5f, 0x6c, 0x6f, 0x61,
+    0x64, 0x5f, 0x75, 0x62, 0x6f, 0x6f, 0x74, 0x20,
+    0x7b, 0x20, 0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x09, 0x23, 0x20, 0x6c, 0x6f, 0x61, 0x64,
+    0x20, 0x75, 0x2d, 0x42, 0x6f, 0x6f, 0x74, 0x20,
+    0x69, 0x6e, 0x74, 0x6f, 0x20, 0x52, 0x41, 0x4d,
+    0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x78, 0x65,
+    0x63, 0x75, 0x74, 0x65, 0x20, 0x69, 0x74, 0x0d,
+    0x0a, 0x09, 0x73, 0x68, 0x65, 0x65, 0x76, 0x61,
+    0x70, 0x6c, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x69,
+    0x74, 0x0d, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x64,
+    0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x2f,
+    0x74, 0x6d, 0x70, 0x2f, 0x75, 0x62, 0x6f, 0x6f,
+    0x74, 0x2e, 0x65, 0x6c, 0x66, 0x0d, 0x0a, 0x09,
+    0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x69,
+    0x6d, 0x61, 0x67, 0x65, 0x20, 0x75, 0x62, 0x6f,
+    0x6f, 0x74, 0x2e, 0x65, 0x6c, 0x66, 0x0d, 0x0a,
+    0x09, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x20,
+    0x30, 0x78, 0x30, 0x30, 0x36, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x7d, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69,
     0x73, 0x20, 0x61, 0x6e, 0x20, 0x53, 0x54, 0x4d,
     0x33, 0x32, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x20,
@@ -44355,7 +45027,7 @@
     0x62, 0x6f, 0x61, 0x72, 0x64, 0x20, 0x77, 0x69,
     0x74, 0x68, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e,
     0x67, 0x6c, 0x65, 0x20, 0x53, 0x54, 0x4d, 0x33,
-    0x32, 0x46, 0x31, 0x30, 0x33, 0x5a, 0x45, 0x54,
+    0x32, 0x46, 0x31, 0x30, 0x33, 0x56, 0x42, 0x54,
     0x36, 0x20, 0x63, 0x68, 0x69, 0x70, 0x20, 0x6f,
     0x6e, 0x20, 0x69, 0x74, 0x2e, 0x0d, 0x0a, 0x0d,
     0x0a, 0x23, 0x20, 0x4d, 0x79, 0x20, 0x74, 0x65,
@@ -44373,6 +45045,26 @@
     0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x0d, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
+    0x20, 0x5b, 0x66, 0x69, 0x6e, 0x64, 0x20, 0x74,
+    0x61, 0x72, 0x67, 0x65, 0x74, 0x2f, 0x6f, 0x6d,
+    0x61, 0x70, 0x33, 0x35, 0x33, 0x30, 0x2e, 0x63,
+    0x66, 0x67, 0x5d, 0x0d, 0x0a, 0x0d, 0x0a, 0x72,
+    0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
+    0x66, 0x69, 0x67, 0x20, 0x74, 0x72, 0x73, 0x74,
+    0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x72, 0x73,
+    0x74, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x5f,
+    0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x31, 0x20,
+    0x31, 0x0d, 0x0a, 0x73, 0x6c, 0x65, 0x65, 0x70,
+    0x20, 0x31, 0x30, 0x0d, 0x0a, 0x72, 0x75, 0x6e,
+    0x74, 0x65, 0x73, 0x74, 0x20, 0x31, 0x30, 0x0d,
+    0x0a, 0x6a, 0x74, 0x61, 0x67, 0x5f, 0x72, 0x65,
+    0x73, 0x65, 0x74, 0x20, 0x30, 0x20, 0x30, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x65, 0x6e, 0x64, 0x73, 0x74,
+    0x61, 0x74, 0x65, 0x20, 0x49, 0x44, 0x4c, 0x45,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x20, 0x54, 0x68, 0x61, 0x6e, 0x6b, 0x73,
     0x20, 0x74, 0x6f, 0x20, 0x50, 0x69, 0x65, 0x74,
     0x65, 0x72, 0x20, 0x43, 0x6f, 0x6e, 0x72, 0x61,
@@ -49481,6 +50173,14 @@
     0xe0, 0x8d, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
+    0x61, 0x63, 0x65, 0x20, 0x41, 0x52, 0x4d, 0x2d,
+    0x4a, 0x54, 0x41, 0x47, 0x2d, 0x45, 0x57, 0x0d,
+    0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
+    0x63, 0x65, 0x20, 0x61, 0x72, 0x6d, 0x2d, 0x6a,
+    0x74, 0x61, 0x67, 0x2d, 0x65, 0x77, 0x0d, 0x0a,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
     0x63, 0x65, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65,
     0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x66, 0x74,
@@ -49709,14 +50409,14 @@
     0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
     0x20, 0x22, 0x41, 0x6d, 0x6f, 0x6e, 0x74, 0x65,
     0x63, 0x20, 0x4a, 0x54, 0x41, 0x47, 0x6b, 0x65,
-    0x79, 0x20, 0x41, 0x22, 0x0d, 0x0a, 0x66, 0x74,
-    0x32, 0x32, 0x33, 0x32, 0x5f, 0x6c, 0x61, 0x79,
-    0x6f, 0x75, 0x74, 0x20, 0x6a, 0x74, 0x61, 0x67,
-    0x6b, 0x65, 0x79, 0x0d, 0x0a, 0x66, 0x74, 0x32,
-    0x32, 0x33, 0x32, 0x5f, 0x76, 0x69, 0x64, 0x5f,
-    0x70, 0x69, 0x64, 0x20, 0x30, 0x78, 0x30, 0x34,
-    0x30, 0x33, 0x20, 0x30, 0x78, 0x63, 0x66, 0x66,
-    0x38, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x79, 0x22, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32,
+    0x33, 0x32, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75,
+    0x74, 0x20, 0x6a, 0x74, 0x61, 0x67, 0x6b, 0x65,
+    0x79, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33,
+    0x32, 0x5f, 0x76, 0x69, 0x64, 0x5f, 0x70, 0x69,
+    0x64, 0x20, 0x30, 0x78, 0x30, 0x34, 0x30, 0x33,
+    0x20, 0x30, 0x78, 0x63, 0x66, 0x66, 0x38, 0x0d,
+    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
     0x63, 0x65, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65,
     0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x66, 0x74,
@@ -49828,7 +50528,11 @@
     0x32, 0x32, 0x33, 0x32, 0x5f, 0x6c, 0x61, 0x79,
     0x6f, 0x75, 0x74, 0x20, 0x6f, 0x6c, 0x69, 0x6d,
     0x65, 0x78, 0x2d, 0x6a, 0x74, 0x61, 0x67, 0x0d,
-    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x0a, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32, 0x5f,
+    0x76, 0x69, 0x64, 0x5f, 0x70, 0x69, 0x64, 0x20,
+    0x30, 0x78, 0x31, 0x35, 0x62, 0x61, 0x20, 0x30,
+    0x78, 0x30, 0x30, 0x30, 0x34, 0x0d, 0x0a, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x23, 0x0d, 0x0a, 0x23, 0x20, 0x4f, 0x6c,
     0x69, 0x6d, 0x65, 0x78, 0x20, 0x4a, 0x54, 0x41,
     0x47, 0x20, 0x54, 0x49, 0x4e, 0x59, 0x20, 0x55,
@@ -49905,38 +50609,30 @@
     0x31, 0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x5f, 0x70,
-    0x6f, 0x72, 0x74, 0x20, 0x34, 0x34, 0x34, 0x34,
-    0x0d, 0x0a, 0x67, 0x64, 0x62, 0x5f, 0x70, 0x6f,
-    0x72, 0x74, 0x20, 0x32, 0x30, 0x30, 0x31, 0x0d,
-    0x0a, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
-    0x66, 0x61, 0x63, 0x65, 0x20, 0x70, 0x61, 0x72,
-    0x70, 0x6f, 0x72, 0x74, 0x0d, 0x0a, 0x70, 0x61,
-    0x72, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f,
-    0x72, 0x74, 0x20, 0x30, 0x78, 0x63, 0x38, 0x62,
-    0x38, 0x0d, 0x0a, 0x70, 0x61, 0x72, 0x70, 0x6f,
-    0x72, 0x74, 0x5f, 0x63, 0x61, 0x62, 0x6c, 0x65,
-    0x20, 0x77, 0x69, 0x67, 0x67, 0x6c, 0x65, 0x72,
-    0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x5f, 0x73,
-    0x70, 0x65, 0x65, 0x64, 0x20, 0x30, 0x0d, 0x0a,
-    0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
+    0x65, 0x20, 0x70, 0x61, 0x72, 0x70, 0x6f, 0x72,
+    0x74, 0x0d, 0x0a, 0x70, 0x61, 0x72, 0x70, 0x6f,
+    0x72, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x20,
+    0x30, 0x78, 0x63, 0x38, 0x62, 0x38, 0x0d, 0x0a,
+    0x70, 0x61, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x5f,
+    0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x69,
+    0x67, 0x67, 0x6c, 0x65, 0x72, 0x0d, 0x0a, 0x6a,
+    0x74, 0x61, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x65,
+    0x64, 0x20, 0x30, 0x0d, 0x0a, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x5f, 0x70,
-    0x6f, 0x72, 0x74, 0x20, 0x34, 0x34, 0x34, 0x34,
-    0x0d, 0x0a, 0x67, 0x64, 0x62, 0x5f, 0x70, 0x6f,
-    0x72, 0x74, 0x20, 0x32, 0x30, 0x30, 0x31, 0x0d,
-    0x0a, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
-    0x66, 0x61, 0x63, 0x65, 0x20, 0x70, 0x61, 0x72,
-    0x70, 0x6f, 0x72, 0x74, 0x0d, 0x0a, 0x70, 0x61,
-    0x72, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f,
-    0x72, 0x74, 0x20, 0x2f, 0x64, 0x65, 0x76, 0x2f,
-    0x70, 0x61, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x30,
-    0x0d, 0x0a, 0x70, 0x61, 0x72, 0x70, 0x6f, 0x72,
-    0x74, 0x5f, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20,
-    0x64, 0x6c, 0x63, 0x35, 0x0d, 0x0a, 0x6a, 0x74,
-    0x61, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
-    0x20, 0x30, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
+    0x65, 0x20, 0x70, 0x61, 0x72, 0x70, 0x6f, 0x72,
+    0x74, 0x0d, 0x0a, 0x70, 0x61, 0x72, 0x70, 0x6f,
+    0x72, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x20,
+    0x2f, 0x64, 0x65, 0x76, 0x2f, 0x70, 0x61, 0x72,
+    0x70, 0x6f, 0x72, 0x74, 0x30, 0x0d, 0x0a, 0x70,
+    0x61, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63,
+    0x61, 0x62, 0x6c, 0x65, 0x20, 0x64, 0x6c, 0x63,
+    0x35, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x5f,
+    0x73, 0x70, 0x65, 0x65, 0x64, 0x20, 0x30, 0x0d,
+    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x20, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x20,
     0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
     0x65, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
@@ -49945,6 +50641,18 @@
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
+    0x65, 0x20, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32,
+    0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32,
+    0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x20,
+    0x73, 0x68, 0x65, 0x65, 0x76, 0x61, 0x70, 0x6c,
+    0x75, 0x67, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32,
+    0x33, 0x32, 0x5f, 0x76, 0x69, 0x64, 0x5f, 0x70,
+    0x69, 0x64, 0x20, 0x30, 0x78, 0x30, 0x34, 0x30,
+    0x33, 0x20, 0x30, 0x78, 0x36, 0x30, 0x31, 0x30,
+    0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x5f, 0x6b,
+    0x68, 0x7a, 0x20, 0x33, 0x30, 0x30, 0x30, 0x0d,
+    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
     0x63, 0x65, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65,
     0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x66, 0x74,
@@ -49974,7 +50682,11 @@
     0x22, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33,
     0x32, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
     0x20, 0x73, 0x74, 0x6d, 0x33, 0x32, 0x73, 0x74,
-    0x69, 0x63, 0x6b, 0x0d, 0x0a, 0x0d, 0x0a, 0x00,
+    0x69, 0x63, 0x6b, 0x0d, 0x0a, 0x66, 0x74, 0x32,
+    0x32, 0x33, 0x32, 0x5f, 0x76, 0x69, 0x64, 0x5f,
+    0x70, 0x69, 0x64, 0x20, 0x30, 0x78, 0x30, 0x36,
+    0x34, 0x30, 0x20, 0x30, 0x78, 0x30, 0x30, 0x32,
+    0x64, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
@@ -49987,6 +50699,10 @@
     0x66, 0x74, 0x32, 0x32, 0x33, 0x32, 0x5f, 0x6c,
     0x61, 0x79, 0x6f, 0x75, 0x74, 0x20, 0x63, 0x6f,
     0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x0d, 0x0a,
+    0x66, 0x74, 0x32, 0x32, 0x33, 0x32, 0x5f, 0x76,
+    0x69, 0x64, 0x5f, 0x70, 0x69, 0x64, 0x20, 0x30,
+    0x78, 0x30, 0x36, 0x34, 0x30, 0x20, 0x30, 0x78,
+    0x30, 0x30, 0x32, 0x63, 0x0d, 0x0a, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
@@ -50009,6 +50725,18 @@
     0x64, 0x63, 0x38, 0x0d, 0x0a, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x55, 0x53, 0x42,
+    0x70, 0x72, 0x6f, 0x67, 0x0d, 0x0a, 0x23, 0x0d,
+    0x0a, 0x23, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a,
+    0x2f, 0x2f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64,
+    0x65, 0x64, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
+    0x63, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x2f,
+    0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x68,
+    0x70, 0x3f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69,
+    0x64, 0x3d, 0x31, 0x33, 0x35, 0x0d, 0x0a, 0x23,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65,
+    0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x75, 0x73,
+    0x62, 0x70, 0x72, 0x6f, 0x67, 0x0d, 0x0a, 0x00,
     0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a,
     0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
     0x00, 0x00, 0x02, 0x17, 0x00, 0x00, 0x00, 0x1e,
@@ -53005,6 +53733,98 @@
     0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x30, 0x78,
     0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20,
     0x32, 0x20, 0x32, 0x20, 0x30, 0x0d, 0x0a, 0x00,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x0d, 0x0a,
+    0x23, 0x20, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
+    0x3a, 0x20, 0x20, 0x20, 0x20, 0x4d, 0x61, 0x72,
+    0x76, 0x65, 0x6c, 0x6c, 0x20, 0x46, 0x65, 0x72,
+    0x6f, 0x63, 0x65, 0x6f, 0x6e, 0x20, 0x43, 0x50,
+    0x55, 0x20, 0x63, 0x6f, 0x72, 0x65, 0x0d, 0x0a,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b,
+    0x69, 0x6e, 0x66, 0x6f, 0x20, 0x65, 0x78, 0x69,
+    0x73, 0x74, 0x73, 0x20, 0x43, 0x48, 0x49, 0x50,
+    0x4e, 0x41, 0x4d, 0x45, 0x5d, 0x20, 0x7d, 0x20,
+    0x7b, 0x09, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73,
+    0x65, 0x74, 0x20, 0x20, 0x5f, 0x43, 0x48, 0x49,
+    0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x24, 0x43,
+    0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20,
+    0x20, 0x20, 0x20, 0x0d, 0x0a, 0x7d, 0x20, 0x65,
+    0x6c, 0x73, 0x65, 0x20, 0x7b, 0x09, 0x20, 0x0d,
+    0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20,
+    0x20, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
+    0x4d, 0x45, 0x20, 0x66, 0x65, 0x72, 0x6f, 0x63,
+    0x65, 0x6f, 0x6e, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b,
+    0x69, 0x6e, 0x66, 0x6f, 0x20, 0x65, 0x78, 0x69,
+    0x73, 0x74, 0x73, 0x20, 0x45, 0x4e, 0x44, 0x49,
+    0x41, 0x4e, 0x5d, 0x20, 0x7d, 0x20, 0x7b, 0x09,
+    0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74,
+    0x20, 0x20, 0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41,
+    0x4e, 0x20, 0x24, 0x45, 0x4e, 0x44, 0x49, 0x41,
+    0x4e, 0x20, 0x20, 0x20, 0x20, 0x0d, 0x0a, 0x7d,
+    0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x09,
+    0x20, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65,
+    0x74, 0x20, 0x20, 0x5f, 0x45, 0x4e, 0x44, 0x49,
+    0x41, 0x4e, 0x20, 0x6c, 0x69, 0x74, 0x74, 0x6c,
+    0x65, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b, 0x69, 0x6e,
+    0x66, 0x6f, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74,
+    0x73, 0x20, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50,
+    0x49, 0x44, 0x20, 0x5d, 0x20, 0x7d, 0x20, 0x7b,
+    0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74,
+    0x20, 0x5f, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50,
+    0x49, 0x44, 0x20, 0x24, 0x43, 0x50, 0x55, 0x54,
+    0x41, 0x50, 0x49, 0x44, 0x0d, 0x0a, 0x7d, 0x20,
+    0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0d, 0x0a,
+    0x20, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x5f,
+    0x43, 0x50, 0x55, 0x54, 0x41, 0x50, 0x49, 0x44,
+    0x20, 0x30, 0x78, 0x32, 0x30, 0x61, 0x30, 0x32,
+    0x33, 0x64, 0x33, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x20, 0x6e,
+    0x65, 0x77, 0x74, 0x61, 0x70, 0x20, 0x24, 0x5f,
+    0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45,
+    0x20, 0x63, 0x70, 0x75, 0x20, 0x2d, 0x69, 0x72,
+    0x6c, 0x65, 0x6e, 0x20, 0x34, 0x20, 0x2d, 0x69,
+    0x72, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
+    0x20, 0x30, 0x78, 0x31, 0x20, 0x2d, 0x69, 0x72,
+    0x6d, 0x61, 0x73, 0x6b, 0x20, 0x30, 0x78, 0x66,
+    0x20, 0x2d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
+    0x65, 0x64, 0x2d, 0x69, 0x64, 0x20, 0x24, 0x5f,
+    0x43, 0x50, 0x55, 0x54, 0x41, 0x50, 0x49, 0x44,
+    0x0d, 0x0a, 0x73, 0x65, 0x74, 0x20, 0x5f, 0x54,
+    0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d,
+    0x45, 0x20, 0x5b, 0x66, 0x6f, 0x72, 0x6d, 0x61,
+    0x74, 0x20, 0x22, 0x25, 0x73, 0x2e, 0x63, 0x70,
+    0x75, 0x22, 0x20, 0x24, 0x5f, 0x43, 0x48, 0x49,
+    0x50, 0x4e, 0x41, 0x4d, 0x45, 0x5d, 0x0d, 0x0a,
+    0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x63,
+    0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x24, 0x5f,
+    0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41,
+    0x4d, 0x45, 0x20, 0x66, 0x65, 0x72, 0x6f, 0x63,
+    0x65, 0x6f, 0x6e, 0x20, 0x2d, 0x65, 0x6e, 0x64,
+    0x69, 0x61, 0x6e, 0x20, 0x24, 0x5f, 0x45, 0x4e,
+    0x44, 0x49, 0x41, 0x4e, 0x20, 0x2d, 0x63, 0x68,
+    0x61, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x69,
+    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x24, 0x5f, 0x54,
+    0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d,
+    0x45, 0x0d, 0x0a, 0x0d, 0x0a, 0x72, 0x65, 0x73,
+    0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
+    0x67, 0x20, 0x74, 0x72, 0x73, 0x74, 0x5f, 0x61,
+    0x6e, 0x64, 0x5f, 0x73, 0x72, 0x73, 0x74, 0x0d,
+    0x0a, 0x6a, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x73,
+    0x72, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61,
+    0x79, 0x20, 0x32, 0x30, 0x30, 0x0d, 0x0a, 0x6a,
+    0x74, 0x61, 0x67, 0x5f, 0x6e, 0x74, 0x72, 0x73,
+    0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x20,
+    0x32, 0x30, 0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x00,
     0x23, 0x20, 0x69, 0x4d, 0x6f, 0x74, 0x65, 0x32,
     0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x69, 0x66, 0x20,
     0x7b, 0x20, 0x5b, 0x69, 0x6e, 0x66, 0x6f, 0x20,
@@ -53669,6 +54489,174 @@
     0x72, 0x74, 0x65, 0x64, 0x2e, 0x20, 0x4e, 0x6f,
     0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
     0x22, 0x20, 0x7d, 0x0d, 0x0a, 0x00, 0x00, 0x00,
+    0x23, 0x20, 0x69, 0x6d, 0x78, 0x33, 0x35, 0x20,
+    0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x0d, 0x0a,
+    0x23, 0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x66, 0x20,
+    0x7b, 0x20, 0x5b, 0x69, 0x6e, 0x66, 0x6f, 0x20,
+    0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x20, 0x43,
+    0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x5d,
+    0x20, 0x7d, 0x20, 0x7b, 0x09, 0x0d, 0x0a, 0x20,
+    0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x20, 0x5f,
+    0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45,
+    0x20, 0x24, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
+    0x4d, 0x45, 0x20, 0x20, 0x20, 0x20, 0x0d, 0x0a,
+    0x7d, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b,
+    0x09, 0x20, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73,
+    0x65, 0x74, 0x20, 0x20, 0x5f, 0x43, 0x48, 0x49,
+    0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x69, 0x6d,
+    0x78, 0x33, 0x35, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b,
+    0x69, 0x6e, 0x66, 0x6f, 0x20, 0x65, 0x78, 0x69,
+    0x73, 0x74, 0x73, 0x20, 0x45, 0x4e, 0x44, 0x49,
+    0x41, 0x4e, 0x5d, 0x20, 0x7d, 0x20, 0x7b, 0x09,
+    0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74,
+    0x20, 0x20, 0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41,
+    0x4e, 0x20, 0x24, 0x45, 0x4e, 0x44, 0x49, 0x41,
+    0x4e, 0x20, 0x20, 0x20, 0x20, 0x0d, 0x0a, 0x7d,
+    0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x09,
+    0x20, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65,
+    0x74, 0x20, 0x20, 0x5f, 0x45, 0x4e, 0x44, 0x49,
+    0x41, 0x4e, 0x20, 0x6c, 0x69, 0x74, 0x74, 0x6c,
+    0x65, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b, 0x69, 0x6e,
+    0x66, 0x6f, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74,
+    0x73, 0x20, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50,
+    0x49, 0x44, 0x20, 0x5d, 0x20, 0x7d, 0x20, 0x7b,
+    0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74,
+    0x20, 0x5f, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50,
+    0x49, 0x44, 0x20, 0x24, 0x43, 0x50, 0x55, 0x54,
+    0x41, 0x50, 0x49, 0x44, 0x0d, 0x0a, 0x7d, 0x20,
+    0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0d, 0x0a,
+    0x20, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x5f,
+    0x43, 0x50, 0x55, 0x54, 0x41, 0x50, 0x49, 0x44,
+    0x20, 0x30, 0x78, 0x30, 0x37, 0x62, 0x33, 0x36,
+    0x30, 0x31, 0x64, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b,
+    0x69, 0x6e, 0x66, 0x6f, 0x20, 0x65, 0x78, 0x69,
+    0x73, 0x74, 0x73, 0x20, 0x53, 0x44, 0x4d, 0x41,
+    0x54, 0x41, 0x50, 0x49, 0x44, 0x20, 0x5d, 0x20,
+    0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20,
+    0x73, 0x65, 0x74, 0x20, 0x5f, 0x53, 0x44, 0x4d,
+    0x41, 0x54, 0x41, 0x50, 0x49, 0x44, 0x20, 0x24,
+    0x53, 0x44, 0x4d, 0x41, 0x54, 0x41, 0x50, 0x49,
+    0x44, 0x0d, 0x0a, 0x7d, 0x20, 0x65, 0x6c, 0x73,
+    0x65, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20,
+    0x73, 0x65, 0x74, 0x20, 0x5f, 0x53, 0x44, 0x4d,
+    0x41, 0x54, 0x41, 0x50, 0x49, 0x44, 0x20, 0x30,
+    0x78, 0x30, 0x38, 0x38, 0x32, 0x36, 0x30, 0x31,
+    0x64, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x23, 0x3d, 0x3d, 0x3d, 0x3d, 0x3d, 0x3d, 0x3d,
+    0x3d, 0x3d, 0x3d, 0x3d, 0x3d, 0x3d, 0x3d, 0x3d,
+    0x3d, 0x3d, 0x3d, 0x3d, 0x3d, 0x3d, 0x3d, 0x3d,
+    0x3d, 0x3d, 0x3d, 0x3d, 0x3d, 0x3d, 0x3d, 0x3d,
+    0x3d, 0x3d, 0x3d, 0x3d, 0x3d, 0x3d, 0x3d, 0x3d,
+    0x3d, 0x0d, 0x0a, 0x23, 0x20, 0x54, 0x68, 0x65,
+    0x20, 0x22, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
+    0x20, 0x6a, 0x74, 0x61, 0x67, 0x20, 0x63, 0x6f,
+    0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
+    0x22, 0x20, 0x0d, 0x0a, 0x23, 0x20, 0x49, 0x4d,
+    0x58, 0x33, 0x31, 0x20, 0x72, 0x65, 0x66, 0x65,
+    0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6d, 0x61,
+    0x6e, 0x75, 0x61, 0x6c, 0x2c, 0x20, 0x70, 0x61,
+    0x67, 0x65, 0x20, 0x36, 0x2d, 0x32, 0x38, 0x20,
+    0x2d, 0x20, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
+    0x20, 0x36, 0x2d, 0x31, 0x34, 0x0d, 0x0a, 0x69,
+    0x66, 0x20, 0x7b, 0x20, 0x5b, 0x69, 0x6e, 0x66,
+    0x6f, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
+    0x20, 0x53, 0x4a, 0x43, 0x54, 0x41, 0x50, 0x49,
+    0x44, 0x20, 0x5d, 0x20, 0x7d, 0x20, 0x7b, 0x0d,
+    0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20,
+    0x5f, 0x53, 0x4a, 0x43, 0x54, 0x41, 0x50, 0x49,
+    0x44, 0x20, 0x24, 0x53, 0x4a, 0x43, 0x54, 0x41,
+    0x50, 0x49, 0x44, 0x0d, 0x0a, 0x7d, 0x20, 0x65,
+    0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0d, 0x0a, 0x20,
+    0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x5f, 0x53,
+    0x4a, 0x43, 0x54, 0x41, 0x50, 0x49, 0x44, 0x20,
+    0x30, 0x78, 0x32, 0x62, 0x39, 0x30, 0x30, 0x66,
+    0x30, 0x66, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x6a, 0x74, 0x61, 0x67, 0x20, 0x6e, 0x65,
+    0x77, 0x74, 0x61, 0x70, 0x20, 0x24, 0x5f, 0x43,
+    0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20,
+    0x73, 0x6a, 0x63, 0x20, 0x2d, 0x69, 0x72, 0x6c,
+    0x65, 0x6e, 0x20, 0x34, 0x20, 0x2d, 0x69, 0x72,
+    0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x20,
+    0x30, 0x78, 0x30, 0x20, 0x2d, 0x69, 0x72, 0x6d,
+    0x61, 0x73, 0x6b, 0x20, 0x30, 0x78, 0x30, 0x20,
+    0x2d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
+    0x64, 0x2d, 0x69, 0x64, 0x20, 0x24, 0x5f, 0x53,
+    0x4a, 0x43, 0x54, 0x41, 0x50, 0x49, 0x44, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x20,
+    0x6e, 0x65, 0x77, 0x74, 0x61, 0x70, 0x20, 0x24,
+    0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d,
+    0x45, 0x20, 0x63, 0x70, 0x75, 0x20, 0x2d, 0x69,
+    0x72, 0x6c, 0x65, 0x6e, 0x20, 0x35, 0x20, 0x2d,
+    0x69, 0x72, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
+    0x65, 0x20, 0x30, 0x78, 0x31, 0x20, 0x2d, 0x69,
+    0x72, 0x6d, 0x61, 0x73, 0x6b, 0x20, 0x30, 0x78,
+    0x31, 0x66, 0x20, 0x2d, 0x65, 0x78, 0x70, 0x65,
+    0x63, 0x74, 0x65, 0x64, 0x2d, 0x69, 0x64, 0x20,
+    0x24, 0x5f, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50,
+    0x49, 0x44, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x20,
+    0x4e, 0x6f, 0x20, 0x49, 0x44, 0x43, 0x4f, 0x44,
+    0x45, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
+    0x69, 0x73, 0x20, 0x54, 0x41, 0x50, 0x0d, 0x0a,
+    0x6a, 0x74, 0x61, 0x67, 0x20, 0x6e, 0x65, 0x77,
+    0x74, 0x61, 0x70, 0x20, 0x24, 0x5f, 0x43, 0x48,
+    0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x77,
+    0x68, 0x61, 0x74, 0x63, 0x68, 0x61, 0x63, 0x61,
+    0x6c, 0x6c, 0x69, 0x74, 0x20, 0x2d, 0x69, 0x72,
+    0x6c, 0x65, 0x6e, 0x20, 0x34, 0x20, 0x2d, 0x69,
+    0x72, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
+    0x20, 0x30, 0x20, 0x2d, 0x69, 0x72, 0x6d, 0x61,
+    0x73, 0x6b, 0x20, 0x30, 0x78, 0x30, 0x20, 0x2d,
+    0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
+    0x2d, 0x69, 0x64, 0x20, 0x30, 0x78, 0x30, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x20,
+    0x6e, 0x65, 0x77, 0x74, 0x61, 0x70, 0x20, 0x24,
+    0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d,
+    0x45, 0x20, 0x73, 0x6d, 0x64, 0x61, 0x20, 0x2d,
+    0x69, 0x72, 0x6c, 0x65, 0x6e, 0x20, 0x35, 0x20,
+    0x2d, 0x69, 0x72, 0x63, 0x61, 0x70, 0x74, 0x75,
+    0x72, 0x65, 0x20, 0x30, 0x78, 0x31, 0x20, 0x2d,
+    0x69, 0x72, 0x6d, 0x61, 0x73, 0x6b, 0x20, 0x30,
+    0x78, 0x31, 0x66, 0x20, 0x2d, 0x65, 0x78, 0x70,
+    0x65, 0x63, 0x74, 0x65, 0x64, 0x2d, 0x69, 0x64,
+    0x20, 0x24, 0x5f, 0x53, 0x44, 0x4d, 0x41, 0x54,
+    0x41, 0x50, 0x49, 0x44, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x73, 0x65, 0x74, 0x20, 0x5f, 0x54, 0x41, 0x52,
+    0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20,
+    0x5b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20,
+    0x22, 0x25, 0x73, 0x2e, 0x63, 0x70, 0x75, 0x22,
+    0x20, 0x24, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e,
+    0x41, 0x4d, 0x45, 0x5d, 0x0d, 0x0a, 0x74, 0x61,
+    0x72, 0x67, 0x65, 0x74, 0x20, 0x63, 0x72, 0x65,
+    0x61, 0x74, 0x65, 0x20, 0x24, 0x5f, 0x54, 0x41,
+    0x52, 0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45,
+    0x20, 0x61, 0x72, 0x6d, 0x31, 0x31, 0x20, 0x2d,
+    0x65, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x20, 0x24,
+    0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x20,
+    0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2d, 0x70,
+    0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20,
+    0x24, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
+    0x4e, 0x41, 0x4d, 0x45, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x70, 0x72, 0x6f, 0x63, 0x20, 0x70, 0x6f, 0x77,
+    0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f,
+    0x72, 0x65, 0x20, 0x7b, 0x7d, 0x20, 0x7b, 0x20,
+    0x70, 0x75, 0x74, 0x73, 0x20, 0x22, 0x53, 0x65,
+    0x6e, 0x73, 0x65, 0x64, 0x20, 0x70, 0x6f, 0x77,
+    0x65, 0x72, 0x20, 0x72, 0x65, 0x73, 0x74, 0x6f,
+    0x72, 0x65, 0x2e, 0x20, 0x4e, 0x6f, 0x20, 0x61,
+    0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x22, 0x20,
+    0x7d, 0x20, 0x0d, 0x0a, 0x70, 0x72, 0x6f, 0x63,
+    0x20, 0x73, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x65,
+    0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64,
+    0x20, 0x7b, 0x7d, 0x20, 0x7b, 0x20, 0x70, 0x75,
+    0x74, 0x73, 0x20, 0x22, 0x53, 0x65, 0x6e, 0x73,
+    0x65, 0x64, 0x20, 0x6e, 0x53, 0x52, 0x53, 0x54,
+    0x20, 0x64, 0x65, 0x61, 0x73, 0x73, 0x65, 0x72,
+    0x74, 0x65, 0x64, 0x2e, 0x20, 0x4e, 0x6f, 0x20,
+    0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x22,
+    0x20, 0x7d, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x78, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x20,
     0x69, 0x78, 0x70, 0x34, 0x32, 0x78, 0x20, 0x43,
     0x50, 0x55, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a,
@@ -53961,6 +54949,106 @@
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x78, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x20,
+    0x69, 0x78, 0x70, 0x34, 0x32, 0x78, 0x20, 0x43,
+    0x50, 0x55, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b, 0x69, 0x6e,
+    0x66, 0x6f, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74,
+    0x73, 0x20, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
+    0x4d, 0x45, 0x5d, 0x20, 0x7d, 0x20, 0x7b, 0x09,
+    0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74,
+    0x20, 0x20, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e,
+    0x41, 0x4d, 0x45, 0x20, 0x24, 0x43, 0x48, 0x49,
+    0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x20, 0x20,
+    0x20, 0x0d, 0x0a, 0x7d, 0x20, 0x65, 0x6c, 0x73,
+    0x65, 0x20, 0x7b, 0x09, 0x20, 0x0d, 0x0a, 0x20,
+    0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x20, 0x5f,
+    0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45,
+    0x20, 0x69, 0x78, 0x70, 0x34, 0x32, 0x78, 0x0d,
+    0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x66,
+    0x20, 0x7b, 0x20, 0x5b, 0x69, 0x6e, 0x66, 0x6f,
+    0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x20,
+    0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x5d, 0x20,
+    0x7d, 0x20, 0x7b, 0x09, 0x0d, 0x0a, 0x20, 0x20,
+    0x20, 0x73, 0x65, 0x74, 0x20, 0x20, 0x5f, 0x45,
+    0x4e, 0x44, 0x49, 0x41, 0x4e, 0x20, 0x24, 0x45,
+    0x4e, 0x44, 0x49, 0x41, 0x4e, 0x20, 0x20, 0x20,
+    0x20, 0x0d, 0x0a, 0x7d, 0x20, 0x65, 0x6c, 0x73,
+    0x65, 0x20, 0x7b, 0x09, 0x20, 0x0d, 0x0a, 0x20,
+    0x20, 0x23, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
+    0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
+    0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x62, 0x69,
+    0x67, 0x65, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x0d,
+    0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20,
+    0x20, 0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e,
+    0x20, 0x62, 0x69, 0x67, 0x0d, 0x0a, 0x7d, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x69, 0x66, 0x20, 0x7b, 0x20,
+    0x5b, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x65, 0x78,
+    0x69, 0x73, 0x74, 0x73, 0x20, 0x43, 0x50, 0x55,
+    0x54, 0x41, 0x50, 0x49, 0x44, 0x20, 0x5d, 0x20,
+    0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20,
+    0x73, 0x65, 0x74, 0x20, 0x5f, 0x43, 0x50, 0x55,
+    0x54, 0x41, 0x50, 0x49, 0x44, 0x20, 0x24, 0x43,
+    0x50, 0x55, 0x54, 0x41, 0x50, 0x49, 0x44, 0x0d,
+    0x0a, 0x7d, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20,
+    0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x23, 0x20, 0x66,
+    0x6f, 0x72, 0x63, 0x65, 0x20, 0x61, 0x6e, 0x20,
+    0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x74, 0x69,
+    0x6c, 0x6c, 0x20, 0x77, 0x65, 0x20, 0x67, 0x65,
+    0x74, 0x20, 0x61, 0x20, 0x67, 0x6f, 0x6f, 0x64,
+    0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x0d,
+    0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20,
+    0x5f, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50, 0x49,
+    0x44, 0x20, 0x30, 0x78, 0x66, 0x66, 0x66, 0x66,
+    0x66, 0x66, 0x66, 0x66, 0x0d, 0x0a, 0x7d, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x23, 0x75, 0x73, 0x65, 0x20,
+    0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64,
+    0x20, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65,
+    0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x20, 0x6f,
+    0x72, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
+    0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63,
+    0x61, 0x6e, 0x3f, 0x74, 0x20, 0x73, 0x65, 0x74,
+    0x20, 0x54, 0x52, 0x53, 0x54, 0x2f, 0x53, 0x52,
+    0x53, 0x54, 0x20, 0x73, 0x65, 0x70, 0x61, 0x72,
+    0x61, 0x74, 0x65, 0x6c, 0x79, 0x0d, 0x0a, 0x72,
+    0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
+    0x66, 0x69, 0x67, 0x20, 0x73, 0x72, 0x73, 0x74,
+    0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x73, 0x72,
+    0x73, 0x74, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x73,
+    0x5f, 0x74, 0x72, 0x73, 0x74, 0x0d, 0x0a, 0x23,
+    0x6a, 0x74, 0x61, 0x67, 0x20, 0x73, 0x63, 0x61,
+    0x6e, 0x20, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x20,
+    0x6e, 0x65, 0x77, 0x74, 0x61, 0x70, 0x20, 0x24,
+    0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d,
+    0x45, 0x20, 0x63, 0x70, 0x75, 0x20, 0x2d, 0x69,
+    0x72, 0x6c, 0x65, 0x6e, 0x20, 0x37, 0x20, 0x2d,
+    0x69, 0x72, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
+    0x65, 0x20, 0x30, 0x78, 0x31, 0x20, 0x2d, 0x69,
+    0x72, 0x6d, 0x61, 0x73, 0x6b, 0x20, 0x30, 0x78,
+    0x37, 0x66, 0x20, 0x2d, 0x65, 0x78, 0x70, 0x65,
+    0x63, 0x74, 0x65, 0x64, 0x2d, 0x69, 0x64, 0x20,
+    0x24, 0x5f, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50,
+    0x49, 0x44, 0x0d, 0x0a, 0x0d, 0x0a, 0x73, 0x65,
+    0x74, 0x20, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
+    0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x5b, 0x66,
+    0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x22, 0x25,
+    0x73, 0x2e, 0x63, 0x70, 0x75, 0x22, 0x20, 0x24,
+    0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d,
+    0x45, 0x5d, 0x0d, 0x0a, 0x74, 0x61, 0x72, 0x67,
+    0x65, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
+    0x65, 0x20, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47,
+    0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x78,
+    0x73, 0x63, 0x61, 0x6c, 0x65, 0x20, 0x2d, 0x65,
+    0x6e, 0x64, 0x69, 0x61, 0x6e, 0x20, 0x24, 0x5f,
+    0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x20, 0x2d,
+    0x63, 0x68, 0x61, 0x69, 0x6e, 0x2d, 0x70, 0x6f,
+    0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x24,
+    0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x4e,
+    0x41, 0x4d, 0x45, 0x20, 0x2d, 0x76, 0x61, 0x72,
+    0x69, 0x61, 0x6e, 0x74, 0x20, 0x69, 0x78, 0x70,
+    0x34, 0x32, 0x78, 0x0d, 0x0a, 0x0d, 0x0a, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x20, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
     0x20, 0x66, 0x6f, 0x72, 0x20, 0x6c, 0x75, 0x6d,
     0x69, 0x6e, 0x61, 0x72, 0x79, 0x20, 0x6c, 0x6d,
@@ -54561,187 +55649,215 @@
     0x61, 0x6c, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63,
     0x6b, 0x73, 0x75, 0x6d, 0x0d, 0x0a, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x0d, 0x0a, 0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b,
-    0x69, 0x6e, 0x66, 0x6f, 0x20, 0x65, 0x78, 0x69,
-    0x73, 0x74, 0x73, 0x20, 0x43, 0x48, 0x49, 0x50,
-    0x4e, 0x41, 0x4d, 0x45, 0x5d, 0x20, 0x7d, 0x20,
-    0x7b, 0x09, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73,
-    0x65, 0x74, 0x20, 0x20, 0x5f, 0x43, 0x48, 0x49,
-    0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x24, 0x43,
-    0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20,
-    0x20, 0x20, 0x20, 0x0d, 0x0a, 0x7d, 0x20, 0x65,
-    0x6c, 0x73, 0x65, 0x20, 0x7b, 0x09, 0x20, 0x0d,
-    0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20,
+    0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b, 0x69, 0x6e,
+    0x66, 0x6f, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74,
+    0x73, 0x20, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
+    0x4d, 0x45, 0x5d, 0x20, 0x7d, 0x20, 0x7b, 0x09,
+    0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74,
     0x20, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
-    0x4d, 0x45, 0x20, 0x6c, 0x70, 0x63, 0x32, 0x31,
-    0x34, 0x38, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d,
-    0x0a, 0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b, 0x69,
-    0x6e, 0x66, 0x6f, 0x20, 0x65, 0x78, 0x69, 0x73,
-    0x74, 0x73, 0x20, 0x45, 0x4e, 0x44, 0x49, 0x41,
-    0x4e, 0x5d, 0x20, 0x7d, 0x20, 0x7b, 0x09, 0x0d,
-    0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20,
-    0x20, 0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e,
-    0x20, 0x24, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e,
-    0x20, 0x20, 0x20, 0x20, 0x0d, 0x0a, 0x7d, 0x20,
-    0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x09, 0x20,
-    0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74,
-    0x20, 0x20, 0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41,
-    0x4e, 0x20, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
+    0x4d, 0x45, 0x20, 0x24, 0x43, 0x48, 0x49, 0x50,
+    0x4e, 0x41, 0x4d, 0x45, 0x0d, 0x0a, 0x7d, 0x20,
+    0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0d, 0x0a,
+    0x20, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x5f,
+    0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45,
+    0x20, 0x6c, 0x70, 0x63, 0x32, 0x31, 0x34, 0x38,
     0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x69,
     0x66, 0x20, 0x7b, 0x20, 0x5b, 0x69, 0x6e, 0x66,
     0x6f, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
-    0x20, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50, 0x49,
-    0x44, 0x20, 0x5d, 0x20, 0x7d, 0x20, 0x7b, 0x0d,
-    0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20,
-    0x5f, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50, 0x49,
-    0x44, 0x20, 0x24, 0x43, 0x50, 0x55, 0x54, 0x41,
-    0x50, 0x49, 0x44, 0x0d, 0x0a, 0x7d, 0x20, 0x65,
-    0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0d, 0x0a, 0x20,
-    0x20, 0x23, 0x20, 0x66, 0x6f, 0x72, 0x63, 0x65,
-    0x20, 0x61, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f,
-    0x72, 0x20, 0x74, 0x69, 0x6c, 0x6c, 0x20, 0x77,
-    0x65, 0x20, 0x67, 0x65, 0x74, 0x20, 0x61, 0x20,
-    0x67, 0x6f, 0x6f, 0x64, 0x20, 0x6e, 0x75, 0x6d,
-    0x62, 0x65, 0x72, 0x0d, 0x0a, 0x20, 0x20, 0x20,
-    0x73, 0x65, 0x74, 0x20, 0x5f, 0x43, 0x50, 0x55,
-    0x54, 0x41, 0x50, 0x49, 0x44, 0x20, 0x30, 0x78,
-    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
-    0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x23,
-    0x64, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x20, 0x6f,
-    0x6e, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20,
-    0x6c, 0x69, 0x6e, 0x65, 0x73, 0x0d, 0x0a, 0x6a,
-    0x74, 0x61, 0x67, 0x5f, 0x6e, 0x73, 0x72, 0x73,
-    0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x20,
-    0x32, 0x30, 0x30, 0x0d, 0x0a, 0x6a, 0x74, 0x61,
-    0x67, 0x5f, 0x6e, 0x74, 0x72, 0x73, 0x74, 0x5f,
-    0x64, 0x65, 0x6c, 0x61, 0x79, 0x20, 0x32, 0x30,
-    0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x20, 0x4e,
-    0x4f, 0x54, 0x45, 0x21, 0x21, 0x21, 0x20, 0x4c,
-    0x50, 0x43, 0x73, 0x20, 0x6e, 0x65, 0x65, 0x64,
-    0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x70,
-    0x75, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x77, 0x68,
-    0x69, 0x6c, 0x65, 0x20, 0x52, 0x54, 0x43, 0x4b,
-    0x20, 0x69, 0x73, 0x20, 0x6c, 0x6f, 0x77, 0x2e,
-    0x20, 0x30, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x63,
-    0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x0d,
-    0x0a, 0x23, 0x20, 0x4a, 0x54, 0x41, 0x47, 0x2c,
-    0x20, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2d, 0x6f,
-    0x6e, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20,
-    0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65,
-    0x6e, 0x6f, 0x75, 0x67, 0x68, 0x2c, 0x20, 0x69,
-    0x2e, 0x65, 0x2e, 0x20, 0x79, 0x6f, 0x75, 0x20,
-    0x6e, 0x65, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
-    0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20,
-    0x61, 0x0d, 0x0a, 0x23, 0x20, 0x72, 0x65, 0x73,
-    0x65, 0x74, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72,
-    0x65, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20,
-    0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20,
-    0x74, 0x61, 0x6c, 0x6b, 0x20, 0x74, 0x6f, 0x20,
-    0x74, 0x68, 0x65, 0x20, 0x4c, 0x50, 0x43, 0x32,
-    0x31, 0x34, 0x38, 0x2c, 0x20, 0x61, 0x74, 0x74,
-    0x61, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20, 0x6e,
-    0x6f, 0x74, 0x0d, 0x0a, 0x23, 0x20, 0x70, 0x6f,
-    0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x2e, 0x0d,
-    0x0a, 0x0d, 0x0a, 0x23, 0x75, 0x73, 0x65, 0x20,
-    0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64,
-    0x20, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65,
-    0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x20, 0x6f,
-    0x72, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
-    0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63,
-    0x61, 0x6e, 0x27, 0x74, 0x20, 0x73, 0x65, 0x74,
-    0x20, 0x54, 0x52, 0x53, 0x54, 0x2f, 0x53, 0x52,
-    0x53, 0x54, 0x20, 0x73, 0x65, 0x70, 0x61, 0x72,
-    0x61, 0x74, 0x65, 0x6c, 0x79, 0x0d, 0x0a, 0x72,
-    0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
-    0x66, 0x69, 0x67, 0x20, 0x74, 0x72, 0x73, 0x74,
-    0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x72, 0x73,
-    0x74, 0x20, 0x73, 0x72, 0x73, 0x74, 0x5f, 0x70,
-    0x75, 0x6c, 0x6c, 0x73, 0x5f, 0x74, 0x72, 0x73,
-    0x74, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x6a, 0x74,
-    0x61, 0x67, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x20,
-    0x63, 0x68, 0x61, 0x69, 0x6e, 0x0d, 0x0a, 0x6a,
-    0x74, 0x61, 0x67, 0x20, 0x6e, 0x65, 0x77, 0x74,
-    0x61, 0x70, 0x20, 0x24, 0x5f, 0x43, 0x48, 0x49,
-    0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x63, 0x70,
-    0x75, 0x20, 0x2d, 0x69, 0x72, 0x6c, 0x65, 0x6e,
-    0x20, 0x34, 0x20, 0x2d, 0x69, 0x72, 0x63, 0x61,
-    0x70, 0x74, 0x75, 0x72, 0x65, 0x20, 0x30, 0x78,
-    0x31, 0x20, 0x2d, 0x69, 0x72, 0x6d, 0x61, 0x73,
-    0x6b, 0x20, 0x30, 0x78, 0x66, 0x20, 0x2d, 0x65,
-    0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x2d,
-    0x69, 0x64, 0x20, 0x24, 0x5f, 0x43, 0x50, 0x55,
-    0x54, 0x41, 0x50, 0x49, 0x44, 0x0d, 0x0a, 0x0d,
-    0x0a, 0x73, 0x65, 0x74, 0x20, 0x5f, 0x54, 0x41,
+    0x20, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x5d,
+    0x20, 0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20,
+    0x20, 0x73, 0x65, 0x74, 0x20, 0x5f, 0x45, 0x4e,
+    0x44, 0x49, 0x41, 0x4e, 0x20, 0x24, 0x45, 0x4e,
+    0x44, 0x49, 0x41, 0x4e, 0x0d, 0x0a, 0x7d, 0x20,
+    0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0d, 0x0a,
+    0x20, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x5f,
+    0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x20, 0x6c,
+    0x69, 0x74, 0x74, 0x6c, 0x65, 0x0d, 0x0a, 0x7d,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x66, 0x20, 0x7b,
+    0x20, 0x5b, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x65,
+    0x78, 0x69, 0x73, 0x74, 0x73, 0x20, 0x43, 0x50,
+    0x55, 0x54, 0x41, 0x50, 0x49, 0x44, 0x20, 0x5d,
+    0x20, 0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20,
+    0x20, 0x73, 0x65, 0x74, 0x20, 0x5f, 0x43, 0x50,
+    0x55, 0x54, 0x41, 0x50, 0x49, 0x44, 0x20, 0x24,
+    0x43, 0x50, 0x55, 0x54, 0x41, 0x50, 0x49, 0x44,
+    0x0d, 0x0a, 0x7d, 0x20, 0x65, 0x6c, 0x73, 0x65,
+    0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73,
+    0x65, 0x74, 0x20, 0x5f, 0x43, 0x50, 0x55, 0x54,
+    0x41, 0x50, 0x49, 0x44, 0x20, 0x30, 0x78, 0x34,
+    0x66, 0x31, 0x66, 0x30, 0x66, 0x30, 0x66, 0x0d,
+    0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x6a, 0x74,
+    0x61, 0x67, 0x5f, 0x6e, 0x73, 0x72, 0x73, 0x74,
+    0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x20, 0x32,
+    0x30, 0x30, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67,
+    0x5f, 0x6e, 0x74, 0x72, 0x73, 0x74, 0x5f, 0x64,
+    0x65, 0x6c, 0x61, 0x79, 0x20, 0x32, 0x30, 0x30,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x20, 0x4e, 0x4f,
+    0x54, 0x45, 0x21, 0x21, 0x21, 0x20, 0x4c, 0x50,
+    0x43, 0x73, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20,
+    0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x70, 0x75,
+    0x6c, 0x6c, 0x65, 0x64, 0x20, 0x77, 0x68, 0x69,
+    0x6c, 0x65, 0x20, 0x52, 0x54, 0x43, 0x4b, 0x20,
+    0x69, 0x73, 0x20, 0x6c, 0x6f, 0x77, 0x2e, 0x20,
+    0x30, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x74,
+    0x69, 0x76, 0x61, 0x74, 0x65, 0x0d, 0x0a, 0x23,
+    0x20, 0x4a, 0x54, 0x41, 0x47, 0x2c, 0x20, 0x70,
+    0x6f, 0x77, 0x65, 0x72, 0x2d, 0x6f, 0x6e, 0x20,
+    0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x69, 0x73,
+    0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x6e, 0x6f,
+    0x75, 0x67, 0x68, 0x2c, 0x20, 0x69, 0x2e, 0x65,
+    0x2e, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e, 0x65,
+    0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65,
+    0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x0d,
+    0x0a, 0x23, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74,
+    0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20,
+    0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x62,
+    0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x61,
+    0x6c, 0x6b, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
+    0x65, 0x20, 0x4c, 0x50, 0x43, 0x32, 0x31, 0x34,
+    0x38, 0x2c, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63,
+    0x68, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74,
+    0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c,
+    0x65, 0x2e, 0x0d, 0x0a, 0x0d, 0x0a, 0x72, 0x65,
+    0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
+    0x69, 0x67, 0x20, 0x74, 0x72, 0x73, 0x74, 0x5f,
+    0x61, 0x6e, 0x64, 0x5f, 0x73, 0x72, 0x73, 0x74,
+    0x20, 0x73, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x75,
+    0x6c, 0x6c, 0x73, 0x5f, 0x74, 0x72, 0x73, 0x74,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67,
+    0x20, 0x6e, 0x65, 0x77, 0x74, 0x61, 0x70, 0x20,
+    0x24, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
+    0x4d, 0x45, 0x20, 0x63, 0x70, 0x75, 0x20, 0x2d,
+    0x69, 0x72, 0x6c, 0x65, 0x6e, 0x20, 0x34, 0x20,
+    0x2d, 0x69, 0x72, 0x63, 0x61, 0x70, 0x74, 0x75,
+    0x72, 0x65, 0x20, 0x30, 0x78, 0x31, 0x20, 0x2d,
+    0x69, 0x72, 0x6d, 0x61, 0x73, 0x6b, 0x20, 0x30,
+    0x78, 0x66, 0x20, 0x2d, 0x65, 0x78, 0x70, 0x65,
+    0x63, 0x74, 0x65, 0x64, 0x2d, 0x69, 0x64, 0x20,
+    0x24, 0x5f, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50,
+    0x49, 0x44, 0x0d, 0x0a, 0x0d, 0x0a, 0x73, 0x65,
+    0x74, 0x20, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
+    0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x5b, 0x66,
+    0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x22, 0x25,
+    0x73, 0x2e, 0x63, 0x70, 0x75, 0x22, 0x20, 0x24,
+    0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d,
+    0x45, 0x5d, 0x0d, 0x0a, 0x0d, 0x0a, 0x74, 0x61,
+    0x72, 0x67, 0x65, 0x74, 0x20, 0x63, 0x72, 0x65,
+    0x61, 0x74, 0x65, 0x20, 0x24, 0x5f, 0x54, 0x41,
     0x52, 0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45,
-    0x20, 0x5b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
-    0x20, 0x22, 0x25, 0x73, 0x2e, 0x63, 0x70, 0x75,
-    0x22, 0x20, 0x24, 0x5f, 0x43, 0x48, 0x49, 0x50,
-    0x4e, 0x41, 0x4d, 0x45, 0x5d, 0x0d, 0x0a, 0x74,
-    0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x63, 0x72,
-    0x65, 0x61, 0x74, 0x65, 0x20, 0x24, 0x5f, 0x54,
-    0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d,
-    0x45, 0x20, 0x61, 0x72, 0x6d, 0x37, 0x74, 0x64,
-    0x6d, 0x69, 0x20, 0x2d, 0x65, 0x6e, 0x64, 0x69,
-    0x61, 0x6e, 0x20, 0x24, 0x5f, 0x45, 0x4e, 0x44,
-    0x49, 0x41, 0x4e, 0x20, 0x2d, 0x63, 0x68, 0x61,
-    0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x69, 0x74,
-    0x69, 0x6f, 0x6e, 0x20, 0x24, 0x5f, 0x54, 0x41,
+    0x20, 0x61, 0x72, 0x6d, 0x37, 0x74, 0x64, 0x6d,
+    0x69, 0x20, 0x2d, 0x65, 0x6e, 0x64, 0x69, 0x61,
+    0x6e, 0x20, 0x24, 0x5f, 0x45, 0x4e, 0x44, 0x49,
+    0x41, 0x4e, 0x20, 0x2d, 0x63, 0x68, 0x61, 0x69,
+    0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
+    0x6f, 0x6e, 0x20, 0x24, 0x5f, 0x54, 0x41, 0x52,
+    0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20,
+    0x2d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
+    0x20, 0x61, 0x72, 0x6d, 0x37, 0x74, 0x64, 0x6d,
+    0x69, 0x2d, 0x73, 0x5f, 0x72, 0x34, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47,
+    0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x63,
+    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
+    0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61,
+    0x72, 0x65, 0x61, 0x2d, 0x76, 0x69, 0x72, 0x74,
+    0x20, 0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b,
+    0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d, 0x70, 0x68,
+    0x79, 0x73, 0x20, 0x30, 0x78, 0x34, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x2d, 0x77,
+    0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61,
+    0x2d, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x30, 0x78,
+    0x34, 0x30, 0x30, 0x30, 0x20, 0x2d, 0x77, 0x6f,
+    0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d,
+    0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x20, 0x30,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x24, 0x5f, 0x54, 0x41,
     0x52, 0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45,
-    0x20, 0x2d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
-    0x74, 0x20, 0x61, 0x72, 0x6d, 0x37, 0x74, 0x64,
-    0x6d, 0x69, 0x2d, 0x73, 0x5f, 0x72, 0x34, 0x0d,
-    0x0a, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
-    0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x63, 0x6f,
-    0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x20,
-    0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72,
-    0x65, 0x61, 0x2d, 0x76, 0x69, 0x72, 0x74, 0x20,
-    0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d,
-    0x61, 0x72, 0x65, 0x61, 0x2d, 0x70, 0x68, 0x79,
-    0x73, 0x20, 0x30, 0x78, 0x34, 0x30, 0x30, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x20, 0x2d, 0x77, 0x6f,
-    0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d,
-    0x73, 0x69, 0x7a, 0x65, 0x20, 0x30, 0x78, 0x34,
-    0x30, 0x30, 0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72,
-    0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d, 0x62,
-    0x61, 0x63, 0x6b, 0x75, 0x70, 0x20, 0x30, 0x0d,
-    0x0a, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
-    0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x63, 0x6f,
-    0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x20,
-    0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x72,
-    0x65, 0x73, 0x65, 0x74, 0x2d, 0x69, 0x6e, 0x69,
-    0x74, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x23, 0x20,
-    0x46, 0x6f, 0x72, 0x63, 0x65, 0x20, 0x74, 0x61,
-    0x72, 0x67, 0x65, 0x74, 0x20, 0x69, 0x6e, 0x74,
-    0x6f, 0x20, 0x41, 0x52, 0x4d, 0x20, 0x73, 0x74,
-    0x61, 0x74, 0x65, 0x0d, 0x0a, 0x09, 0x73, 0x6f,
-    0x66, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74,
-    0x5f, 0x68, 0x61, 0x6c, 0x74, 0x0d, 0x0a, 0x09,
-    0x23, 0x64, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x20,
-    0x72, 0x65, 0x6d, 0x61, 0x70, 0x20, 0x30, 0x78,
-    0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x78, 0x30,
-    0x30, 0x32, 0x30, 0x20, 0x74, 0x6f, 0x20, 0x61,
-    0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20,
-    0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20,
-    0x66, 0x6c, 0x61, 0x73, 0x68, 0x0d, 0x0a, 0x09,
-    0x6d, 0x77, 0x62, 0x20, 0x30, 0x78, 0x45, 0x30,
-    0x31, 0x46, 0x43, 0x30, 0x34, 0x30, 0x20, 0x30,
-    0x78, 0x30, 0x31, 0x20, 0x0d, 0x0a, 0x09, 0x0d,
-    0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a,
-    0x23, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x62,
+    0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
+    0x72, 0x65, 0x20, 0x2d, 0x65, 0x76, 0x65, 0x6e,
+    0x74, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x2d,
+    0x69, 0x6e, 0x69, 0x74, 0x20, 0x7b, 0x0d, 0x0a,
+    0x09, 0x23, 0x20, 0x46, 0x6f, 0x72, 0x63, 0x65,
+    0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20,
+    0x69, 0x6e, 0x74, 0x6f, 0x20, 0x41, 0x52, 0x4d,
+    0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x0d,
+    0x0a, 0x09, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72,
+    0x65, 0x73, 0x65, 0x74, 0x5f, 0x68, 0x61, 0x6c,
+    0x74, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x23, 0x20,
+    0x44, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x72,
+    0x65, 0x6d, 0x61, 0x70, 0x20, 0x30, 0x78, 0x30,
+    0x30, 0x30, 0x30, 0x2d, 0x30, 0x78, 0x30, 0x30,
+    0x32, 0x30, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e,
+    0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x62,
+    0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
+    0x6c, 0x61, 0x73, 0x68, 0x20, 0x28, 0x69, 0x2e,
+    0x65, 0x2e, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63,
+    0x74, 0x0d, 0x0a, 0x09, 0x23, 0x20, 0x22, 0x55,
+    0x73, 0x65, 0x72, 0x20, 0x46, 0x6c, 0x61, 0x73,
+    0x68, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x20,
+    0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x6e,
+    0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x20,
+    0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x20,
+    0x61, 0x72, 0x65, 0x20, 0x5f, 0x6e, 0x6f, 0x74,
+    0x5f, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x70, 0x70,
+    0x65, 0x64, 0x2c, 0x0d, 0x0a, 0x09, 0x23, 0x20,
+    0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x73, 0x69,
+    0x64, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x66, 0x6c,
+    0x61, 0x73, 0x68, 0x20, 0x69, 0x6e, 0x73, 0x74,
+    0x65, 0x61, 0x64, 0x29, 0x2e, 0x0d, 0x0a, 0x09,
+    0x23, 0x0d, 0x0a, 0x09, 0x23, 0x20, 0x53, 0x65,
+    0x65, 0x20, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
+    0x6e, 0x20, 0x37, 0x2e, 0x31, 0x20, 0x6f, 0x6e,
+    0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x33, 0x32,
+    0x20, 0x28, 0x22, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
+    0x79, 0x20, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
+    0x67, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
+    0x6c, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
+    0x65, 0x72, 0x22, 0x29, 0x20, 0x69, 0x6e, 0x0d,
+    0x0a, 0x09, 0x23, 0x20, 0x22, 0x55, 0x4d, 0x31,
+    0x30, 0x31, 0x33, 0x39, 0x3a, 0x20, 0x56, 0x6f,
+    0x6c, 0x75, 0x6d, 0x65, 0x20, 0x31, 0x3a, 0x20,
+    0x4c, 0x50, 0x43, 0x32, 0x31, 0x34, 0x78, 0x20,
+    0x55, 0x73, 0x65, 0x72, 0x20, 0x4d, 0x61, 0x6e,
+    0x75, 0x61, 0x6c, 0x22, 0x2c, 0x20, 0x52, 0x65,
+    0x76, 0x2e, 0x20, 0x30, 0x32, 0x20, 0x2d, 0x2d,
+    0x20, 0x32, 0x35, 0x20, 0x4a, 0x75, 0x6c, 0x79,
+    0x20, 0x32, 0x30, 0x30, 0x36, 0x2e, 0x0d, 0x0a,
+    0x09, 0x23, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a,
+    0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x73, 0x74,
+    0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x69, 0x63,
+    0x73, 0x2e, 0x6e, 0x78, 0x70, 0x2e, 0x63, 0x6f,
+    0x6d, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
+    0x74, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
+    0x6e, 0x74, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72,
+    0x6f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
+    0x6c, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x64, 0x66,
+    0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61,
+    0x6e, 0x75, 0x61, 0x6c, 0x2e, 0x6c, 0x70, 0x63,
+    0x32, 0x31, 0x34, 0x31, 0x2e, 0x6c, 0x70, 0x63,
+    0x32, 0x31, 0x34, 0x32, 0x2e, 0x6c, 0x70, 0x63,
+    0x32, 0x31, 0x34, 0x34, 0x2e, 0x6c, 0x70, 0x63,
+    0x32, 0x31, 0x34, 0x36, 0x2e, 0x6c, 0x70, 0x63,
+    0x32, 0x31, 0x34, 0x38, 0x2e, 0x70, 0x64, 0x66,
+    0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x62, 0x20, 0x30,
+    0x78, 0x45, 0x30, 0x31, 0x46, 0x43, 0x30, 0x34,
+    0x30, 0x20, 0x30, 0x78, 0x30, 0x31, 0x0d, 0x0a,
+    0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x20, 0x66,
+    0x6c, 0x61, 0x73, 0x68, 0x20, 0x62, 0x61, 0x6e,
+    0x6b, 0x20, 0x6c, 0x70, 0x63, 0x32, 0x30, 0x30,
+    0x30, 0x20, 0x3c, 0x62, 0x61, 0x73, 0x65, 0x3e,
+    0x20, 0x3c, 0x73, 0x69, 0x7a, 0x65, 0x3e, 0x20,
+    0x30, 0x20, 0x30, 0x20, 0x3c, 0x74, 0x61, 0x72,
+    0x67, 0x65, 0x74, 0x23, 0x3e, 0x20, 0x3c, 0x76,
+    0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x3e, 0x20,
+    0x3c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x3e, 0x20,
+    0x5b, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x63, 0x68,
+    0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5d, 0x0d,
+    0x0a, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x62,
     0x61, 0x6e, 0x6b, 0x20, 0x6c, 0x70, 0x63, 0x32,
-    0x30, 0x30, 0x30, 0x20, 0x3c, 0x62, 0x61, 0x73,
-    0x65, 0x3e, 0x20, 0x3c, 0x73, 0x69, 0x7a, 0x65,
-    0x3e, 0x20, 0x30, 0x20, 0x30, 0x20, 0x3c, 0x74,
-    0x61, 0x72, 0x67, 0x65, 0x74, 0x23, 0x3e, 0x20,
-    0x3c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
-    0x3e, 0x0d, 0x0a, 0x66, 0x6c, 0x61, 0x73, 0x68,
-    0x20, 0x62, 0x61, 0x6e, 0x6b, 0x20, 0x6c, 0x70,
-    0x63, 0x32, 0x30, 0x30, 0x30, 0x20, 0x30, 0x78,
-    0x30, 0x20, 0x30, 0x78, 0x37, 0x64, 0x30, 0x30,
-    0x30, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x20,
-    0x6c, 0x70, 0x63, 0x32, 0x30, 0x30, 0x30, 0x5f,
-    0x76, 0x32, 0x20, 0x31, 0x34, 0x37, 0x36, 0x35,
-    0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x30, 0x30, 0x30, 0x20, 0x30, 0x78, 0x30, 0x20,
+    0x30, 0x78, 0x37, 0x64, 0x30, 0x30, 0x30, 0x20,
+    0x30, 0x20, 0x30, 0x20, 0x30, 0x20, 0x6c, 0x70,
+    0x63, 0x32, 0x30, 0x30, 0x30, 0x5f, 0x76, 0x32,
+    0x20, 0x31, 0x34, 0x37, 0x36, 0x35, 0x0d, 0x0a,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -55008,17 +56124,17 @@
     0x23, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69,
     0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
     0x65, 0x20, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x79,
-    0x73, 0x20, 0x28, 0x43, 0x59, 0x53, 0x43, 0x4f,
-    0x29, 0x20, 0x4c, 0x53, 0x4c, 0x55, 0x32, 0x20,
+    0x73, 0x20, 0x28, 0x43, 0x49, 0x53, 0x43, 0x4f,
+    0x29, 0x20, 0x4e, 0x53, 0x4c, 0x55, 0x32, 0x20,
     0x62, 0x6f, 0x61, 0x72, 0x64, 0x0d, 0x0a, 0x23,
     0x20, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61,
     0x6e, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x20,
     0x58, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x20, 0x49,
-    0x50, 0x58, 0x34, 0x32, 0x30, 0x20, 0x43, 0x50,
+    0x58, 0x50, 0x34, 0x32, 0x30, 0x20, 0x43, 0x50,
     0x55, 0x2e, 0x0d, 0x0a, 0x0d, 0x0a, 0x73, 0x6f,
     0x75, 0x72, 0x63, 0x65, 0x20, 0x5b, 0x66, 0x69,
     0x6e, 0x64, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65,
-    0x74, 0x2f, 0x69, 0x70, 0x78, 0x34, 0x32, 0x78,
+    0x74, 0x2f, 0x69, 0x78, 0x70, 0x34, 0x32, 0x78,
     0x2e, 0x63, 0x66, 0x67, 0x5d, 0x0d, 0x0a, 0x23,
     0x20, 0x54, 0x68, 0x65, 0x20, 0x5f, 0x54, 0x41,
     0x52, 0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45,
@@ -55041,6 +56157,146 @@
     0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x20, 0x30,
     0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x6f, 0x6d,
+    0x61, 0x70, 0x33, 0x35, 0x33, 0x30, 0x2e, 0x63,
+    0x66, 0x67, 0x20, 0x2d, 0x20, 0x61, 0x73, 0x20,
+    0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x6f, 0x6e,
+    0x20, 0x74, 0x68, 0x65, 0x20, 0x42, 0x45, 0x41,
+    0x47, 0x4c, 0x45, 0x42, 0x4f, 0x41, 0x52, 0x44,
+    0x0d, 0x0a, 0x23, 0x20, 0x20, 0x41, 0x73, 0x73,
+    0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
+    0x69, 0x73, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73,
+    0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
+    0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x6c,
+    0x20, 0x4f, 0x4d, 0x41, 0x50, 0x33, 0x35, 0x33,
+    0x30, 0x20, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x54,
+    0x49, 0x20, 0x4f, 0x4d, 0x41, 0x50, 0x33, 0x20,
+    0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
+    0x72, 0x20, 0x2d, 0x20, 0x68, 0x74, 0x74, 0x70,
+    0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x74,
+    0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x20, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b,
+    0x69, 0x6e, 0x66, 0x6f, 0x20, 0x65, 0x78, 0x69,
+    0x73, 0x74, 0x73, 0x20, 0x43, 0x48, 0x49, 0x50,
+    0x4e, 0x41, 0x4d, 0x45, 0x5d, 0x20, 0x7d, 0x20,
+    0x7b, 0x09, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73,
+    0x65, 0x74, 0x20, 0x20, 0x5f, 0x43, 0x48, 0x49,
+    0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x24, 0x43,
+    0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20,
+    0x20, 0x20, 0x20, 0x0d, 0x0a, 0x7d, 0x20, 0x65,
+    0x6c, 0x73, 0x65, 0x20, 0x7b, 0x09, 0x20, 0x0d,
+    0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20,
+    0x20, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
+    0x4d, 0x45, 0x20, 0x6f, 0x6d, 0x61, 0x70, 0x33,
+    0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x69,
+    0x66, 0x20, 0x7b, 0x20, 0x5b, 0x69, 0x6e, 0x66,
+    0x6f, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
+    0x20, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x5d,
+    0x20, 0x7d, 0x20, 0x7b, 0x09, 0x0d, 0x0a, 0x20,
+    0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x20, 0x5f,
+    0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x20, 0x24,
+    0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x20, 0x20,
+    0x20, 0x20, 0x0d, 0x0a, 0x7d, 0x20, 0x65, 0x6c,
+    0x73, 0x65, 0x20, 0x7b, 0x09, 0x20, 0x0d, 0x0a,
+    0x20, 0x20, 0x23, 0x20, 0x74, 0x68, 0x69, 0x73,
+    0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
+    0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x6c,
+    0x69, 0x74, 0x74, 0x6c, 0x65, 0x20, 0x65, 0x6e,
+    0x64, 0x69, 0x61, 0x6e, 0x6e, 0x65, 0x73, 0x73,
+    0x0d, 0x0a, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20,
+    0x20, 0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e,
+    0x20, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x0d,
+    0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x66,
+    0x20, 0x7b, 0x20, 0x5b, 0x69, 0x6e, 0x66, 0x6f,
+    0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x20,
+    0x43, 0x50, 0x55, 0x54, 0x41, 0x50, 0x49, 0x44,
+    0x20, 0x5d, 0x20, 0x7d, 0x20, 0x7b, 0x0d, 0x0a,
+    0x20, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x5f,
+    0x43, 0x50, 0x55, 0x54, 0x41, 0x50, 0x49, 0x44,
+    0x20, 0x24, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50,
+    0x49, 0x44, 0x0d, 0x0a, 0x7d, 0x20, 0x65, 0x6c,
+    0x73, 0x65, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20,
+    0x23, 0x20, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x20,
+    0x61, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72,
+    0x20, 0x74, 0x69, 0x6c, 0x6c, 0x20, 0x77, 0x65,
+    0x20, 0x67, 0x65, 0x74, 0x20, 0x61, 0x20, 0x67,
+    0x6f, 0x6f, 0x64, 0x20, 0x6e, 0x75, 0x6d, 0x62,
+    0x65, 0x72, 0x0d, 0x0a, 0x20, 0x20, 0x73, 0x65,
+    0x74, 0x20, 0x5f, 0x43, 0x50, 0x55, 0x54, 0x41,
+    0x50, 0x49, 0x44, 0x20, 0x30, 0x78, 0x30, 0x42,
+    0x36, 0x44, 0x36, 0x30, 0x32, 0x46, 0x0d, 0x0a,
+    0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x6a, 0x74,
+    0x61, 0x67, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x20,
+    0x63, 0x68, 0x61, 0x69, 0x6e, 0x0d, 0x0a, 0x6a,
+    0x74, 0x61, 0x67, 0x20, 0x6e, 0x65, 0x77, 0x74,
+    0x61, 0x70, 0x20, 0x24, 0x5f, 0x43, 0x48, 0x49,
+    0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x63, 0x70,
+    0x75, 0x20, 0x2d, 0x69, 0x72, 0x6c, 0x65, 0x6e,
+    0x20, 0x34, 0x20, 0x2d, 0x69, 0x72, 0x63, 0x61,
+    0x70, 0x74, 0x75, 0x72, 0x65, 0x20, 0x30, 0x78,
+    0x31, 0x20, 0x2d, 0x69, 0x72, 0x6d, 0x61, 0x73,
+    0x6b, 0x20, 0x30, 0x78, 0x30, 0x20, 0x2d, 0x65,
+    0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x2d,
+    0x69, 0x64, 0x20, 0x24, 0x5f, 0x43, 0x50, 0x55,
+    0x54, 0x41, 0x50, 0x49, 0x44, 0x20, 0x2d, 0x64,
+    0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x0d, 0x0a,
+    0x6a, 0x74, 0x61, 0x67, 0x20, 0x6e, 0x65, 0x77,
+    0x74, 0x61, 0x70, 0x20, 0x24, 0x5f, 0x43, 0x48,
+    0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x6a,
+    0x72, 0x63, 0x20, 0x2d, 0x69, 0x72, 0x6c, 0x65,
+    0x6e, 0x20, 0x36, 0x20, 0x2d, 0x69, 0x72, 0x63,
+    0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x20, 0x30,
+    0x78, 0x31, 0x20, 0x2d, 0x69, 0x72, 0x6d, 0x61,
+    0x73, 0x6b, 0x20, 0x30, 0x78, 0x66, 0x20, 0x2d,
+    0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
+    0x2d, 0x69, 0x64, 0x20, 0x30, 0x78, 0x30, 0x62,
+    0x37, 0x61, 0x65, 0x30, 0x32, 0x66, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x20, 0x63,
+    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
+    0x20, 0x24, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e,
+    0x41, 0x4d, 0x45, 0x2e, 0x63, 0x70, 0x75, 0x20,
+    0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x74,
+    0x61, 0x70, 0x2d, 0x65, 0x6e, 0x61, 0x62, 0x6c,
+    0x65, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x70, 0x75,
+    0x74, 0x73, 0x20, 0x22, 0x45, 0x6e, 0x61, 0x62,
+    0x6c, 0x69, 0x6e, 0x67, 0x20, 0x43, 0x6f, 0x72,
+    0x74, 0x65, 0x78, 0x2d, 0x41, 0x38, 0x20, 0x40,
+    0x20, 0x4f, 0x4d, 0x41, 0x50, 0x33, 0x22, 0x0d,
+    0x0a, 0x09, 0x69, 0x72, 0x73, 0x63, 0x61, 0x6e,
+    0x20, 0x6f, 0x6d, 0x61, 0x70, 0x33, 0x2e, 0x6a,
+    0x72, 0x63, 0x20, 0x37, 0x20, 0x2d, 0x65, 0x6e,
+    0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x49,
+    0x52, 0x50, 0x41, 0x55, 0x53, 0x45, 0x0d, 0x0a,
+    0x09, 0x64, 0x72, 0x73, 0x63, 0x61, 0x6e, 0x20,
+    0x6f, 0x6d, 0x61, 0x70, 0x33, 0x2e, 0x6a, 0x72,
+    0x63, 0x20, 0x38, 0x20, 0x30, 0x78, 0x38, 0x39,
+    0x20, 0x2d, 0x65, 0x6e, 0x64, 0x73, 0x74, 0x61,
+    0x74, 0x65, 0x20, 0x44, 0x52, 0x50, 0x41, 0x55,
+    0x53, 0x45, 0x0d, 0x0a, 0x09, 0x69, 0x72, 0x73,
+    0x63, 0x61, 0x6e, 0x20, 0x6f, 0x6d, 0x61, 0x70,
+    0x33, 0x2e, 0x6a, 0x72, 0x63, 0x20, 0x32, 0x20,
+    0x2d, 0x65, 0x6e, 0x64, 0x73, 0x74, 0x61, 0x74,
+    0x65, 0x20, 0x49, 0x52, 0x50, 0x41, 0x55, 0x53,
+    0x45, 0x0d, 0x0a, 0x09, 0x64, 0x72, 0x73, 0x63,
+    0x61, 0x6e, 0x20, 0x6f, 0x6d, 0x61, 0x70, 0x33,
+    0x2e, 0x6a, 0x72, 0x63, 0x20, 0x33, 0x32, 0x20,
+    0x30, 0x78, 0x61, 0x33, 0x30, 0x30, 0x32, 0x31,
+    0x30, 0x38, 0x20, 0x20, 0x2d, 0x65, 0x6e, 0x64,
+    0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x49, 0x44,
+    0x4c, 0x45, 0x0d, 0x0a, 0x09, 0x69, 0x72, 0x73,
+    0x63, 0x61, 0x6e, 0x20, 0x6f, 0x6d, 0x61, 0x70,
+    0x33, 0x2e, 0x6a, 0x72, 0x63, 0x20, 0x30, 0x78,
+    0x33, 0x46, 0x20, 0x2d, 0x65, 0x6e, 0x64, 0x73,
+    0x74, 0x61, 0x74, 0x65, 0x20, 0x49, 0x44, 0x4c,
+    0x45, 0x0d, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x74,
+    0x65, 0x73, 0x74, 0x20, 0x31, 0x30, 0x0d, 0x0a,
+    0x09, 0x70, 0x75, 0x74, 0x73, 0x20, 0x22, 0x43,
+    0x6f, 0x72, 0x74, 0x65, 0x78, 0x2d, 0x41, 0x38,
+    0x20, 0x40, 0x20, 0x4f, 0x4d, 0x41, 0x50, 0x33,
+    0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
+    0x22, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x54, 0x49, 0x20, 0x4f, 0x4d, 0x41, 0x50,
     0x35, 0x39, 0x31, 0x32, 0x20, 0x64, 0x75, 0x61,
     0x6c, 0x20, 0x63, 0x6f, 0x72, 0x65, 0x20, 0x70,
@@ -55214,33 +56470,33 @@
     0x20, 0x61, 0x73, 0x20, 0x77, 0x6f, 0x72, 0x6b,
     0x69, 0x6e, 0x67, 0x20, 0x61, 0x72, 0x65, 0x61,
     0x0d, 0x0a, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47,
-    0x45, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x63, 0x6f,
-    0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x20,
-    0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72,
-    0x65, 0x61, 0x2d, 0x76, 0x69, 0x72, 0x74, 0x20,
-    0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d,
-    0x61, 0x72, 0x65, 0x61, 0x2d, 0x70, 0x68, 0x79,
-    0x73, 0x20, 0x30, 0x78, 0x32, 0x30, 0x30, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x20, 0x2d, 0x77, 0x6f,
-    0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d,
-    0x73, 0x69, 0x7a, 0x65, 0x20, 0x30, 0x78, 0x33,
-    0x65, 0x38, 0x30, 0x30, 0x20, 0x2d, 0x77, 0x6f,
-    0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d,
-    0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x20, 0x30,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x66, 0x6c, 0x61,
-    0x73, 0x68, 0x20, 0x62, 0x61, 0x6e, 0x6b, 0x20,
-    0x3c, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x3e,
-    0x20, 0x3c, 0x62, 0x61, 0x73, 0x65, 0x3e, 0x20,
-    0x3c, 0x73, 0x69, 0x7a, 0x65, 0x3e, 0x20, 0x3c,
-    0x63, 0x68, 0x69, 0x70, 0x5f, 0x77, 0x69, 0x64,
-    0x74, 0x68, 0x3e, 0x20, 0x3c, 0x62, 0x75, 0x73,
-    0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3e, 0x0d,
-    0x0a, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x62,
-    0x61, 0x6e, 0x6b, 0x20, 0x63, 0x66, 0x69, 0x20,
-    0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
-    0x30, 0x30, 0x20, 0x30, 0x78, 0x31, 0x30, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x20, 0x32, 0x20, 0x32,
-    0x20, 0x30, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00,
+    0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x63,
+    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
+    0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61,
+    0x72, 0x65, 0x61, 0x2d, 0x76, 0x69, 0x72, 0x74,
+    0x20, 0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b,
+    0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d, 0x70, 0x68,
+    0x79, 0x73, 0x20, 0x30, 0x78, 0x32, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x2d, 0x77,
+    0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61,
+    0x2d, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x30, 0x78,
+    0x33, 0x65, 0x38, 0x30, 0x30, 0x20, 0x2d, 0x77,
+    0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61,
+    0x2d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x20,
+    0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x66, 0x6c,
+    0x61, 0x73, 0x68, 0x20, 0x62, 0x61, 0x6e, 0x6b,
+    0x20, 0x3c, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
+    0x3e, 0x20, 0x3c, 0x62, 0x61, 0x73, 0x65, 0x3e,
+    0x20, 0x3c, 0x73, 0x69, 0x7a, 0x65, 0x3e, 0x20,
+    0x3c, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x77, 0x69,
+    0x64, 0x74, 0x68, 0x3e, 0x20, 0x3c, 0x62, 0x75,
+    0x73, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3e,
+    0x0d, 0x0a, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x20,
+    0x62, 0x61, 0x6e, 0x6b, 0x20, 0x63, 0x66, 0x69,
+    0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x20, 0x30, 0x78, 0x31, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x32, 0x20,
+    0x32, 0x20, 0x30, 0x0d, 0x0a, 0x00, 0x00, 0x00,
     0x0d, 0x0a, 0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b,
     0x69, 0x6e, 0x66, 0x6f, 0x20, 0x65, 0x78, 0x69,
     0x73, 0x74, 0x73, 0x20, 0x43, 0x48, 0x49, 0x50,
@@ -55871,72 +57127,172 @@
     0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x5d,
     0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x20, 0x6e,
     0x65, 0x77, 0x74, 0x61, 0x70, 0x20, 0x24, 0x5f,
-    0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41,
-    0x4d, 0x45, 0x20, 0x2d, 0x69, 0x72, 0x6c, 0x65,
-    0x6e, 0x20, 0x37, 0x20, 0x2d, 0x69, 0x72, 0x63,
-    0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x20, 0x30,
-    0x78, 0x31, 0x20, 0x2d, 0x69, 0x72, 0x6d, 0x61,
-    0x73, 0x6b, 0x20, 0x30, 0x78, 0x37, 0x66, 0x20,
-    0x2d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
-    0x64, 0x2d, 0x69, 0x64, 0x20, 0x24, 0x5f, 0x43,
+    0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45,
+    0x20, 0x63, 0x70, 0x75, 0x20, 0x2d, 0x69, 0x72,
+    0x6c, 0x65, 0x6e, 0x20, 0x37, 0x20, 0x2d, 0x69,
+    0x72, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
+    0x20, 0x30, 0x78, 0x31, 0x20, 0x2d, 0x69, 0x72,
+    0x6d, 0x61, 0x73, 0x6b, 0x20, 0x30, 0x78, 0x37,
+    0x66, 0x20, 0x2d, 0x65, 0x78, 0x70, 0x65, 0x63,
+    0x74, 0x65, 0x64, 0x2d, 0x69, 0x64, 0x20, 0x24,
+    0x5f, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50, 0x49,
+    0x44, 0x0d, 0x0a, 0x0d, 0x0a, 0x74, 0x61, 0x72,
+    0x67, 0x65, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61,
+    0x74, 0x65, 0x20, 0x24, 0x5f, 0x54, 0x41, 0x52,
+    0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20,
+    0x78, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x20, 0x2d,
+    0x65, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x20, 0x24,
+    0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x20,
+    0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2d, 0x70,
+    0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20,
+    0x24, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
+    0x4e, 0x41, 0x4d, 0x45, 0x20, 0x2d, 0x76, 0x61,
+    0x72, 0x69, 0x61, 0x6e, 0x74, 0x20, 0x70, 0x78,
+    0x61, 0x32, 0x37, 0x78, 0x0d, 0x0a, 0x23, 0x20,
+    0x6d, 0x61, 0x70, 0x73, 0x20, 0x74, 0x6f, 0x20,
+    0x50, 0x58, 0x41, 0x20, 0x69, 0x6e, 0x74, 0x65,
+    0x72, 0x6e, 0x61, 0x6c, 0x20, 0x52, 0x41, 0x4d,
+    0x2e, 0x20, 0x49, 0x66, 0x20, 0x79, 0x6f, 0x75,
+    0x20, 0x61, 0x72, 0x65, 0x20, 0x75, 0x73, 0x69,
+    0x6e, 0x67, 0x20, 0x61, 0x20, 0x50, 0x58, 0x41,
+    0x32, 0x35, 0x35, 0x0d, 0x0a, 0x23, 0x20, 0x79,
+    0x6f, 0x75, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20,
+    0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
+    0x7a, 0x65, 0x20, 0x53, 0x44, 0x52, 0x41, 0x4d,
+    0x20, 0x6f, 0x72, 0x20, 0x6c, 0x65, 0x61, 0x76,
+    0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6f,
+    0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
+    0x66, 0x0d, 0x0a, 0x24, 0x5f, 0x54, 0x41, 0x52,
+    0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20,
+    0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
+    0x65, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d,
+    0x61, 0x72, 0x65, 0x61, 0x2d, 0x76, 0x69, 0x72,
+    0x74, 0x20, 0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72,
+    0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d, 0x70,
+    0x68, 0x79, 0x73, 0x20, 0x30, 0x78, 0x35, 0x63,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x2d,
+    0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65,
+    0x61, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x30,
+    0x78, 0x31, 0x30, 0x30, 0x30, 0x30, 0x20, 0x2d,
+    0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65,
+    0x61, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
+    0x20, 0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x66,
+    0x6c, 0x61, 0x73, 0x68, 0x20, 0x62, 0x61, 0x6e,
+    0x6b, 0x20, 0x3c, 0x64, 0x72, 0x69, 0x76, 0x65,
+    0x72, 0x3e, 0x20, 0x3c, 0x62, 0x61, 0x73, 0x65,
+    0x3e, 0x20, 0x3c, 0x73, 0x69, 0x7a, 0x65, 0x3e,
+    0x20, 0x3c, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x77,
+    0x69, 0x64, 0x74, 0x68, 0x3e, 0x20, 0x3c, 0x62,
+    0x75, 0x73, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68,
+    0x3e, 0x0d, 0x0a, 0x23, 0x20, 0x77, 0x6f, 0x72,
+    0x6b, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x50,
+    0x33, 0x30, 0x20, 0x66, 0x6c, 0x61, 0x73, 0x68,
+    0x0d, 0x0a, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x20,
+    0x62, 0x61, 0x6e, 0x6b, 0x20, 0x63, 0x66, 0x69,
+    0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x20, 0x30, 0x78, 0x31, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x32, 0x20,
+    0x34, 0x20, 0x30, 0x0d, 0x0a, 0x00, 0x00, 0x00,
+    0x23, 0x78, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x20,
+    0x69, 0x78, 0x70, 0x34, 0x32, 0x78, 0x20, 0x43,
+    0x50, 0x55, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b, 0x69, 0x6e,
+    0x66, 0x6f, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74,
+    0x73, 0x20, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
+    0x4d, 0x45, 0x5d, 0x20, 0x7d, 0x20, 0x7b, 0x09,
+    0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74,
+    0x20, 0x20, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e,
+    0x41, 0x4d, 0x45, 0x20, 0x24, 0x43, 0x48, 0x49,
+    0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x20, 0x20,
+    0x20, 0x0d, 0x0a, 0x7d, 0x20, 0x65, 0x6c, 0x73,
+    0x65, 0x20, 0x7b, 0x09, 0x20, 0x0d, 0x0a, 0x20,
+    0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x20, 0x5f,
+    0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45,
+    0x20, 0x69, 0x70, 0x78, 0x34, 0x32, 0x78, 0x0d,
+    0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x66,
+    0x20, 0x7b, 0x20, 0x5b, 0x69, 0x6e, 0x66, 0x6f,
+    0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x20,
+    0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x5d, 0x20,
+    0x7d, 0x20, 0x7b, 0x09, 0x0d, 0x0a, 0x20, 0x20,
+    0x20, 0x73, 0x65, 0x74, 0x20, 0x20, 0x5f, 0x45,
+    0x4e, 0x44, 0x49, 0x41, 0x4e, 0x20, 0x24, 0x45,
+    0x4e, 0x44, 0x49, 0x41, 0x4e, 0x20, 0x20, 0x20,
+    0x20, 0x0d, 0x0a, 0x7d, 0x20, 0x65, 0x6c, 0x73,
+    0x65, 0x20, 0x7b, 0x09, 0x20, 0x0d, 0x0a, 0x20,
+    0x20, 0x23, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
+    0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
+    0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x62, 0x69,
+    0x67, 0x65, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x0d,
+    0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20,
+    0x20, 0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e,
+    0x20, 0x62, 0x69, 0x67, 0x0d, 0x0a, 0x7d, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x69, 0x66, 0x20, 0x7b, 0x20,
+    0x5b, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x65, 0x78,
+    0x69, 0x73, 0x74, 0x73, 0x20, 0x43, 0x50, 0x55,
+    0x54, 0x41, 0x50, 0x49, 0x44, 0x20, 0x5d, 0x20,
+    0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20,
+    0x73, 0x65, 0x74, 0x20, 0x5f, 0x43, 0x50, 0x55,
+    0x54, 0x41, 0x50, 0x49, 0x44, 0x20, 0x24, 0x43,
     0x50, 0x55, 0x54, 0x41, 0x50, 0x49, 0x44, 0x0d,
-    0x0a, 0x0d, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
-    0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
-    0x20, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
-    0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x78, 0x73,
-    0x63, 0x61, 0x6c, 0x65, 0x20, 0x2d, 0x65, 0x6e,
-    0x64, 0x69, 0x61, 0x6e, 0x20, 0x24, 0x5f, 0x45,
-    0x4e, 0x44, 0x49, 0x41, 0x4e, 0x20, 0x2d, 0x63,
-    0x68, 0x61, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73,
-    0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x24, 0x5f,
-    0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41,
-    0x4d, 0x45, 0x20, 0x2d, 0x76, 0x61, 0x72, 0x69,
-    0x61, 0x6e, 0x74, 0x20, 0x70, 0x78, 0x61, 0x32,
-    0x37, 0x78, 0x0d, 0x0a, 0x23, 0x20, 0x6d, 0x61,
-    0x70, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x50, 0x58,
-    0x41, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
-    0x61, 0x6c, 0x20, 0x52, 0x41, 0x4d, 0x2e, 0x20,
-    0x49, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x61,
-    0x72, 0x65, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67,
-    0x20, 0x61, 0x20, 0x50, 0x58, 0x41, 0x32, 0x35,
-    0x35, 0x0d, 0x0a, 0x23, 0x20, 0x79, 0x6f, 0x75,
-    0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x69, 0x6e,
-    0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
-    0x20, 0x53, 0x44, 0x52, 0x41, 0x4d, 0x20, 0x6f,
-    0x72, 0x20, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x20,
-    0x74, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x70, 0x74,
-    0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x66, 0x0d,
-    0x0a, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
-    0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x63, 0x6f,
-    0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x20,
-    0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72,
-    0x65, 0x61, 0x2d, 0x76, 0x69, 0x72, 0x74, 0x20,
-    0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d,
-    0x61, 0x72, 0x65, 0x61, 0x2d, 0x70, 0x68, 0x79,
-    0x73, 0x20, 0x30, 0x78, 0x35, 0x63, 0x30, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x20, 0x2d, 0x77, 0x6f,
-    0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d,
-    0x73, 0x69, 0x7a, 0x65, 0x20, 0x30, 0x78, 0x31,
-    0x30, 0x30, 0x30, 0x30, 0x20, 0x2d, 0x77, 0x6f,
-    0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d,
-    0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x20, 0x30,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x66, 0x6c, 0x61,
-    0x73, 0x68, 0x20, 0x62, 0x61, 0x6e, 0x6b, 0x20,
-    0x3c, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x3e,
-    0x20, 0x3c, 0x62, 0x61, 0x73, 0x65, 0x3e, 0x20,
-    0x3c, 0x73, 0x69, 0x7a, 0x65, 0x3e, 0x20, 0x3c,
-    0x63, 0x68, 0x69, 0x70, 0x5f, 0x77, 0x69, 0x64,
-    0x74, 0x68, 0x3e, 0x20, 0x3c, 0x62, 0x75, 0x73,
-    0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3e, 0x0d,
-    0x0a, 0x23, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x73,
-    0x20, 0x66, 0x6f, 0x72, 0x20, 0x50, 0x33, 0x30,
-    0x20, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x0d, 0x0a,
-    0x66, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x62, 0x61,
-    0x6e, 0x6b, 0x20, 0x63, 0x66, 0x69, 0x20, 0x30,
-    0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
-    0x30, 0x20, 0x30, 0x78, 0x31, 0x30, 0x30, 0x30,
-    0x30, 0x30, 0x30, 0x20, 0x32, 0x20, 0x34, 0x20,
-    0x30, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x0a, 0x7d, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20,
+    0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x23, 0x20, 0x66,
+    0x6f, 0x72, 0x63, 0x65, 0x20, 0x61, 0x6e, 0x20,
+    0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x74, 0x69,
+    0x6c, 0x6c, 0x20, 0x77, 0x65, 0x20, 0x67, 0x65,
+    0x74, 0x20, 0x61, 0x20, 0x67, 0x6f, 0x6f, 0x64,
+    0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x0d,
+    0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20,
+    0x5f, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50, 0x49,
+    0x44, 0x20, 0x30, 0x78, 0x66, 0x66, 0x66, 0x66,
+    0x66, 0x66, 0x66, 0x66, 0x0d, 0x0a, 0x7d, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x23, 0x75, 0x73, 0x65, 0x20,
+    0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64,
+    0x20, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65,
+    0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x20, 0x6f,
+    0x72, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
+    0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63,
+    0x61, 0x6e, 0x3f, 0x74, 0x20, 0x73, 0x65, 0x74,
+    0x20, 0x54, 0x52, 0x53, 0x54, 0x2f, 0x53, 0x52,
+    0x53, 0x54, 0x20, 0x73, 0x65, 0x70, 0x61, 0x72,
+    0x61, 0x74, 0x65, 0x6c, 0x79, 0x0d, 0x0a, 0x72,
+    0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
+    0x66, 0x69, 0x67, 0x20, 0x73, 0x72, 0x73, 0x74,
+    0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x73, 0x72,
+    0x73, 0x74, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x73,
+    0x5f, 0x74, 0x72, 0x73, 0x74, 0x0d, 0x0a, 0x23,
+    0x6a, 0x74, 0x61, 0x67, 0x20, 0x73, 0x63, 0x61,
+    0x6e, 0x20, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x20,
+    0x6e, 0x65, 0x77, 0x74, 0x61, 0x70, 0x20, 0x24,
+    0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d,
+    0x45, 0x20, 0x63, 0x70, 0x75, 0x20, 0x2d, 0x69,
+    0x72, 0x6c, 0x65, 0x6e, 0x20, 0x37, 0x20, 0x2d,
+    0x69, 0x72, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
+    0x65, 0x20, 0x30, 0x78, 0x31, 0x20, 0x2d, 0x69,
+    0x72, 0x6d, 0x61, 0x73, 0x6b, 0x20, 0x30, 0x78,
+    0x37, 0x66, 0x20, 0x2d, 0x65, 0x78, 0x70, 0x65,
+    0x63, 0x74, 0x65, 0x64, 0x2d, 0x69, 0x64, 0x20,
+    0x24, 0x5f, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50,
+    0x49, 0x44, 0x0d, 0x0a, 0x0d, 0x0a, 0x73, 0x65,
+    0x74, 0x20, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
+    0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x5b, 0x66,
+    0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x22, 0x25,
+    0x73, 0x2e, 0x63, 0x70, 0x75, 0x22, 0x20, 0x24,
+    0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d,
+    0x45, 0x5d, 0x0d, 0x0a, 0x74, 0x61, 0x72, 0x67,
+    0x65, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
+    0x65, 0x20, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47,
+    0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x78,
+    0x73, 0x63, 0x61, 0x6c, 0x65, 0x20, 0x2d, 0x65,
+    0x6e, 0x64, 0x69, 0x61, 0x6e, 0x20, 0x24, 0x5f,
+    0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x20, 0x2d,
+    0x63, 0x68, 0x61, 0x69, 0x6e, 0x2d, 0x70, 0x6f,
+    0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x24,
+    0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x4e,
+    0x41, 0x4d, 0x45, 0x20, 0x2d, 0x76, 0x61, 0x72,
+    0x69, 0x61, 0x6e, 0x74, 0x20, 0x69, 0x70, 0x78,
+    0x50, 0x34, 0x32, 0x78, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x0d, 0x0a, 0x23, 0x20, 0x41, 0x54, 0x4d, 0x45,
     0x4c, 0x20, 0x73, 0x61, 0x6d, 0x37, 0x73, 0x65,
     0x35, 0x31, 0x32, 0x20, 0x0d, 0x0a, 0x23, 0x20,
@@ -57252,9 +58608,9 @@
     0x4d, 0x45, 0x20, 0x63, 0x70, 0x75, 0x20, 0x2d,
     0x69, 0x72, 0x6c, 0x65, 0x6e, 0x20, 0x34, 0x20,
     0x2d, 0x69, 0x72, 0x63, 0x61, 0x70, 0x74, 0x75,
-    0x72, 0x65, 0x20, 0x30, 0x78, 0x66, 0x20, 0x2d,
+    0x72, 0x65, 0x20, 0x30, 0x78, 0x31, 0x20, 0x2d,
     0x69, 0x72, 0x6d, 0x61, 0x73, 0x6b, 0x20, 0x30,
-    0x78, 0x65, 0x20, 0x2d, 0x65, 0x78, 0x70, 0x65,
+    0x78, 0x66, 0x20, 0x2d, 0x65, 0x78, 0x70, 0x65,
     0x63, 0x74, 0x65, 0x64, 0x2d, 0x69, 0x64, 0x20,
     0x24, 0x5f, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50,
     0x49, 0x44, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x20,
@@ -57273,68 +58629,68 @@
     0x6e, 0x20, 0x35, 0x20, 0x2d, 0x69, 0x72, 0x63,
     0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x20, 0x30,
     0x78, 0x31, 0x20, 0x2d, 0x69, 0x72, 0x6d, 0x61,
-    0x73, 0x6b, 0x20, 0x30, 0x78, 0x31, 0x65, 0x20,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x20, 0x63, 0x6f,
-    0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x20,
-    0x73, 0x74, 0x72, 0x37, 0x35, 0x30, 0x20, 0x63,
-    0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
-    0x20, 0x74, 0x6f, 0x20, 0x6a, 0x74, 0x61, 0x67,
-    0x20, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x0d, 0x0a,
-    0x6a, 0x74, 0x61, 0x67, 0x20, 0x6e, 0x65, 0x77,
-    0x74, 0x61, 0x70, 0x20, 0x24, 0x5f, 0x43, 0x48,
-    0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x75,
-    0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x2d,
-    0x69, 0x72, 0x6c, 0x65, 0x6e, 0x20, 0x34, 0x20,
-    0x2d, 0x69, 0x72, 0x63, 0x61, 0x70, 0x74, 0x75,
-    0x72, 0x65, 0x20, 0x30, 0x78, 0x31, 0x20, 0x2d,
-    0x69, 0x72, 0x6d, 0x61, 0x73, 0x6b, 0x20, 0x30,
-    0x78, 0x30, 0x66, 0x0d, 0x0a, 0x0d, 0x0a, 0x73,
-    0x65, 0x74, 0x20, 0x5f, 0x54, 0x41, 0x52, 0x47,
-    0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x5b,
-    0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x22,
-    0x25, 0x73, 0x2e, 0x63, 0x70, 0x75, 0x22, 0x20,
-    0x24, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
-    0x4d, 0x45, 0x5d, 0x0d, 0x0a, 0x74, 0x61, 0x72,
-    0x67, 0x65, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61,
-    0x74, 0x65, 0x20, 0x24, 0x5f, 0x54, 0x41, 0x52,
-    0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20,
-    0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x5f, 0x6d,
-    0x33, 0x20, 0x2d, 0x65, 0x6e, 0x64, 0x69, 0x61,
-    0x6e, 0x20, 0x24, 0x5f, 0x45, 0x4e, 0x44, 0x49,
-    0x41, 0x4e, 0x20, 0x2d, 0x63, 0x68, 0x61, 0x69,
-    0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
-    0x6f, 0x6e, 0x20, 0x24, 0x5f, 0x54, 0x41, 0x52,
-    0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x0d,
-    0x0a, 0x0d, 0x0a, 0x24, 0x5f, 0x54, 0x41, 0x52,
-    0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20,
-    0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
-    0x65, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d,
-    0x61, 0x72, 0x65, 0x61, 0x2d, 0x76, 0x69, 0x72,
-    0x74, 0x20, 0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72,
-    0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d, 0x70,
-    0x68, 0x79, 0x73, 0x20, 0x30, 0x78, 0x32, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x2d,
-    0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65,
-    0x61, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x31,
-    0x36, 0x33, 0x38, 0x34, 0x20, 0x2d, 0x77, 0x6f,
-    0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d,
-    0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x20, 0x30,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x66,
-    0x6c, 0x61, 0x73, 0x68, 0x20, 0x62, 0x61, 0x6e,
-    0x6b, 0x20, 0x73, 0x74, 0x6d, 0x33, 0x32, 0x78,
-    0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30,
-    0x20, 0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x20,
-    0x46, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65,
-    0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
-    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f,
-    0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
-    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
-    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x69, 0x6c,
-    0x65, 0x73, 0x2c, 0x20, 0x74, 0x61, 0x6b, 0x65,
-    0x20, 0x61, 0x20, 0x6c, 0x6f, 0x6f, 0x6b, 0x20,
-    0x61, 0x74, 0x3a, 0x0d, 0x0a, 0x23, 0x20, 0x6f,
-    0x70, 0x65, 0x6e, 0x6f, 0x63, 0x64, 0x2e, 0x74,
-    0x65, 0x78, 0x69, 0x0d, 0x0a, 0x00, 0x00, 0x00,
+    0x73, 0x6b, 0x20, 0x30, 0x78, 0x31, 0x20, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x23, 0x20, 0x63, 0x6f, 0x6e,
+    0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x20, 0x73,
+    0x74, 0x72, 0x37, 0x35, 0x30, 0x20, 0x63, 0x6f,
+    0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20,
+    0x74, 0x6f, 0x20, 0x6a, 0x74, 0x61, 0x67, 0x20,
+    0x63, 0x68, 0x61, 0x69, 0x6e, 0x0d, 0x0a, 0x6a,
+    0x74, 0x61, 0x67, 0x20, 0x6e, 0x65, 0x77, 0x74,
+    0x61, 0x70, 0x20, 0x24, 0x5f, 0x43, 0x48, 0x49,
+    0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x75, 0x6e,
+    0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x2d, 0x69,
+    0x72, 0x6c, 0x65, 0x6e, 0x20, 0x34, 0x20, 0x2d,
+    0x69, 0x72, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
+    0x65, 0x20, 0x30, 0x78, 0x31, 0x20, 0x2d, 0x69,
+    0x72, 0x6d, 0x61, 0x73, 0x6b, 0x20, 0x30, 0x78,
+    0x30, 0x66, 0x0d, 0x0a, 0x0d, 0x0a, 0x73, 0x65,
+    0x74, 0x20, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
+    0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x5b, 0x66,
+    0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x22, 0x25,
+    0x73, 0x2e, 0x63, 0x70, 0x75, 0x22, 0x20, 0x24,
+    0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d,
+    0x45, 0x5d, 0x0d, 0x0a, 0x74, 0x61, 0x72, 0x67,
+    0x65, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
+    0x65, 0x20, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47,
+    0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x63,
+    0x6f, 0x72, 0x74, 0x65, 0x78, 0x5f, 0x6d, 0x33,
+    0x20, 0x2d, 0x65, 0x6e, 0x64, 0x69, 0x61, 0x6e,
+    0x20, 0x24, 0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41,
+    0x4e, 0x20, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e,
+    0x2d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
+    0x6e, 0x20, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47,
+    0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47,
+    0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x63,
+    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
+    0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61,
+    0x72, 0x65, 0x61, 0x2d, 0x76, 0x69, 0x72, 0x74,
+    0x20, 0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b,
+    0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d, 0x70, 0x68,
+    0x79, 0x73, 0x20, 0x30, 0x78, 0x32, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x2d, 0x77,
+    0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61,
+    0x2d, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x31, 0x36,
+    0x33, 0x38, 0x34, 0x20, 0x2d, 0x77, 0x6f, 0x72,
+    0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d, 0x62,
+    0x61, 0x63, 0x6b, 0x75, 0x70, 0x20, 0x30, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x66, 0x6c,
+    0x61, 0x73, 0x68, 0x20, 0x62, 0x61, 0x6e, 0x6b,
+    0x20, 0x73, 0x74, 0x6d, 0x33, 0x32, 0x78, 0x20,
+    0x30, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x20,
+    0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x20, 0x46,
+    0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20,
+    0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
+    0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75,
+    0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
+    0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
+    0x69, 0x6f, 0x6e, 0x20, 0x66, 0x69, 0x6c, 0x65,
+    0x73, 0x2c, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x20,
+    0x61, 0x20, 0x6c, 0x6f, 0x6f, 0x6b, 0x20, 0x61,
+    0x74, 0x3a, 0x0d, 0x0a, 0x23, 0x20, 0x6f, 0x70,
+    0x65, 0x6e, 0x6f, 0x63, 0x64, 0x2e, 0x74, 0x65,
+    0x78, 0x69, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x73,
@@ -58334,57 +59690,83 @@
     0x49, 0x52, 0x20, 0x43, 0x61, 0x70, 0x74, 0x75,
     0x72, 0x65, 0x20, 0x4d, 0x61, 0x73, 0x6b, 0x2c,
     0x20, 0x49, 0x44, 0x43, 0x4f, 0x44, 0x45, 0x29,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x66,
-    0x20, 0x7b, 0x20, 0x5b, 0x69, 0x6e, 0x66, 0x6f,
-    0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x20,
-    0x46, 0x4c, 0x41, 0x53, 0x48, 0x54, 0x41, 0x50,
-    0x49, 0x44, 0x20, 0x5d, 0x20, 0x7d, 0x20, 0x7b,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x66, 0x20, 0x7b,
+    0x20, 0x5b, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x65,
+    0x78, 0x69, 0x73, 0x74, 0x73, 0x20, 0x43, 0x48,
+    0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x5d, 0x20,
+    0x7d, 0x20, 0x7b, 0x09, 0x0d, 0x0a, 0x20, 0x20,
+    0x20, 0x73, 0x65, 0x74, 0x20, 0x20, 0x5f, 0x43,
+    0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20,
+    0x24, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d,
+    0x45, 0x20, 0x20, 0x20, 0x20, 0x0d, 0x0a, 0x7d,
+    0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x09,
+    0x20, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65,
+    0x74, 0x20, 0x20, 0x5f, 0x43, 0x48, 0x49, 0x50,
+    0x4e, 0x41, 0x4d, 0x45, 0x20, 0x73, 0x74, 0x72,
+    0x39, 0x31, 0x32, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b,
+    0x69, 0x6e, 0x66, 0x6f, 0x20, 0x65, 0x78, 0x69,
+    0x73, 0x74, 0x73, 0x20, 0x45, 0x4e, 0x44, 0x49,
+    0x41, 0x4e, 0x5d, 0x20, 0x7d, 0x20, 0x7b, 0x09,
     0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74,
-    0x20, 0x5f, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x54,
-    0x41, 0x50, 0x49, 0x44, 0x20, 0x24, 0x46, 0x4c,
-    0x41, 0x53, 0x48, 0x54, 0x41, 0x50, 0x49, 0x44,
-    0x0d, 0x0a, 0x7d, 0x20, 0x65, 0x6c, 0x73, 0x65,
+    0x20, 0x20, 0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41,
+    0x4e, 0x20, 0x24, 0x45, 0x4e, 0x44, 0x49, 0x41,
+    0x4e, 0x20, 0x20, 0x20, 0x20, 0x0d, 0x0a, 0x7d,
+    0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x09,
+    0x20, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65,
+    0x74, 0x20, 0x20, 0x5f, 0x45, 0x4e, 0x44, 0x49,
+    0x41, 0x4e, 0x20, 0x6c, 0x69, 0x74, 0x74, 0x6c,
+    0x65, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b, 0x69, 0x6e,
+    0x66, 0x6f, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74,
+    0x73, 0x20, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x54,
+    0x41, 0x50, 0x49, 0x44, 0x20, 0x5d, 0x20, 0x7d,
     0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73,
     0x65, 0x74, 0x20, 0x5f, 0x46, 0x4c, 0x41, 0x53,
-    0x48, 0x54, 0x41, 0x50, 0x49, 0x44, 0x20, 0x30,
-    0x78, 0x30, 0x34, 0x35, 0x37, 0x30, 0x30, 0x34,
+    0x48, 0x54, 0x41, 0x50, 0x49, 0x44, 0x20, 0x24,
+    0x46, 0x4c, 0x41, 0x53, 0x48, 0x54, 0x41, 0x50,
+    0x49, 0x44, 0x0d, 0x0a, 0x7d, 0x20, 0x65, 0x6c,
+    0x73, 0x65, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20,
+    0x20, 0x73, 0x65, 0x74, 0x20, 0x5f, 0x46, 0x4c,
+    0x41, 0x53, 0x48, 0x54, 0x41, 0x50, 0x49, 0x44,
+    0x20, 0x30, 0x78, 0x30, 0x34, 0x35, 0x37, 0x30,
+    0x30, 0x34, 0x31, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a,
+    0x6a, 0x74, 0x61, 0x67, 0x20, 0x6e, 0x65, 0x77,
+    0x74, 0x61, 0x70, 0x20, 0x24, 0x5f, 0x43, 0x48,
+    0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x66,
+    0x6c, 0x61, 0x73, 0x68, 0x20, 0x2d, 0x69, 0x72,
+    0x6c, 0x65, 0x6e, 0x20, 0x38, 0x20, 0x2d, 0x69,
+    0x72, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
+    0x20, 0x30, 0x78, 0x31, 0x20, 0x2d, 0x69, 0x72,
+    0x6d, 0x61, 0x73, 0x6b, 0x20, 0x30, 0x78, 0x31,
+    0x20, 0x2d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
+    0x65, 0x64, 0x2d, 0x69, 0x64, 0x20, 0x24, 0x5f,
+    0x46, 0x4c, 0x41, 0x53, 0x48, 0x54, 0x41, 0x50,
+    0x49, 0x44, 0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x66,
+    0x20, 0x7b, 0x20, 0x5b, 0x69, 0x6e, 0x66, 0x6f,
+    0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x20,
+    0x43, 0x50, 0x55, 0x54, 0x41, 0x50, 0x49, 0x44,
+    0x20, 0x5d, 0x20, 0x7d, 0x20, 0x7b, 0x0d, 0x0a,
+    0x20, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x5f,
+    0x43, 0x50, 0x55, 0x54, 0x41, 0x50, 0x49, 0x44,
+    0x20, 0x24, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50,
+    0x49, 0x44, 0x0d, 0x0a, 0x7d, 0x20, 0x65, 0x6c,
+    0x73, 0x65, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20,
+    0x20, 0x73, 0x65, 0x74, 0x20, 0x5f, 0x43, 0x50,
+    0x55, 0x54, 0x41, 0x50, 0x49, 0x44, 0x20, 0x30,
+    0x78, 0x32, 0x35, 0x39, 0x36, 0x36, 0x30, 0x34,
     0x31, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x6a, 0x74,
     0x61, 0x67, 0x20, 0x6e, 0x65, 0x77, 0x74, 0x61,
     0x70, 0x20, 0x24, 0x5f, 0x43, 0x48, 0x49, 0x50,
-    0x4e, 0x41, 0x4d, 0x45, 0x20, 0x66, 0x6c, 0x61,
-    0x73, 0x68, 0x20, 0x2d, 0x69, 0x72, 0x6c, 0x65,
-    0x6e, 0x20, 0x38, 0x20, 0x2d, 0x69, 0x72, 0x63,
+    0x4e, 0x41, 0x4d, 0x45, 0x20, 0x63, 0x70, 0x75,
+    0x20, 0x20, 0x20, 0x2d, 0x69, 0x72, 0x6c, 0x65,
+    0x6e, 0x20, 0x34, 0x20, 0x2d, 0x69, 0x72, 0x63,
     0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x20, 0x30,
     0x78, 0x31, 0x20, 0x2d, 0x69, 0x72, 0x6d, 0x61,
-    0x73, 0x6b, 0x20, 0x30, 0x78, 0x31, 0x20, 0x2d,
+    0x73, 0x6b, 0x20, 0x30, 0x78, 0x66, 0x20, 0x2d,
     0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
-    0x2d, 0x69, 0x64, 0x20, 0x24, 0x5f, 0x46, 0x4c,
-    0x41, 0x53, 0x48, 0x54, 0x41, 0x50, 0x49, 0x44,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x66, 0x20, 0x7b,
-    0x20, 0x5b, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x65,
-    0x78, 0x69, 0x73, 0x74, 0x73, 0x20, 0x43, 0x50,
-    0x55, 0x54, 0x41, 0x50, 0x49, 0x44, 0x20, 0x5d,
-    0x20, 0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20,
-    0x20, 0x73, 0x65, 0x74, 0x20, 0x5f, 0x43, 0x50,
-    0x55, 0x54, 0x41, 0x50, 0x49, 0x44, 0x20, 0x24,
-    0x43, 0x50, 0x55, 0x54, 0x41, 0x50, 0x49, 0x44,
-    0x0d, 0x0a, 0x7d, 0x20, 0x65, 0x6c, 0x73, 0x65,
-    0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73,
-    0x65, 0x74, 0x20, 0x5f, 0x43, 0x50, 0x55, 0x54,
-    0x41, 0x50, 0x49, 0x44, 0x20, 0x30, 0x78, 0x32,
-    0x35, 0x39, 0x36, 0x36, 0x30, 0x34, 0x31, 0x0d,
-    0x0a, 0x7d, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67,
-    0x20, 0x6e, 0x65, 0x77, 0x74, 0x61, 0x70, 0x20,
-    0x24, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
-    0x4d, 0x45, 0x20, 0x63, 0x70, 0x75, 0x20, 0x20,
-    0x20, 0x2d, 0x69, 0x72, 0x6c, 0x65, 0x6e, 0x20,
-    0x34, 0x20, 0x2d, 0x69, 0x72, 0x63, 0x61, 0x70,
-    0x74, 0x75, 0x72, 0x65, 0x20, 0x30, 0x78, 0x66,
-    0x20, 0x2d, 0x69, 0x72, 0x6d, 0x61, 0x73, 0x6b,
-    0x20, 0x30, 0x78, 0x66, 0x20, 0x2d, 0x65, 0x78,
-    0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x2d, 0x69,
-    0x64, 0x20, 0x24, 0x5f, 0x43, 0x50, 0x55, 0x54,
-    0x41, 0x50, 0x49, 0x44, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x2d, 0x69, 0x64, 0x20, 0x24, 0x5f, 0x43, 0x50,
+    0x55, 0x54, 0x41, 0x50, 0x49, 0x44, 0x0d, 0x0a,
     0x0d, 0x0a, 0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b,
     0x69, 0x6e, 0x66, 0x6f, 0x20, 0x65, 0x78, 0x69,
     0x73, 0x74, 0x73, 0x20, 0x42, 0x53, 0x54, 0x41,
@@ -58430,33 +59812,75 @@
     0x0d, 0x0a, 0x0d, 0x0a, 0x24, 0x5f, 0x54, 0x41,
     0x52, 0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45,
     0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
-    0x72, 0x65, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b,
-    0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d, 0x76, 0x69,
-    0x72, 0x74, 0x20, 0x30, 0x20, 0x2d, 0x77, 0x6f,
-    0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d,
-    0x70, 0x68, 0x79, 0x73, 0x20, 0x30, 0x78, 0x35,
-    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20,
+    0x72, 0x65, 0x20, 0x2d, 0x65, 0x76, 0x65, 0x6e,
+    0x74, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x2d,
+    0x69, 0x6e, 0x69, 0x74, 0x20, 0x7b, 0x0d, 0x0a,
+    0x09, 0x23, 0x20, 0x57, 0x65, 0x20, 0x63, 0x61,
+    0x6e, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61,
+    0x73, 0x65, 0x20, 0x73, 0x70, 0x65, 0x65, 0x64,
+    0x20, 0x6e, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x61,
+    0x74, 0x20, 0x77, 0x65, 0x20, 0x6b, 0x6e, 0x6f,
+    0x77, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61,
+    0x72, 0x67, 0x65, 0x74, 0x20, 0x69, 0x73, 0x20,
+    0x68, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x2e, 0x0d,
+    0x0a, 0x09, 0x23, 0x6a, 0x74, 0x61, 0x67, 0x5f,
+    0x72, 0x63, 0x6c, 0x6b, 0x20, 0x33, 0x30, 0x30,
+    0x30, 0x0d, 0x0a, 0x09, 0x0d, 0x0a, 0x09, 0x23,
+    0x20, 0x2d, 0x2d, 0x20, 0x45, 0x6e, 0x61, 0x62,
+    0x6c, 0x65, 0x20, 0x39, 0x36, 0x4b, 0x20, 0x52,
+    0x41, 0x4d, 0x0d, 0x0a, 0x09, 0x23, 0x20, 0x50,
+    0x46, 0x51, 0x42, 0x43, 0x20, 0x65, 0x6e, 0x61,
+    0x62, 0x6c, 0x65, 0x64, 0x20, 0x2f, 0x20, 0x44,
+    0x54, 0x43, 0x4d, 0x20, 0x26, 0x20, 0x41, 0x48,
+    0x42, 0x20, 0x77, 0x61, 0x69, 0x74, 0x2d, 0x73,
+    0x74, 0x61, 0x74, 0x65, 0x73, 0x20, 0x64, 0x69,
+    0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x0d, 0x0a,
+    0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x35,
+    0x43, 0x30, 0x30, 0x32, 0x30, 0x33, 0x34, 0x20,
+    0x30, 0x78, 0x30, 0x31, 0x39, 0x31, 0x20, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x39,
+    0x78, 0x20, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f,
+    0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x30,
+    0x20, 0x34, 0x20, 0x32, 0x20, 0x30, 0x20, 0x30,
+    0x78, 0x38, 0x30, 0x30, 0x30, 0x30, 0x0d, 0x0a,
+    0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x70,
+    0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x20, 0x30,
+    0x20, 0x30, 0x20, 0x37, 0x20, 0x6f, 0x66, 0x66,
+    0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x24,
+    0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x4e,
+    0x41, 0x4d, 0x45, 0x20, 0x63, 0x6f, 0x6e, 0x66,
+    0x69, 0x67, 0x75, 0x72, 0x65, 0x20, 0x2d, 0x77,
+    0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61,
+    0x2d, 0x76, 0x69, 0x72, 0x74, 0x20, 0x30, 0x20,
     0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72,
-    0x65, 0x61, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x20,
-    0x31, 0x36, 0x33, 0x38, 0x34, 0x20, 0x2d, 0x77,
-    0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61,
-    0x2d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x20,
-    0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x66, 0x6c,
-    0x61, 0x73, 0x68, 0x20, 0x62, 0x61, 0x6e, 0x6b,
-    0x20, 0x3c, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
-    0x3e, 0x20, 0x3c, 0x62, 0x61, 0x73, 0x65, 0x3e,
-    0x20, 0x3c, 0x73, 0x69, 0x7a, 0x65, 0x3e, 0x20,
-    0x3c, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x77, 0x69,
-    0x64, 0x74, 0x68, 0x3e, 0x20, 0x3c, 0x62, 0x75,
-    0x73, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3e,
-    0x0d, 0x0a, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x20,
-    0x62, 0x61, 0x6e, 0x6b, 0x20, 0x73, 0x74, 0x72,
-    0x39, 0x78, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x30, 0x78,
-    0x30, 0x30, 0x30, 0x38, 0x30, 0x30, 0x30, 0x30,
-    0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x0d, 0x0a,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x65, 0x61, 0x2d, 0x70, 0x68, 0x79, 0x73, 0x20,
+    0x30, 0x78, 0x35, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b,
+    0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d, 0x73, 0x69,
+    0x7a, 0x65, 0x20, 0x31, 0x36, 0x33, 0x38, 0x34,
+    0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61,
+    0x72, 0x65, 0x61, 0x2d, 0x62, 0x61, 0x63, 0x6b,
+    0x75, 0x70, 0x20, 0x30, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x23, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x62,
+    0x61, 0x6e, 0x6b, 0x20, 0x3c, 0x64, 0x72, 0x69,
+    0x76, 0x65, 0x72, 0x3e, 0x20, 0x3c, 0x62, 0x61,
+    0x73, 0x65, 0x3e, 0x20, 0x3c, 0x73, 0x69, 0x7a,
+    0x65, 0x3e, 0x20, 0x3c, 0x63, 0x68, 0x69, 0x70,
+    0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3e, 0x20,
+    0x3c, 0x62, 0x75, 0x73, 0x5f, 0x77, 0x69, 0x64,
+    0x74, 0x68, 0x3e, 0x0d, 0x0a, 0x66, 0x6c, 0x61,
+    0x73, 0x68, 0x20, 0x62, 0x61, 0x6e, 0x6b, 0x20,
+    0x73, 0x74, 0x72, 0x39, 0x78, 0x20, 0x30, 0x78,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x38, 0x30,
+    0x30, 0x30, 0x30, 0x20, 0x30, 0x20, 0x30, 0x20,
+    0x30, 0x0d, 0x0a, 0x66, 0x6c, 0x61, 0x73, 0x68,
+    0x20, 0x62, 0x61, 0x6e, 0x6b, 0x20, 0x73, 0x74,
+    0x72, 0x39, 0x78, 0x20, 0x30, 0x78, 0x30, 0x30,
+    0x30, 0x38, 0x30, 0x30, 0x30, 0x30, 0x20, 0x30,
+    0x78, 0x30, 0x30, 0x30, 0x30, 0x38, 0x30, 0x30,
+    0x30, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x0d,
+    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x73,
     0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x74, 0x6f,
     0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x74,

Modified: zy1000/trunk/build/menu/zy1000menu.xml
===================================================================
--- zy1000/trunk/build/menu/zy1000menu.xml	2009-03-30 19:52:30 UTC (rev 1435)
+++ zy1000/trunk/build/menu/zy1000menu.xml	2009-04-02 10:17:36 UTC (rev 1436)
@@ -1186,7 +1186,9 @@
 				append buffer {<form enctype="multipart/form-data" action="guiupload.tcl" method="post">}
 				append buffer <br> 
 				if {[string compare $form_action "Upload"]==0} {
-					if {[catch {writeform form_filecontent $form_filename} result]==0} {
+					if {[string length $form_filename]==0} {
+						append buffer "Empty file name not allowed"
+					} elseif {[catch {writeform form_filecontent $form_filename} result]==0} {
 						append buffer [encode $result]
 					} else {
 						append buffer Wrote $form_filename

Modified: zy1000/trunk/build/tcl/guiupload.tcl
===================================================================
--- zy1000/trunk/build/tcl/guiupload.tcl	2009-03-30 19:52:30 UTC (rev 1435)
+++ zy1000/trunk/build/tcl/guiupload.tcl	2009-04-02 10:17:36 UTC (rev 1436)
@@ -175,7 +175,9 @@
 				append buffer {<form enctype="multipart/form-data" action="guiupload.tcl" method="post">}
 				append buffer <br> 
 				if {[string compare $form_action "Upload"]==0} {
-					if {[catch {writeform form_filecontent $form_filename} result]==0} {
+					if {[string length $form_filename]==0} {
+						append buffer "Empty file name not allowed"
+					} elseif {[catch {writeform form_filecontent $form_filename} result]==0} {
 						append buffer [encode $result]
 					} else {
 						append buffer Wrote $form_filename



From oharboe at mail.berlios.de  Thu Apr  2 12:22:23 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Thu, 2 Apr 2009 12:22:23 +0200
Subject: [Openocd-svn] r1437 - trunk/src/jtag
Message-ID: <200904021022.n32AMNQR013715@sheep.berlios.de>

Author: oharboe
Date: 2009-04-02 12:22:22 +0200 (Thu, 02 Apr 2009)
New Revision: 1437

Modified:
   trunk/src/jtag/zy1000.c
Log:
fix keyword expansion

Modified: trunk/src/jtag/zy1000.c
===================================================================
--- trunk/src/jtag/zy1000.c	2009-04-02 10:17:36 UTC (rev 1436)
+++ trunk/src/jtag/zy1000.c	2009-04-02 10:22:22 UTC (rev 1437)
@@ -35,7 +35,7 @@
 #define ZYLIN_VERSION "1.50"
 #define ZYLIN_DATE __DATE__
 #define ZYLIN_TIME __TIME__
-#define ZYLIN_OPENOCD "$Revision: 1241 $"
+#define ZYLIN_OPENOCD "$Revision$"
 #define ZYLIN_OPENOCD_VERSION "Zylin JTAG ZY1000 " ZYLIN_VERSION " " ZYLIN_DATE " " ZYLIN_TIME
 const char *zylin_config_dir="/config/settings";
 


Property changes on: trunk/src/jtag/zy1000.c
___________________________________________________________________
Name: svn:keywords
   + Revision Id URL



From mlu at mail.berlios.de  Thu Apr  2 14:17:00 2009
From: mlu at mail.berlios.de (mlu at mail.berlios.de)
Date: Thu, 2 Apr 2009 14:17:00 +0200
Subject: [Openocd-svn] r1438 - in trunk/src: flash target
Message-ID: <200904021217.n32CH0js003736@sheep.berlios.de>

Author: mlu
Date: 2009-04-02 14:16:19 +0200 (Thu, 02 Apr 2009)
New Revision: 1438

Modified:
   trunk/src/flash/stm32x.c
   trunk/src/target/cortex_swjdp.c
Log:
Cortex-M3 cleanup and performance patch

Modified: trunk/src/flash/stm32x.c
===================================================================
--- trunk/src/flash/stm32x.c	2009-04-02 10:22:22 UTC (rev 1437)
+++ trunk/src/flash/stm32x.c	2009-04-02 12:16:19 UTC (rev 1438)
@@ -484,7 +484,7 @@
 {
 	stm32x_flash_bank_t *stm32x_info = bank->driver_priv;
 	target_t *target = bank->target;
-	u32 buffer_size = 8192;
+	u32 buffer_size = 16384;
 	working_area_t *source;
 	u32 address = bank->base + offset;
 	reg_param_t reg_params[4];

Modified: trunk/src/target/cortex_swjdp.c
===================================================================
--- trunk/src/target/cortex_swjdp.c	2009-04-02 10:22:22 UTC (rev 1437)
+++ trunk/src/target/cortex_swjdp.c	2009-04-02 12:16:19 UTC (rev 1438)
@@ -183,6 +183,7 @@
 
 	/* too expensive to call keep_alive() here */
 
+#if 0
 	/* Danger!!!! BROKEN!!!! */
 	scan_inout_check_u32(swjdp, SWJDP_IR_DPACC, DP_CTRL_STAT, DPAP_READ, 0, &ctrlstat);
 	/* Danger!!!! BROKEN!!!! Why will jtag_execute_queue() fail here????
@@ -196,6 +197,8 @@
 		LOG_ERROR("BUG: Why does this fail the first time????");
 	}
 	/* Why??? second time it works??? */
+#endif
+
 	scan_inout_check_u32(swjdp, SWJDP_IR_DPACC, DP_CTRL_STAT, DPAP_READ, 0, &ctrlstat);
 	if ((retval=jtag_execute_queue())!=ERROR_OK)
 		return retval;
@@ -925,7 +928,7 @@
 	/* because the DCB_DCRDR is used for the emulated dcc channel
 	 * we gave to save/restore the DCB_DCRDR when used */
 
-	ahbap_read_system_atomic_u32(swjdp, DCB_DCRDR, &dcrdr);
+	ahbap_read_system_u32(swjdp, DCB_DCRDR, &dcrdr);
 
 	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
 
@@ -937,8 +940,8 @@
 	ahbap_setup_accessport(swjdp, CSW_32BIT | CSW_ADDRINC_OFF, DCB_DCRDR & 0xFFFFFFF0);
 	ahbap_read_reg_u32(swjdp, AHBAP_BD0 | (DCB_DCRDR & 0xC), value );
 
+	ahbap_write_system_u32(swjdp, DCB_DCRDR, dcrdr);
 	retval = swjdp_transaction_endcheck(swjdp);
-	ahbap_write_system_atomic_u32(swjdp, DCB_DCRDR, dcrdr);
 	return retval;
 }
 
@@ -950,7 +953,7 @@
 	/* because the DCB_DCRDR is used for the emulated dcc channel
 	 * we gave to save/restore the DCB_DCRDR when used */
 
-	ahbap_read_system_atomic_u32(swjdp, DCB_DCRDR, &dcrdr);
+	ahbap_read_system_u32(swjdp, DCB_DCRDR, &dcrdr);
 
 	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
 
@@ -962,8 +965,8 @@
 	ahbap_setup_accessport(swjdp, CSW_32BIT | CSW_ADDRINC_OFF, DCB_DCRSR & 0xFFFFFFF0);
 	ahbap_write_reg_u32(swjdp, AHBAP_BD0 | (DCB_DCRSR & 0xC), regnum | DCRSR_WnR );
 
+	ahbap_write_system_u32(swjdp, DCB_DCRDR, dcrdr);
 	retval = swjdp_transaction_endcheck(swjdp);
-	ahbap_write_system_atomic_u32(swjdp, DCB_DCRDR, dcrdr);
 	return retval;
 }
 



From oharboe at mail.berlios.de  Thu Apr  2 19:44:48 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Thu, 2 Apr 2009 19:44:48 +0200
Subject: [Openocd-svn] r1439 - trunk/src/target/interface
Message-ID: <200904021744.n32Himmr019044@sheep.berlios.de>

Author: oharboe
Date: 2009-04-02 19:44:28 +0200 (Thu, 02 Apr 2009)
New Revision: 1439

Modified:
   trunk/src/target/interface/arm-jtag-ew.cfg
   trunk/src/target/interface/arm-usb-ocd.cfg
   trunk/src/target/interface/at91rm9200.cfg
   trunk/src/target/interface/axm0432.cfg
   trunk/src/target/interface/calao-usb-a9260-c01.cfg
   trunk/src/target/interface/calao-usb-a9260-c02.cfg
   trunk/src/target/interface/calao-usb-a9260.cfg
   trunk/src/target/interface/chameleon.cfg
   trunk/src/target/interface/dummy.cfg
   trunk/src/target/interface/flyswatter.cfg
   trunk/src/target/interface/jlink.cfg
   trunk/src/target/interface/jtagkey-tiny.cfg
   trunk/src/target/interface/jtagkey.cfg
   trunk/src/target/interface/luminary-libftdi.cfg
   trunk/src/target/interface/luminary-lm3s811.cfg
   trunk/src/target/interface/luminary.cfg
   trunk/src/target/interface/olimex-arm-usb-ocd.cfg
   trunk/src/target/interface/olimex-jtag-tiny-a.cfg
   trunk/src/target/interface/olimex-jtag-tiny.cfg
   trunk/src/target/interface/openocd-usb.cfg
   trunk/src/target/interface/parport.cfg
   trunk/src/target/interface/parport_dlc5.cfg
   trunk/src/target/interface/rlink.cfg
   trunk/src/target/interface/sheevaplug.cfg
   trunk/src/target/interface/signalyzer.cfg
   trunk/src/target/interface/stm32-stick.cfg
   trunk/src/target/interface/str9-comstick.cfg
   trunk/src/target/interface/turtelizer2.cfg
   trunk/src/target/interface/usbprog.cfg
Log:
Uwe Hermann <uwe at hermann-uwe.de> URL references 

Modified: trunk/src/target/interface/arm-jtag-ew.cfg
===================================================================
--- trunk/src/target/interface/arm-jtag-ew.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/arm-jtag-ew.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,2 +1,8 @@
-# Interface ARM-JTAG-EW
+#
+# Olimex ARM-JTAG-EW
+#
+# http://www.olimex.com/dev/arm-jtag-ew.html
+#
+
 interface arm-jtag-ew
+

Modified: trunk/src/target/interface/arm-usb-ocd.cfg
===================================================================
--- trunk/src/target/interface/arm-usb-ocd.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/arm-usb-ocd.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,5 +1,11 @@
-#interface
+#
+# Olimex ARM-USB-OCD
+#
+# http://www.olimex.com/dev/arm-usb-ocd.html
+#
+
 interface ft2232
 ft2232_device_desc "Olimex OpenOCD JTAG A"
 ft2232_layout "olimex-jtag"
 ft2232_vid_pid 0x15BA 0x0003
+

Modified: trunk/src/target/interface/at91rm9200.cfg
===================================================================
--- trunk/src/target/interface/at91rm9200.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/at91rm9200.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,3 +1,9 @@
-#interface
+#
+# Various Atmel AT91RM9200 boards
+#
+# TODO: URL?
+#
+
 interface at91rm9200
 at91rm9200_device rea_ecr
+

Modified: trunk/src/target/interface/axm0432.cfg
===================================================================
--- trunk/src/target/interface/axm0432.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/axm0432.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,4 +1,9 @@
-#interface
+#
+# Axiom axm0432
+#
+# http://www.axman.com
+#
+
 interface ft2232
 ft2232_device_desc "Symphony SoundBite A"
 ft2232_layout "axm0432_jtag"

Modified: trunk/src/target/interface/calao-usb-a9260-c01.cfg
===================================================================
--- trunk/src/target/interface/calao-usb-a9260-c01.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/calao-usb-a9260-c01.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,11 +1,13 @@
 #
-# Calao Systems USB-A9260-C01
+# CALAO Systems USB-A9260-C01
 #
 # http://www.calao-systems.com/
 #
+
 interface ft2232
 ft2232_layout jtagkey
 ft2232_device_desc "USB-A9260"
 ft2232_vid_pid 0x0403 0x6010
 script interface/calao-usb-a9260.cfg
 script target/at91sam9260minimal.cfg
+

Modified: trunk/src/target/interface/calao-usb-a9260-c02.cfg
===================================================================
--- trunk/src/target/interface/calao-usb-a9260-c02.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/calao-usb-a9260-c02.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,11 +1,13 @@
 #
-# Calao Systems USB-A9260-C02
+# CALAO Systems USB-A9260-C02
 #
 # http://www.calao-systems.com/
 #
+
 interface ft2232
 ft2232_layout jtagkey
 ft2232_device_desc "USB-A9260 A"
 ft2232_vid_pid 0x0403 0x6001
 script interface/calao-usb-a9260.cfg
 script target/at91sam9260minimal.cfg
+

Modified: trunk/src/target/interface/calao-usb-a9260.cfg
===================================================================
--- trunk/src/target/interface/calao-usb-a9260.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/calao-usb-a9260.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,14 +1,15 @@
 #
-# Calao Systems USB-A9260 common -C01 -C02 setup
+# CALAO Systems USB-A9260 common -C01 -C02 setup
 #
 # http://www.calao-systems.com/
 #
-# See calao-usb-a9260-c01.cfg and calao-usb-a9260-c02.cfg
+# See calao-usb-a9260-c01.cfg and calao-usb-a9260-c02.cfg.
 #
-# note: you must have an openocd version where jtag_speed sets two values
-#       trunk ver 606 contains the fix for this particular issue which can
-#      be seen if jtag_speed does not set two separate values
+# Note: You must have an OpenOCD version where jtag_speed sets two values.
+#       trunk r606 contains the fix for this particular issue which can
+#       be seen if jtag_speed does not set two separate values.
 #
+
 jtag_speed 1200 0
 jtag_nsrst_delay 200
 jtag_ntrst_delay 200

Modified: trunk/src/target/interface/chameleon.cfg
===================================================================
--- trunk/src/target/interface/chameleon.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/chameleon.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,4 +1,9 @@
-#interface
+#
+# Amontec Chameleon POD
+#
+# http://www.amontec.com/chameleon.shtml
+#
+
 interface parport
 parport_cable chameleon
 

Modified: trunk/src/target/interface/dummy.cfg
===================================================================
--- trunk/src/target/interface/dummy.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/dummy.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1 +1,6 @@
+#
+# Dummy interface (for testing purposes)
+#
+
 interface dummy
+

Modified: trunk/src/target/interface/flyswatter.cfg
===================================================================
--- trunk/src/target/interface/flyswatter.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/flyswatter.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,9 +1,12 @@
-# Interface Configuration for the TinCanTools FT2232 Based Flyswatter
-# http://www.tincantools.com
+#
+# TinCanTools Flyswatter
+#
+# http://www.tincantools.com/product.php?productid=16134
+#
 
-#interface
 interface ft2232
 ft2232_device_desc "Flyswatter"
 ft2232_layout "flyswatter"
 ft2232_vid_pid 0x0403 0x6010
 jtag_speed 1
+

Modified: trunk/src/target/interface/jlink.cfg
===================================================================
--- trunk/src/target/interface/jlink.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/jlink.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,3 +1,8 @@
-# jlink interface
+#
+# Segger J-Link
+#
+# http://www.segger.com/jlink.html
+#
+
 interface jlink
 

Modified: trunk/src/target/interface/jtagkey-tiny.cfg
===================================================================
--- trunk/src/target/interface/jtagkey-tiny.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/jtagkey-tiny.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,5 +1,11 @@
-#interface
+#
+# Amontec JTAGkey-tiny
+#
+# http://www.amontec.com/jtagkey-tiny.shtml
+#
+
 interface ft2232
 ft2232_device_desc "Amontec JTAGkey"
 ft2232_layout jtagkey
 ft2232_vid_pid 0x0403 0xcff8
+

Modified: trunk/src/target/interface/jtagkey.cfg
===================================================================
--- trunk/src/target/interface/jtagkey.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/jtagkey.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,5 +1,11 @@
-#interface
+#
+# Amontec JTAGkey
+#
+# http://www.amontec.com/jtagkey.shtml
+#
+
 interface ft2232
 ft2232_device_desc "Amontec JTAGkey A"
 ft2232_layout jtagkey
 ft2232_vid_pid 0x0403 0xcff8
+

Modified: trunk/src/target/interface/luminary-libftdi.cfg
===================================================================
--- trunk/src/target/interface/luminary-libftdi.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/luminary-libftdi.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,4 +1,9 @@
-# ftdi interface using libftdi driver
+#
+# Luminary Micro Stellaris LM3S811 Evaluation Kit
+#
+# http://www.luminarymicro.com/products/stellaris_811_evaluation_kits.html
+#
+
 interface ft2232
 ft2232_device_desc "Stellaris Evaluation Board"
 ft2232_layout evb_lm3s811

Modified: trunk/src/target/interface/luminary-lm3s811.cfg
===================================================================
--- trunk/src/target/interface/luminary-lm3s811.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/luminary-lm3s811.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,4 +1,9 @@
-# ftdi interface
+#
+# Luminary Micro Stellaris LM3S811 Evaluation Kit
+#
+# http://www.luminarymicro.com/products/stellaris_811_evaluation_kits.html
+#
+
 interface ft2232
 ft2232_device_desc "LM3S811 Evaluation Board A"
 ft2232_layout evb_lm3s811

Modified: trunk/src/target/interface/luminary.cfg
===================================================================
--- trunk/src/target/interface/luminary.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/luminary.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,4 +1,9 @@
-# ftdi interface using ftdi driver
+#
+# Luminary Micro LM3S811 Evaluation Kit(s)
+#
+# http://www.luminarymicro.com/products/stellaris_811_evaluation_kits.html
+#
+
 interface ft2232
 ft2232_device_desc "Stellaris Evaluation Board A"
 ft2232_layout evb_lm3s811

Modified: trunk/src/target/interface/olimex-arm-usb-ocd.cfg
===================================================================
--- trunk/src/target/interface/olimex-arm-usb-ocd.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/olimex-arm-usb-ocd.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,3 +1,9 @@
+#
+# Olimex ARM-USB-OCD
+#
+# http://www.olimex.com/dev/arm-usb-ocd.html
+#
+
 interface ft2232
 ft2232_device_desc "Olimex OpenOCD JTAG"
 ft2232_layout olimex-jtag
@@ -2 +8,2 @@
 ft2232_vid_pid 0x15ba 0x0003
+

Modified: trunk/src/target/interface/olimex-jtag-tiny-a.cfg
===================================================================
--- trunk/src/target/interface/olimex-jtag-tiny-a.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/olimex-jtag-tiny-a.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,5 +1,11 @@
-# REFERENCE:  http://www.olimex.com/dev/arm-usb-tiny.html
+#
+# Olimex ARM-USB-TINY
+#
+# http://www.olimex.com/dev/arm-usb-tiny.html
+#
+
 interface ft2232
 ft2232_device_desc "Olimex OpenOCD JTAG TINY A"
 ft2232_layout olimex-jtag
 ft2232_vid_pid 0x15ba 0x0004
+

Modified: trunk/src/target/interface/olimex-jtag-tiny.cfg
===================================================================
--- trunk/src/target/interface/olimex-jtag-tiny.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/olimex-jtag-tiny.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,11 +1,15 @@
-##
-# Olimex JTAG TINY USB Debugger
+#
+# Olimex ARM-USB-TINY
+#
+# http://www.olimex.com/dev/arm-usb-tiny.html
+#
+
+# TODO: FIXME
 # Linux USB tends to see the device description without the 'A' as in target/olimex-jtag-tiny.cfg,
 # but Windows still needs the 'A'. This is a replacement for Linux users.
-##
 
-# REFERENCE:  http://www.olimex.com/dev/arm-usb-tiny.html
 interface ft2232
 ft2232_device_desc "Olimex OpenOCD JTAG TINY"
 ft2232_layout olimex-jtag
 ft2232_vid_pid 0x15ba 0x0004
+

Modified: trunk/src/target/interface/openocd-usb.cfg
===================================================================
--- trunk/src/target/interface/openocd-usb.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/openocd-usb.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,4 +1,9 @@
-#interface
+#
+# Hubert Hoegl's USB to JTAG
+#
+# http://www.hs-augsburg.de/~hhoegl/proj/usbjtag/usbjtag.html
+#
+
 interface ft2232
 ft2232_vid_pid 0x0403 0x6010
 ft2232_device_desc "Dual RS232"

Modified: trunk/src/target/interface/parport.cfg
===================================================================
--- trunk/src/target/interface/parport.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/parport.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,3 +1,7 @@
+#
+# Parallel port wiggler (many clones available) on port 0xc8b8
+#
+
 interface parport
 parport_port 0xc8b8
 parport_cable wiggler
@@ -2 +6,2 @@
 jtag_speed 0
+

Modified: trunk/src/target/interface/parport_dlc5.cfg
===================================================================
--- trunk/src/target/interface/parport_dlc5.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/parport_dlc5.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,3 +1,9 @@
+#
+# Xilinx Parallel Cable III 'DLC 5' (and various clones)
+#
+# http://www.xilinx.com/itp/xilinx4/data/docs/pac/appendixb.html
+#
+
 interface parport
 parport_port /dev/parport0
 parport_cable dlc5
@@ -2 +8,2 @@
 jtag_speed 0
+

Modified: trunk/src/target/interface/rlink.cfg
===================================================================
--- trunk/src/target/interface/rlink.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/rlink.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,3 +1,8 @@
-# rlink interface
+#
+# Raisonance RLink
+#
+# http://www.mcu-raisonance.com/~rlink-debugger-programmer__microcontrollers__tool~tool__T018:4cn9ziz4bnx6.html
+#
+
 interface rlink
 

Modified: trunk/src/target/interface/sheevaplug.cfg
===================================================================
--- trunk/src/target/interface/sheevaplug.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/sheevaplug.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,3 +1,9 @@
+#
+# Marvel SheevaPlug Development Kit
+#
+# http://www.marvell.com/products/embedded_processors/developer/kirkwood/sheevaplug.jsp
+#
+
 interface ft2232
 ft2232_layout sheevaplug
 ft2232_vid_pid 0x0403 0x6010
@@ -2 +8,2 @@
 jtag_khz 3000
+

Modified: trunk/src/target/interface/signalyzer.cfg
===================================================================
--- trunk/src/target/interface/signalyzer.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/signalyzer.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,5 +1,11 @@
-#interface
+#
+# Xverve Signalyzer Tool (DT-USB-ST)
+#
+# http://www.signalyzer.com/products/development-tools/signalyzer-tool-dt-usb-st.html
+#
+
 interface ft2232
 ft2232_device_desc "Signalyzer A"
 ft2232_layout signalyzer
 ft2232_vid_pid 0x0403 0xbca0
+

Modified: trunk/src/target/interface/stm32-stick.cfg
===================================================================
--- trunk/src/target/interface/stm32-stick.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/stm32-stick.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,5 +1,11 @@
-# ftdi interface
+#
+# Hitex STM32-PerformanceStick
+#
+# http://www.hitex.com/index.php?id=340
+#
+
 interface ft2232
 ft2232_device_desc "STM32-PerformanceStick A"
 ft2232_layout stm32stick
 ft2232_vid_pid 0x0640 0x002d
+

Modified: trunk/src/target/interface/str9-comstick.cfg
===================================================================
--- trunk/src/target/interface/str9-comstick.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/str9-comstick.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,3 +1,9 @@
+#
+# Hitex STR9-comStick
+#
+# http://www.hitex.com/index.php?id=383
+#
+
 interface ft2232
 ft2232_device_desc "STR9-comStick A"
 ft2232_layout comstick
@@ -2 +8,2 @@
 ft2232_vid_pid 0x0640 0x002c
+

Modified: trunk/src/target/interface/turtelizer2.cfg
===================================================================
--- trunk/src/target/interface/turtelizer2.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/turtelizer2.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,5 +1,11 @@
-#interface
+#
+# egnite Turtelizer 2
+#
+# http://www.ethernut.de/en/hardware/turtelizer/index.html
+#
+
 interface ft2232
 ft2232_device_desc "Turtelizer JTAG/RS232 Adapter A"
 ft2232_layout turtelizer2
 ft2232_vid_pid 0x0403 0xbdc8
+

Modified: trunk/src/target/interface/usbprog.cfg
===================================================================
--- trunk/src/target/interface/usbprog.cfg	2009-04-02 12:16:19 UTC (rev 1438)
+++ trunk/src/target/interface/usbprog.cfg	2009-04-02 17:44:28 UTC (rev 1439)
@@ -1,7 +1,8 @@
 #
-# USBprog
+# Embedded Projects USBprog
 #
 # http://embedded-projects.net/index.php?page_id=135
 #
 
 interface usbprog
+



From oharboe at mail.berlios.de  Thu Apr  2 20:48:49 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Thu, 2 Apr 2009 20:48:49 +0200
Subject: [Openocd-svn] r1440 - zy1000/trunk/build/menu
Message-ID: <200904021848.n32Imnde027833@sheep.berlios.de>

Author: oharboe
Date: 2009-04-02 20:48:48 +0200 (Thu, 02 Apr 2009)
New Revision: 1440

Modified:
   zy1000/trunk/build/menu/zy1000menu.xml
Log:
use "relay on/off" instead of "power on/off" which, hopefully, is less confusing.

Modified: zy1000/trunk/build/menu/zy1000menu.xml
===================================================================
--- zy1000/trunk/build/menu/zy1000menu.xml	2009-04-02 17:44:28 UTC (rev 1439)
+++ zy1000/trunk/build/menu/zy1000menu.xml	2009-04-02 18:48:48 UTC (rev 1440)
@@ -110,10 +110,10 @@
 								append console [encode [capture_catch "reset run"]]
 							}
 							
-							if {[string compare $form_action "Power on"]==0} {
+							if {[string compare $form_action "Relay on"]==0} {
 								append console [encode [capture_catch "power on"]]
 							}
-							if {[string compare $form_action "Power off"]==0} {
+							if {[string compare $form_action "Relay off"]==0} {
 								append console [encode [capture_catch "power off"]]
 							}
 						</tcl>
@@ -128,8 +128,8 @@
 					<td><input type="submit" name="form_action" value="Reset and run"></td>
 					<td class="buttonspacesmall"></td><td><input type="submit" name="form_action" value="Halt"></td>
 					<td class="buttonspacesmall"></td><td><input type="submit" name="form_action" value="Resume"></td>
-					<td style="width:50px;"></td><td><input type="submit" name="form_action" value="Power on"></td>
-					<td class="buttonspacesmall"></td><td><input type="submit" name="form_action" value="Power off"></td>
+					<td style="width:50px;"></td><td><input type="submit" name="form_action" value="Relay on"></td>
+					<td class="buttonspacesmall"></td><td><input type="submit" name="form_action" value="Relay off"></td>
 				</tr></table>
 
 				<br>						
@@ -159,8 +159,8 @@
 					See log for details. <br>
 					<p><b>Target power</b> - Detects power on target. <br>
 					If the JTAG cable is not connected, or the target has no power, then no target power will be detected.</p>
-					<p><b>Power on</b> - Turn on ZY1000 target power relay.</p>
-					<p><b>Power off</b> - Turn off ZY1000  target power relay.</p>
+					<p><b>Relay on</b> - Turn on ZY1000 target power relay.</p>
+					<p><b>Relay off</b> - Turn off ZY1000  target power relay.</p>
 					<p>Type "help power" in telnet for command to control power relay.</p>
 					<p><b>Reboot ZY1000</b> - Reboots ZY1000 unit. Type "help reboot" in telnet.</p>
 				]]></markup_code>
@@ -673,10 +673,10 @@
 							
 							append console [encode [capture_catch production_test]]
 						}
-						if {[string compare $form_action "Power on"]==0} {
+						if {[string compare $form_action "Relay on"]==0} {
 							append console [encode [capture_catch "power on"]]
 						}
-						if {[string compare $form_action "Power off"]==0} {
+						if {[string compare $form_action "Relay off"]==0} {
 							append console [encode [capture_catch "power off"]]
 						}
 					</tcl>
@@ -695,8 +695,8 @@
 				<table><tr>
 					<td><input type="submit" name="form_action" value="Upload firmware" ></td>
 					<td class="buttonspacesmall">&nbsp</td><td><input type="submit" name="form_action" value="Test"></td>
-					<td class="buttonspacesmall">&nbsp</td><td><input type="submit" name="form_action" value="Power on"></td>
-					<td class="buttonspacesmall">&nbsp</td><td><input type="submit" name="form_action" value="Power off">
+					<td class="buttonspacesmall">&nbsp</td><td><input type="submit" name="form_action" value="Relay on"></td>
+					<td class="buttonspacesmall">&nbsp</td><td><input type="submit" name="form_action" value="Relay off">
 				</tr></table>
 			</form>
 			
@@ -709,8 +709,8 @@
 				
 				<p><b>Upload firmware</b> - Power cycle target, reset target and program raw binary file to flash bank 0, offset 0 and verify flash programming. Leave target powered on.</p>
 				<p><b>Test</b> -  Power up target, run 10 second target test. Output is provided via the DCC output channel. </p>
-				<p><b>Power on</b> - Power on target.</p>
-				<p><b>Power off</b> - Power off target.</p>
+				<p><b>Relay on</b> - Relay on.</p>
+				<p><b>Relay off</b> - Relay off.</p>
 				<p><b>Serial number</b> - A target script can use this string in the production procedure. Type "help production" for more info.</p>
 					]]> 
 			</right_column>



From oharboe at mail.berlios.de  Thu Apr  2 23:17:29 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Thu, 2 Apr 2009 23:17:29 +0200
Subject: [Openocd-svn] r1441 - trunk/src/target/target
Message-ID: <200904022117.n32LHTY0013699@sheep.berlios.de>

Author: oharboe
Date: 2009-04-02 23:17:27 +0200 (Thu, 02 Apr 2009)
New Revision: 1441

Modified:
   trunk/src/target/target/stm32.cfg
Log:
Uwe Hermann <uwe at hermann-uwe.de> Add missing STM32 "0x06412041, Revision A" BSTAPID to list of available ones.

Modified: trunk/src/target/target/stm32.cfg
===================================================================
--- trunk/src/target/target/stm32.cfg	2009-04-02 18:48:48 UTC (rev 1440)
+++ trunk/src/target/target/stm32.cfg	2009-04-02 21:17:27 UTC (rev 1441)
@@ -36,11 +36,13 @@
 } else {
   # See STM Document RM0008
   # Section 26.6.2
-  # Medium Density RevA
+  # Low density devices, Rev A
+  set _BSTAPID 0x06412041
+  # Medium density devices, Rev A
   set _BSTAPID 0x06410041
-  # Rev B and Rev Z
+  # Medium density devices, Rev B and Rev Z
   set _BSTAPID 0x16410041
-  # High Density Devices, Rev A
+  # High density devices, Rev A
   set _BSTAPID 0x06414041
 }   
 jtag newtap $_CHIPNAME bs  -irlen 5 -ircapture 0x1 -irmask 0x1 -expected-id $_BSTAPID



From oharboe at mail.berlios.de  Thu Apr  2 23:20:37 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Thu, 2 Apr 2009 23:20:37 +0200
Subject: [Openocd-svn] r1442 - trunk/src/flash
Message-ID: <200904022120.n32LKbjR013970@sheep.berlios.de>

Author: oharboe
Date: 2009-04-02 23:20:35 +0200 (Thu, 02 Apr 2009)
New Revision: 1442

Modified:
   trunk/src/flash/nand.c
Log:
Nicolas Pitre nico at cam.org Allocating a 6-byte memory location with malloc() is rather silly
when this can be allocated on the stack.


Modified: trunk/src/flash/nand.c
===================================================================
--- trunk/src/flash/nand.c	2009-04-02 21:17:27 UTC (rev 1441)
+++ trunk/src/flash/nand.c	2009-04-02 21:20:35 UTC (rev 1442)
@@ -317,10 +317,8 @@
 {
 	u32 page = 0x0;
 	int i;
-	u8 *oob;
+	u8 oob[6];
 	
-	oob = malloc(6);
-	
 	if ((first < 0) || (first >= device->num_blocks))
 		first = 0;
 	



From oharboe at mail.berlios.de  Thu Apr  2 23:22:15 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Thu, 2 Apr 2009 23:22:15 +0200
Subject: [Openocd-svn] r1443 - trunk/src/flash
Message-ID: <200904022122.n32LMFfi014033@sheep.berlios.de>

Author: oharboe
Date: 2009-04-02 23:22:14 +0200 (Thu, 02 Apr 2009)
New Revision: 1443

Modified:
   trunk/src/flash/nand.c
Log:
Nicolas Pitre nico at cam.org This at least should make the "nand info" command a little more useful.


Modified: trunk/src/flash/nand.c
===================================================================
--- trunk/src/flash/nand.c	2009-04-02 21:20:35 UTC (rev 1442)
+++ trunk/src/flash/nand.c	2009-04-02 21:22:14 UTC (rev 1443)
@@ -689,6 +689,8 @@
 			LOG_ERROR("erase operation didn't pass, status: 0x%2.2x", status);
 			return ERROR_NAND_OPERATION_FAILED;
 		}
+
+		device->blocks[i].is_erased = 1;
 	}
 	
 	return ERROR_OK;
@@ -770,9 +772,15 @@
 
 int nand_write_page(struct nand_device_s *device, u32 page, u8 *data, u32 data_size, u8 *oob, u32 oob_size)
 {
+	u32 block;
+
 	if (!device->device)
 		return ERROR_NAND_DEVICE_NOT_PROBED;
 		
+	block = page / (device->erase_size / device->page_size);
+	if (device->blocks[block].is_erased == 1)
+		device->blocks[block].is_erased = 0;
+
 	if (device->use_raw || device->controller->write_page == NULL)
 		return nand_write_page_raw(device, page, data, data_size, oob, oob_size);
 	else



From oharboe at mail.berlios.de  Thu Apr  2 23:23:06 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Thu, 2 Apr 2009 23:23:06 +0200
Subject: [Openocd-svn] r1444 - trunk/src/flash
Message-ID: <200904022123.n32LN6RD014067@sheep.berlios.de>

Author: oharboe
Date: 2009-04-02 23:23:05 +0200 (Thu, 02 Apr 2009)
New Revision: 1444

Modified:
   trunk/src/flash/Makefile.am
   trunk/src/flash/nand.h
Log:
Nicolas Pitre nico at cam.org software ECC computation for NAND flash

Modified: trunk/src/flash/Makefile.am
===================================================================
--- trunk/src/flash/Makefile.am	2009-04-02 21:22:14 UTC (rev 1443)
+++ trunk/src/flash/Makefile.am	2009-04-02 21:23:05 UTC (rev 1444)
@@ -2,11 +2,15 @@
 AM_CPPFLAGS = -DPKGLIBDIR=\"$(pkglibdir)\" @CPPFLAGS@
 METASOURCES = AUTO
 noinst_LIBRARIES = libflash.a
-libflash_a_SOURCES = flash.c lpc2000.c cfi.c non_cfi.c at91sam7.c at91sam7_old.c str7x.c str9x.c aduc702x.c nand.c lpc3180_nand_controller.c \
-		     stellaris.c str9xpec.c stm32x.c tms470.c ecos.c orion_nand.c \
-		     s3c24xx_nand.c s3c2410_nand.c s3c2412_nand.c s3c2440_nand.c s3c2443_nand.c lpc288x.c ocl.c mflash.c pic32mx.c
-noinst_HEADERS = flash.h lpc2000.h cfi.h non_cfi.h at91sam7.h at91sam7_old.h str7x.h str9x.h nand.h lpc3180_nand_controller.h \
-				 stellaris.h str9xpec.h stm32x.h tms470.h s3c24xx_nand.h s3c24xx_regs_nand.h lpc288x.h mflash.h \
-				 ocl.h pic32mx.h
-
+libflash_a_SOURCES = \
+	flash.c lpc2000.c cfi.c non_cfi.c at91sam7.c at91sam7_old.c \
+	str7x.c str9x.c aduc702x.c nand.c nand_ecc.c \
+	lpc3180_nand_controller.c stellaris.c str9xpec.c stm32x.c tms470.c \
+	ecos.c orion_nand.c s3c24xx_nand.c s3c2410_nand.c s3c2412_nand.c \
+	s3c2440_nand.c s3c2443_nand.c lpc288x.c ocl.c mflash.c pic32mx.c
+noinst_HEADERS = \
+	flash.h lpc2000.h cfi.h non_cfi.h at91sam7.h at91sam7_old.h str7x.h \
+	str9x.h nand.h lpc3180_nand_controller.h stellaris.h str9xpec.h \
+	stm32x.h tms470.h s3c24xx_nand.h s3c24xx_regs_nand.h lpc288x.h \
+	mflash.h ocl.h pic32mx.h
 MAINTAINERCLEANFILES = Makefile.in

Modified: trunk/src/flash/nand.h
===================================================================
--- trunk/src/flash/nand.h	2009-04-02 21:22:14 UTC (rev 1443)
+++ trunk/src/flash/nand.h	2009-04-02 21:23:05 UTC (rev 1444)
@@ -197,6 +197,7 @@
 extern int nand_read_page_raw(struct nand_device_s *device, u32 page, u8 *data, u32 data_size, u8 *oob, u32 oob_size);
 extern int nand_write_page_raw(struct nand_device_s *device, u32 page, u8 *data, u32 data_size, u8 *oob, u32 oob_size);
 extern int nand_read_status(struct nand_device_s *device, u8 *status);
+extern int nand_calculate_ecc(struct nand_device_s *device, const u8 *dat, u8 *ecc_code);
 
 extern int nand_register_commands(struct command_context_s *cmd_ctx);
 extern int nand_init(struct command_context_s *cmd_ctx);



From oharboe at mail.berlios.de  Thu Apr  2 23:23:17 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Thu, 2 Apr 2009 23:23:17 +0200
Subject: [Openocd-svn] r1445 - trunk/src/flash
Message-ID: <200904022123.n32LNHwV014094@sheep.berlios.de>

Author: oharboe
Date: 2009-04-02 23:23:16 +0200 (Thu, 02 Apr 2009)
New Revision: 1445

Added:
   trunk/src/flash/nand_ecc.c
Log:
Nicolas Pitre nico at cam.org software ECC computation for NAND flash

Added: trunk/src/flash/nand_ecc.c
===================================================================
--- trunk/src/flash/nand_ecc.c	2009-04-02 21:23:05 UTC (rev 1444)
+++ trunk/src/flash/nand_ecc.c	2009-04-02 21:23:16 UTC (rev 1445)
@@ -0,0 +1,126 @@
+/*
+ * This file contains an ECC algorithm from Toshiba that allows for detection
+ * and correction of 1-bit errors in a 256 byte block of data.
+ *
+ * [ Extracted from the initial code found in some early Linux versions.
+ *   The current Linux code is bigger while being faster, but this is of
+ *   no real benefit when the bottleneck largely remains the JTAG link.  ]
+ *
+ * Copyright (C) 2000-2004 Steven J. Hill (sjhill at realitydiluted.com)
+ *                         Toshiba America Electronics Components, Inc.
+ *
+ * Copyright (C) 2006 Thomas Gleixner <tglx at linutronix.de>
+ *
+ * This file is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the
+ * Free Software Foundation; either version 2 or (at your option) any
+ * later version.
+ *
+ * This file is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this file; if not, write to the Free Software Foundation, Inc.,
+ * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
+ *
+ * As a special exception, if other files instantiate templates or use
+ * macros or inline functions from these files, or you compile these
+ * files and link them with other works to produce a work based on these
+ * files, these files do not by themselves cause the resulting work to be
+ * covered by the GNU General Public License. However the source code for
+ * these files must still be made available in accordance with section (3)
+ * of the GNU General Public License.
+ *
+ * This exception does not invalidate any other reasons why a work based on
+ * this file might be covered by the GNU General Public License.
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include "replacements.h"
+
+#include <inttypes.h>
+
+#include "nand.h"
+
+/*
+ * Pre-calculated 256-way 1 byte column parity
+ */
+static const u8 nand_ecc_precalc_table[] = {
+	0x00, 0x55, 0x56, 0x03, 0x59, 0x0c, 0x0f, 0x5a, 0x5a, 0x0f, 0x0c, 0x59, 0x03, 0x56, 0x55, 0x00,
+	0x65, 0x30, 0x33, 0x66, 0x3c, 0x69, 0x6a, 0x3f, 0x3f, 0x6a, 0x69, 0x3c, 0x66, 0x33, 0x30, 0x65,
+	0x66, 0x33, 0x30, 0x65, 0x3f, 0x6a, 0x69, 0x3c, 0x3c, 0x69, 0x6a, 0x3f, 0x65, 0x30, 0x33, 0x66,
+	0x03, 0x56, 0x55, 0x00, 0x5a, 0x0f, 0x0c, 0x59, 0x59, 0x0c, 0x0f, 0x5a, 0x00, 0x55, 0x56, 0x03,
+	0x69, 0x3c, 0x3f, 0x6a, 0x30, 0x65, 0x66, 0x33, 0x33, 0x66, 0x65, 0x30, 0x6a, 0x3f, 0x3c, 0x69,
+	0x0c, 0x59, 0x5a, 0x0f, 0x55, 0x00, 0x03, 0x56, 0x56, 0x03, 0x00, 0x55, 0x0f, 0x5a, 0x59, 0x0c,
+	0x0f, 0x5a, 0x59, 0x0c, 0x56, 0x03, 0x00, 0x55, 0x55, 0x00, 0x03, 0x56, 0x0c, 0x59, 0x5a, 0x0f,
+	0x6a, 0x3f, 0x3c, 0x69, 0x33, 0x66, 0x65, 0x30, 0x30, 0x65, 0x66, 0x33, 0x69, 0x3c, 0x3f, 0x6a,
+	0x6a, 0x3f, 0x3c, 0x69, 0x33, 0x66, 0x65, 0x30, 0x30, 0x65, 0x66, 0x33, 0x69, 0x3c, 0x3f, 0x6a,
+	0x0f, 0x5a, 0x59, 0x0c, 0x56, 0x03, 0x00, 0x55, 0x55, 0x00, 0x03, 0x56, 0x0c, 0x59, 0x5a, 0x0f,
+	0x0c, 0x59, 0x5a, 0x0f, 0x55, 0x00, 0x03, 0x56, 0x56, 0x03, 0x00, 0x55, 0x0f, 0x5a, 0x59, 0x0c,
+	0x69, 0x3c, 0x3f, 0x6a, 0x30, 0x65, 0x66, 0x33, 0x33, 0x66, 0x65, 0x30, 0x6a, 0x3f, 0x3c, 0x69,
+	0x03, 0x56, 0x55, 0x00, 0x5a, 0x0f, 0x0c, 0x59, 0x59, 0x0c, 0x0f, 0x5a, 0x00, 0x55, 0x56, 0x03,
+	0x66, 0x33, 0x30, 0x65, 0x3f, 0x6a, 0x69, 0x3c, 0x3c, 0x69, 0x6a, 0x3f, 0x65, 0x30, 0x33, 0x66,
+	0x65, 0x30, 0x33, 0x66, 0x3c, 0x69, 0x6a, 0x3f, 0x3f, 0x6a, 0x69, 0x3c, 0x66, 0x33, 0x30, 0x65,
+	0x00, 0x55, 0x56, 0x03, 0x59, 0x0c, 0x0f, 0x5a, 0x5a, 0x0f, 0x0c, 0x59, 0x03, 0x56, 0x55, 0x00
+};
+
+/*
+ * nand_calculate_ecc - Calculate 3-byte ECC for 256-byte block
+ */
+int nand_calculate_ecc(struct nand_device_s *device, const u8 *dat, u8 *ecc_code)
+{
+	u8 idx, reg1, reg2, reg3, tmp1, tmp2;
+	int i;
+
+	/* Initialize variables */
+	reg1 = reg2 = reg3 = 0;
+
+	/* Build up column parity */
+	for(i = 0; i < 256; i++) {
+		/* Get CP0 - CP5 from table */
+		idx = nand_ecc_precalc_table[*dat++];
+		reg1 ^= (idx & 0x3f);
+
+		/* All bit XOR = 1 ? */
+		if (idx & 0x40) {
+			reg3 ^= (u8) i;
+			reg2 ^= ~((u8) i);
+		}
+	}
+
+	/* Create non-inverted ECC code from line parity */
+	tmp1  = (reg3 & 0x80) >> 0; /* B7 -> B7 */
+	tmp1 |= (reg2 & 0x80) >> 1; /* B7 -> B6 */
+	tmp1 |= (reg3 & 0x40) >> 1; /* B6 -> B5 */
+	tmp1 |= (reg2 & 0x40) >> 2; /* B6 -> B4 */
+	tmp1 |= (reg3 & 0x20) >> 2; /* B5 -> B3 */
+	tmp1 |= (reg2 & 0x20) >> 3; /* B5 -> B2 */
+	tmp1 |= (reg3 & 0x10) >> 3; /* B4 -> B1 */
+	tmp1 |= (reg2 & 0x10) >> 4; /* B4 -> B0 */
+
+	tmp2  = (reg3 & 0x08) << 4; /* B3 -> B7 */
+	tmp2 |= (reg2 & 0x08) << 3; /* B3 -> B6 */
+	tmp2 |= (reg3 & 0x04) << 3; /* B2 -> B5 */
+	tmp2 |= (reg2 & 0x04) << 2; /* B2 -> B4 */
+	tmp2 |= (reg3 & 0x02) << 2; /* B1 -> B3 */
+	tmp2 |= (reg2 & 0x02) << 1; /* B1 -> B2 */
+	tmp2 |= (reg3 & 0x01) << 1; /* B0 -> B1 */
+	tmp2 |= (reg2 & 0x01) << 0; /* B7 -> B0 */
+
+	/* Calculate final ECC code */
+#ifdef NAND_ECC_SMC
+	ecc_code[0] = ~tmp2;
+	ecc_code[1] = ~tmp1;
+#else
+	ecc_code[0] = ~tmp1;
+	ecc_code[1] = ~tmp2;
+#endif
+	ecc_code[2] = ((~reg1) << 2) | 0x03;
+
+	return 0;
+}



From oharboe at mail.berlios.de  Thu Apr  2 23:24:09 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Thu, 2 Apr 2009 23:24:09 +0200
Subject: [Openocd-svn] r1446 - trunk/src/flash
Message-ID: <200904022124.n32LO9hT014131@sheep.berlios.de>

Author: oharboe
Date: 2009-04-02 23:24:08 +0200 (Thu, 02 Apr 2009)
New Revision: 1446

Modified:
   trunk/src/flash/nand.c
   trunk/src/flash/nand.h
Log:
Nicolas Pitre nico at cam.org The ECC data is automatically computed and written to the OOB area
when the oob_softecc option is passed to the "nand write" command.


Modified: trunk/src/flash/nand.c
===================================================================
--- trunk/src/flash/nand.c	2009-04-02 21:23:16 UTC (rev 1445)
+++ trunk/src/flash/nand.c	2009-04-02 21:24:08 UTC (rev 1446)
@@ -186,6 +186,39 @@
 	{0x0, NULL},
 };
 
+/*
+ * Define default oob placement schemes for large and small page devices
+ */
+
+nand_ecclayout_t nand_oob_8 = {
+	.eccbytes = 3,
+	.eccpos = {0, 1, 2},
+	.oobfree = {
+		{.offset = 3,
+		 .length = 2},
+		{.offset = 6,
+		 .length = 2}}
+};
+
+nand_ecclayout_t nand_oob_16 = {
+	.eccbytes = 6,
+	.eccpos = {0, 1, 2, 3, 6, 7},
+	.oobfree = {
+		{.offset = 8,
+		 . length = 8}}
+};
+
+nand_ecclayout_t nand_oob_64 = {
+	.eccbytes = 24,
+	.eccpos = {
+		   40, 41, 42, 43, 44, 45, 46, 47,
+		   48, 49, 50, 51, 52, 53, 54, 55,
+		   56, 57, 58, 59, 60, 61, 62, 63},
+	.oobfree = {
+		{.offset = 2,
+		 .length = 38}}
+};
+
 /* nand device <nand_controller> [controller options]
  */
 int handle_nand_device_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
@@ -1291,6 +1324,7 @@
 		u32 page_size = 0;
 		u8 *oob = NULL;
 		u32 oob_size = 0;
+		const int *eccpos = NULL;
 			
 		offset = strtoul(args[2], NULL, 0);
 		
@@ -1303,6 +1337,8 @@
 					oob_format |= NAND_OOB_RAW;
 				else if (!strcmp(args[i], "oob_only"))
 					oob_format |= NAND_OOB_RAW | NAND_OOB_ONLY;
+				else if (!strcmp(args[i], "oob_softecc"))
+					oob_format |= NAND_OOB_SW_ECC;
 				else
 				{
 					command_print(cmd_ctx, "unknown option: %s", args[i]);
@@ -1326,12 +1362,15 @@
 			page = malloc(p->page_size);
 		}
 
-		if (oob_format & NAND_OOB_RAW)
+		if (oob_format & (NAND_OOB_RAW | NAND_OOB_SW_ECC))
 		{
-			if (p->page_size == 512)
+			if (p->page_size == 512) {
 				oob_size = 16;
-			else if (p->page_size == 2048)
+				eccpos = nand_oob_16.eccpos;
+			} else if (p->page_size == 2048) {
 				oob_size = 64;
+				eccpos = nand_oob_64.eccpos;
+			}
 			oob = malloc(oob_size);
 		}
 		
@@ -1357,9 +1396,21 @@
 					memset(page + size_read, 0xff, page_size - size_read);
 				}
 			}
-				
-			if (NULL != oob)
+
+			if (oob_format & NAND_OOB_SW_ECC)
 			{
+				int i, j;
+				u8 ecc[3];
+				memset(oob, 0xff, oob_size);
+				for (i = 0, j = 0; i < page_size; i += 256) {
+					nand_calculate_ecc(p, page+i, ecc);
+					oob[eccpos[j++]] = ecc[0];
+					oob[eccpos[j++]] = ecc[1];
+					oob[eccpos[j++]] = ecc[2];
+				}
+			}
+			else if (NULL != oob)
+			{
 				fileio_read(&fileio, oob_size, oob, &size_read);
 				buf_cnt -= size_read;
 				if (size_read < oob_size)

Modified: trunk/src/flash/nand.h
===================================================================
--- trunk/src/flash/nand.h	2009-04-02 21:23:16 UTC (rev 1445)
+++ trunk/src/flash/nand.h	2009-04-02 21:24:08 UTC (rev 1446)
@@ -56,6 +56,18 @@
 	int is_bad;
 } nand_block_t;
 
+struct nand_oobfree {
+	int offset;
+	int length;
+};
+
+typedef struct nand_ecclayout_s {
+	int eccbytes;
+	int eccpos[64];
+	int oobavail;
+	struct nand_oobfree oobfree[2];
+} nand_ecclayout_t;
+
 typedef struct nand_device_s
 {
 	nand_flash_controller_t *controller;



From oharboe at mail.berlios.de  Thu Apr  2 23:24:57 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Thu, 2 Apr 2009 23:24:57 +0200
Subject: [Openocd-svn] r1447 - trunk/src/target/board
Message-ID: <200904022124.n32LOvSp014203@sheep.berlios.de>

Author: oharboe
Date: 2009-04-02 23:24:56 +0200 (Thu, 02 Apr 2009)
New Revision: 1447

Modified:
   trunk/src/target/board/sheevaplug.cfg
Log:
Nicolas Pitre nico at cam.org write ECC data when reflashing u-Boot on the SheevaPlug

Modified: trunk/src/target/board/sheevaplug.cfg
===================================================================
--- trunk/src/target/board/sheevaplug.cfg	2009-04-02 21:24:08 UTC (rev 1446)
+++ trunk/src/target/board/sheevaplug.cfg	2009-04-02 21:24:56 UTC (rev 1447)
@@ -99,8 +99,8 @@
 	sheevaplug_init
 	nand probe 0
 	nand erase 0 0 4
-	nand write 0 uboot.bin 0
-	reset run
+	nand write 0 uboot.bin 0 oob_softecc
+	resume
 
 }
 



From oharboe at mail.berlios.de  Fri Apr  3 07:32:40 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Fri, 3 Apr 2009 07:32:40 +0200
Subject: [Openocd-svn] r1448 - trunk/src/flash
Message-ID: <200904030532.n335WeIq023511@sheep.berlios.de>

Author: oharboe
Date: 2009-04-03 07:32:28 +0200 (Fri, 03 Apr 2009)
New Revision: 1448

Modified:
   trunk/src/flash/nand.c
Log:
Nicolas Pitre nico at cam.org list the new flag in the "nand write" help line.


Modified: trunk/src/flash/nand.c
===================================================================
--- trunk/src/flash/nand.c	2009-04-02 21:24:56 UTC (rev 1447)
+++ trunk/src/flash/nand.c	2009-04-03 05:32:28 UTC (rev 1448)
@@ -322,7 +322,7 @@
 		register_command(cmd_ctx, nand_cmd, "dump", handle_nand_dump_command, COMMAND_EXEC,
 						 "dump from NAND flash device <num> <filename> <offset> <size> [options]");
 		register_command(cmd_ctx, nand_cmd, "write", handle_nand_write_command, COMMAND_EXEC,
-						 "write to NAND flash device <num> <filename> <offset> [oob_raw|oob_only]");
+						 "write to NAND flash device <num> <filename> <offset> [oob_raw|oob_only|oob_softecc]");
 		register_command(cmd_ctx, nand_cmd, "raw_access", handle_nand_raw_access_command, COMMAND_EXEC,
 						 "raw access to NAND flash device <num> ['enable'|'disable']");
 	}



From oharboe at mail.berlios.de  Fri Apr  3 07:33:48 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Fri, 3 Apr 2009 07:33:48 +0200
Subject: [Openocd-svn] r1449 - trunk/src/target/target
Message-ID: <200904030533.n335XmBM024645@sheep.berlios.de>

Author: oharboe
Date: 2009-04-03 07:33:42 +0200 (Fri, 03 Apr 2009)
New Revision: 1449

Added:
   trunk/src/target/target/lpc2103.cfg
Log:
Freddie Chopin <freddie_chopin at op.pl> I attach a config file for LPC2103

Added: trunk/src/target/target/lpc2103.cfg
===================================================================
--- trunk/src/target/target/lpc2103.cfg	2009-04-03 05:32:28 UTC (rev 1448)
+++ trunk/src/target/target/lpc2103.cfg	2009-04-03 05:33:42 UTC (rev 1449)
@@ -0,0 +1,35 @@
+# NXP LPC2103 ARM7TDMI-S with 32kB Flash and 8kB SRAM, clocked with 12MHz crystal
+
+if { [info exists CHIPNAME] } {	
+   set _CHIPNAME $CHIPNAME
+} else {
+   set _CHIPNAME lpc2103
+}
+
+if { [info exists ENDIAN] } {
+   set _ENDIAN $ENDIAN
+} else {
+   set _ENDIAN little
+}
+
+if { [info exists CPUTAPID ] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+   set _CPUTAPID 0x4f1f0f0f 
+}
+
+# LPC2000 -> SRST causes TRST
+reset_config trst_and_srst srst_pulls_trst
+
+jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+
+set _TARGETNAME [format "%s.cpu" $_CHIPNAME]
+
+target create $_TARGETNAME arm7tdmi -endian $_ENDIAN -chain-position $_TARGETNAME -variant arm7tdmi-s_r4
+
+# 8kB of internal SRAM
+$_TARGETNAME configure -work-area-virt 0 -work-area-phys 0x40000000 -work-area-size 0x2000 -work-area-backup 0
+
+# 32kB of internal Flash, core clocked with 12MHz crystal
+# flash bank lpc2000 <base> <size> 0 0 <target#> <variant> <clock> [calc_checksum]
+flash bank lpc2000 0x0 0x8000 0 0 0 lpc2000_v2 12000 calc_checksum



From oharboe at mail.berlios.de  Fri Apr  3 07:36:01 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Fri, 3 Apr 2009 07:36:01 +0200
Subject: [Openocd-svn] r1450 - trunk/src/target/board
Message-ID: <200904030536.n335a1FC026178@sheep.berlios.de>

Author: oharboe
Date: 2009-04-03 07:36:00 +0200 (Fri, 03 Apr 2009)
New Revision: 1450

Added:
   trunk/src/target/board/olimex_stm32_h103.cfg
Log:
Piotr Esden-Tempski <piotr at esden.net> added a board file for the Olimex STM32-H103 eval board.

Added: trunk/src/target/board/olimex_stm32_h103.cfg
===================================================================
--- trunk/src/target/board/olimex_stm32_h103.cfg	2009-04-03 05:33:42 UTC (rev 1449)
+++ trunk/src/target/board/olimex_stm32_h103.cfg	2009-04-03 05:36:00 UTC (rev 1450)
@@ -0,0 +1,9 @@
+#
+# Olimex STM32-H103 eval board
+#
+# http://olimex.com/dev/stm32-h103.html
+#
+
+source [find target/stm32.cfg]
+
+set _BSTAPID 0x16410041



From oharboe at mail.berlios.de  Fri Apr  3 07:36:56 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Fri, 3 Apr 2009 07:36:56 +0200
Subject: [Openocd-svn] r1451 - trunk/src/target/interface
Message-ID: <200904030536.n335aukI026564@sheep.berlios.de>

Author: oharboe
Date: 2009-04-03 07:36:54 +0200 (Fri, 03 Apr 2009)
New Revision: 1451

Added:
   trunk/src/target/interface/oocdlink.cfg
Log:
Uwe Hermann <uwe at hermann-uwe.de> oocdlink file

Added: trunk/src/target/interface/oocdlink.cfg
===================================================================
--- trunk/src/target/interface/oocdlink.cfg	2009-04-03 05:36:00 UTC (rev 1450)
+++ trunk/src/target/interface/oocdlink.cfg	2009-04-03 05:36:54 UTC (rev 1451)
@@ -0,0 +1,12 @@
+#
+# Joern Kaipf's OOCDLink
+#
+# http://www.joernonline.de/contrexx2/cms/index.php?page=126
+#
+
+interface ft2232
+ft2232_device_desc "OOCDLink A"
+ft2232_layout oocdlink
+ft2232_vid_pid 0x0403 0xbaf8
+jtag_khz 5
+



From ntfreak at mail.berlios.de  Fri Apr  3 10:16:51 2009
From: ntfreak at mail.berlios.de (ntfreak at BerliOS)
Date: Fri, 3 Apr 2009 10:16:51 +0200
Subject: [Openocd-svn] r1452 - in trunk/src: flash target/board
	target/interface target/target
Message-ID: <200904030816.n338GpTc000533@sheep.berlios.de>

Author: ntfreak
Date: 2009-04-03 10:16:47 +0200 (Fri, 03 Apr 2009)
New Revision: 1452

Modified:
   trunk/src/flash/nand_ecc.c
   trunk/src/target/board/olimex_stm32_h103.cfg
   trunk/src/target/interface/oocdlink.cfg
   trunk/src/target/target/lpc2103.cfg
Log:
- add svn props from previous commit

Modified: trunk/src/flash/nand_ecc.c
===================================================================
--- trunk/src/flash/nand_ecc.c	2009-04-03 05:36:54 UTC (rev 1451)
+++ trunk/src/flash/nand_ecc.c	2009-04-03 08:16:47 UTC (rev 1452)
@@ -1,126 +1,126 @@
-/*
- * This file contains an ECC algorithm from Toshiba that allows for detection
- * and correction of 1-bit errors in a 256 byte block of data.
- *
- * [ Extracted from the initial code found in some early Linux versions.
- *   The current Linux code is bigger while being faster, but this is of
- *   no real benefit when the bottleneck largely remains the JTAG link.  ]
- *
- * Copyright (C) 2000-2004 Steven J. Hill (sjhill at realitydiluted.com)
- *                         Toshiba America Electronics Components, Inc.
- *
- * Copyright (C) 2006 Thomas Gleixner <tglx at linutronix.de>
- *
- * This file is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License as published by the
- * Free Software Foundation; either version 2 or (at your option) any
- * later version.
- *
- * This file is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * for more details.
- *
- * You should have received a copy of the GNU General Public License along
- * with this file; if not, write to the Free Software Foundation, Inc.,
- * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
- *
- * As a special exception, if other files instantiate templates or use
- * macros or inline functions from these files, or you compile these
- * files and link them with other works to produce a work based on these
- * files, these files do not by themselves cause the resulting work to be
- * covered by the GNU General Public License. However the source code for
- * these files must still be made available in accordance with section (3)
- * of the GNU General Public License.
- *
- * This exception does not invalidate any other reasons why a work based on
- * this file might be covered by the GNU General Public License.
- */
-
-#ifdef HAVE_CONFIG_H
-#include "config.h"
-#endif
-
-#include "replacements.h"
-
-#include <inttypes.h>
-
-#include "nand.h"
-
-/*
- * Pre-calculated 256-way 1 byte column parity
- */
-static const u8 nand_ecc_precalc_table[] = {
-	0x00, 0x55, 0x56, 0x03, 0x59, 0x0c, 0x0f, 0x5a, 0x5a, 0x0f, 0x0c, 0x59, 0x03, 0x56, 0x55, 0x00,
-	0x65, 0x30, 0x33, 0x66, 0x3c, 0x69, 0x6a, 0x3f, 0x3f, 0x6a, 0x69, 0x3c, 0x66, 0x33, 0x30, 0x65,
-	0x66, 0x33, 0x30, 0x65, 0x3f, 0x6a, 0x69, 0x3c, 0x3c, 0x69, 0x6a, 0x3f, 0x65, 0x30, 0x33, 0x66,
-	0x03, 0x56, 0x55, 0x00, 0x5a, 0x0f, 0x0c, 0x59, 0x59, 0x0c, 0x0f, 0x5a, 0x00, 0x55, 0x56, 0x03,
-	0x69, 0x3c, 0x3f, 0x6a, 0x30, 0x65, 0x66, 0x33, 0x33, 0x66, 0x65, 0x30, 0x6a, 0x3f, 0x3c, 0x69,
-	0x0c, 0x59, 0x5a, 0x0f, 0x55, 0x00, 0x03, 0x56, 0x56, 0x03, 0x00, 0x55, 0x0f, 0x5a, 0x59, 0x0c,
-	0x0f, 0x5a, 0x59, 0x0c, 0x56, 0x03, 0x00, 0x55, 0x55, 0x00, 0x03, 0x56, 0x0c, 0x59, 0x5a, 0x0f,
-	0x6a, 0x3f, 0x3c, 0x69, 0x33, 0x66, 0x65, 0x30, 0x30, 0x65, 0x66, 0x33, 0x69, 0x3c, 0x3f, 0x6a,
-	0x6a, 0x3f, 0x3c, 0x69, 0x33, 0x66, 0x65, 0x30, 0x30, 0x65, 0x66, 0x33, 0x69, 0x3c, 0x3f, 0x6a,
-	0x0f, 0x5a, 0x59, 0x0c, 0x56, 0x03, 0x00, 0x55, 0x55, 0x00, 0x03, 0x56, 0x0c, 0x59, 0x5a, 0x0f,
-	0x0c, 0x59, 0x5a, 0x0f, 0x55, 0x00, 0x03, 0x56, 0x56, 0x03, 0x00, 0x55, 0x0f, 0x5a, 0x59, 0x0c,
-	0x69, 0x3c, 0x3f, 0x6a, 0x30, 0x65, 0x66, 0x33, 0x33, 0x66, 0x65, 0x30, 0x6a, 0x3f, 0x3c, 0x69,
-	0x03, 0x56, 0x55, 0x00, 0x5a, 0x0f, 0x0c, 0x59, 0x59, 0x0c, 0x0f, 0x5a, 0x00, 0x55, 0x56, 0x03,
-	0x66, 0x33, 0x30, 0x65, 0x3f, 0x6a, 0x69, 0x3c, 0x3c, 0x69, 0x6a, 0x3f, 0x65, 0x30, 0x33, 0x66,
-	0x65, 0x30, 0x33, 0x66, 0x3c, 0x69, 0x6a, 0x3f, 0x3f, 0x6a, 0x69, 0x3c, 0x66, 0x33, 0x30, 0x65,
-	0x00, 0x55, 0x56, 0x03, 0x59, 0x0c, 0x0f, 0x5a, 0x5a, 0x0f, 0x0c, 0x59, 0x03, 0x56, 0x55, 0x00
-};
-
-/*
- * nand_calculate_ecc - Calculate 3-byte ECC for 256-byte block
- */
-int nand_calculate_ecc(struct nand_device_s *device, const u8 *dat, u8 *ecc_code)
-{
-	u8 idx, reg1, reg2, reg3, tmp1, tmp2;
-	int i;
-
-	/* Initialize variables */
-	reg1 = reg2 = reg3 = 0;
-
-	/* Build up column parity */
-	for(i = 0; i < 256; i++) {
-		/* Get CP0 - CP5 from table */
-		idx = nand_ecc_precalc_table[*dat++];
-		reg1 ^= (idx & 0x3f);
-
-		/* All bit XOR = 1 ? */
-		if (idx & 0x40) {
-			reg3 ^= (u8) i;
-			reg2 ^= ~((u8) i);
-		}
-	}
-
-	/* Create non-inverted ECC code from line parity */
-	tmp1  = (reg3 & 0x80) >> 0; /* B7 -> B7 */
-	tmp1 |= (reg2 & 0x80) >> 1; /* B7 -> B6 */
-	tmp1 |= (reg3 & 0x40) >> 1; /* B6 -> B5 */
-	tmp1 |= (reg2 & 0x40) >> 2; /* B6 -> B4 */
-	tmp1 |= (reg3 & 0x20) >> 2; /* B5 -> B3 */
-	tmp1 |= (reg2 & 0x20) >> 3; /* B5 -> B2 */
-	tmp1 |= (reg3 & 0x10) >> 3; /* B4 -> B1 */
-	tmp1 |= (reg2 & 0x10) >> 4; /* B4 -> B0 */
-
-	tmp2  = (reg3 & 0x08) << 4; /* B3 -> B7 */
-	tmp2 |= (reg2 & 0x08) << 3; /* B3 -> B6 */
-	tmp2 |= (reg3 & 0x04) << 3; /* B2 -> B5 */
-	tmp2 |= (reg2 & 0x04) << 2; /* B2 -> B4 */
-	tmp2 |= (reg3 & 0x02) << 2; /* B1 -> B3 */
-	tmp2 |= (reg2 & 0x02) << 1; /* B1 -> B2 */
-	tmp2 |= (reg3 & 0x01) << 1; /* B0 -> B1 */
-	tmp2 |= (reg2 & 0x01) << 0; /* B7 -> B0 */
-
-	/* Calculate final ECC code */
-#ifdef NAND_ECC_SMC
-	ecc_code[0] = ~tmp2;
-	ecc_code[1] = ~tmp1;
-#else
-	ecc_code[0] = ~tmp1;
-	ecc_code[1] = ~tmp2;
-#endif
-	ecc_code[2] = ((~reg1) << 2) | 0x03;
-
-	return 0;
-}
+/*
+ * This file contains an ECC algorithm from Toshiba that allows for detection
+ * and correction of 1-bit errors in a 256 byte block of data.
+ *
+ * [ Extracted from the initial code found in some early Linux versions.
+ *   The current Linux code is bigger while being faster, but this is of
+ *   no real benefit when the bottleneck largely remains the JTAG link.  ]
+ *
+ * Copyright (C) 2000-2004 Steven J. Hill (sjhill at realitydiluted.com)
+ *                         Toshiba America Electronics Components, Inc.
+ *
+ * Copyright (C) 2006 Thomas Gleixner <tglx at linutronix.de>
+ *
+ * This file is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the
+ * Free Software Foundation; either version 2 or (at your option) any
+ * later version.
+ *
+ * This file is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this file; if not, write to the Free Software Foundation, Inc.,
+ * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
+ *
+ * As a special exception, if other files instantiate templates or use
+ * macros or inline functions from these files, or you compile these
+ * files and link them with other works to produce a work based on these
+ * files, these files do not by themselves cause the resulting work to be
+ * covered by the GNU General Public License. However the source code for
+ * these files must still be made available in accordance with section (3)
+ * of the GNU General Public License.
+ *
+ * This exception does not invalidate any other reasons why a work based on
+ * this file might be covered by the GNU General Public License.
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include "replacements.h"
+
+#include <inttypes.h>
+
+#include "nand.h"
+
+/*
+ * Pre-calculated 256-way 1 byte column parity
+ */
+static const u8 nand_ecc_precalc_table[] = {
+	0x00, 0x55, 0x56, 0x03, 0x59, 0x0c, 0x0f, 0x5a, 0x5a, 0x0f, 0x0c, 0x59, 0x03, 0x56, 0x55, 0x00,
+	0x65, 0x30, 0x33, 0x66, 0x3c, 0x69, 0x6a, 0x3f, 0x3f, 0x6a, 0x69, 0x3c, 0x66, 0x33, 0x30, 0x65,
+	0x66, 0x33, 0x30, 0x65, 0x3f, 0x6a, 0x69, 0x3c, 0x3c, 0x69, 0x6a, 0x3f, 0x65, 0x30, 0x33, 0x66,
+	0x03, 0x56, 0x55, 0x00, 0x5a, 0x0f, 0x0c, 0x59, 0x59, 0x0c, 0x0f, 0x5a, 0x00, 0x55, 0x56, 0x03,
+	0x69, 0x3c, 0x3f, 0x6a, 0x30, 0x65, 0x66, 0x33, 0x33, 0x66, 0x65, 0x30, 0x6a, 0x3f, 0x3c, 0x69,
+	0x0c, 0x59, 0x5a, 0x0f, 0x55, 0x00, 0x03, 0x56, 0x56, 0x03, 0x00, 0x55, 0x0f, 0x5a, 0x59, 0x0c,
+	0x0f, 0x5a, 0x59, 0x0c, 0x56, 0x03, 0x00, 0x55, 0x55, 0x00, 0x03, 0x56, 0x0c, 0x59, 0x5a, 0x0f,
+	0x6a, 0x3f, 0x3c, 0x69, 0x33, 0x66, 0x65, 0x30, 0x30, 0x65, 0x66, 0x33, 0x69, 0x3c, 0x3f, 0x6a,
+	0x6a, 0x3f, 0x3c, 0x69, 0x33, 0x66, 0x65, 0x30, 0x30, 0x65, 0x66, 0x33, 0x69, 0x3c, 0x3f, 0x6a,
+	0x0f, 0x5a, 0x59, 0x0c, 0x56, 0x03, 0x00, 0x55, 0x55, 0x00, 0x03, 0x56, 0x0c, 0x59, 0x5a, 0x0f,
+	0x0c, 0x59, 0x5a, 0x0f, 0x55, 0x00, 0x03, 0x56, 0x56, 0x03, 0x00, 0x55, 0x0f, 0x5a, 0x59, 0x0c,
+	0x69, 0x3c, 0x3f, 0x6a, 0x30, 0x65, 0x66, 0x33, 0x33, 0x66, 0x65, 0x30, 0x6a, 0x3f, 0x3c, 0x69,
+	0x03, 0x56, 0x55, 0x00, 0x5a, 0x0f, 0x0c, 0x59, 0x59, 0x0c, 0x0f, 0x5a, 0x00, 0x55, 0x56, 0x03,
+	0x66, 0x33, 0x30, 0x65, 0x3f, 0x6a, 0x69, 0x3c, 0x3c, 0x69, 0x6a, 0x3f, 0x65, 0x30, 0x33, 0x66,
+	0x65, 0x30, 0x33, 0x66, 0x3c, 0x69, 0x6a, 0x3f, 0x3f, 0x6a, 0x69, 0x3c, 0x66, 0x33, 0x30, 0x65,
+	0x00, 0x55, 0x56, 0x03, 0x59, 0x0c, 0x0f, 0x5a, 0x5a, 0x0f, 0x0c, 0x59, 0x03, 0x56, 0x55, 0x00
+};
+
+/*
+ * nand_calculate_ecc - Calculate 3-byte ECC for 256-byte block
+ */
+int nand_calculate_ecc(struct nand_device_s *device, const u8 *dat, u8 *ecc_code)
+{
+	u8 idx, reg1, reg2, reg3, tmp1, tmp2;
+	int i;
+
+	/* Initialize variables */
+	reg1 = reg2 = reg3 = 0;
+
+	/* Build up column parity */
+	for(i = 0; i < 256; i++) {
+		/* Get CP0 - CP5 from table */
+		idx = nand_ecc_precalc_table[*dat++];
+		reg1 ^= (idx & 0x3f);
+
+		/* All bit XOR = 1 ? */
+		if (idx & 0x40) {
+			reg3 ^= (u8) i;
+			reg2 ^= ~((u8) i);
+		}
+	}
+
+	/* Create non-inverted ECC code from line parity */
+	tmp1  = (reg3 & 0x80) >> 0; /* B7 -> B7 */
+	tmp1 |= (reg2 & 0x80) >> 1; /* B7 -> B6 */
+	tmp1 |= (reg3 & 0x40) >> 1; /* B6 -> B5 */
+	tmp1 |= (reg2 & 0x40) >> 2; /* B6 -> B4 */
+	tmp1 |= (reg3 & 0x20) >> 2; /* B5 -> B3 */
+	tmp1 |= (reg2 & 0x20) >> 3; /* B5 -> B2 */
+	tmp1 |= (reg3 & 0x10) >> 3; /* B4 -> B1 */
+	tmp1 |= (reg2 & 0x10) >> 4; /* B4 -> B0 */
+
+	tmp2  = (reg3 & 0x08) << 4; /* B3 -> B7 */
+	tmp2 |= (reg2 & 0x08) << 3; /* B3 -> B6 */
+	tmp2 |= (reg3 & 0x04) << 3; /* B2 -> B5 */
+	tmp2 |= (reg2 & 0x04) << 2; /* B2 -> B4 */
+	tmp2 |= (reg3 & 0x02) << 2; /* B1 -> B3 */
+	tmp2 |= (reg2 & 0x02) << 1; /* B1 -> B2 */
+	tmp2 |= (reg3 & 0x01) << 1; /* B0 -> B1 */
+	tmp2 |= (reg2 & 0x01) << 0; /* B7 -> B0 */
+
+	/* Calculate final ECC code */
+#ifdef NAND_ECC_SMC
+	ecc_code[0] = ~tmp2;
+	ecc_code[1] = ~tmp1;
+#else
+	ecc_code[0] = ~tmp1;
+	ecc_code[1] = ~tmp2;
+#endif
+	ecc_code[2] = ((~reg1) << 2) | 0x03;
+
+	return 0;
+}


Property changes on: trunk/src/flash/nand_ecc.c
___________________________________________________________________
Name: svn:eol-style
   + native

Modified: trunk/src/target/board/olimex_stm32_h103.cfg
===================================================================
--- trunk/src/target/board/olimex_stm32_h103.cfg	2009-04-03 05:36:54 UTC (rev 1451)
+++ trunk/src/target/board/olimex_stm32_h103.cfg	2009-04-03 08:16:47 UTC (rev 1452)
@@ -1,9 +1,9 @@
-#
-# Olimex STM32-H103 eval board
-#
-# http://olimex.com/dev/stm32-h103.html
-#
-
-source [find target/stm32.cfg]
-
-set _BSTAPID 0x16410041
+#
+# Olimex STM32-H103 eval board
+#
+# http://olimex.com/dev/stm32-h103.html
+#
+
+source [find target/stm32.cfg]
+
+set _BSTAPID 0x16410041


Property changes on: trunk/src/target/board/olimex_stm32_h103.cfg
___________________________________________________________________
Name: svn:eol-style
   + native

Modified: trunk/src/target/interface/oocdlink.cfg
===================================================================
--- trunk/src/target/interface/oocdlink.cfg	2009-04-03 05:36:54 UTC (rev 1451)
+++ trunk/src/target/interface/oocdlink.cfg	2009-04-03 08:16:47 UTC (rev 1452)
@@ -1,12 +1,12 @@
-#
-# Joern Kaipf's OOCDLink
-#
-# http://www.joernonline.de/contrexx2/cms/index.php?page=126
-#
-
-interface ft2232
-ft2232_device_desc "OOCDLink A"
-ft2232_layout oocdlink
-ft2232_vid_pid 0x0403 0xbaf8
-jtag_khz 5
-
+#
+# Joern Kaipf's OOCDLink
+#
+# http://www.joernonline.de/contrexx2/cms/index.php?page=126
+#
+
+interface ft2232
+ft2232_device_desc "OOCDLink A"
+ft2232_layout oocdlink
+ft2232_vid_pid 0x0403 0xbaf8
+jtag_khz 5
+


Property changes on: trunk/src/target/interface/oocdlink.cfg
___________________________________________________________________
Name: svn:eol-style
   + native

Modified: trunk/src/target/target/lpc2103.cfg
===================================================================
--- trunk/src/target/target/lpc2103.cfg	2009-04-03 05:36:54 UTC (rev 1451)
+++ trunk/src/target/target/lpc2103.cfg	2009-04-03 08:16:47 UTC (rev 1452)
@@ -1,35 +1,35 @@
-# NXP LPC2103 ARM7TDMI-S with 32kB Flash and 8kB SRAM, clocked with 12MHz crystal
-
-if { [info exists CHIPNAME] } {	
-   set _CHIPNAME $CHIPNAME
-} else {
-   set _CHIPNAME lpc2103
-}
-
-if { [info exists ENDIAN] } {
-   set _ENDIAN $ENDIAN
-} else {
-   set _ENDIAN little
-}
-
-if { [info exists CPUTAPID ] } {
-   set _CPUTAPID $CPUTAPID
-} else {
-   set _CPUTAPID 0x4f1f0f0f 
-}
-
-# LPC2000 -> SRST causes TRST
-reset_config trst_and_srst srst_pulls_trst
-
-jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
-
-set _TARGETNAME [format "%s.cpu" $_CHIPNAME]
-
-target create $_TARGETNAME arm7tdmi -endian $_ENDIAN -chain-position $_TARGETNAME -variant arm7tdmi-s_r4
-
-# 8kB of internal SRAM
-$_TARGETNAME configure -work-area-virt 0 -work-area-phys 0x40000000 -work-area-size 0x2000 -work-area-backup 0
-
-# 32kB of internal Flash, core clocked with 12MHz crystal
-# flash bank lpc2000 <base> <size> 0 0 <target#> <variant> <clock> [calc_checksum]
-flash bank lpc2000 0x0 0x8000 0 0 0 lpc2000_v2 12000 calc_checksum
+# NXP LPC2103 ARM7TDMI-S with 32kB Flash and 8kB SRAM, clocked with 12MHz crystal
+
+if { [info exists CHIPNAME] } {	
+   set _CHIPNAME $CHIPNAME
+} else {
+   set _CHIPNAME lpc2103
+}
+
+if { [info exists ENDIAN] } {
+   set _ENDIAN $ENDIAN
+} else {
+   set _ENDIAN little
+}
+
+if { [info exists CPUTAPID ] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+   set _CPUTAPID 0x4f1f0f0f 
+}
+
+# LPC2000 -> SRST causes TRST
+reset_config trst_and_srst srst_pulls_trst
+
+jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+
+set _TARGETNAME [format "%s.cpu" $_CHIPNAME]
+
+target create $_TARGETNAME arm7tdmi -endian $_ENDIAN -chain-position $_TARGETNAME -variant arm7tdmi-s_r4
+
+# 8kB of internal SRAM
+$_TARGETNAME configure -work-area-virt 0 -work-area-phys 0x40000000 -work-area-size 0x2000 -work-area-backup 0
+
+# 32kB of internal Flash, core clocked with 12MHz crystal
+# flash bank lpc2000 <base> <size> 0 0 <target#> <variant> <clock> [calc_checksum]
+flash bank lpc2000 0x0 0x8000 0 0 0 lpc2000_v2 12000 calc_checksum


Property changes on: trunk/src/target/target/lpc2103.cfg
___________________________________________________________________
Name: svn:eol-style
   + native



From mlu at mail.berlios.de  Fri Apr  3 12:10:26 2009
From: mlu at mail.berlios.de (mlu at mail.berlios.de)
Date: Fri, 3 Apr 2009 12:10:26 +0200
Subject: [Openocd-svn] r1453 - trunk/src/target
Message-ID: <200904031010.n33AAQ9b029986@sheep.berlios.de>

Author: mlu
Date: 2009-04-03 12:10:12 +0200 (Fri, 03 Apr 2009)
New Revision: 1453

Modified:
   trunk/src/target/armv4_5.c
   trunk/src/target/armv7m.c
   trunk/src/target/cortex_swjdp.c
Log:
Slight improvement in run_algorithm register restore.
More debug info for cortex swjdp errors.


Modified: trunk/src/target/armv4_5.c
===================================================================
--- trunk/src/target/armv4_5.c	2009-04-03 08:16:47 UTC (rev 1452)
+++ trunk/src/target/armv4_5.c	2009-04-03 10:10:12 UTC (rev 1453)
@@ -661,10 +661,15 @@
 
 	for (i = 0; i <= 16; i++)
 	{
-		LOG_DEBUG("restoring register %s with value 0x%8.8x", ARMV4_5_CORE_REG_MODE(armv4_5->core_cache, armv4_5_algorithm_info->core_mode, i).name, context[i]);
-		buf_set_u32(ARMV4_5_CORE_REG_MODE(armv4_5->core_cache, armv4_5_algorithm_info->core_mode, i).value, 0, 32, context[i]);
-		ARMV4_5_CORE_REG_MODE(armv4_5->core_cache, armv4_5_algorithm_info->core_mode, i).valid = 1;
-		ARMV4_5_CORE_REG_MODE(armv4_5->core_cache, armv4_5_algorithm_info->core_mode, i).dirty = 1;
+		u32 regvalue;
+		regvalue = buf_get_u32(ARMV4_5_CORE_REG_MODE(armv4_5->core_cache, armv4_5_algorithm_info->core_mode, i).value, 0, 32);
+		if (regvalue != context[i])
+		{
+			LOG_DEBUG("restoring register %s with value 0x%8.8x", ARMV4_5_CORE_REG_MODE(armv4_5->core_cache, armv4_5_algorithm_info->core_mode, i).name, context[i]);
+			buf_set_u32(ARMV4_5_CORE_REG_MODE(armv4_5->core_cache, armv4_5_algorithm_info->core_mode, i).value, 0, 32, context[i]);
+			ARMV4_5_CORE_REG_MODE(armv4_5->core_cache, armv4_5_algorithm_info->core_mode, i).valid = 1;
+			ARMV4_5_CORE_REG_MODE(armv4_5->core_cache, armv4_5_algorithm_info->core_mode, i).dirty = 1;
+		}
 	}
 	buf_set_u32(armv4_5->core_cache->reg_list[ARMV4_5_CPSR].value, 0, 32, cpsr);
 	armv4_5->core_cache->reg_list[ARMV4_5_CPSR].valid = 1;

Modified: trunk/src/target/armv7m.c
===================================================================
--- trunk/src/target/armv7m.c	2009-04-03 08:16:47 UTC (rev 1452)
+++ trunk/src/target/armv7m.c	2009-04-03 10:10:12 UTC (rev 1453)
@@ -449,10 +449,15 @@
 
 	for (i = ARMV7NUMCOREREGS-1; i >= 0; i--)
 	{
-		LOG_DEBUG("restoring register %s with value 0x%8.8x", armv7m->core_cache->reg_list[i].name, context[i]);
-		buf_set_u32(armv7m->core_cache->reg_list[i].value, 0, 32, context[i]);
-		armv7m->core_cache->reg_list[i].valid = 1;
-		armv7m->core_cache->reg_list[i].dirty = 1;
+		u32 regvalue;
+		regvalue = buf_get_u32(armv7m->core_cache->reg_list[i].value, 0, 32);
+		if (regvalue != context[i])
+		{
+			LOG_DEBUG("restoring register %s with value 0x%8.8x", armv7m->core_cache->reg_list[i].name, context[i]);
+			buf_set_u32(armv7m->core_cache->reg_list[i].value, 0, 32, context[i]);
+			armv7m->core_cache->reg_list[i].valid = 1;
+			armv7m->core_cache->reg_list[i].dirty = 1;
+		}
 	}
 
 	armv7m->core_mode = core_mode;

Modified: trunk/src/target/cortex_swjdp.c
===================================================================
--- trunk/src/target/cortex_swjdp.c	2009-04-03 08:16:47 UTC (rev 1452)
+++ trunk/src/target/cortex_swjdp.c	2009-04-03 10:10:12 UTC (rev 1453)
@@ -247,6 +247,8 @@
 		{
 			u32 dcb_dhcsr,nvic_shcsr, nvic_bfar, nvic_cfsr;
 
+			/* Print information about last AHBAP access */
+			LOG_ERROR("AHBAP: dp_select 0x%x, ap_csw 0x%x, ap_tar 0x%x", swjdp->dp_select_value, swjdp->ap_csw_value, swjdp->ap_tar_value);
 			if (ctrlstat & SSTICKYORUN)
 				LOG_ERROR("SWJ-DP OVERRUN - check clock or reduce jtag speed");
 



From ntfreak at mail.berlios.de  Fri Apr  3 14:55:26 2009
From: ntfreak at mail.berlios.de (ntfreak at BerliOS)
Date: Fri, 3 Apr 2009 14:55:26 +0200
Subject: [Openocd-svn] r1454 - trunk/doc
Message-ID: <200904031255.n33CtQnh023970@sheep.berlios.de>

Author: ntfreak
Date: 2009-04-03 14:55:25 +0200 (Fri, 03 Apr 2009)
New Revision: 1454

Modified:
   trunk/doc/openocd.texi
Log:
- add openocd coding style to texi

Modified: trunk/doc/openocd.texi
===================================================================
--- trunk/doc/openocd.texi	2009-04-03 10:10:12 UTC (rev 1453)
+++ trunk/doc/openocd.texi	2009-04-03 12:55:25 UTC (rev 1454)
@@ -123,6 +123,41 @@
 
 The main OpenOCD web site is available at @uref{http://openocd.berlios.de/web/}.
 
+ at section Coding Style
+ at cindex Coding Style
+
+The following rules try to describe formatting and naming conventions that should be
+followed to make the whole OpenOCD code look more consistent. The ultimate goal of
+coding style should be readability, and these rules may be ignored for a particular
+(small) piece of code if that makes it more readable.
+
+ at subsection Formatting rules:
+ at itemize @bullet
+ at item remove any trailing white space
+ at item use TAB characters for indentation, not spaces
+ at item displayed TAB width is 4 characters
+ at item make sure NOT to use DOS '\r\n' line feeds
+ at item do not add more than 2 empty lines to source files
+ at item do not add trailing empty lines to source files
+ at item do not use C++ style comments (//)
+ at item lines may be reasonably wide - there's no anachronistic 80 characters limit
+ at end itemize
+
+ at subsection Naming rules:
+ at itemize @bullet
+ at item identifiers use lower-case letters only
+ at item identifiers consisting of multiple words use underline characters between consecutive words
+ at item macros use upper-case letters only
+ at item structure names shall be appended with '_s'
+ at item typedefs shall be appended with '_t'
+ at end itemize
+
+ at subsection Function calls:
+ at itemize @bullet
+ at item function calls have no space between the functions name and the parameter
+list: my_func(param1, param2, ...)
+ at end itemize
+
 @node Building
 @chapter Building
 @cindex building OpenOCD



From mlu at mail.berlios.de  Tue Apr 14 18:34:20 2009
From: mlu at mail.berlios.de (mlu at mail.berlios.de)
Date: Tue, 14 Apr 2009 18:34:20 +0200
Subject: [Openocd-svn] r1455 - trunk/src/target
Message-ID: <200904141634.n3EGYKG8012849@sheep.berlios.de>

Author: mlu
Date: 2009-04-14 18:33:52 +0200 (Tue, 14 Apr 2009)
New Revision: 1455

Modified:
   trunk/src/target/arm_simulator.c
Log:
Solve problem with single stepping.

Modified: trunk/src/target/arm_simulator.c
===================================================================
--- trunk/src/target/arm_simulator.c	2009-04-03 12:55:25 UTC (rev 1454)
+++ trunk/src/target/arm_simulator.c	2009-04-14 16:33:52 UTC (rev 1455)
@@ -415,7 +415,12 @@
 		u8 carry_out;
 		
 		Rd = 0x0;
-		Rn = buf_get_u32(ARMV4_5_CORE_REG_MODE(armv4_5->core_cache, armv4_5->core_mode, instruction.info.data_proc.Rn).value, 0, 32);
+		/* ARM_MOV and ARM_MVN does not use Rn */
+		if ((instruction.type != ARM_MOV) && (instruction.type != ARM_MVN))
+			Rn = buf_get_u32(ARMV4_5_CORE_REG_MODE(armv4_5->core_cache, armv4_5->core_mode, instruction.info.data_proc.Rn).value, 0, 32);
+		else
+			Rn = 0;
+
 		shifter_operand = arm_shifter_operand(armv4_5, instruction.info.data_proc.variant, instruction.info.data_proc.shifter_operand, &carry_out);
 
 		/* adjust Rn in case the PC is being read */
@@ -446,6 +451,8 @@
 			Rd = shifter_operand;
 		else if (instruction.type == ARM_MVN)
 			Rd = ~shifter_operand;
+		else
+			LOG_WARNING("unhandled instruction type");
 		
 		if (dry_run_pc)
 		{



From mlu at mail.berlios.de  Tue Apr 14 19:17:40 2009
From: mlu at mail.berlios.de (mlu at mail.berlios.de)
Date: Tue, 14 Apr 2009 19:17:40 +0200
Subject: [Openocd-svn] r1456 - trunk/src/flash
Message-ID: <200904141717.n3EHHe1g022147@sheep.berlios.de>

Author: mlu
Date: 2009-04-14 19:17:38 +0200 (Tue, 14 Apr 2009)
New Revision: 1456

Modified:
   trunk/src/flash/stm32x.c
Log:
Improved (for humans) error reporting for flash programming errors.

Modified: trunk/src/flash/stm32x.c
===================================================================
--- trunk/src/flash/stm32x.c	2009-04-14 16:33:52 UTC (rev 1455)
+++ trunk/src/flash/stm32x.c	2009-04-14 17:17:38 UTC (rev 1456)
@@ -565,12 +565,20 @@
 			break;
 		}
 		
-		if (buf_get_u32(reg_params[3].value, 0, 32) & 0x14)
+		if (buf_get_u32(reg_params[3].value, 0, 32) & FLASH_PGERR)
 		{
+			LOG_ERROR("flash memory not erased before writing");
 			retval = ERROR_FLASH_OPERATION_FAILED;
 			break;
 		}
 		
+		if (buf_get_u32(reg_params[3].value, 0, 32) & FLASH_WRPRTERR)
+		{
+			LOG_ERROR("flash memory write protected");
+			retval = ERROR_FLASH_OPERATION_FAILED;
+			break;
+		}
+		
 		buffer += thisrun_count * 2;
 		address += thisrun_count * 2;
 		count -= thisrun_count;
@@ -647,9 +655,15 @@
 		status = stm32x_wait_status_busy(bank, 5);
 		
 		if( status & FLASH_WRPRTERR )
+		{
+			LOG_ERROR("flash memory not erased before writing");
 			return ERROR_FLASH_OPERATION_FAILED;
+		}
 		if( status & FLASH_PGERR )
+		{
+			LOG_ERROR("flash memory write protected");
 			return ERROR_FLASH_OPERATION_FAILED;
+		}
 
 		bytes_written += 2;
 		words_remaining--;
@@ -674,9 +688,15 @@
 		status = stm32x_wait_status_busy(bank, 5);
 		
 		if( status & FLASH_WRPRTERR )
+		{
+			LOG_ERROR("flash memory not erased before writing");
 			return ERROR_FLASH_OPERATION_FAILED;
+		}
 		if( status & FLASH_PGERR )
+		{
+			LOG_ERROR("flash memory write protected");
 			return ERROR_FLASH_OPERATION_FAILED;
+		}
 	}
 	
 	target_write_u32(target, STM32_FLASH_CR, FLASH_LOCK);



From oharboe at mail.berlios.de  Tue Apr 14 21:17:19 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Tue, 14 Apr 2009 21:17:19 +0200
Subject: [Openocd-svn] r1457 - trunk/src/xsvf
Message-ID: <200904141917.n3EJHJhE003311@sheep.berlios.de>

Author: oharboe
Date: 2009-04-14 21:17:17 +0200 (Tue, 14 Apr 2009)
New Revision: 1457

Modified:
   trunk/src/xsvf/xsvf.c
Log:
Dick Hollenbeck <dick at softplc.com> work in progress 

Modified: trunk/src/xsvf/xsvf.c
===================================================================
--- trunk/src/xsvf/xsvf.c	2009-04-14 17:17:38 UTC (rev 1456)
+++ trunk/src/xsvf/xsvf.c	2009-04-14 19:17:17 UTC (rev 1457)
@@ -9,7 +9,7 @@
  *	 peter.hettkamp at htp-tel.de											   *
  *																		   *
  *	 Copyright (C) 2009 SoftPLC Corporation. http://softplc.com             *
- *	 dick at softplc.com											           *
+ *	 Dick Hollenbeck <dick at softplc.com>									   *
  *                                                                          *
  *	 This program is free software; you can redistribute it and/or modify   *
  *	 it under the terms of the GNU General Public License as published by   *
@@ -352,659 +352,652 @@
 
 		switch (opcode)
 		{
-			case XCOMPLETE:
-				LOG_DEBUG("XCOMPLETE");
+		case XCOMPLETE:
+			LOG_DEBUG("XCOMPLETE");
 
-				result = jtag_execute_queue();
-				if (result != ERROR_OK)
-				{
-					tdo_mismatch = 1;
-					break;
-				}
+			result = jtag_execute_queue();
+			if (result != ERROR_OK)
+			{
+				tdo_mismatch = 1;
 				break;
+			}
+			break;
 
-			case XTDOMASK:
-				LOG_DEBUG("XTDOMASK");
-				if (dr_in_mask && (xsvf_read_buffer(xsdrsize, xsvf_fd, dr_in_mask) != ERROR_OK))
-					do_abort = 1;
-				break;
+		case XTDOMASK:
+			LOG_DEBUG("XTDOMASK");
+			if (dr_in_mask && (xsvf_read_buffer(xsdrsize, xsvf_fd, dr_in_mask) != ERROR_OK))
+				do_abort = 1;
+			break;
 
-			case XRUNTEST:
+		case XRUNTEST:
+			{
+				u8	xruntest_buf[4];
+
+				if (read(xsvf_fd, xruntest_buf, 4) < 0)
 				{
-					u8	xruntest_buf[4];
+					do_abort = 1;
+					break;
+				}
 
-					if (read(xsvf_fd, xruntest_buf, 4) < 0)
-					{
-						do_abort = 1;
-						break;
-					}
+				xruntest = be_to_h_u32(xruntest_buf);
+				LOG_DEBUG("XRUNTEST %d 0x%08X", xruntest, xruntest);
+			}
+			break;
 
-					xruntest = be_to_h_u32(xruntest_buf);
-					LOG_DEBUG("XRUNTEST %d 0x%08X", xruntest, xruntest);
-				}
-				break;
+		case XREPEAT:
+			{
+				u8 myrepeat;
 
-			case XREPEAT:
+				if (read(xsvf_fd, &myrepeat, 1) < 0)
+					do_abort = 1;
+				else
 				{
-					u8 myrepeat;
-
-					if (read(xsvf_fd, &myrepeat, 1) < 0)
-						do_abort = 1;
-					else
-					{
-						xrepeat = myrepeat;
-						LOG_DEBUG("XREPEAT %d", xrepeat );
-					}
+					xrepeat = myrepeat;
+					LOG_DEBUG("XREPEAT %d", xrepeat );
 				}
-				break;
+			}
+			break;
 
-			case XSDRSIZE:
+		case XSDRSIZE:
+			{
+				u8	xsdrsize_buf[4];
+
+				if (read(xsvf_fd, xsdrsize_buf, 4) < 0)
 				{
-					u8	xsdrsize_buf[4];
+					do_abort = 1;
+					break;
+				}
 
-					if (read(xsvf_fd, xsdrsize_buf, 4) < 0)
-					{
-						do_abort = 1;
-						break;
-					}
+				xsdrsize = be_to_h_u32(xsdrsize_buf);
+				LOG_DEBUG("XSDRSIZE %d", xsdrsize);
 
-					xsdrsize = be_to_h_u32(xsdrsize_buf);
-					LOG_DEBUG("XSDRSIZE %d", xsdrsize);
+				if( dr_out_buf ) free(dr_out_buf);
+				if( dr_in_buf)   free(dr_in_buf);
+				if( dr_in_mask)  free(dr_in_mask);
 
-					if( dr_out_buf ) free(dr_out_buf);
-					if( dr_in_buf)   free(dr_in_buf);
-					if( dr_in_mask)  free(dr_in_mask);
+				dr_out_buf = malloc((xsdrsize + 7) / 8);
+				dr_in_buf = malloc((xsdrsize + 7) / 8);
+				dr_in_mask = malloc((xsdrsize + 7) / 8);
+			}
+			break;
 
-					dr_out_buf = malloc((xsdrsize + 7) / 8);
-					dr_in_buf = malloc((xsdrsize + 7) / 8);
-					dr_in_mask = malloc((xsdrsize + 7) / 8);
-				}
-				break;
+		case XSDR:		/* these two are identical except for the dr_in_buf */
+		case XSDRTDO:
+			{
+				int limit = xrepeat;
+				int	matched = 0;
+				int attempt;
 
-			case XSDR:		/* these two are identical except for the dr_in_buf */
-			case XSDRTDO:
+				const char* op_name = (opcode == XSDR ? "XSDR" : "XSDRTDO");
+
+				if (xsvf_read_buffer(xsdrsize, xsvf_fd, dr_out_buf) != ERROR_OK)
 				{
-					int limit = xrepeat;
-					int	matched = 0;
-					int attempt;
+					do_abort = 1;
+					break;
+				}
 
-					const char* op_name = (opcode == XSDR ? "XSDR" : "XSDRTDO");
-
-					if (xsvf_read_buffer(xsdrsize, xsvf_fd, dr_out_buf) != ERROR_OK)
+				if (opcode == XSDRTDO)
+				{
+					if(xsvf_read_buffer(xsdrsize, xsvf_fd, dr_in_buf)  != ERROR_OK )
 					{
 						do_abort = 1;
 						break;
 					}
+				}
 
-					if (opcode == XSDRTDO)
-					{
-						if(xsvf_read_buffer(xsdrsize, xsvf_fd, dr_in_buf)  != ERROR_OK )
-						{
-							do_abort = 1;
-							break;
-						}
-					}
+				if (limit < 1)
+					limit = 1;
 
-					if (limit < 1)
-						limit = 1;
+				LOG_DEBUG("%s %d", op_name, xsdrsize);
 
-					LOG_DEBUG("%s %d", op_name, xsdrsize);
+				for( attempt=0; attempt<limit;  ++attempt )
+				{
+					scan_field_t field;
 
-					for( attempt=0; attempt<limit;  ++attempt )
+					if( attempt>0 )
 					{
-						scan_field_t field;
+						/* perform the XC9500 exception handling sequence shown in xapp067.pdf and
+						   illustrated in psuedo code at end of this file.  We start from state
+						   DRPAUSE:
+						   go to Exit2-DR
+						   go to Shift-DR
+						   go to Exit1-DR
+						   go to Update-DR
+						   go to Run-Test/Idle
 
-						if( attempt>0 )
-						{
-							/* perform the XC9500 exception handling sequence shown in xapp067.pdf and
-							   illustrated in psuedo code at end of this file.  We start from state
-							   DRPAUSE:
-							   go to Exit2-DR
-							   go to Shift-DR
-							   go to Exit1-DR
-							   go to Update-DR
-							   go to Run-Test/Idle
+						   This sequence should be harmless for other devices, and it
+						   will be skipped entirely if xrepeat is set to zero.
+						*/
 
-							   This sequence should be harmless for other devices, and it
-							   will be skipped entirely if xrepeat is set to zero.
-							*/
+						static tap_state_t exception_path[] = {
+							TAP_DREXIT2,
+							TAP_DRSHIFT,
+							TAP_DREXIT1,
+							TAP_DRUPDATE,
+							TAP_IDLE,
+						};
 
-							static tap_state_t exception_path[] = {
-								TAP_DREXIT2,
-								TAP_DRSHIFT,
-								TAP_DREXIT1,
-								TAP_DRUPDATE,
-								TAP_IDLE,
-							};
+						jtag_add_pathmove( sizeof(exception_path)/sizeof(exception_path[0]), exception_path);
 
-							jtag_add_pathmove( sizeof(exception_path)/sizeof(exception_path[0]), exception_path);
+						if (verbose)
+							LOG_USER("%s mismatch, xsdrsize=%d retry=%d", op_name, xsdrsize, attempt);
+					}
 
-							if (verbose)
-								LOG_USER("%s %d retry %d", op_name, xsdrsize, attempt);
-						}
+					field.tap = tap;
+					field.num_bits = xsdrsize;
+					field.out_value = dr_out_buf;
+					field.out_mask = NULL;
+					field.in_value = NULL;
 
-						field.tap = tap;
-						field.num_bits = xsdrsize;
-						field.out_value = dr_out_buf;
-						field.out_mask = NULL;
-						field.in_value = NULL;
+					jtag_set_check_value(&field, dr_in_buf, dr_in_mask, NULL);
 
-						jtag_set_check_value(&field, dr_in_buf, dr_in_mask, NULL);
+					if (tap == NULL)
+						jtag_add_plain_dr_scan(1, &field, TAP_DRPAUSE);
+					else
+						jtag_add_dr_scan(1, &field, TAP_DRPAUSE);
 
-						if (tap == NULL)
-							jtag_add_plain_dr_scan(1, &field, TAP_DRPAUSE);
-						else
-							jtag_add_dr_scan(1, &field, TAP_DRPAUSE);
-
-						/* LOG_DEBUG("FLUSHING QUEUE"); */
-						result = jtag_execute_queue();
-						if (result == ERROR_OK)
-						{
-							matched = 1;
-							break;
-						}
-					}
-
-					if (!matched)
+					/* LOG_DEBUG("FLUSHING QUEUE"); */
+					result = jtag_execute_queue();
+					if (result == ERROR_OK)
 					{
-						LOG_USER( "%s mismatch", op_name);
-						tdo_mismatch = 1;
+						matched = 1;
 						break;
 					}
+				}
 
-					/* See page 19 of XSVF spec regarding opcode "XSDR" */
-					if (xruntest)
-					{
-						xsvf_add_statemove(TAP_IDLE);
+				if (!matched)
+				{
+					LOG_USER( "%s mismatch", op_name);
+					tdo_mismatch = 1;
+					break;
+				}
 
-						if (runtest_requires_tck)
-							jtag_add_clocks(xruntest);
-						else
-							jtag_add_sleep(xruntest);
-					}
-					else if (xendir != TAP_DRPAUSE)	/* we are already in TAP_DRPAUSE */
-						xsvf_add_statemove(xenddr);
+				/* See page 19 of XSVF spec regarding opcode "XSDR" */
+				if (xruntest)
+				{
+					xsvf_add_statemove(TAP_IDLE);
+
+					if (runtest_requires_tck)
+						jtag_add_clocks(xruntest);
+					else
+						jtag_add_sleep(xruntest);
 				}
-				break;
+				else if (xendir != TAP_DRPAUSE)	/* we are already in TAP_DRPAUSE */
+					xsvf_add_statemove(xenddr);
+			}
+			break;
 
-			case XSETSDRMASKS:
-				LOG_ERROR("unsupported XSETSDRMASKS\n");
-				unsupported = 1;
-				break;
+		case XSETSDRMASKS:
+			LOG_ERROR("unsupported XSETSDRMASKS\n");
+			unsupported = 1;
+			break;
 
-			case XSDRINC:
-				LOG_ERROR("unsupported XSDRINC\n");
-				unsupported = 1;
-				break;
+		case XSDRINC:
+			LOG_ERROR("unsupported XSDRINC\n");
+			unsupported = 1;
+			break;
 
-			case XSDRB:
-				LOG_ERROR("unsupported XSDRB\n");
-				unsupported = 1;
-				break;
+		case XSDRB:
+			LOG_ERROR("unsupported XSDRB\n");
+			unsupported = 1;
+			break;
 
-			case XSDRC:
-				LOG_ERROR("unsupported XSDRC\n");
-				unsupported = 1;
-				break;
+		case XSDRC:
+			LOG_ERROR("unsupported XSDRC\n");
+			unsupported = 1;
+			break;
 
-			case XSDRE:
-				LOG_ERROR("unsupported XSDRE\n");
-				unsupported = 1;
-				break;
+		case XSDRE:
+			LOG_ERROR("unsupported XSDRE\n");
+			unsupported = 1;
+			break;
 
-			case XSDRTDOB:
-				LOG_ERROR("unsupported XSDRTDOB\n");
-				unsupported = 1;
-				break;
+		case XSDRTDOB:
+			LOG_ERROR("unsupported XSDRTDOB\n");
+			unsupported = 1;
+			break;
 
-			case XSDRTDOC:
-				LOG_ERROR("unsupported XSDRTDOC\n");
-				unsupported = 1;
-				break;
+		case XSDRTDOC:
+			LOG_ERROR("unsupported XSDRTDOC\n");
+			unsupported = 1;
+			break;
 
-			case XSDRTDOE:
-				LOG_ERROR("unsupported XSDRTDOE\n");
-				unsupported = 1;
-				break;
+		case XSDRTDOE:
+			LOG_ERROR("unsupported XSDRTDOE\n");
+			unsupported = 1;
+			break;
 
-			case XSTATE:
+		case XSTATE:
+			{
+				tap_state_t	mystate;
+				tap_state_t*	path;
+				int 			path_len;
+
+				if (read(xsvf_fd, &uc, 1) < 0)
 				{
-					tap_state_t	mystate;
-					tap_state_t *path;
-					int path_len;
+					do_abort = 1;
+					break;
+				}
 
-					if (read(xsvf_fd, &uc, 1) < 0)
-					{
-						do_abort = 1;
-						break;
-					}
+				mystate = xsvf_to_tap(uc);
 
-					mystate = xsvf_to_tap(uc);
+				LOG_DEBUG("XSTATE 0x%02X %s", uc, tap_state_name(mystate) );
 
-					LOG_DEBUG("XSTATE 0x%02X %s", uc, tap_state_name(mystate) );
+				path = calloc(XSTATE_MAX_PATH, 4);
+				path_len = 1;
 
-					path = calloc(XSTATE_MAX_PATH, 4);
-					path_len = 1;
+				path[0] = mystate;
+				if (xsvf_read_xstates(xsvf_fd, path, XSTATE_MAX_PATH, &path_len) != ERROR_OK)
+					do_abort = 1;
+				else
+				{
+					int i,lasti;
 
-					path[0] = mystate;
-					if (xsvf_read_xstates(xsvf_fd, path, XSTATE_MAX_PATH, &path_len) != ERROR_OK)
-						do_abort = 1;
-					else
+					/* here the trick is that jtag_add_pathmove() must end in a stable
+					 * state, so we must only invoke jtag_add_tlr() when we absolutely
+					 * have to
+					 */
+					for(i=0,lasti=0;  i<path_len;  i++)
 					{
-						int i,lasti;
-
-						/* here the trick is that jtag_add_pathmove() must end in a stable
-						 * state, so we must only invoke jtag_add_tlr() when we absolutely
-						 * have to
-						 */
-						for(i=0,lasti=0;  i<path_len;  i++)
+						if(path[i]==TAP_RESET)
 						{
-							if(path[i]==TAP_RESET)
+							if(i>lasti)
 							{
-								if(i>lasti)
-								{
-									jtag_add_pathmove(i-lasti,path+lasti);
-								}
-								lasti=i+1;
-								jtag_add_tlr();
+								jtag_add_pathmove(i-lasti,path+lasti);
 							}
+							lasti=i+1;
+							jtag_add_tlr();
 						}
-						if(i>=lasti)
-						{
-							jtag_add_pathmove(i-lasti, path+lasti);
-						}
 					}
-					free(path);
+					if(i>=lasti)
+					{
+						jtag_add_pathmove(i-lasti, path+lasti);
+					}
 				}
+				free(path);
+			}
+			break;
+
+		case XENDIR:
+
+			if (read(xsvf_fd, &uc, 1) < 0)
+			{
+				do_abort = 1;
 				break;
+			}
 
-			case XENDIR:
-				{
-					tap_state_t	 mystate;
+			/* see page 22 of XSVF spec */
+			if( uc == 0 )
+				xendir = TAP_IDLE;
+			else if( uc == 1 )
+				xendir = TAP_IRPAUSE;
+			else
+			{
+				LOG_ERROR("illegial XENDIR argument: 0x%02X", uc);
+				unsupported = 1;
+				break;
+			}
 
-					if (read(xsvf_fd, &uc, 1) < 0)
-					{
-						do_abort = 1;
-						break;
-					}
+			LOG_DEBUG("XENDIR 0x%02X %s", uc, tap_state_name(xendir));
+			break;
 
-					/* see page 22 of XSVF spec */
-					mystate = uc == 1 ? TAP_IRPAUSE : TAP_IDLE;
+		case XENDDR:
 
-					LOG_DEBUG("XENDIR 0x%02X %s", uc, tap_state_name(mystate));
+			if (read(xsvf_fd, &uc, 1) < 0)
+			{
+				do_abort = 1;
+				break;
+			}
 
-					/* assuming that the XRUNTEST comes from SVF RUNTEST, then only these states
-					 * should come here because the SVF spec only allows these with a RUNTEST
-					 */
-					if (mystate != TAP_IRPAUSE && mystate != TAP_DRPAUSE && mystate != TAP_RESET && mystate != TAP_IDLE )
-					{
-						LOG_ERROR("illegal XENDIR endstate: \"%s\"", tap_state_name(mystate));
-						unsupported = 1;
-						break;
-					}
-					xendir = mystate;
-				}
+			/* see page 22 of XSVF spec */
+			if( uc == 0 )
+				xenddr = TAP_IDLE;
+			else if( uc == 1 )
+				xenddr = TAP_DRPAUSE;
+			else
+			{
+				LOG_ERROR("illegial XENDDR argument: 0x%02X", uc);
+				unsupported = 1;
 				break;
+			}
 
-			case XENDDR:
-				{
-					tap_state_t	 mystate;
+			LOG_DEBUG("XENDDR %02X %s", uc, tap_state_name(xenddr));
+			break;
 
-					if (read(xsvf_fd, &uc, 1) < 0)
+		case XSIR:
+		case XSIR2:
+			{
+				u8	short_buf[2];
+				u8*	ir_buf;
+				int bitcount;
+				tap_state_t my_end_state = xruntest ? TAP_IDLE : xendir;
+
+				if( opcode == XSIR )
+				{
+					/* one byte bitcount */
+					if (read(xsvf_fd, short_buf, 1) < 0)
 					{
 						do_abort = 1;
 						break;
 					}
-
-					/* see page 22 of XSVF spec */
-					mystate = uc == 1 ? TAP_DRPAUSE : TAP_IDLE;
-
-					LOG_DEBUG("XENDDR %02X %s", uc, tap_state_name(mystate));
-
-					if (mystate != TAP_IRPAUSE && mystate != TAP_DRPAUSE && mystate != TAP_RESET && mystate != TAP_IDLE )
+					bitcount = short_buf[0];
+					LOG_DEBUG("XSIR %d", bitcount);
+				}
+				else
+				{
+					if (read(xsvf_fd, short_buf, 2) < 0)
 					{
-						LOG_ERROR("illegal XENDDR endstate: \"%s\"", tap_state_name( mystate ));
-						unsupported = 1;
+						do_abort = 1;
 						break;
 					}
-					xenddr = mystate;
+					bitcount = be_to_h_u16(short_buf);
+					LOG_DEBUG("XSIR2 %d", bitcount);
 				}
-				break;
 
-			case XSIR:
-			case XSIR2:
+				ir_buf = malloc((bitcount+7) / 8);
+
+				if (xsvf_read_buffer(bitcount, xsvf_fd, ir_buf) != ERROR_OK)
+					do_abort = 1;
+				else
 				{
-					u8	short_buf[2];
-					u8*	ir_buf;
-					int bitcount;
-					tap_state_t my_end_state = xruntest ? TAP_IDLE : xendir;
+					scan_field_t field;
 
-					if( opcode == XSIR )
-					{
-						/* one byte bitcount */
-						if (read(xsvf_fd, short_buf, 1) < 0)
-						{
-							do_abort = 1;
-							break;
-						}
-						bitcount = short_buf[0];
-						LOG_DEBUG("XSIR %d", bitcount);
-					}
-					else
-					{
-						if (read(xsvf_fd, short_buf, 2) < 0)
-						{
-							do_abort = 1;
-							break;
-						}
-						bitcount = be_to_h_u16(short_buf);
-						LOG_DEBUG("XSIR2 %d", bitcount);
-					}
+					field.tap = tap;
+					field.num_bits = bitcount;
+					field.out_value = ir_buf;
+					field.out_mask = NULL;
+					field.in_value = NULL;
+					field.in_check_value = NULL;
+					field.in_check_mask = NULL;
+					field.in_handler = NULL;
+					field.in_handler_priv = NULL;
 
-					ir_buf = malloc((bitcount+7) / 8);
-
-					if (xsvf_read_buffer(bitcount, xsvf_fd, ir_buf) != ERROR_OK)
-						do_abort = 1;
+					if (tap == NULL)
+						jtag_add_plain_ir_scan(1, &field, my_end_state);
 					else
-					{
-						scan_field_t field;
+						jtag_add_ir_scan(1, &field, my_end_state);
 
-						field.tap = tap;
-						field.num_bits = bitcount;
-						field.out_value = ir_buf;
-						field.out_mask = NULL;
-						field.in_value = NULL;
-						field.in_check_value = NULL;
-						field.in_check_mask = NULL;
-						field.in_handler = NULL;
-						field.in_handler_priv = NULL;
-
-						if (tap == NULL)
-							jtag_add_plain_ir_scan(1, &field, my_end_state);
+					if (xruntest)
+					{
+						if (runtest_requires_tck)
+							jtag_add_clocks(xruntest);
 						else
-							jtag_add_ir_scan(1, &field, my_end_state);
+							jtag_add_sleep(xruntest);
+					}
 
-						if (xruntest)
-						{
-							if (runtest_requires_tck)
-								jtag_add_clocks(xruntest);
-							else
-								jtag_add_sleep(xruntest);
-						}
+					/* Note that an -irmask of non-zero in your config file
+					 * can cause this to fail.  Setting -irmask to zero cand work
+					 * around the problem.
+					 */
 
-						/* Note that an -irmask of non-zero in your config file
-						 * can cause this to fail.  Setting -irmask to zero cand work
-						 * around the problem.
-						 */
-
-						/* LOG_DEBUG("FLUSHING QUEUE"); */
-						result = jtag_execute_queue();
-						if(result != ERROR_OK)
-						{
-							tdo_mismatch = 1;
-						}
+					/* LOG_DEBUG("FLUSHING QUEUE"); */
+					result = jtag_execute_queue();
+					if(result != ERROR_OK)
+					{
+						tdo_mismatch = 1;
 					}
-					free(ir_buf);
 				}
-				break;
+				free(ir_buf);
+			}
+			break;
 
-			case XCOMMENT:
-				{
-					int		ndx = 0;
-					char 	comment[128];
+		case XCOMMENT:
+			{
+				int		ndx = 0;
+				char 	comment[128];
 
-					do
+				do
+				{
+					if (read(xsvf_fd, &uc, 1) < 0)
 					{
-						if (read(xsvf_fd, &uc, 1) < 0)
-						{
-							do_abort = 1;
-							break;
-						}
+						do_abort = 1;
+						break;
+					}
 
-						if ( ndx < sizeof(comment)-1 )
-							comment[ndx++] = uc;
+					if ( ndx < sizeof(comment)-1 )
+						comment[ndx++] = uc;
 
-					} while (uc != 0);
+				} while (uc != 0);
 
-					comment[sizeof(comment)-1] = 0;		/* regardless, terminate */
-					if (verbose)
-						LOG_USER(comment);
-				}
-				break;
+				comment[sizeof(comment)-1] = 0;		/* regardless, terminate */
+				if (verbose)
+					LOG_USER(comment);
+			}
+			break;
 
-			case XWAIT:
-				{
-					/* expected in stream:
-					   XWAIT <u8 wait_state> <u8 end_state> <u32 usecs>
-					*/
+		case XWAIT:
+			{
+				/* expected in stream:
+				   XWAIT <u8 wait_state> <u8 end_state> <u32 usecs>
+				*/
 
-					u8	wait;
-					u8	end;
-					u8	delay_buf[4];
+				u8	wait;
+				u8	end;
+				u8	delay_buf[4];
 
-					tap_state_t wait_state;
-					tap_state_t end_state;
-					int 	delay;
+				tap_state_t wait_state;
+				tap_state_t end_state;
+				int 	delay;
 
-					if ( read(xsvf_fd, &wait, 1) < 0
-					  || read(xsvf_fd, &end, 1) < 0
-					  || read(xsvf_fd, delay_buf, 4) < 0)
-					{
-						do_abort = 1;
-						break;
-					}
+				if ( read(xsvf_fd, &wait, 1) < 0
+				  || read(xsvf_fd, &end, 1) < 0
+				  || read(xsvf_fd, delay_buf, 4) < 0)
+				{
+					do_abort = 1;
+					break;
+				}
 
-					wait_state = xsvf_to_tap(wait);
-					end_state  = xsvf_to_tap(end);
-					delay      = be_to_h_u32(delay_buf);
+				wait_state = xsvf_to_tap(wait);
+				end_state  = xsvf_to_tap(end);
+				delay      = be_to_h_u32(delay_buf);
 
-					LOG_DEBUG("XWAIT %s %s usecs:%d", tap_state_name(wait_state), tap_state_name(end_state), delay);
+				LOG_DEBUG("XWAIT %s %s usecs:%d", tap_state_name(wait_state), tap_state_name(end_state), delay);
 
-					if (runtest_requires_tck && wait_state == TAP_IDLE )
-					{
-						jtag_add_runtest(delay, end_state);
-					}
-					else
-					{
-						xsvf_add_statemove( wait_state );
-						jtag_add_sleep(delay);
-						xsvf_add_statemove( end_state );
-					}
+				if (runtest_requires_tck && wait_state == TAP_IDLE )
+				{
+					jtag_add_runtest(delay, end_state);
 				}
-				break;
-
-			case XWAITSTATE:
+				else
 				{
-					/* expected in stream:
-					   XWAITSTATE <u8 wait_state> <u8 end_state> <u32 clock_count> <u32 usecs>
-					*/
+					xsvf_add_statemove( wait_state );
+					jtag_add_sleep(delay);
+					xsvf_add_statemove( end_state );
+				}
+			}
+			break;
 
-					u8  clock_buf[4];
-					u8  	usecs_buf[4];
-					u8	wait;
-					u8	end;
-					tap_state_t wait_state;
-					tap_state_t end_state;
-					int clock_count;
-					int usecs;
+		case XWAITSTATE:
+			{
+				/* expected in stream:
+				   XWAITSTATE <u8 wait_state> <u8 end_state> <u32 clock_count> <u32 usecs>
+				*/
 
-					if ( read(xsvf_fd, &wait, 1) < 0
-					 ||  read(xsvf_fd, &end, 1) < 0
-					 ||  read(xsvf_fd, clock_buf, 4) < 0
-					 ||  read(xsvf_fd, usecs_buf, 4) < 0 )
-					{
-						do_abort = 1;
-						break;
-					}
+				u8  clock_buf[4];
+				u8  	usecs_buf[4];
+				u8	wait;
+				u8	end;
+				tap_state_t wait_state;
+				tap_state_t end_state;
+				int clock_count;
+				int usecs;
 
-					wait_state = xsvf_to_tap( wait );
-					end_state  = xsvf_to_tap( end );
+				if ( read(xsvf_fd, &wait, 1) < 0
+				 ||  read(xsvf_fd, &end, 1) < 0
+				 ||  read(xsvf_fd, clock_buf, 4) < 0
+				 ||  read(xsvf_fd, usecs_buf, 4) < 0 )
+				{
+					do_abort = 1;
+					break;
+				}
 
-					clock_count = be_to_h_u32(clock_buf);
-					usecs       = be_to_h_u32(usecs_buf);
+				wait_state = xsvf_to_tap( wait );
+				end_state  = xsvf_to_tap( end );
 
-					LOG_DEBUG("XWAITSTATE %s %s clocks:%i usecs:%i",
-						tap_state_name(wait_state),
-						tap_state_name(end_state),
-						clock_count, usecs);
+				clock_count = be_to_h_u32(clock_buf);
+				usecs       = be_to_h_u32(usecs_buf);
 
-					/* the following states are 'stable', meaning that they have a transition
-					 * in the state diagram back to themselves.  This is necessary because we will
-					 * be issuing a number of clocks in this state.  This set of allowed states is also
-					 * determined by the SVF RUNTEST command's allowed states.
-					 */
-					if (wait_state != TAP_IRPAUSE && wait_state != TAP_DRPAUSE && wait_state != TAP_RESET && wait_state != TAP_IDLE)
-					{
-						LOG_ERROR("illegal XWAITSTATE wait_state: \"%s\"", tap_state_name( wait_state ));
-						unsupported = 1;
-					}
+				LOG_DEBUG("XWAITSTATE %s %s clocks:%i usecs:%i",
+					tap_state_name(wait_state),
+					tap_state_name(end_state),
+					clock_count, usecs);
 
-					xsvf_add_statemove( wait_state );
+				/* the following states are 'stable', meaning that they have a transition
+				 * in the state diagram back to themselves.  This is necessary because we will
+				 * be issuing a number of clocks in this state.  This set of allowed states is also
+				 * determined by the SVF RUNTEST command's allowed states.
+				 */
+				if (wait_state != TAP_IRPAUSE && wait_state != TAP_DRPAUSE && wait_state != TAP_RESET && wait_state != TAP_IDLE)
+				{
+					LOG_ERROR("illegal XWAITSTATE wait_state: \"%s\"", tap_state_name( wait_state ));
+					unsupported = 1;
+				}
 
-					jtag_add_clocks( clock_count );
+				xsvf_add_statemove( wait_state );
 
-					jtag_add_sleep( usecs );
+				jtag_add_clocks( clock_count );
 
-					xsvf_add_statemove( end_state );
-				}
-				break;
+				jtag_add_sleep( usecs );
 
-			case LCOUNT:
-				{
-					/* expected in stream:
-					   LCOUNT <u32 loop_count>
-					*/
-					u8  count_buf[4];
+				xsvf_add_statemove( end_state );
+			}
+			break;
 
-					if ( read(xsvf_fd, count_buf, 4) < 0 )
-					{
-						do_abort = 1;
-						break;
-					}
+		case LCOUNT:
+			{
+				/* expected in stream:
+				   LCOUNT <u32 loop_count>
+				*/
+				u8  count_buf[4];
 
-					loop_count = be_to_h_u32(count_buf);
-					LOG_DEBUG("LCOUNT %d", loop_count);
+				if ( read(xsvf_fd, count_buf, 4) < 0 )
+				{
+					do_abort = 1;
+					break;
 				}
-				break;
 
-			case LDELAY:
-				{
-					/* expected in stream:
-					   LDELAY <u8 wait_state> <u32 clock_count> <u32 usecs_to_sleep>
-					*/
-					u8	state;
-					u8  clock_buf[4];
-					u8  usecs_buf[4];
+				loop_count = be_to_h_u32(count_buf);
+				LOG_DEBUG("LCOUNT %d", loop_count);
+			}
+			break;
 
-					if ( read(xsvf_fd, &state, 1) < 0
-					  || read(xsvf_fd, clock_buf, 4) < 0
-					  ||	 read(xsvf_fd, usecs_buf, 4) < 0 )
-					{
-						do_abort = 1;
-						break;
-					}
+		case LDELAY:
+			{
+				/* expected in stream:
+				   LDELAY <u8 wait_state> <u32 clock_count> <u32 usecs_to_sleep>
+				*/
+				u8	state;
+				u8  clock_buf[4];
+				u8  usecs_buf[4];
 
-					loop_state  = xsvf_to_tap(state);
-					loop_clocks = be_to_h_u32(clock_buf);
-					loop_usecs  = be_to_h_u32(usecs_buf);
-
-					LOG_DEBUG("LDELAY %s clocks:%d usecs:%d", tap_state_name(loop_state), loop_clocks, loop_usecs);
+				if ( read(xsvf_fd, &state, 1) < 0
+				  || read(xsvf_fd, clock_buf, 4) < 0
+				  ||	 read(xsvf_fd, usecs_buf, 4) < 0 )
+				{
+					do_abort = 1;
+					break;
 				}
-				break;
 
-			/* LSDR is more like XSDRTDO than it is like XSDR.  It uses LDELAY which
-			 * comes with clocks !AND! sleep requirements.
-			 */
-			case LSDR:
-				{
-					int limit = loop_count;
-					int matched = 0;
-					int attempt;
+				loop_state  = xsvf_to_tap(state);
+				loop_clocks = be_to_h_u32(clock_buf);
+				loop_usecs  = be_to_h_u32(usecs_buf);
 
-					LOG_DEBUG("LSDR");
+				LOG_DEBUG("LDELAY %s clocks:%d usecs:%d", tap_state_name(loop_state), loop_clocks, loop_usecs);
+			}
+			break;
 
-					if ( xsvf_read_buffer(xsdrsize, xsvf_fd, dr_out_buf) != ERROR_OK
-					  || xsvf_read_buffer(xsdrsize, xsvf_fd, dr_in_buf) != ERROR_OK )
-					{
-						do_abort = 1;
-						break;
-					}
+		/* LSDR is more like XSDRTDO than it is like XSDR.  It uses LDELAY which
+		 * comes with clocks !AND! sleep requirements.
+		 */
+		case LSDR:
+			{
+				int limit = loop_count;
+				int matched = 0;
+				int attempt;
 
-					if (limit < 1)
-						limit = 1;
+				LOG_DEBUG("LSDR");
 
-					for( attempt=0; attempt<limit;  ++attempt )
-					{
-						scan_field_t field;
+				if ( xsvf_read_buffer(xsdrsize, xsvf_fd, dr_out_buf) != ERROR_OK
+				  || xsvf_read_buffer(xsdrsize, xsvf_fd, dr_in_buf) != ERROR_OK )
+				{
+					do_abort = 1;
+					break;
+				}
 
-						xsvf_add_statemove( loop_state );
-						jtag_add_clocks(loop_clocks);
-						jtag_add_sleep(loop_usecs);
+				if (limit < 1)
+					limit = 1;
 
-						field.tap = tap;
-						field.num_bits = xsdrsize;
-						field.out_value = dr_out_buf;
-						field.out_mask = NULL;
-						field.in_value = NULL;
+				for( attempt=0; attempt<limit;  ++attempt )
+				{
+					scan_field_t field;
 
-						if (attempt > 0 && verbose)
-							LOG_USER("LSDR retry %d", attempt);
+					xsvf_add_statemove( loop_state );
+					jtag_add_clocks(loop_clocks);
+					jtag_add_sleep(loop_usecs);
 
-						jtag_set_check_value(&field, dr_in_buf, dr_in_mask, NULL);
-						if (tap == NULL)
-							jtag_add_plain_dr_scan(1, &field, TAP_DRPAUSE);
-						else
-							jtag_add_dr_scan(1, &field, TAP_DRPAUSE);
+					field.tap = tap;
+					field.num_bits = xsdrsize;
+					field.out_value = dr_out_buf;
+					field.out_mask = NULL;
+					field.in_value = NULL;
 
-						/* LOG_DEBUG("FLUSHING QUEUE"); */
-						result = jtag_execute_queue();
-						if(result == ERROR_OK)
-						{
-							matched = 1;
-							break;
-						}
-					}
+					if (attempt > 0 && verbose)
+						LOG_USER("LSDR retry %d", attempt);
 
-					if (!matched )
+					jtag_set_check_value(&field, dr_in_buf, dr_in_mask, NULL);
+					if (tap == NULL)
+						jtag_add_plain_dr_scan(1, &field, TAP_DRPAUSE);
+					else
+						jtag_add_dr_scan(1, &field, TAP_DRPAUSE);
+
+					/* LOG_DEBUG("FLUSHING QUEUE"); */
+					result = jtag_execute_queue();
+					if(result == ERROR_OK)
 					{
-						LOG_USER( "LSDR mismatch" );
-						tdo_mismatch = 1;
+						matched = 1;
 						break;
 					}
 				}
-				break;
 
-			case XTRST:
+				if (!matched )
 				{
-					u8	trst_mode;
+					LOG_USER( "LSDR mismatch" );
+					tdo_mismatch = 1;
+					break;
+				}
+			}
+			break;
 
-					if (read(xsvf_fd, &trst_mode, 1) < 0)
-					{
-						do_abort = 1;
-						break;
-					}
+		case XTRST:
+			{
+				u8	trst_mode;
 
-					switch( trst_mode )
-					{
-					case XTRST_ON:
-						jtag_add_reset(1, 0);
-						break;
-					case XTRST_OFF:
-					case XTRST_Z:
-						jtag_add_reset(0, 0);
-						break;
-					case XTRST_ABSENT:
-						break;
-					default:
-						LOG_ERROR( "XTRST mode argument (0x%02X) out of range", trst_mode );
-						do_abort = 1;
-					}
+				if (read(xsvf_fd, &trst_mode, 1) < 0)
+				{
+					do_abort = 1;
+					break;
 				}
-				break;
 
-			default:
-				LOG_ERROR("unknown xsvf command (0x%02X)\n", uc);
-				unsupported = 1;
+				switch( trst_mode )
+				{
+				case XTRST_ON:
+					jtag_add_reset(1, 0);
+					break;
+				case XTRST_OFF:
+				case XTRST_Z:
+					jtag_add_reset(0, 0);
+					break;
+				case XTRST_ABSENT:
+					break;
+				default:
+					LOG_ERROR( "XTRST mode argument (0x%02X) out of range", trst_mode );
+					do_abort = 1;
+				}
+			}
+			break;
+
+		default:
+			LOG_ERROR("unknown xsvf command (0x%02X)\n", uc);
+			unsupported = 1;
 		}
 
 		if (do_abort || unsupported || tdo_mismatch)
@@ -1058,8 +1051,10 @@
 }
 
 
-/* PSUEDO-Code from Xilinx Appnote XAPP067.pdf:
+#if 0   /* this comment style used to try and keep uncrustify from adding * at begin of line */
 
+PSUEDO-Code from Xilinx Appnote XAPP067.pdf:
+
 the following pseudo code clarifies the intent of the xrepeat support.  The
 flow given is for the entire processing of an SVF file, not an XSVF file.
 No idea if this is just for the XC9500/XL/XV devices or all Xilinx parts.
@@ -1106,4 +1101,4 @@
    store <TCK value> as <current pause time>
 end if
 
-*/
+#endif



From oharboe at mail.berlios.de  Wed Apr 15 17:13:39 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Wed, 15 Apr 2009 17:13:39 +0200
Subject: [Openocd-svn] r1458 - trunk/src/target/target
Message-ID: <200904151513.n3FFDdEv014800@sheep.berlios.de>

Author: oharboe
Date: 2009-04-15 17:13:36 +0200 (Wed, 15 Apr 2009)
New Revision: 1458

Added:
   trunk/src/target/target/lpc2378.cfg
Log:
Freddie Chopin <freddie_chopin at op.pl> LPC2378 config file

Added: trunk/src/target/target/lpc2378.cfg
===================================================================
--- trunk/src/target/target/lpc2378.cfg	2009-04-14 19:17:17 UTC (rev 1457)
+++ trunk/src/target/target/lpc2378.cfg	2009-04-15 15:13:36 UTC (rev 1458)
@@ -0,0 +1,49 @@
+# NXP LPC2378 ARM7TDMI-S with 512kB Flash and 32kB Local On-Chip SRAM (58kB total), clocked with 4MHz internal RC oscillator
+
+if { [info exists CHIPNAME] } {
+	set  _CHIPNAME $CHIPNAME
+} else {
+	set  _CHIPNAME lpc2378
+}
+
+if { [info exists ENDIAN] } {
+	set  _ENDIAN $ENDIAN
+} else {
+	set  _ENDIAN little
+}
+
+if { [info exists CPUTAPID ] } {
+	set _CPUTAPID $CPUTAPID
+} else {
+	set _CPUTAPID 0x4f1f0f0f
+}
+
+#delays on reset lines
+jtag_nsrst_delay 200
+jtag_ntrst_delay 200
+
+# LPC2000 -> SRST causes TRST
+reset_config trst_and_srst srst_pulls_trst
+
+jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+
+set _TARGETNAME [format "%s.cpu" $_CHIPNAME]
+target create $_TARGETNAME arm7tdmi -endian $_ENDIAN -chain-position $_TARGETNAME -variant arm7tdmi-s_r4
+
+# LPC2378 has 32kB of SRAM on its main system bus (so-called Local On-Chip SRAM)
+$_TARGETNAME configure -work-area-virt 0 -work-area-phys 0x40000000 -work-area-size 0x8000 -work-area-backup 0
+
+$_TARGETNAME configure -event reset-init {
+	# Force target into ARM state
+	soft_reset_halt
+	#do not remap 0x0000-0x0020 to anything but the flash
+	mwb 0xE01FC040 0x01
+}
+
+# LPC2378 has 512kB of FLASH, but upper 8kB are occupied by bootloader.
+# After reset the chip uses its internal 4MHz RC oscillator
+#flash bank lpc2000 <base> <size> 0 0 <target#> <variant>
+flash bank lpc2000 0x0 0x0007D000 0 0 0 lpc2000_v2 4000 calc_checksum
+
+# 4MHz / 6 = 666kHz, so use 500
+jtag_khz 500



From oharboe at mail.berlios.de  Wed Apr 15 17:17:47 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Wed, 15 Apr 2009 17:17:47 +0200
Subject: [Openocd-svn] r1459 - trunk/src/flash
Message-ID: <200904151517.n3FFHlas015155@sheep.berlios.de>

Author: oharboe
Date: 2009-04-15 17:17:44 +0200 (Wed, 15 Apr 2009)
New Revision: 1459

Modified:
   trunk/src/flash/cfi.c
Log:
Nico Coesel <ncoesel at dealogic.nl> Chip width / bus width bug in cfi driver

Modified: trunk/src/flash/cfi.c
===================================================================
--- trunk/src/flash/cfi.c	2009-04-15 15:13:36 UTC (rev 1458)
+++ trunk/src/flash/cfi.c	2009-04-15 15:17:44 UTC (rev 1459)
@@ -1589,7 +1589,7 @@
 	u8 command[8];
 
 	/* Calculate buffer size and boundary mask */
-	u32 buffersize = 1UL << cfi_info->max_buf_write_size;
+	u32 buffersize = (1UL << cfi_info->max_buf_write_size) * (bank->bus_width / bank->chip_width);
 	u32 buffermask = buffersize-1;
 	u32 bufferwsize;
 
@@ -1609,6 +1609,9 @@
 		return ERROR_FLASH_OPERATION_FAILED;
 	}
 
+	bufferwsize/=(bank->bus_width / bank->chip_width);
+
+
 	/* Check for valid size */
 	if (wordcount > bufferwsize)
 	{
@@ -1725,7 +1728,7 @@
 	cfi_spansion_pri_ext_t *pri_ext = cfi_info->pri_ext;
 
 	/* Calculate buffer size and boundary mask */
-	u32 buffersize = 1UL << cfi_info->max_buf_write_size;
+	u32 buffersize = (1UL << cfi_info->max_buf_write_size) * (bank->bus_width / bank->chip_width);
 	u32 buffermask = buffersize-1;
 	u32 bufferwsize;
 
@@ -1745,6 +1748,8 @@
 		return ERROR_FLASH_OPERATION_FAILED;
 	}
 
+	bufferwsize/=(bank->bus_width / bank->chip_width);
+
 	/* Check for valid size */
 	if (wordcount > bufferwsize)
 	{
@@ -1946,7 +1951,8 @@
 	{
 		if (retval == ERROR_TARGET_RESOURCE_NOT_AVAILABLE)
 		{
-			u32 buffersize = 1UL << cfi_info->max_buf_write_size;
+			//adjust buffersize for chip width
+			u32 buffersize = (1UL << cfi_info->max_buf_write_size) * (bank->bus_width / bank->chip_width);
 			u32 buffermask = buffersize-1;
 			u32 bufferwsize;
 
@@ -1959,6 +1965,8 @@
 				LOG_ERROR("Unsupported chip width %d", bank->chip_width);
 				return ERROR_FLASH_OPERATION_FAILED;
 			}
+			
+			bufferwsize/=(bank->bus_width / bank->chip_width);
 
 			/* fall back to memory writes */
 			while (count >= bank->bus_width)



From oharboe at mail.berlios.de  Wed Apr 15 17:19:37 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Wed, 15 Apr 2009 17:19:37 +0200
Subject: [Openocd-svn] r1460 - trunk/src/target/board
Message-ID: <200904151519.n3FFJbk7015254@sheep.berlios.de>

Author: oharboe
Date: 2009-04-15 17:19:35 +0200 (Wed, 15 Apr 2009)
New Revision: 1460

Modified:
   trunk/src/target/board/olimex_stm32_h103.cfg
Log:
Piotr Esden-Tempski <piotr at esden.net> Corrected olimex_stm32_h103 board config

Modified: trunk/src/target/board/olimex_stm32_h103.cfg
===================================================================
--- trunk/src/target/board/olimex_stm32_h103.cfg	2009-04-15 15:17:44 UTC (rev 1459)
+++ trunk/src/target/board/olimex_stm32_h103.cfg	2009-04-15 15:19:35 UTC (rev 1460)
@@ -4,6 +4,7 @@
 # http://olimex.com/dev/stm32-h103.html
 #
 
+set BSTAPID 0x16410041
+
 source [find target/stm32.cfg]
 
-set _BSTAPID 0x16410041



From oharboe at mail.berlios.de  Wed Apr 15 17:44:28 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Wed, 15 Apr 2009 17:44:28 +0200
Subject: [Openocd-svn] r1461 - trunk/src/target/target
Message-ID: <200904151544.n3FFiSB5018802@sheep.berlios.de>

Author: oharboe
Date: 2009-04-15 17:44:26 +0200 (Wed, 15 Apr 2009)
New Revision: 1461

Added:
   trunk/src/target/target/lpc2124.cfg
Log:
Jesus Sanchez-Palencia <jesus.palencia at openbossa.org>

Added: trunk/src/target/target/lpc2124.cfg
===================================================================
--- trunk/src/target/target/lpc2124.cfg	2009-04-15 15:19:35 UTC (rev 1460)
+++ trunk/src/target/target/lpc2124.cfg	2009-04-15 15:44:26 UTC (rev 1461)
@@ -0,0 +1,38 @@
+#LPC-2124 CPU
+
+if { [info exists CHIPNAME] } {
+   set  _CHIPNAME $CHIPNAME
+} else {
+   set  _CHIPNAME lpc2124
+}
+
+if { [info exists ENDIAN] } {
+   set  _ENDIAN $ENDIAN
+} else {
+   set  _ENDIAN little
+}
+
+if { [info exists CPUTAPID ] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+  # force an error till we get a good number
+    set _CPUTAPID 0x4f1f0f0f
+}
+
+
+#use combined on interfaces or targets that can't set TRST/SRST separately
+reset_config trst_and_srst srst_pulls_trst
+jtag_nsrst_delay 10
+jtag_khz 1000
+
+#jtag scan chain
+jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+
+set _TARGETNAME [format "%s.cpu" $_CHIPNAME]
+target create $_TARGETNAME arm7tdmi -endian $_ENDIAN -chain-position $_TARGETNAME -variant arm7tdmi-s_r4
+
+$_TARGETNAME configure -work-area-virt 0 -work-area-phys 0x40000000 -work-area-size 0x4000 -work-area-backup 0
+
+
+#flash bank <driver> <base> <size> <chip_width> <bus_width>
+flash bank lpc2000 0x0 0x40000 0 0 0 lpc2000_v1 14745 calc_checksum



From mifi at mail.berlios.de  Sat Apr 18 12:08:44 2009
From: mifi at mail.berlios.de (mifi at mail.berlios.de)
Date: Sat, 18 Apr 2009 12:08:44 +0200
Subject: [Openocd-svn] r1462 - in trunk/src: flash helper jtag target
Message-ID: <200904181008.n3IA8i8p007210@sheep.berlios.de>

Author: mifi
Date: 2009-04-18 12:08:13 +0200 (Sat, 18 Apr 2009)
New Revision: 1462

Modified:
   trunk/src/flash/aduc702x.c
   trunk/src/flash/at91sam7.c
   trunk/src/flash/at91sam7_old.c
   trunk/src/flash/cfi.c
   trunk/src/flash/ecos.c
   trunk/src/flash/flash.c
   trunk/src/flash/lpc2000.c
   trunk/src/flash/lpc288x.c
   trunk/src/flash/lpc3180_nand_controller.c
   trunk/src/flash/nand.c
   trunk/src/flash/ocl.c
   trunk/src/flash/orion_nand.c
   trunk/src/flash/pic32mx.c
   trunk/src/flash/s3c2410_nand.c
   trunk/src/flash/s3c2412_nand.c
   trunk/src/flash/s3c2440_nand.c
   trunk/src/flash/s3c2443_nand.c
   trunk/src/flash/stellaris.c
   trunk/src/flash/stm32x.c
   trunk/src/flash/str7x.c
   trunk/src/flash/str9x.c
   trunk/src/flash/str9xpec.c
   trunk/src/flash/tms470.c
   trunk/src/helper/tclapi.c
   trunk/src/jtag/amt_jtagaccel.c
   trunk/src/jtag/arm-jtag-ew.c
   trunk/src/jtag/bitbang.c
   trunk/src/jtag/bitq.c
   trunk/src/jtag/ft2232.c
   trunk/src/jtag/gw16012.c
   trunk/src/jtag/jlink.c
   trunk/src/jtag/jtag.c
   trunk/src/jtag/jtag.h
   trunk/src/jtag/usbprog.c
   trunk/src/jtag/vsllink.c
   trunk/src/target/arm11.c
   trunk/src/target/arm11_dbgtap.c
   trunk/src/target/arm720t.c
   trunk/src/target/arm7tdmi.c
   trunk/src/target/arm920t.c
   trunk/src/target/arm926ejs.c
   trunk/src/target/arm966e.c
   trunk/src/target/arm9tdmi.c
   trunk/src/target/arm_jtag.c
   trunk/src/target/cortex_swjdp.c
   trunk/src/target/embeddedice.c
   trunk/src/target/embeddedice.h
   trunk/src/target/etb.c
   trunk/src/target/etm.c
   trunk/src/target/feroceon.c
   trunk/src/target/mips_ejtag.c
   trunk/src/target/xscale.c
Log:
The following patches was applied:

- openocd-flash-static-keyword-v3.patch
- openocd-lpc2000-fix-erase-obo.patch
- openocd-jlink-fix-sign-ptr-warn.patch
- openocd-wextra-etm.patch
- openocd-wextra-jtag.patch
- openocd-add-new-tap-symbols-v6.patch

Many thanks to  Zach Welch <zw(at)superlucidity.net>

Modified: trunk/src/flash/aduc702x.c
===================================================================
--- trunk/src/flash/aduc702x.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/aduc702x.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -36,19 +36,19 @@
 #include <string.h>
 #include <unistd.h>
 
-int aduc702x_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
-int aduc702x_register_commands(struct command_context_s *cmd_ctx);
-int aduc702x_erase(struct flash_bank_s *bank, int first, int last);
-int aduc702x_protect(struct flash_bank_s *bank, int set, int first, int last);
-int aduc702x_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
-int aduc702x_write_single(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
-int aduc702x_write_block(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
-int aduc702x_probe(struct flash_bank_s *bank);
-int aduc702x_info(struct flash_bank_s *bank, char *buf, int buf_size);
-int aduc702x_protect_check(struct flash_bank_s *bank);
-int aduc702x_build_sector_list(struct flash_bank_s *bank);
-int aduc702x_check_flash_completion(target_t* target, unsigned int timeout_ms);
-int aduc702x_set_write_enable(target_t *target, int enable);
+static int aduc702x_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
+static int aduc702x_register_commands(struct command_context_s *cmd_ctx);
+static int aduc702x_erase(struct flash_bank_s *bank, int first, int last);
+static int aduc702x_protect(struct flash_bank_s *bank, int set, int first, int last);
+static int aduc702x_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
+static int aduc702x_write_single(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
+static int aduc702x_write_block(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
+static int aduc702x_probe(struct flash_bank_s *bank);
+static int aduc702x_info(struct flash_bank_s *bank, char *buf, int buf_size);
+static int aduc702x_protect_check(struct flash_bank_s *bank);
+static int aduc702x_build_sector_list(struct flash_bank_s *bank);
+static int aduc702x_check_flash_completion(target_t* target, unsigned int timeout_ms);
+static int aduc702x_set_write_enable(target_t *target, int enable);
 
 #define ADUC702x_FLASH				0xfffff800
 #define ADUC702x_FLASH_FEESTA		(0*4)
@@ -91,14 +91,14 @@
 	.info = aduc702x_info
 };
 
-int aduc702x_register_commands(struct command_context_s *cmd_ctx)
+static int aduc702x_register_commands(struct command_context_s *cmd_ctx)
 {
 	return ERROR_OK;
 }
 
 /* flash bank aduc702x 0 0 0 0 <target#>
  * The ADC7019-28 devices all have the same flash layout */
-int aduc702x_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
+static int aduc702x_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
 {
 	aduc702x_flash_bank_t *nbank;
 
@@ -113,7 +113,7 @@
         return ERROR_OK;
 }
 
-int aduc702x_build_sector_list(struct flash_bank_s *bank)
+static int aduc702x_build_sector_list(struct flash_bank_s *bank)
 {
 	//aduc7026_flash_bank_t *aduc7026_info = bank->driver_priv;
 	
@@ -135,13 +135,13 @@
 	return ERROR_OK;
 }
 
-int aduc702x_protect_check(struct flash_bank_s *bank)
+static int aduc702x_protect_check(struct flash_bank_s *bank)
 {
 	printf("aduc702x_protect_check not implemented yet.\n");
 	return ERROR_OK;
 }
 
-int aduc702x_erase(struct flash_bank_s *bank, int first, int last)
+static int aduc702x_erase(struct flash_bank_s *bank, int first, int last)
 {
         //int res;
 	int x;
@@ -194,13 +194,13 @@
 	return ERROR_OK;
 }
 
-int aduc702x_protect(struct flash_bank_s *bank, int set, int first, int last)
+static int aduc702x_protect(struct flash_bank_s *bank, int set, int first, int last)
 {
 	printf("aduc702x_protect not implemented yet.\n");
 	return ERROR_FLASH_OPERATION_FAILED;
 }
 
-int aduc702x_write_block(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
+static int aduc702x_write_block(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
 {
 	aduc702x_flash_bank_t *aduc702x_info = bank->driver_priv;
 	target_t *target = bank->target;
@@ -329,7 +329,7 @@
 
 /* All-JTAG, single-access method.  Very slow.  Used only if there is no 
  * working area available. */
-int aduc702x_write_single(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
+static int aduc702x_write_single(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
 {
 	int x;
         u8 b;
@@ -399,12 +399,12 @@
         return ERROR_OK;
 }
 
-int aduc702x_probe(struct flash_bank_s *bank)
+static int aduc702x_probe(struct flash_bank_s *bank)
 {
 	return ERROR_OK;
 }
 
-int aduc702x_info(struct flash_bank_s *bank, char *buf, int buf_size)
+static int aduc702x_info(struct flash_bank_s *bank, char *buf, int buf_size)
 {
 	snprintf(buf, buf_size, "aduc702x flash driver info" );
 	return ERROR_OK;
@@ -412,7 +412,7 @@
 
 /* sets FEEMOD bit 3
  * enable = 1 enables writes & erases, 0 disables them */
-int aduc702x_set_write_enable(target_t *target, int enable)
+static int aduc702x_set_write_enable(target_t *target, int enable)
 {
         // don't bother to preserve int enable bit here
         target_write_u16(target, ADUC702x_FLASH + ADUC702x_FLASH_FEEMOD, enable ? 8 : 0);
@@ -425,7 +425,7 @@
  *
  * this function sleeps 1ms between checks (after the first one),
  * so in some cases may slow things down without a usleep after the first read */
-int aduc702x_check_flash_completion(target_t* target, unsigned int timeout_ms)
+static int aduc702x_check_flash_completion(target_t* target, unsigned int timeout_ms)
 {
         u8 v = 4;
 

Modified: trunk/src/flash/at91sam7.c
===================================================================
--- trunk/src/flash/at91sam7.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/at91sam7.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -53,22 +53,22 @@
 #include <string.h>
 #include <unistd.h>
 
-int at91sam7_register_commands(struct command_context_s *cmd_ctx);
-int at91sam7_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
-int at91sam7_erase(struct flash_bank_s *bank, int first, int last);
-int at91sam7_protect(struct flash_bank_s *bank, int set, int first, int last);
-int at91sam7_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
-int at91sam7_probe(struct flash_bank_s *bank);
-int at91sam7_auto_probe(struct flash_bank_s *bank);
-int at91sam7_erase_check(struct flash_bank_s *bank);
-int at91sam7_protect_check(struct flash_bank_s *bank);
-int at91sam7_info(struct flash_bank_s *bank, char *buf, int buf_size);
+static int at91sam7_register_commands(struct command_context_s *cmd_ctx);
+static int at91sam7_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
+static int at91sam7_erase(struct flash_bank_s *bank, int first, int last);
+static int at91sam7_protect(struct flash_bank_s *bank, int set, int first, int last);
+static int at91sam7_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
+static int at91sam7_probe(struct flash_bank_s *bank);
+//static int at91sam7_auto_probe(struct flash_bank_s *bank);
+static int at91sam7_erase_check(struct flash_bank_s *bank);
+static int at91sam7_protect_check(struct flash_bank_s *bank);
+static int at91sam7_info(struct flash_bank_s *bank, char *buf, int buf_size);
 
-u32 at91sam7_get_flash_status(target_t *target, int bank_number);
-void at91sam7_set_flash_mode(flash_bank_t *bank, int mode);
-u32 at91sam7_wait_status_busy(flash_bank_t *bank, u32 waitbits, int timeout);
-int at91sam7_flash_command(struct flash_bank_s *bank, u8 cmd, u16 pagen); 
-int at91sam7_handle_gpnvm_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static u32 at91sam7_get_flash_status(target_t *target, int bank_number);
+static void at91sam7_set_flash_mode(flash_bank_t *bank, int mode);
+static u32 at91sam7_wait_status_busy(flash_bank_t *bank, u32 waitbits, int timeout);
+static int at91sam7_flash_command(struct flash_bank_s *bank, u8 cmd, u16 pagen); 
+static int at91sam7_handle_gpnvm_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
 flash_driver_t at91sam7_flash =
 {
@@ -85,13 +85,14 @@
 	.info = at91sam7_info
 };
 
-u32 MC_FMR[4] = { 0xFFFFFF60, 0xFFFFFF70, 0xFFFFFF80, 0xFFFFFF90 };
-u32 MC_FCR[4] = { 0xFFFFFF64, 0xFFFFFF74, 0xFFFFFF84, 0xFFFFFF94 };
-u32 MC_FSR[4] = { 0xFFFFFF68, 0xFFFFFF78, 0xFFFFFF88, 0xFFFFFF98 };
+static u32 MC_FMR[4] = { 0xFFFFFF60, 0xFFFFFF70, 0xFFFFFF80, 0xFFFFFF90 };
+static u32 MC_FCR[4] = { 0xFFFFFF64, 0xFFFFFF74, 0xFFFFFF84, 0xFFFFFF94 };
+static u32 MC_FSR[4] = { 0xFFFFFF68, 0xFFFFFF78, 0xFFFFFF88, 0xFFFFFF98 };
 
-char * EPROC[8]= {"Unknown","ARM946-E","ARM7TDMI","Unknown","ARM920T","ARM926EJ-S","Unknown","Unknown"};
+static char * EPROC[8]= {"Unknown","ARM946-E","ARM7TDMI","Unknown","ARM920T","ARM926EJ-S","Unknown","Unknown"};
 
-long SRAMSIZ[16] = {
+#if 0
+static long SRAMSIZ[16] = {
 	-1,
 	0x0400,		/*  1K */
 	0x0800,		/*  2K */ 
@@ -109,8 +110,9 @@
 	0x18000,	/*  96K */
 	0x80000,	/* 512K */
 };
+#endif
 
-int at91sam7_register_commands(struct command_context_s *cmd_ctx)
+static int at91sam7_register_commands(struct command_context_s *cmd_ctx)
 {
 	command_t *at91sam7_cmd = register_command(cmd_ctx, NULL, "at91sam7_new", NULL, COMMAND_ANY, NULL);
 
@@ -119,7 +121,7 @@
 	return ERROR_OK;
 }
 
-u32 at91sam7_get_flash_status(target_t *target, int bank_number)
+static u32 at91sam7_get_flash_status(target_t *target, int bank_number)
 {
 	u32 fsr;
 	target_read_u32(target, MC_FSR[bank_number], &fsr);
@@ -128,7 +130,7 @@
 }
 
 /* Read clock configuration and set at91sam7_info->mck_freq */
-void at91sam7_read_clock_info(flash_bank_t *bank)
+static void at91sam7_read_clock_info(flash_bank_t *bank)
 {
 	at91sam7_flash_bank_t *at91sam7_info = bank->driver_priv;
 	target_t *target = bank->target;
@@ -207,7 +209,7 @@
 }
 
 /* Setup the timimg registers for nvbits or normal flash */
-void at91sam7_set_flash_mode(flash_bank_t *bank, int mode)
+static void at91sam7_set_flash_mode(flash_bank_t *bank, int mode)
 {
 	u32 fmr, fmcn = 0, fws = 0;
 	at91sam7_flash_bank_t *at91sam7_info = bank->driver_priv;
@@ -255,7 +257,7 @@
 	at91sam7_info->flashmode = mode;
 }
 
-u32 at91sam7_wait_status_busy(flash_bank_t *bank, u32 waitbits, int timeout)
+static u32 at91sam7_wait_status_busy(flash_bank_t *bank, u32 waitbits, int timeout)
 {
 	u32 status;
 
@@ -282,7 +284,7 @@
 }
 
 /* Send one command to the AT91SAM flash controller */
-int at91sam7_flash_command(struct flash_bank_s *bank, u8 cmd, u16 pagen)
+static int at91sam7_flash_command(struct flash_bank_s *bank, u8 cmd, u16 pagen)
 {
 	u32 fcr;
 	at91sam7_flash_bank_t *at91sam7_info = bank->driver_priv;
@@ -311,7 +313,7 @@
 }
 
 /* Read device id register, main clock frequency register and fill in driver info structure */
-int at91sam7_read_part_info(struct flash_bank_s *bank)
+static int at91sam7_read_part_info(struct flash_bank_s *bank)
 {
 	flash_bank_t *t_bank = bank;
 	at91sam7_flash_bank_t *at91sam7_info;
@@ -626,7 +628,7 @@
 	return ERROR_OK;
 }
 
-int at91sam7_erase_check(struct flash_bank_s *bank)
+static int at91sam7_erase_check(struct flash_bank_s *bank)
 {
 	target_t *target = bank->target;
 	u16 retval;
@@ -692,7 +694,7 @@
 	return ERROR_OK;
 }
 
-int at91sam7_protect_check(struct flash_bank_s *bank)
+static int at91sam7_protect_check(struct flash_bank_s *bank)
 {
 	u8 lock_pos, gpnvm_pos;
 	u32 status;
@@ -752,7 +754,7 @@
 #  flash bank at91sam7 0x00100000 0 0 4 0 0 AT91SAM7XC256 1 16 64 256 3 0                       ==== NOT RECOMENDED !!! ====
 #  flash bank at91sam7 0 0 0 0 0                        (old style, full auto-detection)        ==== NOT RECOMENDED !!! ====
 ****************************************************************************************************************************************************************************************/
-int at91sam7_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
+static int at91sam7_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
 {
 	flash_bank_t *t_bank = bank;
 	at91sam7_flash_bank_t *at91sam7_info;
@@ -864,7 +866,7 @@
 	return ERROR_OK;
 }
 
-int at91sam7_erase(struct flash_bank_s *bank, int first, int last)
+static int at91sam7_erase(struct flash_bank_s *bank, int first, int last)
 {
 	at91sam7_flash_bank_t *at91sam7_info = bank->driver_priv;
 	int sec;
@@ -932,7 +934,7 @@
 	return ERROR_OK;
 }
 
-int at91sam7_protect(struct flash_bank_s *bank, int set, int first, int last)
+static int at91sam7_protect(struct flash_bank_s *bank, int set, int first, int last)
 {
 	u32 cmd;
 	u32 sector, pagen;
@@ -981,7 +983,7 @@
 	return ERROR_OK;
 }
 
-int at91sam7_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
+static int at91sam7_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
 {
 	int retval;
 	at91sam7_flash_bank_t *at91sam7_info = bank->driver_priv;
@@ -1050,7 +1052,7 @@
 	return ERROR_OK;
 }
 
-int at91sam7_probe(struct flash_bank_s *bank)
+static int at91sam7_probe(struct flash_bank_s *bank)
 {
 	/* we can't probe on an at91sam7
 	 * if this is an at91sam7, it has the configured flash */
@@ -1069,7 +1071,7 @@
 	return ERROR_OK;
 }
 
-int at91sam7_info(struct flash_bank_s *bank, char *buf, int buf_size)
+static int at91sam7_info(struct flash_bank_s *bank, char *buf, int buf_size)
 {
 	int printed;
 	at91sam7_flash_bank_t *at91sam7_info = bank->driver_priv;
@@ -1130,7 +1132,7 @@
 *   The maximum number of write/erase cycles for Non volatile Memory bits is 100. this includes
 *   Lock Bits (LOCKx), General Purpose NVM bits (GPNVMx) and the Security Bit.
 */
-int at91sam7_handle_gpnvm_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int at91sam7_handle_gpnvm_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *bank;
 	int bit;

Modified: trunk/src/flash/at91sam7_old.c
===================================================================
--- trunk/src/flash/at91sam7_old.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/at91sam7_old.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -51,22 +51,22 @@
 #include <string.h>
 #include <unistd.h>
 
-int at91sam7_old_register_commands(struct command_context_s *cmd_ctx);
-int at91sam7_old_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
-int at91sam7_old_erase(struct flash_bank_s *bank, int first, int last);
-int at91sam7_old_protect(struct flash_bank_s *bank, int set, int first, int last);
-int at91sam7_old_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
-int at91sam7_old_probe(struct flash_bank_s *bank);
-int at91sam7_old_auto_probe(struct flash_bank_s *bank);
-int at91sam7_old_erase_check(struct flash_bank_s *bank);
-int at91sam7_old_protect_check(struct flash_bank_s *bank);
-int at91sam7_old_info(struct flash_bank_s *bank, char *buf, int buf_size);
+static int at91sam7_old_register_commands(struct command_context_s *cmd_ctx);
+static int at91sam7_old_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
+static int at91sam7_old_erase(struct flash_bank_s *bank, int first, int last);
+static int at91sam7_old_protect(struct flash_bank_s *bank, int set, int first, int last);
+static int at91sam7_old_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
+static int at91sam7_old_probe(struct flash_bank_s *bank);
+//static int at91sam7_old_auto_probe(struct flash_bank_s *bank);
+static int at91sam7_old_erase_check(struct flash_bank_s *bank);
+static int at91sam7_old_protect_check(struct flash_bank_s *bank);
+static int at91sam7_old_info(struct flash_bank_s *bank, char *buf, int buf_size);
 
-u32 at91sam7_old_get_flash_status(flash_bank_t *bank, u8 flashplane);
-void at91sam7_old_set_flash_mode(flash_bank_t *bank, u8 flashplane, int mode);
-u32 at91sam7_old_wait_status_busy(flash_bank_t *bank, u8 flashplane, u32 waitbits, int timeout);
-int at91sam7_old_flash_command(struct flash_bank_s *bank, u8 flashplane, u8 cmd, u16 pagen); 
-int at91sam7_old_handle_gpnvm_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static u32 at91sam7_old_get_flash_status(flash_bank_t *bank, u8 flashplane);
+static void at91sam7_old_set_flash_mode(flash_bank_t *bank, u8 flashplane, int mode);
+static u32 at91sam7_old_wait_status_busy(flash_bank_t *bank, u8 flashplane, u32 waitbits, int timeout);
+static int at91sam7_old_flash_command(struct flash_bank_s *bank, u8 flashplane, u8 cmd, u16 pagen); 
+static int at91sam7_old_handle_gpnvm_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
 flash_driver_t at91sam7_old_flash =
 {
@@ -83,12 +83,12 @@
 	.info = at91sam7_old_info
 };
 
-u32 MC_FMR_old[4] =	{ 0xFFFFFF60, 0xFFFFFF70, 0xFFFFFF80, 0xFFFFFF90 };
-u32 MC_FCR_old[4] =	{ 0xFFFFFF64, 0xFFFFFF74, 0xFFFFFF84, 0xFFFFFF94 };
-u32 MC_FSR_old[4] =	{ 0xFFFFFF68, 0xFFFFFF78, 0xFFFFFF88, 0xFFFFFF98 };
+static u32 MC_FMR_old[4] =	{ 0xFFFFFF60, 0xFFFFFF70, 0xFFFFFF80, 0xFFFFFF90 };
+static u32 MC_FCR_old[4] =	{ 0xFFFFFF64, 0xFFFFFF74, 0xFFFFFF84, 0xFFFFFF94 };
+static u32 MC_FSR_old[4] =	{ 0xFFFFFF68, 0xFFFFFF78, 0xFFFFFF88, 0xFFFFFF98 };
 
-char * EPROC_old[8]= {"Unknown","ARM946-E","ARM7TDMI","Unknown","ARM920T","ARM926EJ-S","Unknown","Unknown"};
-long NVPSIZ_old[16] = {
+static char * EPROC_old[8]= {"Unknown","ARM946-E","ARM7TDMI","Unknown","ARM920T","ARM926EJ-S","Unknown","Unknown"};
+static long NVPSIZ_old[16] = {
    0,
    0x2000, /*  8K */
    0x4000, /* 16K */ 
@@ -107,7 +107,8 @@
    -1
 };
 
-long SRAMSIZ_old[16] = {
+#if 0
+static long SRAMSIZ_old[16] = {
    -1,
    0x0400, /*  1K */
    0x0800, /*  2K */ 
@@ -125,8 +126,9 @@
    0x18000, /* 96K */
    0x80000, /* 512K */
 };
+#endif
 
-int at91sam7_old_register_commands(struct command_context_s *cmd_ctx)
+static int at91sam7_old_register_commands(struct command_context_s *cmd_ctx)
 {
 	command_t *at91sam7_old_cmd = register_command(cmd_ctx, NULL, "at91sam7", NULL, COMMAND_ANY, NULL);
 	register_command(cmd_ctx, at91sam7_old_cmd, "gpnvm", at91sam7_old_handle_gpnvm_command, COMMAND_EXEC,
@@ -135,7 +137,7 @@
 	return ERROR_OK;
 }
 
-u32 at91sam7_old_get_flash_status(flash_bank_t *bank, u8 flashplane)
+static u32 at91sam7_old_get_flash_status(flash_bank_t *bank, u8 flashplane)
 {
 	target_t *target = bank->target;
 	u32 fsr;
@@ -146,7 +148,7 @@
 }
 
 /* Read clock configuration and set at91sam7_old_info->usec_clocks*/
-void at91sam7_old_read_clock_info(flash_bank_t *bank)
+static void at91sam7_old_read_clock_info(flash_bank_t *bank)
 {
 	at91sam7_old_flash_bank_t *at91sam7_old_info = bank->driver_priv;
 	target_t *target = bank->target;
@@ -210,7 +212,7 @@
 }
 
 /* Setup the timimg registers for nvbits or normal flash */
-void at91sam7_old_set_flash_mode(flash_bank_t *bank, u8 flashplane, int mode)
+static void at91sam7_old_set_flash_mode(flash_bank_t *bank, u8 flashplane, int mode)
 {
 	u32 fmr, fmcn = 0, fws = 0;
 	at91sam7_old_flash_bank_t *at91sam7_old_info = bank->driver_priv;
@@ -251,7 +253,7 @@
 	at91sam7_old_info->flashmode[flashplane] = mode;		
 }
 
-u32 at91sam7_old_wait_status_busy(flash_bank_t *bank, u8 flashplane, u32 waitbits, int timeout)
+static u32 at91sam7_old_wait_status_busy(flash_bank_t *bank, u8 flashplane, u32 waitbits, int timeout)
 {
 	u32 status;
 	
@@ -279,7 +281,7 @@
 
 
 /* Send one command to the AT91SAM flash controller */
-int at91sam7_old_flash_command(struct flash_bank_s *bank, u8 flashplane, u8 cmd, u16 pagen) 
+static int at91sam7_old_flash_command(struct flash_bank_s *bank, u8 flashplane, u8 cmd, u16 pagen) 
 {
 	u32 fcr;
 	at91sam7_old_flash_bank_t *at91sam7_old_info = bank->driver_priv;
@@ -307,7 +309,7 @@
 }
 
 /* Read device id register, main clock frequency register and fill in driver info structure */
-int at91sam7_old_read_part_info(struct flash_bank_s *bank)
+static int at91sam7_old_read_part_info(struct flash_bank_s *bank)
 {
 	at91sam7_old_flash_bank_t *at91sam7_old_info = bank->driver_priv;
 	target_t *target = bank->target;
@@ -574,7 +576,7 @@
 	return ERROR_OK;
 }
 
-int at91sam7_old_protect_check(struct flash_bank_s *bank)
+static int at91sam7_old_protect_check(struct flash_bank_s *bank)
 {
 	u32 status;
 	int flashplane;
@@ -625,7 +627,7 @@
 	return ERROR_OK;
 }
 
-int at91sam7_old_erase(struct flash_bank_s *bank, int first, int last)
+static int at91sam7_old_erase(struct flash_bank_s *bank, int first, int last)
 {
 	at91sam7_old_flash_bank_t *at91sam7_old_info = bank->driver_priv;
 	u8 flashplane;
@@ -716,7 +718,7 @@
 }
 
 
-int at91sam7_old_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
+static int at91sam7_old_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
 {
 	at91sam7_old_flash_bank_t *at91sam7_old_info = bank->driver_priv;
 	target_t *target = bank->target;
@@ -784,7 +786,7 @@
 }
 
 
-int at91sam7_old_probe(struct flash_bank_s *bank)
+static int at91sam7_old_probe(struct flash_bank_s *bank)
 {
 	/* we can't probe on an at91sam7_old
 	 * if this is an at91sam7_old, it has the configured flash
@@ -811,7 +813,7 @@
 }
 
 
-int at91sam7_old_info(struct flash_bank_s *bank, char *buf, int buf_size)
+static int at91sam7_old_info(struct flash_bank_s *bank, char *buf, int buf_size)
 {
 	int printed, flashplane;
 	at91sam7_old_flash_bank_t *at91sam7_old_info = bank->driver_priv;
@@ -871,7 +873,7 @@
 * 	The maximum number of write/erase cycles for Non Volatile Memory bits is 100. This includes
 *	Lock Bits (LOCKx), General Purpose NVM bits (GPNVMx) and the Security Bit.
 */
-int at91sam7_old_handle_gpnvm_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int at91sam7_old_handle_gpnvm_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *bank;
 	int bit;

Modified: trunk/src/flash/cfi.c
===================================================================
--- trunk/src/flash/cfi.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/cfi.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -38,17 +38,17 @@
 #include <string.h>
 #include <unistd.h>
 
-int cfi_register_commands(struct command_context_s *cmd_ctx);
-int cfi_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
-int cfi_erase(struct flash_bank_s *bank, int first, int last);
-int cfi_protect(struct flash_bank_s *bank, int set, int first, int last);
-int cfi_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
-int cfi_probe(struct flash_bank_s *bank);
-int cfi_auto_probe(struct flash_bank_s *bank);
-int cfi_protect_check(struct flash_bank_s *bank);
-int cfi_info(struct flash_bank_s *bank, char *buf, int buf_size);
+static int cfi_register_commands(struct command_context_s *cmd_ctx);
+static int cfi_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
+static int cfi_erase(struct flash_bank_s *bank, int first, int last);
+static int cfi_protect(struct flash_bank_s *bank, int set, int first, int last);
+static int cfi_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
+static int cfi_probe(struct flash_bank_s *bank);
+static int cfi_auto_probe(struct flash_bank_s *bank);
+static int cfi_protect_check(struct flash_bank_s *bank);
+static int cfi_info(struct flash_bank_s *bank, char *buf, int buf_size);
 
-int cfi_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+//static int cfi_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
 #define CFI_MAX_BUS_WIDTH	4
 #define CFI_MAX_CHIP_WIDTH	4
@@ -71,19 +71,19 @@
 	.info = cfi_info
 };
 
-cfi_unlock_addresses_t cfi_unlock_addresses[] =
+static cfi_unlock_addresses_t cfi_unlock_addresses[] =
 {
 	[CFI_UNLOCK_555_2AA] = { .unlock1 = 0x555, .unlock2 = 0x2aa },
 	[CFI_UNLOCK_5555_2AAA] = { .unlock1 = 0x5555, .unlock2 = 0x2aaa },
 };
 
 /* CFI fixups foward declarations */
-void cfi_fixup_0002_erase_regions(flash_bank_t *flash, void *param);
-void cfi_fixup_0002_unlock_addresses(flash_bank_t *flash, void *param);
-void cfi_fixup_atmel_reversed_erase_regions(flash_bank_t *flash, void *param);
+static void cfi_fixup_0002_erase_regions(flash_bank_t *flash, void *param);
+static void cfi_fixup_0002_unlock_addresses(flash_bank_t *flash, void *param);
+static void cfi_fixup_atmel_reversed_erase_regions(flash_bank_t *flash, void *param);
 
 /* fixup after identifying JEDEC manufactuer and ID */
-cfi_fixup_t cfi_jedec_fixups[] = {
+static cfi_fixup_t cfi_jedec_fixups[] = {
 	{CFI_MFR_SST, 0x00D4, cfi_fixup_non_cfi, NULL},
 	{CFI_MFR_SST, 0x00D5, cfi_fixup_non_cfi, NULL},
 	{CFI_MFR_SST, 0x00D6, cfi_fixup_non_cfi, NULL},
@@ -101,7 +101,7 @@
 };
 
 /* fixup after reading cmdset 0002 primary query table */
-cfi_fixup_t cfi_0002_fixups[] = {
+static cfi_fixup_t cfi_0002_fixups[] = {
 	{CFI_MFR_SST, 0x00D4, cfi_fixup_0002_unlock_addresses, &cfi_unlock_addresses[CFI_UNLOCK_5555_2AAA]},
 	{CFI_MFR_SST, 0x00D5, cfi_fixup_0002_unlock_addresses, &cfi_unlock_addresses[CFI_UNLOCK_5555_2AAA]},
 	{CFI_MFR_SST, 0x00D6, cfi_fixup_0002_unlock_addresses, &cfi_unlock_addresses[CFI_UNLOCK_5555_2AAA]},
@@ -117,11 +117,11 @@
 };
 
 /* fixup after reading cmdset 0001 primary query table */
-cfi_fixup_t cfi_0001_fixups[] = {
+static cfi_fixup_t cfi_0001_fixups[] = {
 	{0, 0, NULL, NULL}
 };
 
-void cfi_fixup(flash_bank_t *bank, cfi_fixup_t *fixups)
+static void cfi_fixup(flash_bank_t *bank, cfi_fixup_t *fixups)
 {
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
 	cfi_fixup_t *f;
@@ -154,7 +154,7 @@
 
 }
 
-void cfi_command(flash_bank_t *bank, u8 cmd, u8 *cmd_buf)
+static void cfi_command(flash_bank_t *bank, u8 cmd, u8 *cmd_buf)
 {
 	int i;
 
@@ -184,7 +184,7 @@
  * flash banks are expected to be made of similar chips
  * the query result should be the same for all
  */
-u8 cfi_query_u8(flash_bank_t *bank, int sector, u32 offset)
+static u8 cfi_query_u8(flash_bank_t *bank, int sector, u32 offset)
 {
 	target_t *target = bank->target;
 	u8 data[CFI_MAX_BUS_WIDTH];
@@ -201,7 +201,7 @@
  * in case of a bank made of multiple chips,
  * the individual values are ORed
  */
-u8 cfi_get_u8(flash_bank_t *bank, int sector, u32 offset)
+static u8 cfi_get_u8(flash_bank_t *bank, int sector, u32 offset)
 {
 	target_t *target = bank->target;
 	u8 data[CFI_MAX_BUS_WIDTH];
@@ -226,7 +226,7 @@
 	}
 }
 
-u16 cfi_query_u16(flash_bank_t *bank, int sector, u32 offset)
+static u16 cfi_query_u16(flash_bank_t *bank, int sector, u32 offset)
 {
 	target_t *target = bank->target;
 	u8 data[CFI_MAX_BUS_WIDTH * 2];
@@ -239,7 +239,7 @@
 		return data[bank->bus_width - 1] | data[(2 * bank->bus_width) - 1] << 8;
 }
 
-u32 cfi_query_u32(flash_bank_t *bank, int sector, u32 offset)
+static u32 cfi_query_u32(flash_bank_t *bank, int sector, u32 offset)
 {
 	target_t *target = bank->target;
 	u8 data[CFI_MAX_BUS_WIDTH * 4];
@@ -253,7 +253,7 @@
 				data[(3 * bank->bus_width) - 1] << 16 | data[(4 * bank->bus_width) - 1] << 24;
 }
 
-void cfi_intel_clear_status_register(flash_bank_t *bank)
+static void cfi_intel_clear_status_register(flash_bank_t *bank)
 {
 	target_t *target = bank->target;
 	u8 command[8];
@@ -343,7 +343,7 @@
 	return(ERROR_FLASH_BUSY);
 }
 
-int cfi_read_intel_pri_ext(flash_bank_t *bank)
+static int cfi_read_intel_pri_ext(flash_bank_t *bank)
 {
 	int retval;
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
@@ -406,7 +406,7 @@
 	return ERROR_OK;
 }
 
-int cfi_read_spansion_pri_ext(flash_bank_t *bank)
+static int cfi_read_spansion_pri_ext(flash_bank_t *bank)
 {
 	int retval;
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
@@ -471,7 +471,7 @@
 	return ERROR_OK;
 }
 
-int cfi_read_atmel_pri_ext(flash_bank_t *bank)
+static int cfi_read_atmel_pri_ext(flash_bank_t *bank)
 {
 	int retval;
 	cfi_atmel_pri_ext_t atmel_pri_ext;
@@ -538,7 +538,7 @@
 	return ERROR_OK;
 }
 
-int cfi_read_0002_pri_ext(flash_bank_t *bank)
+static int cfi_read_0002_pri_ext(flash_bank_t *bank)
 {
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
 
@@ -552,7 +552,7 @@
 	}
 }
 
-int cfi_spansion_info(struct flash_bank_s *bank, char *buf, int buf_size)
+static int cfi_spansion_info(struct flash_bank_s *bank, char *buf, int buf_size)
 {
 	int printed;
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
@@ -587,7 +587,7 @@
 	return ERROR_OK;
 }
 
-int cfi_intel_info(struct flash_bank_s *bank, char *buf, int buf_size)
+static int cfi_intel_info(struct flash_bank_s *bank, char *buf, int buf_size)
 {
 	int printed;
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
@@ -616,7 +616,7 @@
 	return ERROR_OK;
 }
 
-int cfi_register_commands(struct command_context_s *cmd_ctx)
+static int cfi_register_commands(struct command_context_s *cmd_ctx)
 {
 	/*command_t *cfi_cmd = */
 	register_command(cmd_ctx, NULL, "cfi", NULL, COMMAND_ANY, "flash bank cfi <base> <size> <chip_width> <bus_width> <targetNum> [jedec_probe/x16_as_x8]");
@@ -629,7 +629,7 @@
 
 /* flash_bank cfi <base> <size> <chip_width> <bus_width> <target#> [options]
  */
-int cfi_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
+static int cfi_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
 {
 	cfi_flash_bank_t *cfi_info;
 	int i;
@@ -677,7 +677,7 @@
 	return ERROR_OK;
 }
 
-int cfi_intel_erase(struct flash_bank_s *bank, int first, int last)
+static int cfi_intel_erase(struct flash_bank_s *bank, int first, int last)
 {
 	int retval;
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
@@ -721,7 +721,7 @@
 
 }
 
-int cfi_spansion_erase(struct flash_bank_s *bank, int first, int last)
+static int cfi_spansion_erase(struct flash_bank_s *bank, int first, int last)
 {
 	int retval;
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
@@ -787,7 +787,7 @@
 	return target->type->write_memory(target, flash_address(bank, 0, 0x0), bank->bus_width, 1, command);
 }
 
-int cfi_erase(struct flash_bank_s *bank, int first, int last)
+static int cfi_erase(struct flash_bank_s *bank, int first, int last)
 {
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
 
@@ -822,7 +822,7 @@
 	return ERROR_OK;
 }
 
-int cfi_intel_protect(struct flash_bank_s *bank, int set, int first, int last)
+static int cfi_intel_protect(struct flash_bank_s *bank, int set, int first, int last)
 {
 	int retval;
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
@@ -939,7 +939,7 @@
 	return target->type->write_memory(target, flash_address(bank, 0, 0x0), bank->bus_width, 1, command);
 }
 
-int cfi_protect(struct flash_bank_s *bank, int set, int first, int last)
+static int cfi_protect(struct flash_bank_s *bank, int set, int first, int last)
 {
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
 
@@ -1018,7 +1018,7 @@
 	}
 }
 
-u32 cfi_command_val(flash_bank_t *bank, u8 cmd)
+static u32 cfi_command_val(flash_bank_t *bank, u8 cmd)
 {
 	target_t *target = bank->target;
 
@@ -1041,7 +1041,7 @@
 	}
 }
 
-int cfi_intel_write_block(struct flash_bank_s *bank, u8 *buffer, u32 address, u32 count)
+static int cfi_intel_write_block(struct flash_bank_s *bank, u8 *buffer, u32 address, u32 count)
 {
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
 	target_t *target = bank->target;
@@ -1285,7 +1285,7 @@
 	return retval;
 }
 
-int cfi_spansion_write_block(struct flash_bank_s *bank, u8 *buffer, u32 address, u32 count)
+static int cfi_spansion_write_block(struct flash_bank_s *bank, u8 *buffer, u32 address, u32 count)
 {
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
 	cfi_spansion_pri_ext_t *pri_ext = cfi_info->pri_ext;
@@ -1547,7 +1547,7 @@
 	return exit_code;
 }
 
-int cfi_intel_write_word(struct flash_bank_s *bank, u8 *word, u32 address)
+static int cfi_intel_write_word(struct flash_bank_s *bank, u8 *word, u32 address)
 {
 	int retval;
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
@@ -1581,7 +1581,7 @@
 	return ERROR_OK;
 }
 
-int cfi_intel_write_words(struct flash_bank_s *bank, u8 *word, u32 wordcount, u32 address)
+static int cfi_intel_write_words(struct flash_bank_s *bank, u8 *word, u32 wordcount, u32 address)
 {
 	int retval;
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
@@ -1673,7 +1673,7 @@
 	return ERROR_OK;
 }
 
-int cfi_spansion_write_word(struct flash_bank_s *bank, u8 *word, u32 address)
+static int cfi_spansion_write_word(struct flash_bank_s *bank, u8 *word, u32 address)
 {
 	int retval;
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
@@ -1719,7 +1719,7 @@
 	return ERROR_OK;
 }
 
-int cfi_spansion_write_words(struct flash_bank_s *bank, u8 *word, u32 wordcount, u32 address)
+static int cfi_spansion_write_words(struct flash_bank_s *bank, u8 *word, u32 wordcount, u32 address)
 {
 	int retval;
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
@@ -1811,7 +1811,7 @@
 	return ERROR_OK;
 }
 
-int cfi_write_word(struct flash_bank_s *bank, u8 *word, u32 address)
+static int cfi_write_word(struct flash_bank_s *bank, u8 *word, u32 address)
 {
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
 
@@ -1832,7 +1832,7 @@
 	return ERROR_FLASH_OPERATION_FAILED;
 }
 
-int cfi_write_words(struct flash_bank_s *bank, u8 *word, u32 wordcount, u32 address)
+static int cfi_write_words(struct flash_bank_s *bank, u8 *word, u32 wordcount, u32 address)
 {
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
 
@@ -2062,7 +2062,7 @@
 	return target->type->write_memory(target, flash_address(bank, 0, 0x0), bank->bus_width, 1, current_word);
 }
 
-void cfi_fixup_atmel_reversed_erase_regions(flash_bank_t *bank, void *param)
+static void cfi_fixup_atmel_reversed_erase_regions(flash_bank_t *bank, void *param)
 {
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
 	cfi_spansion_pri_ext_t *pri_ext = cfi_info->pri_ext;
@@ -2070,7 +2070,7 @@
 	pri_ext->_reversed_geometry = 1;
 }
 
-void cfi_fixup_0002_erase_regions(flash_bank_t *bank, void *param)
+static void cfi_fixup_0002_erase_regions(flash_bank_t *bank, void *param)
 {
 	int i;
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
@@ -2092,7 +2092,7 @@
 	}
 }
 
-void cfi_fixup_0002_unlock_addresses(flash_bank_t *bank, void *param)
+static void cfi_fixup_0002_unlock_addresses(flash_bank_t *bank, void *param)
 {
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
 	cfi_spansion_pri_ext_t *pri_ext = cfi_info->pri_ext;
@@ -2102,7 +2102,7 @@
 	pri_ext->_unlock2 = unlock_addresses->unlock2;
 }
 
-int cfi_probe(struct flash_bank_s *bank)
+static int cfi_probe(struct flash_bank_s *bank)
 {
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
 	target_t *target = bank->target;
@@ -2379,7 +2379,7 @@
 	return ERROR_OK;
 }
 
-int cfi_auto_probe(struct flash_bank_s *bank)
+static int cfi_auto_probe(struct flash_bank_s *bank)
 {
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
 	if (cfi_info->probed)
@@ -2388,7 +2388,7 @@
 }
 
 
-int cfi_intel_protect_check(struct flash_bank_s *bank)
+static int cfi_intel_protect_check(struct flash_bank_s *bank)
 {
 	int retval;
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
@@ -2421,7 +2421,7 @@
 	return target->type->write_memory(target, flash_address(bank, 0, 0x0), bank->bus_width, 1, command);
 }
 
-int cfi_spansion_protect_check(struct flash_bank_s *bank)
+static int cfi_spansion_protect_check(struct flash_bank_s *bank)
 {
 	int retval;
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
@@ -2462,7 +2462,7 @@
 	return target->type->write_memory(target, flash_address(bank, 0, 0x0), bank->bus_width, 1, command);
 }
 
-int cfi_protect_check(struct flash_bank_s *bank)
+static int cfi_protect_check(struct flash_bank_s *bank)
 {
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
 
@@ -2492,7 +2492,7 @@
 	return ERROR_OK;
 }
 
-int cfi_info(struct flash_bank_s *bank, char *buf, int buf_size)
+static int cfi_info(struct flash_bank_s *bank, char *buf, int buf_size)
 {
 	int printed;
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;

Modified: trunk/src/flash/ecos.c
===================================================================
--- trunk/src/flash/ecos.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/ecos.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -36,19 +36,21 @@
 #include "../target/embeddedice.h"
 #include "types.h"
 
-int ecosflash_register_commands(struct command_context_s *cmd_ctx);
-int ecosflash_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
-int ecosflash_erase(struct flash_bank_s *bank, int first, int last);
-int ecosflash_protect(struct flash_bank_s *bank, int set, int first, int last);
-int ecosflash_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
-int ecosflash_probe(struct flash_bank_s *bank);
-int ecosflash_protect_check(struct flash_bank_s *bank);
-int ecosflash_info(struct flash_bank_s *bank, char *buf, int buf_size);
+static int ecosflash_register_commands(struct command_context_s *cmd_ctx);
+static int ecosflash_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
+static int ecosflash_erase(struct flash_bank_s *bank, int first, int last);
+static int ecosflash_protect(struct flash_bank_s *bank, int set, int first, int last);
+static int ecosflash_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
+static int ecosflash_probe(struct flash_bank_s *bank);
+static int ecosflash_protect_check(struct flash_bank_s *bank);
+static int ecosflash_info(struct flash_bank_s *bank, char *buf, int buf_size);
 
-u32 ecosflash_get_flash_status(flash_bank_t *bank);
-void ecosflash_set_flash_mode(flash_bank_t *bank,int mode);
-u32 ecosflash_wait_status_busy(flash_bank_t *bank, u32 waitbits, int timeout);
-int ecosflash_handle_gpnvm_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+#if 0
+static u32 ecosflash_get_flash_status(flash_bank_t *bank);
+static void ecosflash_set_flash_mode(flash_bank_t *bank,int mode);
+static u32 ecosflash_wait_status_busy(flash_bank_t *bank, u32 waitbits, int timeout);
+static int ecosflash_handle_gpnvm_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+#endif
 
 flash_driver_t ecosflash_flash =
 {
@@ -136,7 +138,7 @@
 
 /* flash bank ecosflash <base> <size> <chip_width> <bus_width> <target#> <driverPath>
  */
-int ecosflash_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
+static int ecosflash_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
 {
 	ecosflash_flash_bank_t *info;
 
@@ -181,7 +183,7 @@
 	return ERROR_OK;
 }
 
-int loadDriver(ecosflash_flash_bank_t *info)
+static int loadDriver(ecosflash_flash_bank_t *info)
 {
 	u32 buf_cnt;
 	u32 image_size;
@@ -230,7 +232,7 @@
 static int const OFFSET_GET_WORKAREA=0x18;
 static int const OFFSET_GET_WORKAREA_SIZE=0x4;
 
-int runCode(ecosflash_flash_bank_t *info,
+static int runCode(ecosflash_flash_bank_t *info,
 		u32 codeStart, u32 codeStop, u32 r0, u32 r1, u32 r2,
 		u32 *result,
 		/* timeout in ms */
@@ -271,7 +273,7 @@
 	return ERROR_OK;
 }
 
-int eCosBoard_erase(ecosflash_flash_bank_t *info, u32 address, u32 len)
+static int eCosBoard_erase(ecosflash_flash_bank_t *info, u32 address, u32 len)
 {
 	int retval;
 	int timeout = (len / 20480 + 1) * 1000; /*asume 20 KB/s*/
@@ -302,7 +304,7 @@
 	return ERROR_OK;
 }
 
-int eCosBoard_flash(ecosflash_flash_bank_t *info, void *data, u32 address, u32 len)
+static int eCosBoard_flash(ecosflash_flash_bank_t *info, void *data, u32 address, u32 len)
 {
 	target_t *target=info->target;
 	const int chunk=8192;
@@ -361,12 +363,12 @@
 	return ERROR_OK;
 }
 
-int ecosflash_probe(struct flash_bank_s *bank)
+static int ecosflash_probe(struct flash_bank_s *bank)
 {
 	return ERROR_OK;
 }
 
-int ecosflash_register_commands(struct command_context_s *cmd_ctx)
+static int ecosflash_register_commands(struct command_context_s *cmd_ctx)
 {
 	register_command(cmd_ctx, NULL, "ecosflash", NULL, COMMAND_ANY, NULL);
 
@@ -396,7 +398,8 @@
 }
 #endif
 
-u32 ecosflash_address(struct flash_bank_s *bank, u32 address)
+#if 0
+static u32 ecosflash_address(struct flash_bank_s *bank, u32 address)
 {
 	u32 retval = 0;
 	switch(bank->bus_width)
@@ -411,54 +414,57 @@
 
 	return retval + bank->base;
 }
+#endif
 
-int ecosflash_erase(struct flash_bank_s *bank, int first, int last)
+static int ecosflash_erase(struct flash_bank_s *bank, int first, int last)
 {
 	struct flash_bank_s *c=bank;
 	ecosflash_flash_bank_t *info = bank->driver_priv;
 	return eCosBoard_erase(info, c->base+first*sectorSize, sectorSize*(last-first+1));
 }
 
-int ecosflash_protect(struct flash_bank_s *bank, int set, int first, int last)
+static int ecosflash_protect(struct flash_bank_s *bank, int set, int first, int last)
 {
 	return ERROR_OK;
 }
 
-int ecosflash_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
+static int ecosflash_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
 {
 	ecosflash_flash_bank_t *info = bank->driver_priv;
 	struct flash_bank_s *c=bank;
 	return eCosBoard_flash(info, buffer, c->base+offset, count);
 }
 
-int ecosflash_protect_check(struct flash_bank_s *bank)
+static int ecosflash_protect_check(struct flash_bank_s *bank)
 {
 	return ERROR_OK;
 }
 
-int ecosflash_info(struct flash_bank_s *bank, char *buf, int buf_size)
+static int ecosflash_info(struct flash_bank_s *bank, char *buf, int buf_size)
 {
 	ecosflash_flash_bank_t *info = bank->driver_priv;
 	snprintf(buf, buf_size, "eCos flash driver: %s", info->driverPath);
 	return ERROR_OK;
 }
 
-u32 ecosflash_get_flash_status(flash_bank_t *bank)
+#if 0
+static u32 ecosflash_get_flash_status(flash_bank_t *bank)
 {
 	return ERROR_OK;
 }
 
-void ecosflash_set_flash_mode(flash_bank_t *bank,int mode)
+static void ecosflash_set_flash_mode(flash_bank_t *bank,int mode)
 {
 
 }
 
-u32 ecosflash_wait_status_busy(flash_bank_t *bank, u32 waitbits, int timeout)
+static u32 ecosflash_wait_status_busy(flash_bank_t *bank, u32 waitbits, int timeout)
 {
 	return ERROR_OK;
 }
 
-int ecosflash_handle_gpnvm_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int ecosflash_handle_gpnvm_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	return ERROR_OK;
 }
+#endif

Modified: trunk/src/flash/flash.c
===================================================================
--- trunk/src/flash/flash.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/flash.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -48,19 +48,17 @@
 #include <inttypes.h>
 
 /* command handlers */
-int handle_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_flash_info_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_flash_probe_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_flash_erase_check_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_flash_erase_address_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_flash_protect_check_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_flash_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_flash_write_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_flash_write_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_flash_write_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_flash_fill_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_flash_protect_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-flash_bank_t *get_flash_bank_by_addr(target_t *target, u32 addr);
+static int handle_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_flash_info_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_flash_probe_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_flash_erase_check_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_flash_erase_address_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_flash_protect_check_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_flash_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_flash_write_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_flash_write_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_flash_fill_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_flash_protect_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
 /* flash drivers
  */
@@ -265,7 +263,7 @@
 	return p;
 }
 
-int handle_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	int retval;
 	int i;
@@ -345,7 +343,7 @@
 	return ERROR_OK;
 }
 
-int handle_flash_info_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_flash_info_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *p;
 	int i = 0;
@@ -396,7 +394,7 @@
 	return ERROR_OK;
 }
 
-int handle_flash_probe_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_flash_probe_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *p;
 	int retval;
@@ -432,7 +430,7 @@
 	return ERROR_OK;
 }
 
-int handle_flash_erase_check_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_flash_erase_check_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *p;
 	int retval;
@@ -476,7 +474,7 @@
 	return ERROR_OK;
 }
 
-int handle_flash_erase_address_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_flash_erase_address_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *p;
 	int retval;
@@ -524,7 +522,7 @@
 	return retval;
 }
 
-int handle_flash_protect_check_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_flash_protect_check_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *p;
 	int retval;
@@ -558,7 +556,7 @@
 	return ERROR_OK;
 }
 
-int handle_flash_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_flash_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc > 2)
 	{
@@ -595,7 +593,7 @@
 	return ERROR_OK;
 }
 
-int handle_flash_protect_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_flash_protect_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc > 3)
 	{
@@ -634,7 +632,7 @@
 	return ERROR_OK;
 }
 
-int handle_flash_write_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_flash_write_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target = get_current_target(cmd_ctx);
 
@@ -719,7 +717,7 @@
 	return retval;
 }
 
-int handle_flash_fill_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_flash_fill_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	int err = ERROR_OK, retval;
 	u32 address;
@@ -819,7 +817,7 @@
 	return ERROR_OK;
 }
 
-int handle_flash_write_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_flash_write_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	u32 offset;
 	u8 *buffer;

Modified: trunk/src/flash/lpc2000.c
===================================================================
--- trunk/src/flash/lpc2000.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/lpc2000.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -51,17 +51,17 @@
  * - 2378
  */
 
-int lpc2000_register_commands(struct command_context_s *cmd_ctx);
-int lpc2000_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
-int lpc2000_erase(struct flash_bank_s *bank, int first, int last);
-int lpc2000_protect(struct flash_bank_s *bank, int set, int first, int last);
-int lpc2000_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
-int lpc2000_probe(struct flash_bank_s *bank);
-int lpc2000_erase_check(struct flash_bank_s *bank);
-int lpc2000_protect_check(struct flash_bank_s *bank);
-int lpc2000_info(struct flash_bank_s *bank, char *buf, int buf_size);
+static int lpc2000_register_commands(struct command_context_s *cmd_ctx);
+static int lpc2000_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
+static int lpc2000_erase(struct flash_bank_s *bank, int first, int last);
+static int lpc2000_protect(struct flash_bank_s *bank, int set, int first, int last);
+static int lpc2000_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
+static int lpc2000_probe(struct flash_bank_s *bank);
+static int lpc2000_erase_check(struct flash_bank_s *bank);
+static int lpc2000_protect_check(struct flash_bank_s *bank);
+static int lpc2000_info(struct flash_bank_s *bank, char *buf, int buf_size);
 	
-int lpc2000_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int lpc2000_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
 flash_driver_t lpc2000_flash =
 {
@@ -78,7 +78,7 @@
 	.info = lpc2000_info
 };
 
-int lpc2000_register_commands(struct command_context_s *cmd_ctx)
+static int lpc2000_register_commands(struct command_context_s *cmd_ctx)
 {
 	command_t *lpc2000_cmd = register_command(cmd_ctx, NULL, "lpc2000", NULL, COMMAND_ANY, NULL);
 	
@@ -88,7 +88,7 @@
 	return ERROR_OK;
 }
 
-int lpc2000_build_sector_list(struct flash_bank_s *bank)
+static int lpc2000_build_sector_list(struct flash_bank_s *bank)
 {
 	lpc2000_flash_bank_t *lpc2000_info = bank->driver_priv;
 	
@@ -239,7 +239,7 @@
  * 0x20 to 0x2b: command result table
  * 0x2c to 0xac: stack (only 128b needed)
  */
-int lpc2000_iap_call(flash_bank_t *bank, int code, u32 param_table[5], u32 result_table[2])
+static int lpc2000_iap_call(flash_bank_t *bank, int code, u32 param_table[5], u32 result_table[2])
 {
 	int retval;
 	lpc2000_flash_bank_t *lpc2000_info = bank->driver_priv;
@@ -322,14 +322,14 @@
 	return status_code;
 }
 
-int lpc2000_iap_blank_check(struct flash_bank_s *bank, int first, int last)
+static int lpc2000_iap_blank_check(struct flash_bank_s *bank, int first, int last)
 {
 	u32 param_table[5];
 	u32 result_table[2];
 	int status_code;
 	int i;
 	
-	if ((first < 0) || (last > bank->num_sectors))
+	if ((first < 0) || (last >= bank->num_sectors))
 		return ERROR_FLASH_SECTOR_INVALID;
 	
 	for (i = first; i <= last; i++)
@@ -365,7 +365,7 @@
 
 /* flash bank lpc2000 <base> <size> 0 0 <target#> <lpc_variant> <cclk> [calc_checksum]
  */
-int lpc2000_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
+static int lpc2000_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
 {
 	lpc2000_flash_bank_t *lpc2000_info;
 	
@@ -413,7 +413,7 @@
 	return ERROR_OK;
 }
 
-int lpc2000_erase(struct flash_bank_s *bank, int first, int last)
+static int lpc2000_erase(struct flash_bank_s *bank, int first, int last)
 {
 	lpc2000_flash_bank_t *lpc2000_info = bank->driver_priv;
 	u32 param_table[5];
@@ -465,13 +465,13 @@
 	return ERROR_OK;
 }
 
-int lpc2000_protect(struct flash_bank_s *bank, int set, int first, int last)
+static int lpc2000_protect(struct flash_bank_s *bank, int set, int first, int last)
 {
 	/* can't protect/unprotect on the lpc2000 */
 	return ERROR_OK;
 }
 
-int lpc2000_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
+static int lpc2000_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
 {
 	lpc2000_flash_bank_t *lpc2000_info = bank->driver_priv;
 	target_t *target = bank->target;
@@ -635,7 +635,7 @@
 	return retval;
 }
 
-int lpc2000_probe(struct flash_bank_s *bank)
+static int lpc2000_probe(struct flash_bank_s *bank)
 {
 	/* we can't probe on an lpc2000 
 	 * if this is an lpc2xxx, it has the configured flash
@@ -643,7 +643,7 @@
 	return ERROR_OK;
 }
 
-int lpc2000_erase_check(struct flash_bank_s *bank)
+static int lpc2000_erase_check(struct flash_bank_s *bank)
 {
 	if (bank->target->state != TARGET_HALTED)
 	{
@@ -654,13 +654,13 @@
 	return lpc2000_iap_blank_check(bank, 0, bank->num_sectors - 1);
 }
 
-int lpc2000_protect_check(struct flash_bank_s *bank)
+static int lpc2000_protect_check(struct flash_bank_s *bank)
 {
 	/* sectors are always protected	*/
 	return ERROR_OK;
 }
 
-int lpc2000_info(struct flash_bank_s *bank, char *buf, int buf_size)
+static int lpc2000_info(struct flash_bank_s *bank, char *buf, int buf_size)
 {
 	lpc2000_flash_bank_t *lpc2000_info = bank->driver_priv;
 
@@ -669,7 +669,7 @@
 	return ERROR_OK;
 }
 
-int lpc2000_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int lpc2000_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *bank;
 	u32 param_table[5];

Modified: trunk/src/flash/lpc288x.c
===================================================================
--- trunk/src/flash/lpc288x.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/lpc288x.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -94,22 +94,19 @@
 /* F_CLK_TIME */
 #define FCT_CLK_DIV_MASK    0x0FFF
 
-int lpc288x_register_commands(struct command_context_s *cmd_ctx);
-int lpc288x_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
-int lpc288x_erase(struct flash_bank_s *bank, int first, int last);
-int lpc288x_protect(struct flash_bank_s *bank, int set, int first, int last);
-int lpc288x_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
-int lpc288x_probe(struct flash_bank_s *bank);
-int lpc288x_auto_probe(struct flash_bank_s *bank);
-int lpc288x_erase_check(struct flash_bank_s *bank);
-int lpc288x_protect_check(struct flash_bank_s *bank);
-int lpc288x_info(struct flash_bank_s *bank, char *buf, int buf_size);
-void lpc288x_set_flash_mode(flash_bank_t *bank, u8 flashplane, int mode);
-u32 lpc288x_wait_status_busy(flash_bank_t *bank, int timeout);
-void lpc288x_load_timer(int erase, struct target_s *target);
-void lpc288x_set_flash_clk(struct flash_bank_s *bank);
-u32 lpc288x_system_ready(struct flash_bank_s *bank);
-int lpc288x_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int lpc288x_register_commands(struct command_context_s *cmd_ctx);
+static int lpc288x_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
+static int lpc288x_erase(struct flash_bank_s *bank, int first, int last);
+static int lpc288x_protect(struct flash_bank_s *bank, int set, int first, int last);
+static int lpc288x_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
+static int lpc288x_probe(struct flash_bank_s *bank);
+static int lpc288x_erase_check(struct flash_bank_s *bank);
+static int lpc288x_protect_check(struct flash_bank_s *bank);
+static int lpc288x_info(struct flash_bank_s *bank, char *buf, int buf_size);
+static u32 lpc288x_wait_status_busy(flash_bank_t *bank, int timeout);
+static void lpc288x_load_timer(int erase, struct target_s *target);
+static void lpc288x_set_flash_clk(struct flash_bank_s *bank);
+static u32 lpc288x_system_ready(struct flash_bank_s *bank);
 
 flash_driver_t lpc288x_flash =
 {
@@ -126,12 +123,12 @@
 	.info = lpc288x_info
 };
 
-int lpc288x_register_commands(struct command_context_s *cmd_ctx)
+static int lpc288x_register_commands(struct command_context_s *cmd_ctx)
 {
 	return ERROR_OK;
 }
 
-u32 lpc288x_wait_status_busy(flash_bank_t *bank, int timeout)
+static u32 lpc288x_wait_status_busy(flash_bank_t *bank, int timeout)
 {
 	u32 status;
 	target_t *target = bank->target;
@@ -151,7 +148,7 @@
 }
 
 /* Read device id register and fill in driver info structure */
-int lpc288x_read_part_info(struct flash_bank_s *bank)
+static int lpc288x_read_part_info(struct flash_bank_s *bank)
 {
 	lpc288x_flash_bank_t *lpc288x_info = bank->driver_priv;
 	target_t *target = bank->target;
@@ -201,13 +198,13 @@
 	return ERROR_OK;
 }
 
-int lpc288x_protect_check(struct flash_bank_s *bank)
+static int lpc288x_protect_check(struct flash_bank_s *bank)
 {
 	return ERROR_OK;
 }
 
 /* flash_bank LPC288x 0 0 0 0 <target#> <cclk> */
-int lpc288x_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
+static int lpc288x_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
 {
 	lpc288x_flash_bank_t *lpc288x_info;
 	
@@ -232,7 +229,7 @@
  * AHB = 12 MHz ?
  * 12000000/66000 = 182
  * CLK_DIV = 60 ? */
-void lpc288x_set_flash_clk(struct flash_bank_s *bank)
+static void lpc288x_set_flash_clk(struct flash_bank_s *bank)
 {
 	u32 clk_time;
 	lpc288x_flash_bank_t *lpc288x_info = bank->driver_priv;
@@ -247,7 +244,7 @@
  * LOAD_TIMER_WRITE		FPT_TIME	= ((1,000,000 / AHB tcyc (in ns)) - 2) / 512
  * 									= 23 (75) (AN10548 72 - is this wrong?)
  * TODO: Sort out timing calcs ;) */
-void lpc288x_load_timer(int erase, struct target_s *target)
+static void lpc288x_load_timer(int erase, struct target_s *target)
 {
 	if (erase == LOAD_TIMER_ERASE)
 	{
@@ -259,7 +256,7 @@
 	}
 }
 
-u32 lpc288x_system_ready(struct flash_bank_s *bank)
+static u32 lpc288x_system_ready(struct flash_bank_s *bank)
 {
 	lpc288x_flash_bank_t *lpc288x_info = bank->driver_priv;
 	if (lpc288x_info->cidr == 0)
@@ -275,7 +272,7 @@
 	return ERROR_OK;
 }
 
-int lpc288x_erase_check(struct flash_bank_s *bank)
+static int lpc288x_erase_check(struct flash_bank_s *bank)
 {
 	u32 status = lpc288x_system_ready(bank);	/* probed? halted? */
 	if (status != ERROR_OK)
@@ -287,7 +284,7 @@
 	return ERROR_OK;
 }
 
-int lpc288x_erase(struct flash_bank_s *bank, int first, int last)
+static int lpc288x_erase(struct flash_bank_s *bank, int first, int last)
 {
 	u32 status;
 	int sector;
@@ -328,7 +325,7 @@
 	return ERROR_OK;
 }
 
-int lpc288x_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
+static int lpc288x_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
 {
 	u8 page_buffer[FLASH_PAGE_SIZE];
 	u32 i, status, source_offset,dest_offset;
@@ -443,7 +440,7 @@
 	return ERROR_OK;
 }
 
-int lpc288x_probe(struct flash_bank_s *bank)
+static int lpc288x_probe(struct flash_bank_s *bank)
 {
 	/* we only deal with LPC2888 so flash config is fixed */
 	lpc288x_flash_bank_t *lpc288x_info = bank->driver_priv;
@@ -466,13 +463,13 @@
 	return ERROR_OK;
 }
 
-int lpc288x_info(struct flash_bank_s *bank, char *buf, int buf_size)
+static int lpc288x_info(struct flash_bank_s *bank, char *buf, int buf_size)
 {
 	snprintf(buf, buf_size, "lpc288x flash driver");
 	return ERROR_OK;
 }
 
-int lpc288x_protect(struct flash_bank_s *bank, int set, int first, int last)
+static int lpc288x_protect(struct flash_bank_s *bank, int set, int first, int last)
 {
 	int lockregion, status;
 	u32 value;

Modified: trunk/src/flash/lpc3180_nand_controller.c
===================================================================
--- trunk/src/flash/lpc3180_nand_controller.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/lpc3180_nand_controller.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -32,20 +32,20 @@
 #include "nand.h"
 #include "target.h"
 
-int lpc3180_nand_device_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct nand_device_s *device);
-int lpc3180_register_commands(struct command_context_s *cmd_ctx);
-int lpc3180_init(struct nand_device_s *device);
-int lpc3180_reset(struct nand_device_s *device);
-int lpc3180_command(struct nand_device_s *device, u8 command);
-int lpc3180_address(struct nand_device_s *device, u8 address);
-int lpc3180_write_data(struct nand_device_s *device, u16 data);
-int lpc3180_read_data(struct nand_device_s *device, void *data);
-int lpc3180_write_page(struct nand_device_s *device, u32 page, u8 *data, u32 data_size, u8 *oob, u32 oob_size);
-int lpc3180_read_page(struct nand_device_s *device, u32 page, u8 *data, u32 data_size, u8 *oob, u32 oob_size);
-int lpc3180_controller_ready(struct nand_device_s *device, int timeout);
-int lpc3180_nand_ready(struct nand_device_s *device, int timeout);
+static int lpc3180_nand_device_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct nand_device_s *device);
+static int lpc3180_register_commands(struct command_context_s *cmd_ctx);
+static int lpc3180_init(struct nand_device_s *device);
+static int lpc3180_reset(struct nand_device_s *device);
+static int lpc3180_command(struct nand_device_s *device, u8 command);
+static int lpc3180_address(struct nand_device_s *device, u8 address);
+static int lpc3180_write_data(struct nand_device_s *device, u16 data);
+static int lpc3180_read_data(struct nand_device_s *device, void *data);
+static int lpc3180_write_page(struct nand_device_s *device, u32 page, u8 *data, u32 data_size, u8 *oob, u32 oob_size);
+static int lpc3180_read_page(struct nand_device_s *device, u32 page, u8 *data, u32 data_size, u8 *oob, u32 oob_size);
+static int lpc3180_controller_ready(struct nand_device_s *device, int timeout);
+static int lpc3180_nand_ready(struct nand_device_s *device, int timeout);
 
-int handle_lpc3180_select_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_lpc3180_select_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
 nand_flash_controller_t lpc3180_nand_controller =
 {
@@ -66,7 +66,7 @@
 
 /* nand device lpc3180 <target#> <oscillator_frequency>
  */
-int lpc3180_nand_device_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct nand_device_s *device)
+static int lpc3180_nand_device_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct nand_device_s *device)
 {
 	lpc3180_nand_controller_t *lpc3180_info;
 	
@@ -99,7 +99,7 @@
 	return ERROR_OK;
 }
 
-int lpc3180_register_commands(struct command_context_s *cmd_ctx)
+static int lpc3180_register_commands(struct command_context_s *cmd_ctx)
 {
 	command_t *lpc3180_cmd = register_command(cmd_ctx, NULL, "lpc3180", NULL, COMMAND_ANY, "commands specific to the LPC3180 NAND flash controllers");
 	
@@ -108,7 +108,7 @@
 	return ERROR_OK;
 }
 
-int lpc3180_pll(int fclkin, u32 pll_ctrl)
+static int lpc3180_pll(int fclkin, u32 pll_ctrl)
 {
 	int bypass = (pll_ctrl & 0x8000) >> 15;
 	int direct = (pll_ctrl & 0x4000) >> 14;
@@ -136,7 +136,7 @@
 		return (m / (2 * p)) * (fclkin / n); 
 }
 
-float lpc3180_cycle_time(lpc3180_nand_controller_t *lpc3180_info)
+static float lpc3180_cycle_time(lpc3180_nand_controller_t *lpc3180_info)
 {
 	target_t *target = lpc3180_info->target;
 	u32 sysclk_ctrl, pwr_ctrl, hclkdiv_ctrl, hclkpll_ctrl;
@@ -186,7 +186,7 @@
 	return cycle;
 }
 
-int lpc3180_init(struct nand_device_s *device)
+static int lpc3180_init(struct nand_device_s *device)
 {
 	lpc3180_nand_controller_t *lpc3180_info = device->controller_priv;
 	target_t *target = lpc3180_info->target;
@@ -316,7 +316,7 @@
 	return ERROR_OK;
 }
 
-int lpc3180_reset(struct nand_device_s *device)
+static int lpc3180_reset(struct nand_device_s *device)
 {
 	lpc3180_nand_controller_t *lpc3180_info = device->controller_priv;
 	target_t *target = lpc3180_info->target;
@@ -358,7 +358,7 @@
 	return ERROR_OK;
 }
 
-int lpc3180_command(struct nand_device_s *device, u8 command)
+static int lpc3180_command(struct nand_device_s *device, u8 command)
 {
 	lpc3180_nand_controller_t *lpc3180_info = device->controller_priv;
 	target_t *target = lpc3180_info->target;
@@ -388,7 +388,7 @@
 	return ERROR_OK;
 }
 
-int lpc3180_address(struct nand_device_s *device, u8 address)
+static int lpc3180_address(struct nand_device_s *device, u8 address)
 {
 	lpc3180_nand_controller_t *lpc3180_info = device->controller_priv;
 	target_t *target = lpc3180_info->target;
@@ -418,7 +418,7 @@
 	return ERROR_OK;
 }
 
-int lpc3180_write_data(struct nand_device_s *device, u16 data)
+static int lpc3180_write_data(struct nand_device_s *device, u16 data)
 {
 	lpc3180_nand_controller_t *lpc3180_info = device->controller_priv;
 	target_t *target = lpc3180_info->target;
@@ -448,7 +448,7 @@
 	return ERROR_OK;
 }
 
-int lpc3180_read_data(struct nand_device_s *device, void *data)
+static int lpc3180_read_data(struct nand_device_s *device, void *data)
 {
 	lpc3180_nand_controller_t *lpc3180_info = device->controller_priv;
 	target_t *target = lpc3180_info->target;
@@ -510,7 +510,7 @@
 	return ERROR_OK;
 }
 
-int lpc3180_write_page(struct nand_device_s *device, u32 page, u8 *data, u32 data_size, u8 *oob, u32 oob_size)
+static int lpc3180_write_page(struct nand_device_s *device, u32 page, u8 *data, u32 data_size, u8 *oob, u32 oob_size)
 {
 	lpc3180_nand_controller_t *lpc3180_info = device->controller_priv;
 	target_t *target = lpc3180_info->target;
@@ -649,7 +649,7 @@
 	return ERROR_OK;
 }
 
-int lpc3180_read_page(struct nand_device_s *device, u32 page, u8 *data, u32 data_size, u8 *oob, u32 oob_size)
+static int lpc3180_read_page(struct nand_device_s *device, u32 page, u8 *data, u32 data_size, u8 *oob, u32 oob_size)
 {
 	lpc3180_nand_controller_t *lpc3180_info = device->controller_priv;
 	target_t *target = lpc3180_info->target;
@@ -796,7 +796,7 @@
 	return ERROR_OK;
 }
 
-int lpc3180_controller_ready(struct nand_device_s *device, int timeout)
+static int lpc3180_controller_ready(struct nand_device_s *device, int timeout)
 {
 	lpc3180_nand_controller_t *lpc3180_info = device->controller_priv;
 	target_t *target = lpc3180_info->target;
@@ -830,7 +830,7 @@
 	return 0;
 }
 
-int lpc3180_nand_ready(struct nand_device_s *device, int timeout)
+static int lpc3180_nand_ready(struct nand_device_s *device, int timeout)
 {
 	lpc3180_nand_controller_t *lpc3180_info = device->controller_priv;
 	target_t *target = lpc3180_info->target;
@@ -870,7 +870,7 @@
 	return 0;	
 }
 
-int handle_lpc3180_select_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_lpc3180_select_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	nand_device_t *device = NULL;
 	lpc3180_nand_controller_t *lpc3180_info = NULL;

Modified: trunk/src/flash/nand.c
===================================================================
--- trunk/src/flash/nand.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/nand.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -39,24 +39,21 @@
 #include "fileio.h"
 #include "image.h"
 
-int nand_register_commands(struct command_context_s *cmd_ctx);
-int handle_nand_list_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_nand_probe_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_nand_check_bad_blocks_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_nand_info_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_nand_copy_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_nand_write_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_nand_dump_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_nand_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_nand_list_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_nand_probe_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_nand_check_bad_blocks_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_nand_info_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_nand_copy_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_nand_write_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_nand_dump_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_nand_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
-int handle_nand_raw_access_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_nand_raw_access_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
-int nand_read_page_raw(struct nand_device_s *device, u32 page, u8 *data, u32 data_size, u8 *oob, u32 oob_size);
-int nand_read_page(struct nand_device_s *device, u32 page, u8 *data, u32 data_size, u8 *oob, u32 oob_size);
-int nand_read_plain(struct nand_device_s *device, u32 address, u8 *data, u32 data_size);
+static int nand_read_page(struct nand_device_s *device, u32 page, u8 *data, u32 data_size, u8 *oob, u32 oob_size);
+//static int nand_read_plain(struct nand_device_s *device, u32 address, u8 *data, u32 data_size);
 
-int nand_write_page_raw(struct nand_device_s *device, u32 page, u8 *data, u32 data_size, u8 *oob, u32 oob_size);
-int nand_write_page(struct nand_device_s *device, u32 page, u8 *data, u32 data_size, u8 *oob, u32 oob_size);
+static int nand_write_page(struct nand_device_s *device, u32 page, u8 *data, u32 data_size, u8 *oob, u32 oob_size);
 
 /* NAND flash controller
  */
@@ -69,7 +66,7 @@
 
 /* extern nand_flash_controller_t boundary_scan_nand_controller; */
 
-nand_flash_controller_t *nand_flash_controllers[] =
+static nand_flash_controller_t *nand_flash_controllers[] =
 {
 	&lpc3180_nand_controller,
 	&orion_nand_controller,
@@ -82,7 +79,7 @@
 };
 
 /* configured NAND devices and NAND Flash command handler */
-nand_device_t *nand_devices = NULL;
+static nand_device_t *nand_devices = NULL;
 static command_t *nand_cmd;
 
 /*	Chip ID list
@@ -95,7 +92,7 @@
  *	256	256 Byte page size
  *	512	512 Byte page size
  */
-nand_info_t nand_flash_ids[] =
+static nand_info_t nand_flash_ids[] =
 {
 	{"NAND 1MiB 5V 8-bit",		0x6e, 256, 1, 0x1000, 0},
 	{"NAND 2MiB 5V 8-bit",		0x64, 256, 2, 0x1000, 0},
@@ -173,7 +170,7 @@
 
 /* Manufacturer ID list
  */
-nand_manufacturer_t nand_manuf_ids[] =
+static nand_manufacturer_t nand_manuf_ids[] =
 {
 	{0x0, "unknown"},
 	{NAND_MFR_TOSHIBA, "Toshiba"},
@@ -190,7 +187,8 @@
  * Define default oob placement schemes for large and small page devices
  */
 
-nand_ecclayout_t nand_oob_8 = {
+#if 0
+static nand_ecclayout_t nand_oob_8 = {
 	.eccbytes = 3,
 	.eccpos = {0, 1, 2},
 	.oobfree = {
@@ -199,8 +197,9 @@
 		{.offset = 6,
 		 .length = 2}}
 };
+#endif
 
-nand_ecclayout_t nand_oob_16 = {
+static nand_ecclayout_t nand_oob_16 = {
 	.eccbytes = 6,
 	.eccpos = {0, 1, 2, 3, 6, 7},
 	.oobfree = {
@@ -208,7 +207,7 @@
 		 . length = 8}}
 };
 
-nand_ecclayout_t nand_oob_64 = {
+static nand_ecclayout_t nand_oob_64 = {
 	.eccbytes = 24,
 	.eccpos = {
 		   40, 41, 42, 43, 44, 45, 46, 47,
@@ -221,7 +220,7 @@
 
 /* nand device <nand_controller> [controller options]
  */
-int handle_nand_device_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_nand_device_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	int i;
 	int retval;
@@ -346,7 +345,7 @@
 	return NULL;
 }
 
-int nand_build_bbt(struct nand_device_s *device, int first, int last)
+static int nand_build_bbt(struct nand_device_s *device, int first, int last)
 {
 	u32 page = 0x0;
 	int i;
@@ -405,7 +404,7 @@
 	return ERROR_OK;
 }
 
-int nand_poll_ready(struct nand_device_s *device, int timeout)
+static int nand_poll_ready(struct nand_device_s *device, int timeout)
 {
 	u8 status;
 
@@ -729,7 +728,8 @@
 	return ERROR_OK;
 }
 
-int nand_read_plain(struct nand_device_s *device, u32 address, u8 *data, u32 data_size)
+#if 0
+static int nand_read_plain(struct nand_device_s *device, u32 address, u8 *data, u32 data_size)
 {
 	u8 *page;
 	
@@ -766,7 +766,7 @@
 	return ERROR_OK;
 }
 
-int nand_write_plain(struct nand_device_s *device, u32 address, u8 *data, u32 data_size)
+static int nand_write_plain(struct nand_device_s *device, u32 address, u8 *data, u32 data_size)
 {
 	u8 *page;
 	
@@ -802,6 +802,7 @@
 	
 	return ERROR_OK;
 }
+#endif
 
 int nand_write_page(struct nand_device_s *device, u32 page, u8 *data, u32 data_size, u8 *oob, u32 oob_size)
 {
@@ -820,7 +821,7 @@
 		return device->controller->write_page(device, page, data, data_size, oob, oob_size);
 }
 
-int nand_read_page(struct nand_device_s *device, u32 page, u8 *data, u32 data_size, u8 *oob, u32 oob_size)
+static int nand_read_page(struct nand_device_s *device, u32 page, u8 *data, u32 data_size, u8 *oob, u32 oob_size)
 {
 	if (!device->device)
 		return ERROR_NAND_DEVICE_NOT_PROBED;
@@ -1089,7 +1090,7 @@
 	return ERROR_OK;
 }
 
-int handle_nand_info_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_nand_info_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	nand_device_t *p;
 	int i = 0;
@@ -1159,7 +1160,7 @@
 	return ERROR_OK;
 }
 
-int handle_nand_probe_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_nand_probe_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	nand_device_t *p;
 	int retval;
@@ -1193,7 +1194,7 @@
 	return ERROR_OK;
 }
 
-int handle_nand_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_nand_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	nand_device_t *p;
 	int retval;
@@ -1274,7 +1275,7 @@
 	return ERROR_OK;
 }
 
-int handle_nand_copy_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_nand_copy_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	nand_device_t *p;
 		
@@ -1297,7 +1298,7 @@
 	return ERROR_OK;
 }
 
-int handle_nand_write_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_nand_write_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	u32 offset;
 	u32 binary_size;
@@ -1452,7 +1453,7 @@
 	return ERROR_OK;
 }
 
-int handle_nand_dump_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_nand_dump_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	nand_device_t *p;
 			
@@ -1574,7 +1575,7 @@
 	return ERROR_OK;
 }
 
-int handle_nand_raw_access_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_nand_raw_access_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	nand_device_t *p;
 		

Modified: trunk/src/flash/ocl.c
===================================================================
--- trunk/src/flash/ocl.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/ocl.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -37,16 +37,16 @@
 #include <string.h>
 #include <unistd.h>
 
-int ocl_register_commands(struct command_context_s *cmd_ctx);
-int ocl_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
-int ocl_erase(struct flash_bank_s *bank, int first, int last);
-int ocl_protect(struct flash_bank_s *bank, int set, int first, int last);
-int ocl_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
-int ocl_probe(struct flash_bank_s *bank);
-int ocl_erase_check(struct flash_bank_s *bank);
-int ocl_protect_check(struct flash_bank_s *bank);
-int ocl_info(struct flash_bank_s *bank, char *buf, int buf_size);
-int ocl_auto_probe(struct flash_bank_s *bank);
+static int ocl_register_commands(struct command_context_s *cmd_ctx);
+static int ocl_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
+static int ocl_erase(struct flash_bank_s *bank, int first, int last);
+static int ocl_protect(struct flash_bank_s *bank, int set, int first, int last);
+static int ocl_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
+static int ocl_probe(struct flash_bank_s *bank);
+static int ocl_erase_check(struct flash_bank_s *bank);
+static int ocl_protect_check(struct flash_bank_s *bank);
+static int ocl_info(struct flash_bank_s *bank, char *buf, int buf_size);
+static int ocl_auto_probe(struct flash_bank_s *bank);
 
 flash_driver_t ocl_flash =
 {
@@ -70,23 +70,23 @@
 	int bufalign;
 } ocl_priv_t;
 
-int ocl_register_commands(struct command_context_s *cmd_ctx)
+static int ocl_register_commands(struct command_context_s *cmd_ctx)
 {
 	return ERROR_OK;
 }
 
-int ocl_erase_check(struct flash_bank_s *bank)
+static int ocl_erase_check(struct flash_bank_s *bank)
 {
 	return ERROR_OK;
 }
 
-int ocl_protect_check(struct flash_bank_s *bank)
+static int ocl_protect_check(struct flash_bank_s *bank)
 {
 	return ERROR_OK;
 }
 
 /* flash_bank ocl 0 0 0 0 <target#> */
-int ocl_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
+static int ocl_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
 {
 	int retval;
 	armv4_5_common_t *armv4_5;
@@ -110,7 +110,7 @@
 	return ERROR_OK;
 }
 
-int ocl_erase(struct flash_bank_s *bank, int first, int last)
+static int ocl_erase(struct flash_bank_s *bank, int first, int last)
 {
 	ocl_priv_t *ocl = bank->driver_priv;
 	int retval;
@@ -165,12 +165,12 @@
 	return ERROR_OK;
 }
 
-int ocl_protect(struct flash_bank_s *bank, int set, int first, int last)
+static int ocl_protect(struct flash_bank_s *bank, int set, int first, int last)
 {
 	return ERROR_OK;
 }
 
-int ocl_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
+static int ocl_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
 {
 	ocl_priv_t *ocl = bank->driver_priv;
 	int retval;
@@ -277,7 +277,7 @@
 	return ERROR_OK;
 }
 
-int ocl_probe(struct flash_bank_s *bank)
+static int ocl_probe(struct flash_bank_s *bank)
 {
 	ocl_priv_t *ocl = bank->driver_priv;
 	int retval;
@@ -375,12 +375,12 @@
 	return ERROR_OK;
 }
 
-int ocl_info(struct flash_bank_s *bank, char *buf, int buf_size)
+static int ocl_info(struct flash_bank_s *bank, char *buf, int buf_size)
 {
 	return ERROR_OK;
 }
 
-int ocl_auto_probe(struct flash_bank_s *bank)
+static int ocl_auto_probe(struct flash_bank_s *bank)
 {
 	ocl_priv_t *ocl = bank->driver_priv;
 

Modified: trunk/src/flash/orion_nand.c
===================================================================
--- trunk/src/flash/orion_nand.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/orion_nand.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -55,7 +55,7 @@
 		} \
 	} while (0)
 
-int orion_nand_command(struct nand_device_s *device, u8 command)
+static int orion_nand_command(struct nand_device_s *device, u8 command)
 {
 	orion_nand_controller_t *hw = device->controller_priv;
 	target_t *target = hw->target;
@@ -65,7 +65,7 @@
 	return ERROR_OK;
 }
 
-int orion_nand_address(struct nand_device_s *device, u8 address)
+static int orion_nand_address(struct nand_device_s *device, u8 address)
 {
 	orion_nand_controller_t *hw = device->controller_priv;
 	target_t *target = hw->target;
@@ -75,7 +75,7 @@
 	return ERROR_OK;
 }
 
-int orion_nand_read(struct nand_device_s *device, void *data)
+static int orion_nand_read(struct nand_device_s *device, void *data)
 {
 	orion_nand_controller_t *hw = device->controller_priv;
 	target_t *target = hw->target;
@@ -85,7 +85,7 @@
 	return ERROR_OK;
 }
 
-int orion_nand_write(struct nand_device_s *device, u16 data)
+static int orion_nand_write(struct nand_device_s *device, u16 data)
 {
 	orion_nand_controller_t *hw = device->controller_priv;
 	target_t *target = hw->target;
@@ -95,14 +95,14 @@
 	return ERROR_OK;
 }
 
-int orion_nand_slow_block_write(struct nand_device_s *device, u8 *data, int size)
+static int orion_nand_slow_block_write(struct nand_device_s *device, u8 *data, int size)
 {
 	while (size--)
 		orion_nand_write(device, *data++);
 	return ERROR_OK;
 }
 
-int orion_nand_fast_block_write(struct nand_device_s *device, u8 *data, int size)
+static int orion_nand_fast_block_write(struct nand_device_s *device, u8 *data, int size)
 {
 	orion_nand_controller_t *hw = device->controller_priv;
 	target_t *target = hw->target;
@@ -181,17 +181,17 @@
 	return retval;
 }
 
-int orion_nand_reset(struct nand_device_s *device)
+static int orion_nand_reset(struct nand_device_s *device)
 {
 	return orion_nand_command(device, NAND_CMD_RESET);
 }
 
-int orion_nand_controller_ready(struct nand_device_s *device, int timeout)
+static int orion_nand_controller_ready(struct nand_device_s *device, int timeout)
 {
 	return 1;
 }
 
-int orion_nand_register_commands(struct command_context_s *cmd_ctx)
+static int orion_nand_register_commands(struct command_context_s *cmd_ctx)
 {
 	return ERROR_OK;
 }
@@ -234,7 +234,7 @@
 	return ERROR_OK;
 }
 
-int orion_nand_init(struct nand_device_s *device)
+static int orion_nand_init(struct nand_device_s *device)
 {
 	return ERROR_OK;
 }

Modified: trunk/src/flash/pic32mx.c
===================================================================
--- trunk/src/flash/pic32mx.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/pic32mx.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -66,26 +66,26 @@
 	{ 0x00, NULL, 0 }
 };
 
-int pic32mx_register_commands(struct command_context_s *cmd_ctx);
-int pic32mx_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
-int pic32mx_erase(struct flash_bank_s *bank, int first, int last);
-int pic32mx_protect(struct flash_bank_s *bank, int set, int first, int last);
-int pic32mx_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
-int pic32mx_write_row(struct flash_bank_s *bank, u32 address, u32 srcaddr);
-int pic32mx_write_word(struct flash_bank_s *bank, u32 address, u32 word);
-int pic32mx_probe(struct flash_bank_s *bank);
-int pic32mx_auto_probe(struct flash_bank_s *bank);
-int pic32mx_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int pic32mx_protect_check(struct flash_bank_s *bank);
-int pic32mx_info(struct flash_bank_s *bank, char *buf, int buf_size);
+static int pic32mx_register_commands(struct command_context_s *cmd_ctx);
+static int pic32mx_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
+static int pic32mx_erase(struct flash_bank_s *bank, int first, int last);
+static int pic32mx_protect(struct flash_bank_s *bank, int set, int first, int last);
+static int pic32mx_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
+static int pic32mx_write_row(struct flash_bank_s *bank, u32 address, u32 srcaddr);
+static int pic32mx_write_word(struct flash_bank_s *bank, u32 address, u32 word);
+static int pic32mx_probe(struct flash_bank_s *bank);
+static int pic32mx_auto_probe(struct flash_bank_s *bank);
+//static int pic32mx_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int pic32mx_protect_check(struct flash_bank_s *bank);
+static int pic32mx_info(struct flash_bank_s *bank, char *buf, int buf_size);
 
 #if 0
 int pic32mx_handle_lock_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 int pic32mx_handle_unlock_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 #endif
-int pic32mx_handle_chip_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int pic32mx_handle_pgm_word_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int pic32mx_chip_erase(struct flash_bank_s *bank);
+static int pic32mx_handle_chip_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int pic32mx_handle_pgm_word_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+//static int pic32mx_chip_erase(struct flash_bank_s *bank);
 
 flash_driver_t pic32mx_flash =
 {
@@ -102,7 +102,7 @@
 	.info = pic32mx_info
 };
 
-int pic32mx_register_commands(struct command_context_s *cmd_ctx)
+static int pic32mx_register_commands(struct command_context_s *cmd_ctx)
 {
 	command_t *pic32mx_cmd = register_command(cmd_ctx, NULL, "pic32mx", NULL, COMMAND_ANY, "pic32mx flash specific commands");
 
@@ -121,7 +121,7 @@
 
 /* flash bank pic32mx <base> <size> 0 0 <target#>
  */
-int pic32mx_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
+static int pic32mx_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
 {
 	pic32mx_flash_bank_t *pic32mx_info;
 
@@ -140,7 +140,7 @@
 	return ERROR_OK;
 }
 
-u32 pic32mx_get_flash_status(flash_bank_t *bank)
+static u32 pic32mx_get_flash_status(flash_bank_t *bank)
 {
 	target_t *target = bank->target;
 	u32 status;
@@ -150,7 +150,7 @@
 	return status;
 }
 
-u32 pic32mx_wait_status_busy(flash_bank_t *bank, int timeout)
+static u32 pic32mx_wait_status_busy(flash_bank_t *bank, int timeout)
 {
 	u32 status;
 
@@ -166,7 +166,7 @@
 	return status;
 }
 
-int pic32mx_nvm_exec(struct flash_bank_s *bank, u32 op, u32 timeout)
+static int pic32mx_nvm_exec(struct flash_bank_s *bank, u32 op, u32 timeout)
 {
 	target_t *target = bank->target;
 	u32 status;
@@ -188,7 +188,7 @@
 	return status;
 }
 
-int pic32mx_protect_check(struct flash_bank_s *bank)
+static int pic32mx_protect_check(struct flash_bank_s *bank)
 {
 	target_t *target = bank->target;
 
@@ -222,7 +222,7 @@
 	return ERROR_OK;
 }
 
-int pic32mx_erase(struct flash_bank_s *bank, int first, int last)
+static int pic32mx_erase(struct flash_bank_s *bank, int first, int last)
 {
 	target_t *target = bank->target;
 	int i;
@@ -264,7 +264,7 @@
 	return ERROR_OK;
 }
 
-int pic32mx_protect(struct flash_bank_s *bank, int set, int first, int last)
+static int pic32mx_protect(struct flash_bank_s *bank, int set, int first, int last)
 {
 	pic32mx_flash_bank_t *pic32mx_info = NULL;
 	target_t *target = bank->target;
@@ -357,7 +357,7 @@
 #endif
 }
 
-int pic32mx_write_block(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
+static int pic32mx_write_block(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
 {
 	target_t *target = bank->target;
 	u32 buffer_size = 512;
@@ -485,7 +485,7 @@
 	return retval;
 }
 
-int pic32mx_write_word(struct flash_bank_s *bank, u32 address, u32 word)
+static int pic32mx_write_word(struct flash_bank_s *bank, u32 address, u32 word)
 {
 	target_t *target = bank->target;
 
@@ -501,7 +501,7 @@
 /*
  * Write a 128 word (512 byte) row to flash address from RAM srcaddr.
  */
-int pic32mx_write_row(struct flash_bank_s *bank, u32 address, u32 srcaddr)
+static int pic32mx_write_row(struct flash_bank_s *bank, u32 address, u32 srcaddr)
 {
 	target_t *target = bank->target;
 
@@ -519,7 +519,7 @@
 	return pic32mx_nvm_exec(bank, NVMCON_OP_ROW_PROG, 100);
 }
 
-int pic32mx_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
+static int pic32mx_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
 {
 	u32 words_remaining = (count / 4);
 	u32 bytes_remaining = (count & 0x00000003);
@@ -604,7 +604,7 @@
 	return ERROR_OK;
 }
 
-int pic32mx_probe(struct flash_bank_s *bank)
+static int pic32mx_probe(struct flash_bank_s *bank)
 {
 	target_t *target = bank->target;
 	pic32mx_flash_bank_t *pic32mx_info = bank->driver_priv;
@@ -683,7 +683,7 @@
 	return ERROR_OK;
 }
 
-int pic32mx_auto_probe(struct flash_bank_s *bank)
+static int pic32mx_auto_probe(struct flash_bank_s *bank)
 {
 	pic32mx_flash_bank_t *pic32mx_info = bank->driver_priv;
 	if (pic32mx_info->probed)
@@ -691,12 +691,14 @@
 	return pic32mx_probe(bank);
 }
 
-int pic32mx_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+#if 0
+static int pic32mx_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	return ERROR_OK;
 }
+#endif
 
-int pic32mx_info(struct flash_bank_s *bank, char *buf, int buf_size)
+static int pic32mx_info(struct flash_bank_s *bank, char *buf, int buf_size)
 {
 	target_t *target = bank->target;
 	mips32_common_t *mips32 = target->arch_info;
@@ -823,7 +825,8 @@
 }
 #endif
 
-int pic32mx_chip_erase(struct flash_bank_s *bank)
+#if 0
+static int pic32mx_chip_erase(struct flash_bank_s *bank)
 {
 	target_t *target = bank->target;
 #if 0
@@ -866,8 +869,9 @@
 
 	return ERROR_OK;
 }
+#endif
 
-int pic32mx_handle_chip_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int pic32mx_handle_chip_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 #if 0
 	flash_bank_t *bank;
@@ -905,7 +909,7 @@
 	return ERROR_OK;
 }
 
-int pic32mx_handle_pgm_word_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int pic32mx_handle_pgm_word_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *bank;
 	u32 address, value;

Modified: trunk/src/flash/s3c2410_nand.c
===================================================================
--- trunk/src/flash/s3c2410_nand.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/s3c2410_nand.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -38,11 +38,11 @@
 #include "s3c24xx_nand.h"
 #include "target.h"
 
-int s3c2410_nand_device_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct nand_device_s *device);
-int s3c2410_init(struct nand_device_s *device);
-int s3c2410_read_data(struct nand_device_s *device, void *data);
-int s3c2410_write_data(struct nand_device_s *device, u16 data);
-int s3c2410_nand_ready(struct nand_device_s *device, int timeout);
+static int s3c2410_nand_device_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct nand_device_s *device);
+static int s3c2410_init(struct nand_device_s *device);
+static int s3c2410_read_data(struct nand_device_s *device, void *data);
+static int s3c2410_write_data(struct nand_device_s *device, u16 data);
+static int s3c2410_nand_ready(struct nand_device_s *device, int timeout);
 
 nand_flash_controller_t s3c2410_nand_controller =
 {
@@ -61,7 +61,7 @@
 	.nand_ready		= s3c2410_nand_ready,
 };
 
-int s3c2410_nand_device_command(struct command_context_s *cmd_ctx, char *cmd,
+static int s3c2410_nand_device_command(struct command_context_s *cmd_ctx, char *cmd,
 				char **args, int argc,
 				struct nand_device_s *device)
 {
@@ -81,7 +81,7 @@
 	return ERROR_OK;
 }
 
-int s3c2410_init(struct nand_device_s *device)
+static int s3c2410_init(struct nand_device_s *device)
 {
 	s3c24xx_nand_controller_t *s3c24xx_info = device->controller_priv;
 	target_t *target = s3c24xx_info->target;
@@ -93,7 +93,7 @@
 	return ERROR_OK;
 }
 
-int s3c2410_write_data(struct nand_device_s *device, u16 data)
+static int s3c2410_write_data(struct nand_device_s *device, u16 data)
 {
 	s3c24xx_nand_controller_t *s3c24xx_info = device->controller_priv;
 	target_t *target = s3c24xx_info->target;
@@ -107,7 +107,7 @@
 	return ERROR_OK;
 }
 
-int s3c2410_read_data(struct nand_device_s *device, void *data)
+static int s3c2410_read_data(struct nand_device_s *device, void *data)
 {
 	s3c24xx_nand_controller_t *s3c24xx_info = device->controller_priv;
 	target_t *target = s3c24xx_info->target;
@@ -121,7 +121,7 @@
 	return ERROR_OK;
 }
 
-int s3c2410_nand_ready(struct nand_device_s *device, int timeout)
+static int s3c2410_nand_ready(struct nand_device_s *device, int timeout)
 {
 	s3c24xx_nand_controller_t *s3c24xx_info = device->controller_priv;
 	target_t *target = s3c24xx_info->target;

Modified: trunk/src/flash/s3c2412_nand.c
===================================================================
--- trunk/src/flash/s3c2412_nand.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/s3c2412_nand.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -38,8 +38,8 @@
 #include "s3c24xx_nand.h"
 #include "target.h"
 
-int s3c2412_nand_device_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct nand_device_s *device);
-int s3c2412_init(struct nand_device_s *device);
+static int s3c2412_nand_device_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct nand_device_s *device);
+static int s3c2412_init(struct nand_device_s *device);
 
 nand_flash_controller_t s3c2412_nand_controller =
 {
@@ -60,7 +60,7 @@
 	.nand_ready		= s3c2440_nand_ready,
 };
 
-int s3c2412_nand_device_command(struct command_context_s *cmd_ctx, char *cmd,
+static int s3c2412_nand_device_command(struct command_context_s *cmd_ctx, char *cmd,
 				char **args, int argc,
 				struct nand_device_s *device)
 {
@@ -80,7 +80,7 @@
 	return ERROR_OK;
 }
 
-int s3c2412_init(struct nand_device_s *device)
+static int s3c2412_init(struct nand_device_s *device)
 {
 	s3c24xx_nand_controller_t *s3c24xx_info = device->controller_priv;
 	target_t *target = s3c24xx_info->target;

Modified: trunk/src/flash/s3c2440_nand.c
===================================================================
--- trunk/src/flash/s3c2440_nand.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/s3c2440_nand.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -38,9 +38,9 @@
 #include "s3c24xx_nand.h"
 #include "target.h"
 
-int s3c2440_nand_device_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct nand_device_s *device);
-int s3c2440_init(struct nand_device_s *device);
-int s3c2440_nand_ready(struct nand_device_s *device, int timeout);
+static int s3c2440_nand_device_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct nand_device_s *device);
+static int s3c2440_init(struct nand_device_s *device);
+//static int s3c2440_nand_ready(struct nand_device_s *device, int timeout);
 
 nand_flash_controller_t s3c2440_nand_controller =
 {
@@ -61,7 +61,7 @@
 	.nand_ready		= s3c2440_nand_ready,
 };
 
-int s3c2440_nand_device_command(struct command_context_s *cmd_ctx, char *cmd,
+static int s3c2440_nand_device_command(struct command_context_s *cmd_ctx, char *cmd,
 				char **args, int argc,
 				struct nand_device_s *device)
 {
@@ -81,7 +81,7 @@
 	return ERROR_OK;
 }
 
-int s3c2440_init(struct nand_device_s *device)
+static int s3c2440_init(struct nand_device_s *device)
 {
 	s3c24xx_nand_controller_t *s3c24xx_info = device->controller_priv;
 	target_t *target = s3c24xx_info->target;

Modified: trunk/src/flash/s3c2443_nand.c
===================================================================
--- trunk/src/flash/s3c2443_nand.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/s3c2443_nand.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -38,9 +38,8 @@
 #include "s3c24xx_nand.h"
 #include "target.h"
 
-int s3c2443_nand_device_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct nand_device_s *device);
-int s3c2443_init(struct nand_device_s *device);
-int s3c2443_nand_ready(struct nand_device_s *device, int timeout);
+static int s3c2443_nand_device_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct nand_device_s *device);
+static int s3c2443_init(struct nand_device_s *device);
 
 nand_flash_controller_t s3c2443_nand_controller =
 {
@@ -61,7 +60,7 @@
 	.nand_ready		= s3c2440_nand_ready,
 };
 
-int s3c2443_nand_device_command(struct command_context_s *cmd_ctx, char *cmd,
+static int s3c2443_nand_device_command(struct command_context_s *cmd_ctx, char *cmd,
 				char **args, int argc,
 				struct nand_device_s *device)
 {
@@ -81,7 +80,7 @@
 	return ERROR_OK;
 }
 
-int s3c2443_init(struct nand_device_s *device)
+static int s3c2443_init(struct nand_device_s *device)
 {
 	s3c24xx_nand_controller_t *s3c24xx_info = device->controller_priv;
 	target_t *target = s3c24xx_info->target;

Modified: trunk/src/flash/stellaris.c
===================================================================
--- trunk/src/flash/stellaris.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/stellaris.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -44,24 +44,24 @@
 #include <unistd.h>
 
 #define DID0_VER(did0) ((did0>>28)&0x07)
-int stellaris_register_commands(struct command_context_s *cmd_ctx);
-int stellaris_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
-int stellaris_erase(struct flash_bank_s *bank, int first, int last);
-int stellaris_protect(struct flash_bank_s *bank, int set, int first, int last);
-int stellaris_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
-int stellaris_auto_probe(struct flash_bank_s *bank);
-int stellaris_probe(struct flash_bank_s *bank);
-int stellaris_protect_check(struct flash_bank_s *bank);
-int stellaris_info(struct flash_bank_s *bank, char *buf, int buf_size);
+static int stellaris_register_commands(struct command_context_s *cmd_ctx);
+static int stellaris_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
+static int stellaris_erase(struct flash_bank_s *bank, int first, int last);
+static int stellaris_protect(struct flash_bank_s *bank, int set, int first, int last);
+static int stellaris_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
+static int stellaris_auto_probe(struct flash_bank_s *bank);
+static int stellaris_probe(struct flash_bank_s *bank);
+static int stellaris_protect_check(struct flash_bank_s *bank);
+static int stellaris_info(struct flash_bank_s *bank, char *buf, int buf_size);
 
-int stellaris_read_part_info(struct flash_bank_s *bank);
-u32 stellaris_get_flash_status(flash_bank_t *bank);
-void stellaris_set_flash_mode(flash_bank_t *bank,int mode);
-u32 stellaris_wait_status_busy(flash_bank_t *bank, u32 waitbits, int timeout);
+static int stellaris_read_part_info(struct flash_bank_s *bank);
+static u32 stellaris_get_flash_status(flash_bank_t *bank);
+static void stellaris_set_flash_mode(flash_bank_t *bank,int mode);
+//static u32 stellaris_wait_status_busy(flash_bank_t *bank, u32 waitbits, int timeout);
 
-int stellaris_read_part_info(struct flash_bank_s *bank);
-int stellaris_handle_mass_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int stellaris_mass_erase(struct flash_bank_s *bank);
+static int stellaris_read_part_info(struct flash_bank_s *bank);
+static int stellaris_handle_mass_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int stellaris_mass_erase(struct flash_bank_s *bank);
 
 flash_driver_t stellaris_flash =
 {
@@ -78,7 +78,7 @@
 	.info = stellaris_info
 };
 
-struct {
+static struct {
 	u32 partno;
 	char *partname;
 }	StellarisParts[] =
@@ -234,7 +234,7 @@
 	{0,"Unknown part"}
 };
 
-char * StellarisClassname[5] =
+static char * StellarisClassname[5] =
 {
 	"Sandstorm",
 	"Fury",
@@ -249,7 +249,7 @@
 
 /* flash_bank stellaris <base> <size> 0 0 <target#>
  */
-int stellaris_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
+static int stellaris_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
 {
 	stellaris_flash_bank_t *stellaris_info;
 	
@@ -272,7 +272,7 @@
 	return ERROR_OK;
 }
 
-int stellaris_register_commands(struct command_context_s *cmd_ctx)
+static int stellaris_register_commands(struct command_context_s *cmd_ctx)
 {
 	command_t *stm32x_cmd = register_command(cmd_ctx, NULL, "stellaris", NULL, COMMAND_ANY, "stellaris flash specific commands");
 	
@@ -280,7 +280,7 @@
 	return ERROR_OK;
 }
 
-int stellaris_info(struct flash_bank_s *bank, char *buf, int buf_size)
+static int stellaris_info(struct flash_bank_s *bank, char *buf, int buf_size)
 {
 	int printed, device_class;
 	stellaris_flash_bank_t *stellaris_info = bank->driver_priv;
@@ -331,7 +331,7 @@
 *	chip identification and status                                         *
 ***************************************************************************/
 
-u32 stellaris_get_flash_status(flash_bank_t *bank)
+static u32 stellaris_get_flash_status(flash_bank_t *bank)
 {
 	target_t *target = bank->target;
 	u32 fmc;
@@ -343,7 +343,7 @@
 
 /** Read clock configuration and set stellaris_info->usec_clocks*/
  
-void stellaris_read_clock_info(flash_bank_t *bank)
+static void stellaris_read_clock_info(flash_bank_t *bank)
 {
 	stellaris_flash_bank_t *stellaris_info = bank->driver_priv;
 	target_t *target = bank->target;
@@ -395,7 +395,7 @@
 }
 
 /* Setup the timimg registers */
-void stellaris_set_flash_mode(flash_bank_t *bank,int mode)
+static void stellaris_set_flash_mode(flash_bank_t *bank,int mode)
 {
 	stellaris_flash_bank_t *stellaris_info = bank->driver_priv;
 	target_t *target = bank->target;
@@ -405,7 +405,8 @@
 	target_write_u32(target, SCB_BASE|USECRL, usecrl);
 }
 
-u32 stellaris_wait_status_busy(flash_bank_t *bank, u32 waitbits, int timeout)
+#if 0
+static u32 stellaris_wait_status_busy(flash_bank_t *bank, u32 waitbits, int timeout)
 {
 	u32 status;
 	
@@ -422,7 +423,7 @@
 }
 
 /* Send one command to the flash controller */
-int stellaris_flash_command(struct flash_bank_s *bank,u8 cmd,u16 pagen) 
+static int stellaris_flash_command(struct flash_bank_s *bank,u8 cmd,u16 pagen) 
 {
 	u32 fmc;
 	target_t *target = bank->target;
@@ -438,9 +439,10 @@
 
 	return ERROR_OK;
 }
+#endif
 
 /* Read device id register, main clock frequency register and fill in driver info structure */
-int stellaris_read_part_info(struct flash_bank_s *bank)
+static int stellaris_read_part_info(struct flash_bank_s *bank)
 {
 	stellaris_flash_bank_t *stellaris_info = bank->driver_priv;
 	target_t *target = bank->target;
@@ -515,7 +517,7 @@
 *	flash operations                                                       *
 ***************************************************************************/
 
-int stellaris_protect_check(struct flash_bank_s *bank)
+static int stellaris_protect_check(struct flash_bank_s *bank)
 {
 	u32 status;
 	
@@ -544,7 +546,7 @@
 	return ERROR_OK;
 }
 
-int stellaris_erase(struct flash_bank_s *bank, int first, int last)
+static int stellaris_erase(struct flash_bank_s *bank, int first, int last)
 {
 	int banknr;
 	u32 flash_fmc, flash_cris;
@@ -614,7 +616,7 @@
 	return ERROR_OK;
 }
 
-int stellaris_protect(struct flash_bank_s *bank, int set, int first, int last)
+static int stellaris_protect(struct flash_bank_s *bank, int set, int first, int last)
 {
 	u32 fmppe, flash_fmc, flash_cris;
 	int lockregion;
@@ -690,7 +692,7 @@
 	return ERROR_OK;
 }
 
-u8 stellaris_write_code[] = 
+static u8 stellaris_write_code[] = 
 {
 /* 
 	Call with :	
@@ -730,7 +732,7 @@
 	0x01,0x00,0x42,0xA4 	/* .word	0xA4420001 */
 };
 
-int stellaris_write_block(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 wcount)
+static int stellaris_write_block(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 wcount)
 {
 	target_t *target = bank->target;
 	u32 buffer_size = 8192;
@@ -810,7 +812,7 @@
 	return retval;
 }
 
-int stellaris_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
+static int stellaris_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
 {
 	stellaris_flash_bank_t *stellaris_info = bank->driver_priv;
 	target_t *target = bank->target;
@@ -945,7 +947,7 @@
 	return ERROR_OK;
 }
 
-int stellaris_probe(struct flash_bank_s *bank)
+static int stellaris_probe(struct flash_bank_s *bank)
 {
 	/* we can't probe on an stellaris
 	 * if this is an stellaris, it has the configured flash
@@ -961,7 +963,7 @@
 	return stellaris_read_part_info(bank);
 }
 
-int stellaris_auto_probe(struct flash_bank_s *bank)
+static int stellaris_auto_probe(struct flash_bank_s *bank)
 {
 	stellaris_flash_bank_t *stellaris_info = bank->driver_priv;
 	if (stellaris_info->did1)
@@ -969,7 +971,7 @@
 	return stellaris_probe(bank);
 }
 
-int stellaris_mass_erase(struct flash_bank_s *bank)
+static int stellaris_mass_erase(struct flash_bank_s *bank)
 {
 	target_t *target = NULL;
 	stellaris_flash_bank_t *stellaris_info = NULL;
@@ -1029,7 +1031,7 @@
 	return ERROR_OK;
 }
 
-int stellaris_handle_mass_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int stellaris_handle_mass_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *bank;
 	int i;

Modified: trunk/src/flash/stm32x.c
===================================================================
--- trunk/src/flash/stm32x.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/stm32x.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -37,23 +37,23 @@
 #include <stdlib.h>
 #include <string.h>
 
-int stm32x_register_commands(struct command_context_s *cmd_ctx);
-int stm32x_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
-int stm32x_erase(struct flash_bank_s *bank, int first, int last);
-int stm32x_protect(struct flash_bank_s *bank, int set, int first, int last);
-int stm32x_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
-int stm32x_probe(struct flash_bank_s *bank);
-int stm32x_auto_probe(struct flash_bank_s *bank);
-int stm32x_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int stm32x_protect_check(struct flash_bank_s *bank);
-int stm32x_info(struct flash_bank_s *bank, char *buf, int buf_size);
+static int stm32x_register_commands(struct command_context_s *cmd_ctx);
+static int stm32x_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
+static int stm32x_erase(struct flash_bank_s *bank, int first, int last);
+static int stm32x_protect(struct flash_bank_s *bank, int set, int first, int last);
+static int stm32x_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
+static int stm32x_probe(struct flash_bank_s *bank);
+static int stm32x_auto_probe(struct flash_bank_s *bank);
+//static int stm32x_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int stm32x_protect_check(struct flash_bank_s *bank);
+static int stm32x_info(struct flash_bank_s *bank, char *buf, int buf_size);
 
-int stm32x_handle_lock_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int stm32x_handle_unlock_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int stm32x_handle_options_read_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int stm32x_handle_options_write_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int stm32x_handle_mass_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int stm32x_mass_erase(struct flash_bank_s *bank);
+static int stm32x_handle_lock_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int stm32x_handle_unlock_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int stm32x_handle_options_read_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int stm32x_handle_options_write_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int stm32x_handle_mass_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int stm32x_mass_erase(struct flash_bank_s *bank);
 
 flash_driver_t stm32x_flash =
 {
@@ -70,7 +70,7 @@
 	.info = stm32x_info
 };
 
-int stm32x_register_commands(struct command_context_s *cmd_ctx)
+static int stm32x_register_commands(struct command_context_s *cmd_ctx)
 {
 	command_t *stm32x_cmd = register_command(cmd_ctx, NULL, "stm32x", NULL, COMMAND_ANY, "stm32x flash specific commands");
 	
@@ -89,7 +89,7 @@
 
 /* flash bank stm32x <base> <size> 0 0 <target#>
  */
-int stm32x_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
+static int stm32x_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
 {
 	stm32x_flash_bank_t *stm32x_info;
 	
@@ -108,7 +108,7 @@
 	return ERROR_OK;
 }
 
-u32 stm32x_get_flash_status(flash_bank_t *bank)
+static u32 stm32x_get_flash_status(flash_bank_t *bank)
 {
 	target_t *target = bank->target;
 	u32 status;
@@ -118,7 +118,7 @@
 	return status;
 }
 
-u32 stm32x_wait_status_busy(flash_bank_t *bank, int timeout)
+static u32 stm32x_wait_status_busy(flash_bank_t *bank, int timeout)
 {
 	u32 status;
 	
@@ -132,7 +132,7 @@
 	return status;
 }
 
-int stm32x_read_options(struct flash_bank_s *bank)
+static int stm32x_read_options(struct flash_bank_s *bank)
 {
 	u32 optiondata;
 	stm32x_flash_bank_t *stm32x_info = NULL;
@@ -160,7 +160,7 @@
 	return ERROR_OK;
 }
 
-int stm32x_erase_options(struct flash_bank_s *bank)
+static int stm32x_erase_options(struct flash_bank_s *bank)
 {
 	stm32x_flash_bank_t *stm32x_info = NULL;
 	target_t *target = bank->target;
@@ -197,7 +197,7 @@
 	return ERROR_OK;
 }
 
-int stm32x_write_options(struct flash_bank_s *bank)
+static int stm32x_write_options(struct flash_bank_s *bank)
 {
 	stm32x_flash_bank_t *stm32x_info = NULL;
 	target_t *target = bank->target;
@@ -281,7 +281,7 @@
 	return ERROR_OK;
 }
 
-int stm32x_protect_check(struct flash_bank_s *bank)
+static int stm32x_protect_check(struct flash_bank_s *bank)
 {
 	target_t *target = bank->target;
 	stm32x_flash_bank_t *stm32x_info = bank->driver_priv;
@@ -352,7 +352,7 @@
 	return ERROR_OK;
 }
 
-int stm32x_erase(struct flash_bank_s *bank, int first, int last)
+static int stm32x_erase(struct flash_bank_s *bank, int first, int last)
 {
 	target_t *target = bank->target;
 	int i;
@@ -393,7 +393,7 @@
 	return ERROR_OK;
 }
 
-int stm32x_protect(struct flash_bank_s *bank, int set, int first, int last)
+static int stm32x_protect(struct flash_bank_s *bank, int set, int first, int last)
 {
 	stm32x_flash_bank_t *stm32x_info = NULL;
 	target_t *target = bank->target;
@@ -480,7 +480,7 @@
 	return stm32x_write_options(bank);
 }
 
-int stm32x_write_block(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
+static int stm32x_write_block(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
 {
 	stm32x_flash_bank_t *stm32x_info = bank->driver_priv;
 	target_t *target = bank->target;
@@ -595,7 +595,7 @@
 	return retval;
 }
 
-int stm32x_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
+static int stm32x_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
 {
 	target_t *target = bank->target;
 	u32 words_remaining = (count / 2);
@@ -704,7 +704,7 @@
 	return ERROR_OK;
 }
 
-int stm32x_probe(struct flash_bank_s *bank)
+static int stm32x_probe(struct flash_bank_s *bank)
 {
 	target_t *target = bank->target;
 	stm32x_flash_bank_t *stm32x_info = bank->driver_priv;
@@ -821,7 +821,7 @@
 	return ERROR_OK;
 }
 
-int stm32x_auto_probe(struct flash_bank_s *bank)
+static int stm32x_auto_probe(struct flash_bank_s *bank)
 {
 	stm32x_flash_bank_t *stm32x_info = bank->driver_priv;
 	if (stm32x_info->probed)
@@ -829,12 +829,14 @@
 	return stm32x_probe(bank);
 }
 
-int stm32x_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+#if 0
+static int stm32x_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	return ERROR_OK;
 }
+#endif
 
-int stm32x_info(struct flash_bank_s *bank, char *buf, int buf_size)
+static int stm32x_info(struct flash_bank_s *bank, char *buf, int buf_size)
 {
 	target_t *target = bank->target;
 	u32 device_id;
@@ -936,7 +938,7 @@
 	return ERROR_OK;
 }
 
-int stm32x_handle_lock_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int stm32x_handle_lock_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *bank;
 	target_t *target = NULL;
@@ -985,7 +987,7 @@
 	return ERROR_OK;
 }
 
-int stm32x_handle_unlock_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int stm32x_handle_unlock_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *bank;
 	target_t *target = NULL;
@@ -1031,7 +1033,7 @@
 	return ERROR_OK;
 }
 
-int stm32x_handle_options_read_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int stm32x_handle_options_read_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *bank;
 	u32 optionbyte;
@@ -1090,7 +1092,7 @@
 	return ERROR_OK;
 }
 
-int stm32x_handle_options_write_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int stm32x_handle_options_write_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *bank;
 	target_t *target = NULL;
@@ -1166,7 +1168,7 @@
 	return ERROR_OK;
 }
 
-int stm32x_mass_erase(struct flash_bank_s *bank)
+static int stm32x_mass_erase(struct flash_bank_s *bank)
 {
 	target_t *target = bank->target;
 	u32 status;
@@ -1204,7 +1206,7 @@
 	return ERROR_OK;
 }
 
-int stm32x_handle_mass_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int stm32x_handle_mass_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *bank;
 	int i;

Modified: trunk/src/flash/str7x.c
===================================================================
--- trunk/src/flash/str7x.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/str7x.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -54,17 +54,17 @@
 	{0x00002000, 0x02000, 0x20000}
 };
 
-int str7x_register_commands(struct command_context_s *cmd_ctx);
-int str7x_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
-int str7x_erase(struct flash_bank_s *bank, int first, int last);
-int str7x_protect(struct flash_bank_s *bank, int set, int first, int last);
-int str7x_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
-int str7x_probe(struct flash_bank_s *bank);
-int str7x_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int str7x_protect_check(struct flash_bank_s *bank);
-int str7x_info(struct flash_bank_s *bank, char *buf, int buf_size);
+static int str7x_register_commands(struct command_context_s *cmd_ctx);
+static int str7x_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
+static int str7x_erase(struct flash_bank_s *bank, int first, int last);
+static int str7x_protect(struct flash_bank_s *bank, int set, int first, int last);
+static int str7x_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
+static int str7x_probe(struct flash_bank_s *bank);
+//static int str7x_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int str7x_protect_check(struct flash_bank_s *bank);
+static int str7x_info(struct flash_bank_s *bank, char *buf, int buf_size);
 
-int str7x_handle_disable_jtag_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int str7x_handle_disable_jtag_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
 flash_driver_t str7x_flash =
 {
@@ -81,7 +81,7 @@
 	.info = str7x_info
 };
 
-int str7x_register_commands(struct command_context_s *cmd_ctx)
+static int str7x_register_commands(struct command_context_s *cmd_ctx)
 {
 	command_t *str7x_cmd = register_command(cmd_ctx, NULL, "str7x", NULL, COMMAND_ANY, NULL);
 	
@@ -91,13 +91,13 @@
 	return ERROR_OK;
 }
 
-int str7x_get_flash_adr(struct flash_bank_s *bank, u32 reg)
+static int str7x_get_flash_adr(struct flash_bank_s *bank, u32 reg)
 {
 	str7x_flash_bank_t *str7x_info = bank->driver_priv;
 	return (str7x_info->register_base | reg);
 }
 
-int str7x_build_block_list(struct flash_bank_s *bank)
+static int str7x_build_block_list(struct flash_bank_s *bank)
 {
 	str7x_flash_bank_t *str7x_info = bank->driver_priv;
 
@@ -155,7 +155,7 @@
 
 /* flash bank str7x <base> <size> 0 0 <target#> <str71_variant>
  */
-int str7x_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
+static int str7x_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
 {
 	str7x_flash_bank_t *str7x_info;
 	
@@ -200,7 +200,7 @@
 	return ERROR_OK;
 }
 
-u32 str7x_status(struct flash_bank_s *bank)
+static u32 str7x_status(struct flash_bank_s *bank)
 {
 	target_t *target = bank->target;
 	u32 retval;
@@ -210,7 +210,7 @@
 	return retval;
 }
 
-u32 str7x_result(struct flash_bank_s *bank)
+static u32 str7x_result(struct flash_bank_s *bank)
 {
 	target_t *target = bank->target;
 	u32 retval;
@@ -220,7 +220,7 @@
 	return retval;
 }
 
-int str7x_protect_check(struct flash_bank_s *bank)
+static int str7x_protect_check(struct flash_bank_s *bank)
 {
 	str7x_flash_bank_t *str7x_info = bank->driver_priv;
 	target_t *target = bank->target;
@@ -247,7 +247,7 @@
 	return ERROR_OK;
 }
 
-int str7x_erase(struct flash_bank_s *bank, int first, int last)
+static int str7x_erase(struct flash_bank_s *bank, int first, int last)
 {
 	str7x_flash_bank_t *str7x_info = bank->driver_priv;
 	target_t *target = bank->target;
@@ -300,7 +300,7 @@
 	return ERROR_OK;
 }
 
-int str7x_protect(struct flash_bank_s *bank, int set, int first, int last)
+static int str7x_protect(struct flash_bank_s *bank, int set, int first, int last)
 {
 	str7x_flash_bank_t *str7x_info = bank->driver_priv;
 	target_t *target = bank->target;
@@ -354,7 +354,7 @@
 	return ERROR_OK;
 }
 
-int str7x_write_block(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
+static int str7x_write_block(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
 {
 	str7x_flash_bank_t *str7x_info = bank->driver_priv;
 	target_t *target = bank->target;
@@ -469,7 +469,7 @@
 	return retval;
 }
 
-int str7x_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
+static int str7x_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
 {
 	target_t *target = bank->target;
 	str7x_flash_bank_t *str7x_info = bank->driver_priv;
@@ -629,23 +629,25 @@
 	return ERROR_OK;
 }
 
-int str7x_probe(struct flash_bank_s *bank)
+static int str7x_probe(struct flash_bank_s *bank)
 {
 	return ERROR_OK;
 }
 
-int str7x_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+#if 0
+static int str7x_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	return ERROR_OK;
 }
+#endif
 
-int str7x_info(struct flash_bank_s *bank, char *buf, int buf_size)
+static int str7x_info(struct flash_bank_s *bank, char *buf, int buf_size)
 {
 	snprintf(buf, buf_size, "str7x flash driver info" );
 	return ERROR_OK;
 }
 
-int str7x_handle_disable_jtag_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int str7x_handle_disable_jtag_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *bank;
 	target_t *target = NULL;

Modified: trunk/src/flash/str9x.c
===================================================================
--- trunk/src/flash/str9x.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/str9x.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -44,17 +44,17 @@
 
 static u32 bank1start = 0x00080000;
 
-int str9x_register_commands(struct command_context_s *cmd_ctx);
-int str9x_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
-int str9x_erase(struct flash_bank_s *bank, int first, int last);
-int str9x_protect(struct flash_bank_s *bank, int set, int first, int last);
-int str9x_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
-int str9x_probe(struct flash_bank_s *bank);
-int str9x_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int str9x_protect_check(struct flash_bank_s *bank);
-int str9x_info(struct flash_bank_s *bank, char *buf, int buf_size);
+static int str9x_register_commands(struct command_context_s *cmd_ctx);
+static int str9x_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
+static int str9x_erase(struct flash_bank_s *bank, int first, int last);
+static int str9x_protect(struct flash_bank_s *bank, int set, int first, int last);
+static int str9x_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
+static int str9x_probe(struct flash_bank_s *bank);
+//static int str9x_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int str9x_protect_check(struct flash_bank_s *bank);
+static int str9x_info(struct flash_bank_s *bank, char *buf, int buf_size);
 
-int str9x_handle_flash_config_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int str9x_handle_flash_config_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
 flash_driver_t str9x_flash =
 {
@@ -71,7 +71,7 @@
 	.info = str9x_info
 };
 
-int str9x_register_commands(struct command_context_s *cmd_ctx)
+static int str9x_register_commands(struct command_context_s *cmd_ctx)
 {
 	command_t *str9x_cmd = register_command(cmd_ctx, NULL, "str9x", NULL, COMMAND_ANY, NULL);
 	
@@ -81,7 +81,7 @@
 	return ERROR_OK;
 }
 
-int str9x_build_block_list(struct flash_bank_s *bank)
+static int str9x_build_block_list(struct flash_bank_s *bank)
 {
 	str9x_flash_bank_t *str9x_info = bank->driver_priv;
 	
@@ -164,7 +164,8 @@
 
 /* flash bank str9x <base> <size> 0 0 <target#>
  */
-int str9x_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
+static int str9x_flash_bank_command(struct command_context_s *cmd_ctx,
+		char *cmd, char **args, int argc, struct flash_bank_s *bank)
 {
 	str9x_flash_bank_t *str9x_info;
 	
@@ -184,7 +185,7 @@
 	return ERROR_OK;
 }
 
-int str9x_protect_check(struct flash_bank_s *bank)
+static int str9x_protect_check(struct flash_bank_s *bank)
 {
 	int retval;
 	str9x_flash_bank_t *str9x_info = bank->driver_priv;
@@ -259,7 +260,7 @@
 	return ERROR_OK;
 }
 
-int str9x_erase(struct flash_bank_s *bank, int first, int last)
+static int str9x_erase(struct flash_bank_s *bank, int first, int last)
 {
 	target_t *target = bank->target;
 	int i;
@@ -351,7 +352,8 @@
 	return ERROR_OK;
 }
 
-int str9x_protect(struct flash_bank_s *bank, int set, int first, int last)
+static int str9x_protect(struct flash_bank_s *bank,
+		int set, int first, int last)
 {
 	target_t *target = bank->target;
 	int i;
@@ -389,7 +391,8 @@
 	return ERROR_OK;
 }
 
-int str9x_write_block(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
+static int str9x_write_block(struct flash_bank_s *bank,
+		u8 *buffer, u32 offset, u32 count)
 {
 	str9x_flash_bank_t *str9x_info = bank->driver_priv;
 	target_t *target = bank->target;
@@ -497,7 +500,8 @@
 	return retval;
 }
 
-int str9x_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
+static int str9x_write(struct flash_bank_s *bank,
+		u8 *buffer, u32 offset, u32 count)
 {
 	target_t *target = bank->target;
 	u32 words_remaining = (count / 2);
@@ -654,23 +658,27 @@
 	return ERROR_OK;
 }
 
-int str9x_probe(struct flash_bank_s *bank)
+static int str9x_probe(struct flash_bank_s *bank)
 {
 	return ERROR_OK;
 }
 
-int str9x_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+#if 0
+static int str9x_handle_part_id_command(struct command_context_s *cmd_ctx,
+		char *cmd, char **args, int argc)
 {
 	return ERROR_OK;
 }
+#endif
 
-int str9x_info(struct flash_bank_s *bank, char *buf, int buf_size)
+static int str9x_info(struct flash_bank_s *bank, char *buf, int buf_size)
 {
 	snprintf(buf, buf_size, "str9x flash driver info" );
 	return ERROR_OK;
 }
 
-int str9x_handle_flash_config_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int str9x_handle_flash_config_command(struct command_context_s *cmd_ctx,
+		char *cmd, char **args, int argc)
 {
 	str9x_flash_bank_t *str9x_info;
 	flash_bank_t *bank;

Modified: trunk/src/flash/str9xpec.c
===================================================================
--- trunk/src/flash/str9xpec.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/str9xpec.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -40,31 +40,31 @@
 #include <unistd.h>
 #include <getopt.h>
 
-int str9xpec_register_commands(struct command_context_s *cmd_ctx);
-int str9xpec_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
-int str9xpec_erase(struct flash_bank_s *bank, int first, int last);
-int str9xpec_protect(struct flash_bank_s *bank, int set, int first, int last);
-int str9xpec_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
-int str9xpec_probe(struct flash_bank_s *bank);
-int str9xpec_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int str9xpec_protect_check(struct flash_bank_s *bank);
-int str9xpec_erase_check(struct flash_bank_s *bank);
-int str9xpec_info(struct flash_bank_s *bank, char *buf, int buf_size);
+static int str9xpec_register_commands(struct command_context_s *cmd_ctx);
+static int str9xpec_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
+static int str9xpec_erase(struct flash_bank_s *bank, int first, int last);
+static int str9xpec_protect(struct flash_bank_s *bank, int set, int first, int last);
+static int str9xpec_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
+static int str9xpec_probe(struct flash_bank_s *bank);
+static int str9xpec_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int str9xpec_protect_check(struct flash_bank_s *bank);
+static int str9xpec_erase_check(struct flash_bank_s *bank);
+static int str9xpec_info(struct flash_bank_s *bank, char *buf, int buf_size);
 
-int str9xpec_erase_area(struct flash_bank_s *bank, int first, int last);
-int str9xpec_set_address(struct flash_bank_s *bank, u8 sector);
-int str9xpec_write_options(struct flash_bank_s *bank);
+static int str9xpec_erase_area(struct flash_bank_s *bank, int first, int last);
+static int str9xpec_set_address(struct flash_bank_s *bank, u8 sector);
+static int str9xpec_write_options(struct flash_bank_s *bank);
 
-int str9xpec_handle_flash_options_cmap_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int str9xpec_handle_flash_options_lvdthd_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int str9xpec_handle_flash_options_lvdsel_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int str9xpec_handle_flash_options_lvdwarn_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int str9xpec_handle_flash_options_read_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int str9xpec_handle_flash_options_write_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int str9xpec_handle_flash_lock_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int str9xpec_handle_flash_unlock_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int str9xpec_handle_flash_enable_turbo_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int str9xpec_handle_flash_disable_turbo_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int str9xpec_handle_flash_options_cmap_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int str9xpec_handle_flash_options_lvdthd_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int str9xpec_handle_flash_options_lvdsel_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int str9xpec_handle_flash_options_lvdwarn_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int str9xpec_handle_flash_options_read_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int str9xpec_handle_flash_options_write_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int str9xpec_handle_flash_lock_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int str9xpec_handle_flash_unlock_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int str9xpec_handle_flash_enable_turbo_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int str9xpec_handle_flash_disable_turbo_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
 flash_driver_t str9xpec_flash =
 {
@@ -81,7 +81,7 @@
 	.info = str9xpec_info
 };
 
-int str9xpec_register_commands(struct command_context_s *cmd_ctx)
+static int str9xpec_register_commands(struct command_context_s *cmd_ctx)
 {
 	command_t *str9xpec_cmd = register_command(cmd_ctx, NULL, "str9xpec", NULL, COMMAND_ANY, "str9xpec flash specific commands");
 
@@ -140,7 +140,7 @@
 	return ERROR_OK;
 }
 
-u8 str9xpec_isc_status(jtag_tap_t *tap)
+static u8 str9xpec_isc_status(jtag_tap_t *tap)
 {
 	scan_field_t field;
 	u8 status;
@@ -169,7 +169,7 @@
 	return status;
 }
 
-int str9xpec_isc_enable(struct flash_bank_s *bank)
+static int str9xpec_isc_enable(struct flash_bank_s *bank)
 {
 	u8 status;
 	jtag_tap_t *tap;
@@ -196,7 +196,7 @@
 	return ERROR_OK;
 }
 
-int str9xpec_isc_disable(struct flash_bank_s *bank)
+static int str9xpec_isc_disable(struct flash_bank_s *bank)
 {
 	u8 status;
 	jtag_tap_t *tap;
@@ -225,7 +225,7 @@
 	return ERROR_OK;
 }
 
-int str9xpec_read_config(struct flash_bank_s *bank)
+static int str9xpec_read_config(struct flash_bank_s *bank)
 {
 	scan_field_t field;
 	u8 status;
@@ -258,7 +258,7 @@
 	return status;
 }
 
-int str9xpec_build_block_list(struct flash_bank_s *bank)
+static int str9xpec_build_block_list(struct flash_bank_s *bank)
 {
 	str9xpec_flash_controller_t *str9xpec_info = bank->driver_priv;
 
@@ -327,7 +327,7 @@
 
 /* flash bank str9x <base> <size> 0 0 <target#>
  */
-int str9xpec_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
+static int str9xpec_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
 {
 	str9xpec_flash_controller_t *str9xpec_info;
 	armv4_5_common_t *armv4_5 = NULL;
@@ -361,7 +361,7 @@
 	return ERROR_OK;
 }
 
-int str9xpec_blank_check(struct flash_bank_s *bank, int first, int last)
+static int str9xpec_blank_check(struct flash_bank_s *bank, int first, int last)
 {
 	scan_field_t field;
 	u8 status;
@@ -438,7 +438,7 @@
 	return ERROR_OK;
 }
 
-int str9xpec_protect_check(struct flash_bank_s *bank)
+static int str9xpec_protect_check(struct flash_bank_s *bank)
 {
 	u8 status;
 	int i;
@@ -460,7 +460,7 @@
 	return ERROR_OK;
 }
 
-int str9xpec_erase_area(struct flash_bank_s *bank, int first, int last)
+static int str9xpec_erase_area(struct flash_bank_s *bank, int first, int last)
 {
 	scan_field_t field;
 	u8 status;
@@ -535,7 +535,7 @@
 	return status;
 }
 
-int str9xpec_erase(struct flash_bank_s *bank, int first, int last)
+static int str9xpec_erase(struct flash_bank_s *bank, int first, int last)
 {
 	int status;
 
@@ -547,7 +547,7 @@
 	return ERROR_OK;
 }
 
-int str9xpec_lock_device(struct flash_bank_s *bank)
+static int str9xpec_lock_device(struct flash_bank_s *bank)
 {
 	scan_field_t field;
 	u8 status;
@@ -594,7 +594,7 @@
 	return status;
 }
 
-int str9xpec_unlock_device(struct flash_bank_s *bank)
+static int str9xpec_unlock_device(struct flash_bank_s *bank)
 {
 	u8 status;
 
@@ -603,7 +603,7 @@
 	return status;
 }
 
-int str9xpec_protect(struct flash_bank_s *bank, int set, int first, int last)
+static int str9xpec_protect(struct flash_bank_s *bank, int set, int first, int last)
 {
 	u8 status;
 	int i;
@@ -649,7 +649,7 @@
 	return ERROR_OK;
 }
 
-int str9xpec_set_address(struct flash_bank_s *bank, u8 sector)
+static int str9xpec_set_address(struct flash_bank_s *bank, u8 sector)
 {
 	jtag_tap_t *tap;
 	scan_field_t field;
@@ -675,7 +675,7 @@
 	return ERROR_OK;
 }
 
-int str9xpec_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
+static int str9xpec_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
 {
 	str9xpec_flash_controller_t *str9xpec_info = bank->driver_priv;
 	u32 dwords_remaining = (count / 8);
@@ -858,12 +858,12 @@
 	return ERROR_OK;
 }
 
-int str9xpec_probe(struct flash_bank_s *bank)
+static int str9xpec_probe(struct flash_bank_s *bank)
 {
 	return ERROR_OK;
 }
 
-int str9xpec_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int str9xpec_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *bank;
 	scan_field_t field;
@@ -913,18 +913,18 @@
 	return ERROR_OK;
 }
 
-int str9xpec_erase_check(struct flash_bank_s *bank)
+static int str9xpec_erase_check(struct flash_bank_s *bank)
 {
 	return str9xpec_blank_check(bank, 0, bank->num_sectors - 1);
 }
 
-int str9xpec_info(struct flash_bank_s *bank, char *buf, int buf_size)
+static int str9xpec_info(struct flash_bank_s *bank, char *buf, int buf_size)
 {
 	snprintf(buf, buf_size, "str9xpec flash driver info" );
 	return ERROR_OK;
 }
 
-int str9xpec_handle_flash_options_read_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int str9xpec_handle_flash_options_read_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *bank;
 	u8 status;
@@ -983,7 +983,7 @@
 	return ERROR_OK;
 }
 
-int str9xpec_write_options(struct flash_bank_s *bank)
+static int str9xpec_write_options(struct flash_bank_s *bank)
 {
 	scan_field_t field;
 	u8 status;
@@ -1054,7 +1054,7 @@
 	return status;
 }
 
-int str9xpec_handle_flash_options_write_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int str9xpec_handle_flash_options_write_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *bank;
 	u8 status;
@@ -1080,7 +1080,7 @@
 	return ERROR_OK;
 }
 
-int str9xpec_handle_flash_options_cmap_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int str9xpec_handle_flash_options_cmap_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *bank;
 	str9xpec_flash_controller_t *str9xpec_info = NULL;
@@ -1112,7 +1112,7 @@
 	return ERROR_OK;
 }
 
-int str9xpec_handle_flash_options_lvdthd_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int str9xpec_handle_flash_options_lvdthd_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *bank;
 	str9xpec_flash_controller_t *str9xpec_info = NULL;
@@ -1176,7 +1176,7 @@
 	return ERROR_OK;
 }
 
-int str9xpec_handle_flash_options_lvdwarn_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int str9xpec_handle_flash_options_lvdwarn_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *bank;
 	str9xpec_flash_controller_t *str9xpec_info = NULL;
@@ -1208,7 +1208,7 @@
 	return ERROR_OK;
 }
 
-int str9xpec_handle_flash_lock_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int str9xpec_handle_flash_lock_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	u8 status;
 	flash_bank_t *bank;
@@ -1234,7 +1234,7 @@
 	return ERROR_OK;
 }
 
-int str9xpec_handle_flash_unlock_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int str9xpec_handle_flash_unlock_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	u8 status;
 	flash_bank_t *bank;
@@ -1260,7 +1260,7 @@
 	return ERROR_OK;
 }
 
-int str9xpec_handle_flash_enable_turbo_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int str9xpec_handle_flash_enable_turbo_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	int retval;
 	flash_bank_t *bank;
@@ -1313,7 +1313,7 @@
 	return ERROR_OK;
 }
 
-int str9xpec_handle_flash_disable_turbo_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int str9xpec_handle_flash_disable_turbo_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *bank;
 	jtag_tap_t *tap;

Modified: trunk/src/flash/tms470.c
===================================================================
--- trunk/src/flash/tms470.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/flash/tms470.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -26,16 +26,16 @@
 #include <string.h>
 #include <unistd.h>
 
-int tms470_register_commands(struct command_context_s *cmd_ctx);
-int tms470_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
-int tms470_erase(struct flash_bank_s *bank, int first, int last);
-int tms470_protect(struct flash_bank_s *bank, int set, int first, int last);
-int tms470_write(struct flash_bank_s *bank, u8 * buffer, u32 offset, u32 count);
-int tms470_probe(struct flash_bank_s *bank);
-int tms470_auto_probe(struct flash_bank_s *bank);
-int tms470_erase_check(struct flash_bank_s *bank);
-int tms470_protect_check(struct flash_bank_s *bank);
-int tms470_info(struct flash_bank_s *bank, char *buf, int buf_size);
+static int tms470_register_commands(struct command_context_s *cmd_ctx);
+static int tms470_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
+static int tms470_erase(struct flash_bank_s *bank, int first, int last);
+static int tms470_protect(struct flash_bank_s *bank, int set, int first, int last);
+static int tms470_write(struct flash_bank_s *bank, u8 * buffer, u32 offset, u32 count);
+static int tms470_probe(struct flash_bank_s *bank);
+static int tms470_auto_probe(struct flash_bank_s *bank);
+static int tms470_erase_check(struct flash_bank_s *bank);
+static int tms470_protect_check(struct flash_bank_s *bank);
+static int tms470_info(struct flash_bank_s *bank, char *buf, int buf_size);
 
 flash_driver_t tms470_flash = {
 	.name = "tms470",
@@ -133,7 +133,7 @@
 
 /* ---------------------------------------------------------------------- */
 
-int tms470_read_part_info(struct flash_bank_s *bank)
+static int tms470_read_part_info(struct flash_bank_s *bank)
 {
 	tms470_flash_bank_t *tms470_info = bank->driver_priv;
 	target_t *target = bank->target;
@@ -309,10 +309,10 @@
 
 /* ---------------------------------------------------------------------- */
 
-u32 keysSet = 0;
-u32 flashKeys[4];
+static u32 keysSet = 0;
+static u32 flashKeys[4];
 
-int tms470_handle_flash_keyset_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int tms470_handle_flash_keyset_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc > 4)
 	{
@@ -355,27 +355,27 @@
 	return ERROR_OK;
 }
 
-const u32 FLASH_KEYS_ALL_ONES[] = { 0xFFFFFFFF, 0xFFFFFFFF,
+static const u32 FLASH_KEYS_ALL_ONES[] = { 0xFFFFFFFF, 0xFFFFFFFF,
 	0xFFFFFFFF, 0xFFFFFFFF,
 };
 
-const u32 FLASH_KEYS_ALL_ZEROS[] = { 0x00000000, 0x00000000,
+static const u32 FLASH_KEYS_ALL_ZEROS[] = { 0x00000000, 0x00000000,
 	0x00000000, 0x00000000,
 };
 
-const u32 FLASH_KEYS_MIX1[] = { 0xf0fff0ff, 0xf0fff0ff,
+static const u32 FLASH_KEYS_MIX1[] = { 0xf0fff0ff, 0xf0fff0ff,
 	0xf0fff0ff, 0xf0fff0ff
 };
 
-const u32 FLASH_KEYS_MIX2[] = { 0x0000ffff, 0x0000ffff,
+static const u32 FLASH_KEYS_MIX2[] = { 0x0000ffff, 0x0000ffff,
 	0x0000ffff, 0x0000ffff
 };
 
 /* ---------------------------------------------------------------------- */
 
-int oscMHz = 12;
+static int oscMHz = 12;
 
-int tms470_handle_osc_megahertz_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int tms470_handle_osc_megahertz_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc > 1)
 	{
@@ -402,9 +402,9 @@
 
 /* ---------------------------------------------------------------------- */
 
-int plldis = 0;
+static int plldis = 0;
 
-int tms470_handle_plldis_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int tms470_handle_plldis_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc > 1)
 	{
@@ -424,7 +424,7 @@
 
 /* ---------------------------------------------------------------------- */
 
-int tms470_check_flash_unlocked(target_t * target)
+static int tms470_check_flash_unlocked(target_t * target)
 {
 	u32 fmbbusy;
 
@@ -435,7 +435,7 @@
 
 /* ---------------------------------------------------------------------- */
 
-int tms470_try_flash_keys(target_t * target, const u32 * key_set)
+static int tms470_try_flash_keys(target_t * target, const u32 * key_set)
 {
 	u32 glbctrl, fmmstat;
 	int retval = ERROR_FLASH_OPERATION_FAILED;
@@ -513,7 +513,7 @@
 
 /* ---------------------------------------------------------------------- */
 
-int tms470_unlock_flash(struct flash_bank_s *bank)
+static int tms470_unlock_flash(struct flash_bank_s *bank)
 {
 	target_t *target = bank->target;
 	const u32 *p_key_sets[5];
@@ -552,7 +552,7 @@
 
 /* ---------------------------------------------------------------------- */
 
-int tms470_flash_initialize_internal_state_machine(struct flash_bank_s *bank)
+static int tms470_flash_initialize_internal_state_machine(struct flash_bank_s *bank)
 {
 	u32 fmmac2, fmmac1, fmmaxep, k, delay, glbctrl, sysclk;
 	target_t *target = bank->target;
@@ -744,7 +744,7 @@
 
 /* ---------------------------------------------------------------------- */
 
-int tms470_erase_sector(struct flash_bank_s *bank, int sector)
+static int tms470_erase_sector(struct flash_bank_s *bank, int sector)
 {
 	u32 glbctrl, orig_fmregopt, fmbsea, fmbseb, fmmstat;
 	target_t *target = bank->target;
@@ -839,7 +839,7 @@
               Implementation of Flash Driver Interfaces
    ---------------------------------------------------------------------- */
 
-int tms470_register_commands(struct command_context_s *cmd_ctx)
+static int tms470_register_commands(struct command_context_s *cmd_ctx)
 {
 	command_t *tms470_cmd = register_command(cmd_ctx, NULL, "tms470", NULL, COMMAND_ANY, "applies to TI tms470 family");
 
@@ -852,7 +852,7 @@
 
 /* ---------------------------------------------------------------------- */
 
-int tms470_erase(struct flash_bank_s *bank, int first, int last)
+static int tms470_erase(struct flash_bank_s *bank, int first, int last)
 {
 	tms470_flash_bank_t *tms470_info = bank->driver_priv;
 	int sector, result = ERROR_OK;
@@ -899,7 +899,7 @@
 
 /* ---------------------------------------------------------------------- */
 
-int tms470_protect(struct flash_bank_s *bank, int set, int first, int last)
+static int tms470_protect(struct flash_bank_s *bank, int set, int first, int last)
 {
 	tms470_flash_bank_t *tms470_info = bank->driver_priv;
 	target_t *target = bank->target;
@@ -951,7 +951,7 @@
 
 /* ---------------------------------------------------------------------- */
 
-int tms470_write(struct flash_bank_s *bank, u8 * buffer, u32 offset, u32 count)
+static int tms470_write(struct flash_bank_s *bank, u8 * buffer, u32 offset, u32 count)
 {
 	target_t *target = bank->target;
 	u32 glbctrl, fmbac2, orig_fmregopt, fmbsea, fmbseb, fmmaxpp, fmmstat;
@@ -1048,7 +1048,7 @@
 
 /* ---------------------------------------------------------------------- */
 
-int tms470_probe(struct flash_bank_s *bank)
+static int tms470_probe(struct flash_bank_s *bank)
 {
 	if (bank->target->state != TARGET_HALTED)
 	{
@@ -1059,7 +1059,7 @@
 	return tms470_read_part_info(bank);
 }
 
-int tms470_auto_probe(struct flash_bank_s *bank)
+static int tms470_auto_probe(struct flash_bank_s *bank)
 {
 	tms470_flash_bank_t *tms470_info = bank->driver_priv;
 
@@ -1070,7 +1070,7 @@
 
 /* ---------------------------------------------------------------------- */
 
-int tms470_erase_check(struct flash_bank_s *bank)
+static int tms470_erase_check(struct flash_bank_s *bank)
 {
 	target_t *target = bank->target;
 	tms470_flash_bank_t *tms470_info = bank->driver_priv;
@@ -1161,7 +1161,7 @@
 
 /* ---------------------------------------------------------------------- */
 
-int tms470_protect_check(struct flash_bank_s *bank)
+static int tms470_protect_check(struct flash_bank_s *bank)
 {
 	target_t *target = bank->target;
 	tms470_flash_bank_t *tms470_info = bank->driver_priv;
@@ -1209,7 +1209,7 @@
 
 /* ---------------------------------------------------------------------- */
 
-int tms470_info(struct flash_bank_s *bank, char *buf, int buf_size)
+static int tms470_info(struct flash_bank_s *bank, char *buf, int buf_size)
 {
 	int used = 0;
 	tms470_flash_bank_t *tms470_info = bank->driver_priv;
@@ -1243,7 +1243,7 @@
  * [options...]
  */
 
-int tms470_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
+static int tms470_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
 {
 	bank->driver_priv = malloc(sizeof(tms470_flash_bank_t));
 

Modified: trunk/src/helper/tclapi.c
===================================================================
--- trunk/src/helper/tclapi.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/helper/tclapi.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -455,7 +455,7 @@
 		fields[field_count++].in_handler_priv = NULL;
 	}
 
-	jtag_add_dr_scan(num_fields, fields, -1);
+	jtag_add_dr_scan(num_fields, fields, TAP_INVALID);
 	retval = jtag_execute_queue();
 	if (retval != ERROR_OK)
 	{

Modified: trunk/src/jtag/amt_jtagaccel.c
===================================================================
--- trunk/src/jtag/amt_jtagaccel.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/jtag/amt_jtagaccel.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -346,7 +346,7 @@
 #ifdef _DEBUG_JTAG_IO_
 				LOG_DEBUG("end_state: %i", cmd->cmd.end_state->end_state);
 #endif
-				if (cmd->cmd.end_state->end_state != -1)
+				if (cmd->cmd.end_state->end_state != TAP_INVALID)
 					amt_jtagaccel_end_state(cmd->cmd.end_state->end_state);
 				break;
 			case JTAG_RESET:
@@ -363,7 +363,7 @@
 #ifdef _DEBUG_JTAG_IO_
 				LOG_DEBUG("runtest %i cycles, end in %i", cmd->cmd.runtest->num_cycles, cmd->cmd.runtest->end_state);
 #endif
-				if (cmd->cmd.runtest->end_state != -1)
+				if (cmd->cmd.runtest->end_state != TAP_INVALID)
 					amt_jtagaccel_end_state(cmd->cmd.runtest->end_state);
 				amt_jtagaccel_runtest(cmd->cmd.runtest->num_cycles);
 				break;
@@ -371,7 +371,7 @@
 #ifdef _DEBUG_JTAG_IO_
 				LOG_DEBUG("statemove end in %i", cmd->cmd.statemove->end_state);
 #endif
-				if (cmd->cmd.statemove->end_state != -1)
+				if (cmd->cmd.statemove->end_state != TAP_INVALID)
 					amt_jtagaccel_end_state(cmd->cmd.statemove->end_state);
 				amt_jtagaccel_state_move();
 				break;
@@ -379,7 +379,7 @@
 #ifdef _DEBUG_JTAG_IO_
 				LOG_DEBUG("scan end in %i", cmd->cmd.scan->end_state);
 #endif
-				if (cmd->cmd.scan->end_state != -1)
+				if (cmd->cmd.scan->end_state != TAP_INVALID)
 					amt_jtagaccel_end_state(cmd->cmd.scan->end_state);
 				scan_size = jtag_build_buffer(cmd->cmd.scan, &buffer);
 				type = jtag_scan_type(cmd->cmd.scan);

Modified: trunk/src/jtag/arm-jtag-ew.c
===================================================================
--- trunk/src/jtag/arm-jtag-ew.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/jtag/arm-jtag-ew.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -156,7 +156,7 @@
 			case JTAG_END_STATE:
 				DEBUG_JTAG_IO("end_state: %i", cmd->cmd.end_state->end_state);
 
-				if (cmd->cmd.end_state->end_state != -1)
+				if (cmd->cmd.end_state->end_state != TAP_INVALID)
 				{
 					armjtagew_end_state(cmd->cmd.end_state->end_state);
 				}
@@ -166,7 +166,7 @@
 				DEBUG_JTAG_IO( "runtest %i cycles, end in %i", cmd->cmd.runtest->num_cycles, \
 					cmd->cmd.runtest->end_state);
 
-				if (cmd->cmd.runtest->end_state != -1)
+				if (cmd->cmd.runtest->end_state != TAP_INVALID)
 				{
 					armjtagew_end_state(cmd->cmd.runtest->end_state);
 				}
@@ -176,7 +176,7 @@
 			case JTAG_STATEMOVE:
 				DEBUG_JTAG_IO("statemove end in %i", cmd->cmd.statemove->end_state);
 
-				if (cmd->cmd.statemove->end_state != -1)
+				if (cmd->cmd.statemove->end_state != TAP_INVALID)
 				{
 					armjtagew_end_state(cmd->cmd.statemove->end_state);
 				}
@@ -194,7 +194,7 @@
 			case JTAG_SCAN:
 				DEBUG_JTAG_IO("scan end in %i", cmd->cmd.scan->end_state);
 
-				if (cmd->cmd.scan->end_state != -1)
+				if (cmd->cmd.scan->end_state != TAP_INVALID)
 				{
 					armjtagew_end_state(cmd->cmd.scan->end_state);
 				}

Modified: trunk/src/jtag/bitbang.c
===================================================================
--- trunk/src/jtag/bitbang.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/jtag/bitbang.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -278,7 +278,7 @@
 #ifdef _DEBUG_JTAG_IO_
 				LOG_DEBUG("end_state: %s", tap_state_name(cmd->cmd.end_state->end_state) );
 #endif
-				if (cmd->cmd.end_state->end_state != -1)
+				if (cmd->cmd.end_state->end_state != TAP_INVALID)
 					bitbang_end_state(cmd->cmd.end_state->end_state);
 				break;
 			case JTAG_RESET:
@@ -295,7 +295,7 @@
 #ifdef _DEBUG_JTAG_IO_
 				LOG_DEBUG("runtest %i cycles, end in %s", cmd->cmd.runtest->num_cycles, tap_state_name(cmd->cmd.runtest->end_state) );
 #endif
-				if (cmd->cmd.runtest->end_state != -1)
+				if (cmd->cmd.runtest->end_state != TAP_INVALID)
 					bitbang_end_state(cmd->cmd.runtest->end_state);
 				bitbang_runtest(cmd->cmd.runtest->num_cycles);
 				break;
@@ -311,7 +311,7 @@
 #ifdef _DEBUG_JTAG_IO_
 				LOG_DEBUG("statemove end in %s", tap_state_name(cmd->cmd.statemove->end_state));
 #endif
-				if (cmd->cmd.statemove->end_state != -1)
+				if (cmd->cmd.statemove->end_state != TAP_INVALID)
 					bitbang_end_state(cmd->cmd.statemove->end_state);
 				bitbang_state_move();
 				break;
@@ -326,7 +326,7 @@
 #ifdef _DEBUG_JTAG_IO_
 				LOG_DEBUG("%s scan end in %s",  (cmd->cmd.scan->ir_scan) ? "IR" : "DR", tap_state_name(cmd->cmd.scan->end_state) );
 #endif
-				if (cmd->cmd.scan->end_state != -1)
+				if (cmd->cmd.scan->end_state != TAP_INVALID)
 					bitbang_end_state(cmd->cmd.scan->end_state);
 				scan_size = jtag_build_buffer(cmd->cmd.scan, &buffer);
 				type = jtag_scan_type(cmd->cmd.scan);

Modified: trunk/src/jtag/bitq.c
===================================================================
--- trunk/src/jtag/bitq.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/jtag/bitq.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -153,7 +153,7 @@
 
 void bitq_end_state(tap_state_t state)
 {
-	if (state==-1)
+	if (state==TAP_INVALID)
 		return;
 
 	if (!tap_is_state_stable(state))

Modified: trunk/src/jtag/ft2232.c
===================================================================
--- trunk/src/jtag/ft2232.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/jtag/ft2232.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -1308,7 +1308,7 @@
 		switch (cmd->type)
 		{
 		case JTAG_END_STATE:
-			if (cmd->cmd.end_state->end_state != -1)
+			if (cmd->cmd.end_state->end_state != TAP_INVALID)
 				ft2232_end_state(cmd->cmd.end_state->end_state);
 			break;
 
@@ -1341,9 +1341,9 @@
 			if (tap_get_state() != TAP_IDLE)
 				predicted_size += 3;
 			predicted_size += 3 * CEIL(cmd->cmd.runtest->num_cycles, 7);
-			if ( (cmd->cmd.runtest->end_state != -1) && (cmd->cmd.runtest->end_state != TAP_IDLE) )
+			if ( (cmd->cmd.runtest->end_state != TAP_INVALID) && (cmd->cmd.runtest->end_state != TAP_IDLE) )
 				predicted_size += 3;
-			if ( (cmd->cmd.runtest->end_state == -1) && (tap_get_end_state() != TAP_IDLE) )
+			if ( (cmd->cmd.runtest->end_state == TAP_INVALID) && (tap_get_end_state() != TAP_IDLE) )
 				predicted_size += 3;
 			if (ft2232_buffer_size + predicted_size + 1 > FT2232_BUFFER_SIZE)
 			{
@@ -1379,7 +1379,7 @@
 				/* LOG_DEBUG("added TMS scan (no read)"); */
 			}
 
-			if (cmd->cmd.runtest->end_state != -1)
+			if (cmd->cmd.runtest->end_state != TAP_INVALID)
 				ft2232_end_state(cmd->cmd.runtest->end_state);
 
 			if ( tap_get_state() != tap_get_end_state() )
@@ -1409,7 +1409,7 @@
 				require_send = 0;
 				first_unsent = cmd;
 			}
-			if (cmd->cmd.statemove->end_state != -1)
+			if (cmd->cmd.statemove->end_state != TAP_INVALID)
 				ft2232_end_state(cmd->cmd.statemove->end_state);
 
 			/* command "Clock Data to TMS/CS Pin (no Read)" */
@@ -1458,7 +1458,7 @@
 						retval = ERROR_JTAG_QUEUE_FAILED;
 
 				/* current command */
-				if (cmd->cmd.scan->end_state != -1)
+				if (cmd->cmd.scan->end_state != TAP_INVALID)
 					ft2232_end_state(cmd->cmd.scan->end_state);
 				ft2232_large_scan(cmd->cmd.scan, type, buffer, scan_size);
 				require_send = 0;
@@ -1479,7 +1479,7 @@
 			}
 			ft2232_expect_read += ft2232_predict_scan_in(scan_size, type);
 			/* LOG_DEBUG("new read size: %i", ft2232_expect_read); */
-			if (cmd->cmd.scan->end_state != -1)
+			if (cmd->cmd.scan->end_state != TAP_INVALID)
 				ft2232_end_state(cmd->cmd.scan->end_state);
 			ft2232_add_scan(cmd->cmd.scan->ir_scan, type, buffer, scan_size);
 			require_send = 1;

Modified: trunk/src/jtag/gw16012.c
===================================================================
--- trunk/src/jtag/gw16012.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/jtag/gw16012.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -369,7 +369,7 @@
 #ifdef _DEBUG_JTAG_IO_
 				LOG_DEBUG("end_state: %i", cmd->cmd.end_state->end_state);
 #endif
-				if (cmd->cmd.end_state->end_state != -1)
+				if (cmd->cmd.end_state->end_state != TAP_INVALID)
 					gw16012_end_state(cmd->cmd.end_state->end_state);
 				break;
 			case JTAG_RESET:
@@ -386,7 +386,7 @@
 #ifdef _DEBUG_JTAG_IO_
 				LOG_DEBUG("runtest %i cycles, end in %i", cmd->cmd.runtest->num_cycles, cmd->cmd.runtest->end_state);
 #endif
-				if (cmd->cmd.runtest->end_state != -1)
+				if (cmd->cmd.runtest->end_state != TAP_INVALID)
 					gw16012_end_state(cmd->cmd.runtest->end_state);
 				gw16012_runtest(cmd->cmd.runtest->num_cycles);
 				break;
@@ -394,7 +394,7 @@
 #ifdef _DEBUG_JTAG_IO_
 				LOG_DEBUG("statemove end in %i", cmd->cmd.statemove->end_state);
 #endif
-				if (cmd->cmd.statemove->end_state != -1)
+				if (cmd->cmd.statemove->end_state != TAP_INVALID)
 					gw16012_end_state(cmd->cmd.statemove->end_state);
 				gw16012_state_move();
 				break;
@@ -405,7 +405,7 @@
 				gw16012_path_move(cmd->cmd.pathmove);
 				break;
 			case JTAG_SCAN:
-				if (cmd->cmd.scan->end_state != -1)
+				if (cmd->cmd.scan->end_state != TAP_INVALID)
 					gw16012_end_state(cmd->cmd.scan->end_state);
 				scan_size = jtag_build_buffer(cmd->cmd.scan, &buffer);
 				type = jtag_scan_type(cmd->cmd.scan);

Modified: trunk/src/jtag/jlink.c
===================================================================
--- trunk/src/jtag/jlink.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/jtag/jlink.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -154,7 +154,7 @@
 			case JTAG_END_STATE:
 				DEBUG_JTAG_IO("end_state: %i", cmd->cmd.end_state->end_state);
 
-				if (cmd->cmd.end_state->end_state != -1)
+				if (cmd->cmd.end_state->end_state != TAP_INVALID)
 				{
 					jlink_end_state(cmd->cmd.end_state->end_state);
 				}
@@ -164,7 +164,7 @@
 				DEBUG_JTAG_IO( "runtest %i cycles, end in %i", cmd->cmd.runtest->num_cycles, \
 					cmd->cmd.runtest->end_state);
 
-				if (cmd->cmd.runtest->end_state != -1)
+				if (cmd->cmd.runtest->end_state != TAP_INVALID)
 				{
 					jlink_end_state(cmd->cmd.runtest->end_state);
 				}
@@ -174,7 +174,7 @@
 			case JTAG_STATEMOVE:
 				DEBUG_JTAG_IO("statemove end in %i", cmd->cmd.statemove->end_state);
 
-				if (cmd->cmd.statemove->end_state != -1)
+				if (cmd->cmd.statemove->end_state != TAP_INVALID)
 				{
 					jlink_end_state(cmd->cmd.statemove->end_state);
 				}
@@ -192,7 +192,7 @@
 			case JTAG_SCAN:
 				DEBUG_JTAG_IO("scan end in %i", cmd->cmd.scan->end_state);
 
-				if (cmd->cmd.scan->end_state != -1)
+				if (cmd->cmd.scan->end_state != TAP_INVALID)
 				{
 					jlink_end_state(cmd->cmd.scan->end_state);
 				}
@@ -525,7 +525,7 @@
 		if (result == len)
 		{
 			usb_in_buffer[result] = 0;
-			LOG_INFO(usb_in_buffer);
+			LOG_INFO((char *)usb_in_buffer);
 			return ERROR_OK;
 		}
 	}
@@ -858,8 +858,8 @@
 		return -1;
 	}
 
-	result = usb_bulk_write(jlink_jtag->usb_handle, JLINK_WRITE_ENDPOINT, \
-		usb_out_buffer, out_length, JLINK_USB_TIMEOUT);
+	result = usb_bulk_write(jlink_jtag->usb_handle, JLINK_WRITE_ENDPOINT,
+		(char *)usb_out_buffer, out_length, JLINK_USB_TIMEOUT);
 
 	DEBUG_JTAG_IO("jlink_usb_write, out_length = %d, result = %d", out_length, result);
 
@@ -872,8 +872,8 @@
 /* Read data from USB into in_buffer. */
 int jlink_usb_read(jlink_jtag_t *jlink_jtag)
 {
-	int result = usb_bulk_read(jlink_jtag->usb_handle, JLINK_READ_ENDPOINT, \
-		usb_in_buffer, JLINK_IN_BUFFER_SIZE, JLINK_USB_TIMEOUT);
+	int result = usb_bulk_read(jlink_jtag->usb_handle, JLINK_READ_ENDPOINT,
+		(char *)usb_in_buffer, JLINK_IN_BUFFER_SIZE, JLINK_USB_TIMEOUT);
 
 	DEBUG_JTAG_IO("jlink_usb_read, result = %d", result);
 
@@ -886,8 +886,9 @@
 /* Read the result from the previous EMU cmd into result_buffer. */
 int jlink_usb_read_emu_result(jlink_jtag_t *jlink_jtag)
 {
-	int result = usb_bulk_read(jlink_jtag->usb_handle, JLINK_READ_ENDPOINT, \
-		usb_emu_result_buffer, JLINK_EMU_RESULT_BUFFER_SIZE, JLINK_USB_TIMEOUT);
+	int result = usb_bulk_read(jlink_jtag->usb_handle, JLINK_READ_ENDPOINT,
+		(char *)usb_emu_result_buffer, JLINK_EMU_RESULT_BUFFER_SIZE,
+		JLINK_USB_TIMEOUT);
 
 	DEBUG_JTAG_IO("jlink_usb_read_result, result = %d", result);
 

Modified: trunk/src/jtag/jtag.c
===================================================================
--- trunk/src/jtag/jtag.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/jtag/jtag.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -510,7 +510,7 @@
 {
 	jtag_prelude1();
 
-	if (state != -1)
+	if (state != TAP_INVALID)
 		jtag_add_end_state(state);
 
 	cmd_queue_cur_state = cmd_queue_end_state;
@@ -2717,7 +2717,7 @@
 		return ERROR_COMMAND_SYNTAX_ERROR;
 	}
 
-	jtag_add_runtest(strtol(args[0], NULL, 0), -1);
+	jtag_add_runtest(strtol(args[0], NULL, 0), TAP_INVALID);
 	jtag_execute_queue();
 
 	return ERROR_OK;
@@ -2740,7 +2740,7 @@
 	/*          "statename" */
 	/* at the end of the arguments. */
 	/* assume none. */
-	endstate = -1;
+	endstate = TAP_INVALID;
 	if( argc >= 4 ){
 		/* have at least one pair of numbers. */
 		/* is last pair the magic text? */
@@ -2748,13 +2748,13 @@
 			const char *cpA;
 			const char *cpS;
 			cpA = args[ argc-1 ];
-			for( endstate = 0 ; endstate < 16 ; endstate++ ){
+			for( endstate = 0 ; endstate < TAP_NUM_STATES ; endstate++ ){
 				cpS = tap_state_name( endstate );
 				if( 0 == strcmp( cpA, cpS ) ){
 					break;
 				}
 			}
-			if( endstate >= 16 ){
+			if( endstate >= TAP_NUM_STATES ){
 				return ERROR_COMMAND_SYNTAX_ERROR;
 			} else {
 				/* found - remove the last 2 args */
@@ -2784,11 +2784,11 @@
 		fields[i].in_handler_priv = NULL;
 	}
 
-	jtag_add_ir_scan(argc / 2, fields, -1);
+	jtag_add_ir_scan(argc / 2, fields, TAP_INVALID);
 	/* did we have an endstate? */
-	if( endstate >= 0 ){
+	if (endstate != TAP_INVALID)
 		jtag_add_end_state(endstate);
-	}
+
 	jtag_execute_queue();
 
 	for (i = 0; i < argc / 2; i++)
@@ -2825,7 +2825,7 @@
 	}
 
 	/* assume no endstate */
-	endstate = -1;
+	endstate = TAP_INVALID;
 	/* validate arguments as numbers */
 	e = JIM_OK;
 	for (i = 2; i < argc; i+=2)
@@ -2901,11 +2901,11 @@
 		fields[field_count++].in_handler_priv = NULL;
 	}
 
-	jtag_add_dr_scan(num_fields, fields, -1);
+	jtag_add_dr_scan(num_fields, fields, TAP_INVALID);
 	/* did we get an end state? */
-	if( endstate >= 0 ){
-		jtag_add_end_state( (tap_state_t)endstate );
-	}
+	if (endstate != TAP_INVALID)
+		jtag_add_end_state(endstate);
+
 	retval = jtag_execute_queue();
 	if (retval != ERROR_OK)
 	{
@@ -3089,7 +3089,7 @@
 	 *
 	 * DRSHIFT->DRSHIFT and IRSHIFT->IRSHIFT have to be caught in interface specific code
 	 */
-	const static u8 tms_seqs[6][6] =
+	static const u8 tms_seqs[6][6] =
 	{
 		/* value clocked to TMS to move from one of six stable states to another */
 
@@ -3273,14 +3273,14 @@
 {
 	int x;
 
-	for( x = 0 ; x < 16 ; x++ ){
+	for( x = 0 ; x < TAP_NUM_STATES ; x++ ){
 		/* be nice to the human */
 		if( 0 == strcasecmp( name, tap_state_name(x) ) ){
 			return x;
 		}
 	}
 	/* not found */
-	return -1;
+	return TAP_INVALID;
 }
 
 /*-----</Cable Helper API>--------------------------------------*/

Modified: trunk/src/jtag/jtag.h
===================================================================
--- trunk/src/jtag/jtag.h	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/jtag/jtag.h	2009-04-18 10:08:13 UTC (rev 1462)
@@ -46,7 +46,9 @@
 	TAP_DRSELECT = 1, TAP_DRCAPTURE = 2, TAP_DRSHIFT = 3, TAP_DREXIT1 = 4,
 	TAP_DRPAUSE  = 5, TAP_DREXIT2 = 6, TAP_DRUPDATE = 7,
 	TAP_IRSELECT = 9, TAP_IRCAPTURE = 10, TAP_IRSHIFT = 11, TAP_IREXIT1 = 12,
-	TAP_IRPAUSE  = 13, TAP_IREXIT2 = 14, TAP_IRUPDATE = 15
+	TAP_IRPAUSE  = 13, TAP_IREXIT2 = 14, TAP_IRUPDATE = 15,
+
+	TAP_NUM_STATES = 16, TAP_INVALID = -1,
 };
 
 typedef enum tap_state tap_state_t;
@@ -643,7 +645,7 @@
 
 /* jtag_add_dr_out() is a faster version of jtag_add_dr_scan()
  *
- * Current or end_state can not be TAP_RESET. end_state can be -1
+ * Current or end_state can not be TAP_RESET. end_state can be TAP_INVALID
  *
  * num_bits[i] is the number of bits to clock out from value[i] LSB first.
  *
@@ -666,7 +668,7 @@
 static __inline__ void jtag_add_dr_out(jtag_tap_t* tap, int num_fields, const int* num_bits, const u32* value,
 		tap_state_t end_state)
 {
-	if (end_state != -1)
+	if (end_state != TAP_INVALID)
 		cmd_queue_end_state = end_state;
 	cmd_queue_cur_state = cmd_queue_end_state;
 	interface_jtag_add_dr_out(tap, num_fields, num_bits, value, cmd_queue_end_state);

Modified: trunk/src/jtag/usbprog.c
===================================================================
--- trunk/src/jtag/usbprog.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/jtag/usbprog.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -142,7 +142,7 @@
 #ifdef _DEBUG_JTAG_IO_
 				LOG_DEBUG("end_state: %i", cmd->cmd.end_state->end_state);
 #endif
-				if (cmd->cmd.end_state->end_state != -1)
+				if (cmd->cmd.end_state->end_state != TAP_INVALID)
 					usbprog_end_state(cmd->cmd.end_state->end_state);
 				break;
 			case JTAG_RESET:
@@ -159,7 +159,7 @@
 #ifdef _DEBUG_JTAG_IO_
 				LOG_DEBUG("runtest %i cycles, end in %i", cmd->cmd.runtest->num_cycles, cmd->cmd.runtest->end_state);
 #endif
-				if (cmd->cmd.runtest->end_state != -1)
+				if (cmd->cmd.runtest->end_state != TAP_INVALID)
 					usbprog_end_state(cmd->cmd.runtest->end_state);
 				usbprog_runtest(cmd->cmd.runtest->num_cycles);
 				break;
@@ -167,7 +167,7 @@
 #ifdef _DEBUG_JTAG_IO_
 				LOG_DEBUG("statemove end in %i", cmd->cmd.statemove->end_state);
 #endif
-				if (cmd->cmd.statemove->end_state != -1)
+				if (cmd->cmd.statemove->end_state != TAP_INVALID)
 					usbprog_end_state(cmd->cmd.statemove->end_state);
 				usbprog_state_move();
 				break;
@@ -182,7 +182,7 @@
 #ifdef _DEBUG_JTAG_IO_
 				LOG_DEBUG("scan end in %i", cmd->cmd.scan->end_state);
 #endif
-				if (cmd->cmd.scan->end_state != -1)
+				if (cmd->cmd.scan->end_state != TAP_INVALID)
 					usbprog_end_state(cmd->cmd.scan->end_state);
 				scan_size = jtag_build_buffer(cmd->cmd.scan, &buffer);
 				type = jtag_scan_type(cmd->cmd.scan);

Modified: trunk/src/jtag/vsllink.c
===================================================================
--- trunk/src/jtag/vsllink.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/jtag/vsllink.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -269,7 +269,7 @@
 			case JTAG_END_STATE:
 				DEBUG_JTAG_IO("end_state: %s", tap_state_name(cmd->cmd.end_state->end_state));
 
-				if (cmd->cmd.end_state->end_state != -1)
+				if (cmd->cmd.end_state->end_state != TAP_INVALID)
 				{
 					vsllink_end_state(cmd->cmd.end_state->end_state);
 				}
@@ -279,7 +279,7 @@
 				DEBUG_JTAG_IO( "runtest %i cycles, end in %s", cmd->cmd.runtest->num_cycles, \
 					tap_state_name(cmd->cmd.runtest->end_state));
 
-				if (cmd->cmd.runtest->end_state != -1)
+				if (cmd->cmd.runtest->end_state != TAP_INVALID)
 				{
 					vsllink_end_state(cmd->cmd.runtest->end_state);
 				}
@@ -289,7 +289,7 @@
 			case JTAG_STATEMOVE:
 				DEBUG_JTAG_IO("statemove end in %s", tap_state_name(cmd->cmd.statemove->end_state));
 
-				if (cmd->cmd.statemove->end_state != -1)
+				if (cmd->cmd.statemove->end_state != TAP_INVALID)
 				{
 					vsllink_end_state(cmd->cmd.statemove->end_state);
 				}
@@ -305,7 +305,7 @@
 				break;
 
 			case JTAG_SCAN:
-				if (cmd->cmd.scan->end_state != -1)
+				if (cmd->cmd.scan->end_state != TAP_INVALID)
 				{
 					vsllink_end_state(cmd->cmd.scan->end_state);
 				}

Modified: trunk/src/target/arm11.c
===================================================================
--- trunk/src/target/arm11.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/target/arm11.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -383,9 +383,9 @@
 
 	if (R(DSCR) & ARM11_DSCR_WDTR_FULL)
 	{
-	arm11_add_debug_SCAN_N(arm11, 0x05, -1);
+	arm11_add_debug_SCAN_N(arm11, 0x05, TAP_INVALID);
 
-	arm11_add_IR(arm11, ARM11_INTEST, -1);
+	arm11_add_IR(arm11, ARM11_INTEST, TAP_INVALID);
 
 	scan_field_t	chain5_fields[3];
 
@@ -614,9 +614,9 @@
 
 	if (R(DSCR) & ARM11_DSCR_RDTR_FULL || arm11->reg_list[ARM11_RC_RDTR].dirty)
 	{
-	arm11_add_debug_SCAN_N(arm11, 0x05, -1);
+	arm11_add_debug_SCAN_N(arm11, 0x05, TAP_INVALID);
 
-	arm11_add_IR(arm11, ARM11_EXTEST, -1);
+	arm11_add_IR(arm11, ARM11_EXTEST, TAP_INVALID);
 
 	scan_field_t	chain5_fields[3];
 
@@ -1565,7 +1565,7 @@
 
 	/* check IDCODE */
 
-	arm11_add_IR(arm11, ARM11_IDCODE, -1);
+	arm11_add_IR(arm11, ARM11_IDCODE, TAP_INVALID);
 
 	scan_field_t		idcode_field;
 
@@ -1575,9 +1575,9 @@
 
 	/* check DIDR */
 
-	arm11_add_debug_SCAN_N(arm11, 0x00, -1);
+	arm11_add_debug_SCAN_N(arm11, 0x00, TAP_INVALID);
 
-	arm11_add_IR(arm11, ARM11_INTEST, -1);
+	arm11_add_IR(arm11, ARM11_INTEST, TAP_INVALID);
 
 	scan_field_t		chain0_fields[2];
 

Modified: trunk/src/target/arm11_dbgtap.c
===================================================================
--- trunk/src/target/arm11_dbgtap.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/target/arm11_dbgtap.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -95,7 +95,7 @@
  *
  * \param arm11 Target state variable.
  * \param instr An ARM11 DBGTAP instruction. Use enum #arm11_instructions.
- * \param state Pass the final TAP state or -1 for the default value (Pause-IR).
+ * \param state Pass the final TAP state or TAP_INVALID for the default value (Pause-IR).
  *
  * \remarks This adds to the JTAG command queue but does \em not execute it.
  */
@@ -120,7 +120,7 @@
 
     arm11_setup_field(arm11, 5, &instr, NULL, &field);
 
-    arm11_add_ir_scan_vc(1, &field, state == -1 ? TAP_IRPAUSE : state);
+    arm11_add_ir_scan_vc(1, &field, state == TAP_INVALID ? TAP_IRPAUSE : state);
 }
 
 /** Verify shifted out data from Scan Chain Register (SCREG)
@@ -152,7 +152,7 @@
  *
  * \param arm11	    Target state variable.
  * \param chain	    Scan chain that will be selected.
- * \param state	    Pass the final TAP state or -1 for the default
+ * \param state	    Pass the final TAP state or TAP_INVALID for the default
  *		    value (Pause-DR).
  *
  * The chain takes effect when Update-DR is passed (usually when subsequently
@@ -171,7 +171,7 @@
 {
     JTAG_DEBUG("SCREG <= 0x%02x", chain);
 
-    arm11_add_IR(arm11, ARM11_SCAN_N, -1);
+    arm11_add_IR(arm11, ARM11_SCAN_N, TAP_INVALID);
 
     scan_field_t		field;
 
@@ -179,7 +179,7 @@
 
     field.in_handler = arm11_in_handler_SCAN_N;
 
-    arm11_add_dr_scan_vc(1, &field, state == -1 ? TAP_DRPAUSE : state);
+    arm11_add_dr_scan_vc(1, &field, state == TAP_INVALID ? TAP_DRPAUSE : state);
 }
 
 /** Write an instruction into the ITR register
@@ -188,7 +188,7 @@
  * \param inst	An ARM11 processor instruction/opcode.
  * \param flag	Optional parameter to retrieve the InstCompl flag
  *		(this will be written when the JTAG chain is executed).
- * \param state	Pass the final TAP state or -1 for the default
+ * \param state	Pass the final TAP state or TAP_INVALID for the default
  *		value (Run-Test/Idle).
  *
  * \remarks By default this ends with Run-Test/Idle state
@@ -208,7 +208,7 @@
     arm11_setup_field(arm11, 32,    &inst,	NULL, itr + 0);
     arm11_setup_field(arm11, 1,	    NULL,	flag, itr + 1);
 
-    arm11_add_dr_scan_vc(asizeof(itr), itr, state == -1 ? TAP_IDLE : state);
+    arm11_add_dr_scan_vc(asizeof(itr), itr, state == TAP_INVALID ? TAP_IDLE : state);
 }
 
 /** Read the Debug Status and Control Register (DSCR)
@@ -222,9 +222,9 @@
  */
 u32 arm11_read_DSCR(arm11_common_t * arm11)
 {
-    arm11_add_debug_SCAN_N(arm11, 0x01, -1);
+    arm11_add_debug_SCAN_N(arm11, 0x01, TAP_INVALID);
 
-    arm11_add_IR(arm11, ARM11_INTEST, -1);
+    arm11_add_IR(arm11, ARM11_INTEST, TAP_INVALID);
 
     u32			dscr;
     scan_field_t	chain1_field;
@@ -254,9 +254,9 @@
  */
 void arm11_write_DSCR(arm11_common_t * arm11, u32 dscr)
 {
-    arm11_add_debug_SCAN_N(arm11, 0x01, -1);
+    arm11_add_debug_SCAN_N(arm11, 0x01, TAP_INVALID);
 
-    arm11_add_IR(arm11, ARM11_EXTEST, -1);
+    arm11_add_IR(arm11, ARM11_EXTEST, TAP_INVALID);
 
     scan_field_t		    chain1_field;
 
@@ -331,7 +331,7 @@
  */
 void arm11_run_instr_data_prepare(arm11_common_t * arm11)
 {
-    arm11_add_debug_SCAN_N(arm11, 0x05, -1);
+    arm11_add_debug_SCAN_N(arm11, 0x05, TAP_INVALID);
 }
 
 /** Cleanup after ITR/DTR operations
@@ -350,7 +350,7 @@
  */
 void arm11_run_instr_data_finish(arm11_common_t * arm11)
 {
-    arm11_add_debug_SCAN_N(arm11, 0x00, -1);
+    arm11_add_debug_SCAN_N(arm11, 0x00, TAP_INVALID);
 }
 
 
@@ -365,7 +365,7 @@
  */
 void arm11_run_instr_no_data(arm11_common_t * arm11, u32 * opcode, size_t count)
 {
-    arm11_add_IR(arm11, ARM11_ITRSEL, -1);
+    arm11_add_IR(arm11, ARM11_ITRSEL, TAP_INVALID);
 
     while (count--)
     {
@@ -414,11 +414,11 @@
  */
 void arm11_run_instr_data_to_core(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count)
 {
-    arm11_add_IR(arm11, ARM11_ITRSEL, -1);
+    arm11_add_IR(arm11, ARM11_ITRSEL, TAP_INVALID);
 
     arm11_add_debug_INST(arm11, opcode, NULL, TAP_DRPAUSE);
 
-    arm11_add_IR(arm11, ARM11_EXTEST, -1);
+    arm11_add_IR(arm11, ARM11_EXTEST, TAP_INVALID);
 
     scan_field_t	chain5_fields[3];
 
@@ -446,7 +446,7 @@
 	data++;
     }
 
-    arm11_add_IR(arm11, ARM11_INTEST, -1);
+    arm11_add_IR(arm11, ARM11_INTEST, TAP_INVALID);
 
     do
     {
@@ -495,11 +495,11 @@
  */
 void arm11_run_instr_data_to_core_noack(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count)
 {
-    arm11_add_IR(arm11, ARM11_ITRSEL, -1);
+    arm11_add_IR(arm11, ARM11_ITRSEL, TAP_INVALID);
 
     arm11_add_debug_INST(arm11, opcode, NULL, TAP_DRPAUSE);
 
-    arm11_add_IR(arm11, ARM11_EXTEST, -1);
+    arm11_add_IR(arm11, ARM11_EXTEST, TAP_INVALID);
 
     scan_field_t	chain5_fields[3];
 
@@ -527,7 +527,7 @@
 	}
     }
 
-    arm11_add_IR(arm11, ARM11_INTEST, -1);
+    arm11_add_IR(arm11, ARM11_INTEST, TAP_INVALID);
 
     chain5_fields[0].out_value	= 0;
     chain5_fields[1].in_value   = ReadyPos++;
@@ -584,11 +584,11 @@
  */
 void arm11_run_instr_data_from_core(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count)
 {
-    arm11_add_IR(arm11, ARM11_ITRSEL, -1);
+    arm11_add_IR(arm11, ARM11_ITRSEL, TAP_INVALID);
 
     arm11_add_debug_INST(arm11, opcode, NULL, TAP_IDLE);
 
-    arm11_add_IR(arm11, ARM11_INTEST, -1);
+    arm11_add_IR(arm11, ARM11_INTEST, TAP_INVALID);
 
     scan_field_t	chain5_fields[3];
 
@@ -666,9 +666,9 @@
  */
 void arm11_sc7_run(arm11_common_t * arm11, arm11_sc7_action_t * actions, size_t count)
 {
-    arm11_add_debug_SCAN_N(arm11, 0x07, -1);
+    arm11_add_debug_SCAN_N(arm11, 0x07, TAP_INVALID);
 
-    arm11_add_IR(arm11, ARM11_EXTEST, -1);
+    arm11_add_IR(arm11, ARM11_EXTEST, TAP_INVALID);
 
     scan_field_t	chain7_fields[3];
 

Modified: trunk/src/target/arm720t.c
===================================================================
--- trunk/src/target/arm720t.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/target/arm720t.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -136,10 +136,10 @@
 	fields[1].in_check_value = NULL;
 	fields[1].in_check_mask = NULL;
 
-	jtag_add_dr_scan(2, fields, -1);
+	jtag_add_dr_scan(2, fields, TAP_INVALID);
 
 	if (clock)
-		jtag_add_runtest(0, -1);
+		jtag_add_runtest(0, TAP_INVALID);
 
 #ifdef _DEBUG_INSTRUCTION_EXECUTION_
 	if((retval = jtag_execute_queue()) != ERROR_OK)

Modified: trunk/src/target/arm7tdmi.c
===================================================================
--- trunk/src/target/arm7tdmi.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/target/arm7tdmi.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -169,9 +169,9 @@
 			2,
 			arm7tdmi_num_bits,
 			values,
-			-1);
+			TAP_INVALID);
 
-	jtag_add_runtest(0, -1);
+	jtag_add_runtest(0, TAP_INVALID);
 
 	return ERROR_OK;
 }
@@ -219,9 +219,9 @@
 	fields[1].in_check_value = NULL;
 	fields[1].in_check_mask = NULL;
 
-	jtag_add_dr_scan(2, fields, -1);
+	jtag_add_dr_scan(2, fields, TAP_INVALID);
 
-	jtag_add_runtest(0, -1);
+	jtag_add_runtest(0, TAP_INVALID);
 
 #ifdef _DEBUG_INSTRUCTION_EXECUTION_
 {
@@ -291,9 +291,9 @@
 	fields[1].in_check_value = NULL;
 	fields[1].in_check_mask = NULL;
 
-	jtag_add_dr_scan(2, fields, -1);
+	jtag_add_dr_scan(2, fields, TAP_INVALID);
 
-	jtag_add_runtest(0, -1);
+	jtag_add_runtest(0, TAP_INVALID);
 
 #ifdef _DEBUG_INSTRUCTION_EXECUTION_
 {

Modified: trunk/src/target/arm920t.c
===================================================================
--- trunk/src/target/arm920t.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/target/arm920t.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -150,12 +150,12 @@
 	fields[3].in_handler = NULL;
 	fields[3].in_handler_priv = NULL;
 
-	jtag_add_dr_scan(4, fields, -1);
+	jtag_add_dr_scan(4, fields, TAP_INVALID);
 
 	fields[1].in_handler_priv = value;
 	fields[1].in_handler = arm_jtag_buf_to_u32;
 
-	jtag_add_dr_scan(4, fields, -1);
+	jtag_add_dr_scan(4, fields, TAP_INVALID);
 
 #ifdef _DEBUG_INSTRUCTION_EXECUTION_
 	jtag_execute_queue();
@@ -222,7 +222,7 @@
 	fields[3].in_handler = NULL;
 	fields[3].in_handler_priv = NULL;
 
-	jtag_add_dr_scan(4, fields, -1);
+	jtag_add_dr_scan(4, fields, TAP_INVALID);
 
 #ifdef _DEBUG_INSTRUCTION_EXECUTION_
 	LOG_DEBUG("addr: 0x%x value: %8.8x", reg_addr, value);
@@ -289,7 +289,7 @@
 	fields[3].in_handler = NULL;
 	fields[3].in_handler_priv = NULL;
 
-	jtag_add_dr_scan(4, fields, -1);
+	jtag_add_dr_scan(4, fields, TAP_INVALID);
 
 	arm9tdmi_clock_out(jtag_info, arm_opcode, 0, NULL, 0);
 	arm9tdmi_clock_out(jtag_info, ARMV4_5_NOP, 0, NULL, 1);

Modified: trunk/src/target/arm926ejs.c
===================================================================
--- trunk/src/target/arm926ejs.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/target/arm926ejs.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -178,7 +178,7 @@
 	fields[3].in_handler = NULL;
 	fields[3].in_handler_priv = NULL;
 
-	jtag_add_dr_scan(4, fields, -1);
+	jtag_add_dr_scan(4, fields, TAP_INVALID);
 
 	fields[0].in_handler_priv = value;
 	fields[0].in_handler = arm_jtag_buf_to_u32;
@@ -189,7 +189,7 @@
 		/* rescan with NOP, to wait for the access to complete */
 		access = 0;
 		nr_w_buf = 0;
-		jtag_add_dr_scan(4, fields, -1);
+		jtag_add_dr_scan(4, fields, TAP_INVALID);
 		if((retval = jtag_execute_queue()) != ERROR_OK)
 		{
 			return retval;
@@ -268,14 +268,14 @@
 	fields[3].in_handler = NULL;
 	fields[3].in_handler_priv = NULL;
 
-	jtag_add_dr_scan(4, fields, -1);
+	jtag_add_dr_scan(4, fields, TAP_INVALID);
 	/*TODO: add timeout*/
 	do
 	{
 		/* rescan with NOP, to wait for the access to complete */
 		access = 0;
 		nr_w_buf = 0;
-		jtag_add_dr_scan(4, fields, -1);
+		jtag_add_dr_scan(4, fields, TAP_INVALID);
 		if((retval = jtag_execute_queue()) != ERROR_OK)
 		{
 			return retval;

Modified: trunk/src/target/arm966e.c
===================================================================
--- trunk/src/target/arm966e.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/target/arm966e.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -214,12 +214,12 @@
 	fields[2].in_handler = NULL;
 	fields[2].in_handler_priv = NULL;
 
-	jtag_add_dr_scan(3, fields, -1);
+	jtag_add_dr_scan(3, fields, TAP_INVALID);
 
 	fields[0].in_handler_priv = value;
 	fields[0].in_handler = arm_jtag_buf_to_u32;
 
-	jtag_add_dr_scan(3, fields, -1);
+	jtag_add_dr_scan(3, fields, TAP_INVALID);
 
 #ifdef _DEBUG_INSTRUCTION_EXECUTION_
 	if((retval = jtag_execute_queue()) != ERROR_OK)
@@ -282,7 +282,7 @@
 	fields[2].in_handler = NULL;
 	fields[2].in_handler_priv = NULL;
 
-	jtag_add_dr_scan(3, fields, -1);
+	jtag_add_dr_scan(3, fields, TAP_INVALID);
 
 #ifdef _DEBUG_INSTRUCTION_EXECUTION_
 	LOG_DEBUG("addr: 0x%x value: %8.8x", reg_addr, value);

Modified: trunk/src/target/arm9tdmi.c
===================================================================
--- trunk/src/target/arm9tdmi.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/target/arm9tdmi.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -253,9 +253,9 @@
 	fields[2].in_handler = NULL;
 	fields[2].in_handler_priv = NULL;
 
-	jtag_add_dr_scan(3, fields, -1);
+	jtag_add_dr_scan(3, fields, TAP_INVALID);
 
-	jtag_add_runtest(0, -1);
+	jtag_add_runtest(0, TAP_INVALID);
 
 #ifdef _DEBUG_INSTRUCTION_EXECUTION_
 	{
@@ -320,9 +320,9 @@
 	fields[2].in_handler = NULL;
 	fields[2].in_handler_priv = NULL;
 
-	jtag_add_dr_scan(3, fields, -1);
+	jtag_add_dr_scan(3, fields, TAP_INVALID);
 
-	jtag_add_runtest(0, -1);
+	jtag_add_runtest(0, TAP_INVALID);
 
 #ifdef _DEBUG_INSTRUCTION_EXECUTION_
 	{
@@ -403,9 +403,9 @@
 	fields[2].in_handler = NULL;
 	fields[2].in_handler_priv = NULL;
 
-	jtag_add_dr_scan(3, fields, -1);
+	jtag_add_dr_scan(3, fields, TAP_INVALID);
 
-	jtag_add_runtest(0, -1);
+	jtag_add_runtest(0, TAP_INVALID);
 
 #ifdef _DEBUG_INSTRUCTION_EXECUTION_
 	{

Modified: trunk/src/target/arm_jtag.c
===================================================================
--- trunk/src/target/arm_jtag.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/target/arm_jtag.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -58,7 +58,7 @@
 		field.in_check_mask = NULL;
 		field.in_handler = handler;
 		field.in_handler_priv = NULL;
-		jtag_add_ir_scan(1, &field, -1);
+		jtag_add_ir_scan(1, &field, TAP_INVALID);
 	}
 
 	return ERROR_OK;
@@ -84,7 +84,7 @@
 				1,
 				num_bits,
 				values,
-				-1);
+				TAP_INVALID);
 
 		jtag_info->cur_scan_chain = new_scan_chain;
 	}

Modified: trunk/src/target/cortex_swjdp.c
===================================================================
--- trunk/src/target/cortex_swjdp.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/target/cortex_swjdp.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -91,7 +91,7 @@
 	fields[1].in_check_value = NULL;
 	fields[1].in_check_mask = NULL;
 
-	jtag_add_dr_scan(2, fields, -1);
+	jtag_add_dr_scan(2, fields, TAP_INVALID);
 
 	return ERROR_OK;
 }
@@ -136,7 +136,7 @@
 	fields[1].in_check_value = NULL;
 	fields[1].in_check_mask = NULL;
 
-	jtag_add_dr_scan(2, fields, -1);
+	jtag_add_dr_scan(2, fields, TAP_INVALID);
 
 	return ERROR_OK;
 }

Modified: trunk/src/target/embeddedice.c
===================================================================
--- trunk/src/target/embeddedice.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/target/embeddedice.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -283,7 +283,7 @@
 	fields[2].in_handler = NULL;
 	fields[2].in_handler_priv = NULL;
 
-	jtag_add_dr_scan(3, fields, -1);
+	jtag_add_dr_scan(3, fields, TAP_INVALID);
 
 	fields[0].in_value = reg->value;
 	jtag_set_check_value(fields+0, check_value, check_mask, NULL);
@@ -294,7 +294,7 @@
 	 */
 	buf_set_u32(fields[1].out_value, 0, 5, embeddedice_reg_arch_info[EICE_COMMS_CTRL]);
 
-	jtag_add_dr_scan(3, fields, -1);
+	jtag_add_dr_scan(3, fields, TAP_INVALID);
 
 	return ERROR_OK;
 }
@@ -345,7 +345,7 @@
 	fields[2].in_handler = NULL;
 	fields[2].in_handler_priv = NULL;
 
-	jtag_add_dr_scan(3, fields, -1);
+	jtag_add_dr_scan(3, fields, TAP_INVALID);
 
 	while (size > 0)
 	{
@@ -357,7 +357,7 @@
 
 		fields[0].in_handler = arm_jtag_buf_to_u32;
 		fields[0].in_handler_priv = data;
-		jtag_add_dr_scan(3, fields, -1);
+		jtag_add_dr_scan(3, fields, TAP_INVALID);
 
 		data++;
 		size--;
@@ -465,7 +465,7 @@
 	while (size > 0)
 	{
 		buf_set_u32(fields[0].out_value, 0, 32, *data);
-		jtag_add_dr_scan(3, fields, -1);
+		jtag_add_dr_scan(3, fields, TAP_INVALID);
 
 		data++;
 		size--;
@@ -531,11 +531,11 @@
 	fields[2].in_handler = NULL;
 	fields[2].in_handler_priv = NULL;
 
-	jtag_add_dr_scan(3, fields, -1);
+	jtag_add_dr_scan(3, fields, TAP_INVALID);
 	gettimeofday(&lap, NULL);
 	do
 	{
-		jtag_add_dr_scan(3, fields, -1);
+		jtag_add_dr_scan(3, fields, TAP_INVALID);
 		if ((retval = jtag_execute_queue()) != ERROR_OK)
 			return retval;
 

Modified: trunk/src/target/embeddedice.h
===================================================================
--- trunk/src/target/embeddedice.h	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/target/embeddedice.h	2009-04-18 10:08:13 UTC (rev 1462)
@@ -124,7 +124,7 @@
 			3,
 			embeddedice_num_bits,
 			values,
-			-1);
+			TAP_INVALID);
 }
 
 void embeddedice_write_dcc(jtag_tap_t *tap, int reg_addr, u8 *buffer, int little, int count);

Modified: trunk/src/target/etb.c
===================================================================
--- trunk/src/target/etb.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/target/etb.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -82,7 +82,7 @@
 		field.in_handler = NULL;
 		field.in_handler_priv = NULL;
 
-		jtag_add_ir_scan(1, &field, -1);
+		jtag_add_ir_scan(1, &field, TAP_INVALID);
 
 		free(field.out_value);
 	}
@@ -109,7 +109,7 @@
 
 		/* select INTEST instruction */
 		etb_set_instr(etb, 0x2);
-		jtag_add_dr_scan(1, &field, -1);
+		jtag_add_dr_scan(1, &field, TAP_INVALID);
 
 		etb->cur_scan_chain = new_scan_chain;
 
@@ -220,7 +220,7 @@
 	fields[2].in_handler = NULL;
 	fields[2].in_handler_priv = NULL;
 
-	jtag_add_dr_scan(3, fields, -1);
+	jtag_add_dr_scan(3, fields, TAP_INVALID);
 
 	fields[0].in_handler = buf_to_u32_handler;
 
@@ -236,7 +236,7 @@
 			buf_set_u32(fields[1].out_value, 0, 7, 0);
 
 		fields[0].in_handler_priv = &data[i];
-		jtag_add_dr_scan(3, fields, -1);
+		jtag_add_dr_scan(3, fields, TAP_INVALID);
 	}
 
 	jtag_execute_queue();
@@ -291,7 +291,7 @@
 	fields[2].in_handler = NULL;
 	fields[2].in_handler_priv = NULL;
 
-	jtag_add_dr_scan(3, fields, -1);
+	jtag_add_dr_scan(3, fields, TAP_INVALID);
 
 	/* read the identification register in the second run, to make sure we
 	 * don't read the ETB data register twice, skipping every second entry
@@ -301,7 +301,7 @@
 
 	jtag_set_check_value(fields+0, check_value, check_mask, NULL);
 
-	jtag_add_dr_scan(3, fields, -1);
+	jtag_add_dr_scan(3, fields, TAP_INVALID);
 
 	free(fields[1].out_value);
 	free(fields[2].out_value);
@@ -388,7 +388,7 @@
 	fields[2].in_handler = NULL;
 	fields[2].in_handler_priv = NULL;
 
-	jtag_add_dr_scan(3, fields, -1);
+	jtag_add_dr_scan(3, fields, TAP_INVALID);
 
 	free(fields[0].out_value);
 	free(fields[1].out_value);

Modified: trunk/src/target/etm.c
===================================================================
--- trunk/src/target/etm.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/target/etm.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -371,12 +371,12 @@
 	fields[2].in_handler = NULL;
 	fields[2].in_handler_priv = NULL;
 
-	jtag_add_dr_scan(3, fields, -1);
+	jtag_add_dr_scan(3, fields, TAP_INVALID);
 
 	fields[0].in_value = reg->value;
 	jtag_set_check_value(fields+0, check_value, check_mask, NULL);
 
-	jtag_add_dr_scan(3, fields, -1);
+	jtag_add_dr_scan(3, fields, TAP_INVALID);
 
 	free(fields[1].out_value);
 	free(fields[2].out_value);
@@ -463,7 +463,7 @@
 	fields[2].in_handler = NULL;
 	fields[2].in_handler_priv = NULL;
 
-	jtag_add_dr_scan(3, fields, -1);
+	jtag_add_dr_scan(3, fields, TAP_INVALID);
 
 	free(fields[0].out_value);
 	free(fields[1].out_value);
@@ -883,7 +883,7 @@
 				continue;
 
 			/* indirect branch to the exception vector means an exception occured */
-			if (((ctx->last_branch >= 0x0) && (ctx->last_branch <= 0x20))
+			if ((ctx->last_branch <= 0x20)
 				|| ((ctx->last_branch >= 0xffff0000) && (ctx->last_branch <= 0xffff0020)))
 			{
 				if ((ctx->last_branch & 0xff) == 0x10)

Modified: trunk/src/target/feroceon.c
===================================================================
--- trunk/src/target/feroceon.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/target/feroceon.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -162,9 +162,9 @@
 	fields[2].in_handler = NULL;
 	fields[2].in_handler_priv = NULL;
 
-	jtag_add_dr_scan(3, fields, -1);
+	jtag_add_dr_scan(3, fields, TAP_INVALID);
 
-	/* no jtag_add_runtest(0, -1) here */
+	/* no jtag_add_runtest(0, TAP_INVALID) here */
 
 	return ERROR_OK;
 }

Modified: trunk/src/target/mips_ejtag.c
===================================================================
--- trunk/src/target/mips_ejtag.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/target/mips_ejtag.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -55,7 +55,7 @@
 		field.in_check_mask = NULL;
 		field.in_handler = handler;
 		field.in_handler_priv = NULL;
-		jtag_add_ir_scan(1, &field, -1);
+		jtag_add_ir_scan(1, &field, TAP_INVALID);
 	}
 
 	return ERROR_OK;
@@ -78,7 +78,7 @@
 	field.in_check_mask = NULL;
 	field.in_handler = NULL;
 	field.in_handler_priv = NULL;
-	jtag_add_dr_scan(1, &field, -1);
+	jtag_add_dr_scan(1, &field, TAP_INVALID);
 
 	if (jtag_execute_queue() != ERROR_OK)
 	{
@@ -105,7 +105,7 @@
 	field.in_check_mask = NULL;
 	field.in_handler = NULL;
 	field.in_handler_priv = NULL;
-	jtag_add_dr_scan(1, &field, -1);
+	jtag_add_dr_scan(1, &field, TAP_INVALID);
 
 	if (jtag_execute_queue() != ERROR_OK)
 	{
@@ -136,7 +136,7 @@
 	field.in_check_mask = NULL;
 	field.in_handler = NULL;
 	field.in_handler_priv = NULL;
-	jtag_add_dr_scan(1, &field, -1);
+	jtag_add_dr_scan(1, &field, TAP_INVALID);
 
 	if ((retval = jtag_execute_queue()) != ERROR_OK)
 	{

Modified: trunk/src/target/xscale.c
===================================================================
--- trunk/src/target/xscale.c	2009-04-15 15:44:26 UTC (rev 1461)
+++ trunk/src/target/xscale.c	2009-04-18 10:08:13 UTC (rev 1462)
@@ -229,7 +229,7 @@
 		field.in_value = NULL;
 		jtag_set_check_value(&field, tap->expected, tap->expected_mask, NULL);
 
-		jtag_add_ir_scan(1, &field, -1);
+		jtag_add_ir_scan(1, &field, TAP_INVALID);
 
 		free(field.out_value);
 	}
@@ -282,7 +282,7 @@
 	fields[2].in_value = NULL;
 	jtag_set_check_value(fields+2, &field2_check_value, &field2_check_mask, NULL);
 
-	jtag_add_dr_scan(3, fields, -1);
+	jtag_add_dr_scan(3, fields, TAP_INVALID);
 
 	if ((retval = jtag_execute_queue()) != ERROR_OK)
 	{
@@ -302,7 +302,7 @@
 
 	jtag_add_end_state(TAP_IDLE);
 
-	jtag_add_dr_scan(3, fields, -1);
+	jtag_add_dr_scan(3, fields, TAP_INVALID);
 
 	/* DANGER!!! this must be here. It will make sure that the arguments
 	 * to jtag_set_check_value() does not go out of scope! */
@@ -362,7 +362,7 @@
 
 	jtag_add_end_state(TAP_IDLE);
 	xscale_jtag_set_instr(xscale->jtag_info.tap, xscale->jtag_info.dbgtx);
-	jtag_add_runtest(1, -1); /* ensures that we're in the TAP_IDLE state as the above could be a no-op */
+	jtag_add_runtest(1, TAP_INVALID); /* ensures that we're in the TAP_IDLE state as the above could be a no-op */
 
 	/* repeat until all words have been collected */
 	int attempts=0;
@@ -750,7 +750,7 @@
 	fields[2].in_value = NULL;
 	jtag_set_check_value(fields+2, &field2_check_value, &field2_check_mask, NULL);
 
-	jtag_add_dr_scan(3, fields, -1);
+	jtag_add_dr_scan(3, fields, TAP_INVALID);
 
 	if ((retval = jtag_execute_queue()) != ERROR_OK)
 	{
@@ -822,7 +822,7 @@
 	fields[1].in_handler = NULL;
 	fields[1].in_handler_priv = NULL;
 
-	jtag_add_dr_scan(2, fields, -1);
+	jtag_add_dr_scan(2, fields, TAP_INVALID);
 
 	fields[0].num_bits = 32;
 	fields[0].out_value = packet;
@@ -834,7 +834,7 @@
 	{
 		buf_set_u32(packet, 0, 32, buffer[word]);
 		cmd = parity(*((u32*)packet));
-		jtag_add_dr_scan(2, fields, -1);
+		jtag_add_dr_scan(2, fields, TAP_INVALID);
 	}
 
 	jtag_execute_queue();
@@ -880,7 +880,7 @@
 	fields[1].in_handler = NULL;
 	fields[1].in_handler_priv = NULL;
 
-	jtag_add_dr_scan(2, fields, -1);
+	jtag_add_dr_scan(2, fields, TAP_INVALID);
 
 	return ERROR_OK;
 }



From oharboe at mail.berlios.de  Sun Apr 19 10:04:24 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Sun, 19 Apr 2009 10:04:24 +0200
Subject: [Openocd-svn] r1463 - trunk
Message-ID: <200904190804.n3J84OZn027355@sheep.berlios.de>

Author: oharboe
Date: 2009-04-19 10:04:23 +0200 (Sun, 19 Apr 2009)
New Revision: 1463

Modified:
   trunk/configure.in
Log:
Zach Welch <zw at superlucidity.net> automake maintainer mode

Modified: trunk/configure.in
===================================================================
--- trunk/configure.in	2009-04-18 10:08:13 UTC (rev 1462)
+++ trunk/configure.in	2009-04-19 08:04:23 UTC (rev 1463)
@@ -649,6 +649,7 @@
 
 AM_CONFIG_HEADER(config.h)
 AM_INIT_AUTOMAKE(openocd, 1.0)
+AM_MAINTAINER_MODE
 
 AM_CONDITIONAL(RELEASE, test $build_release = yes)
 AM_CONDITIONAL(PARPORT, test $build_parport = yes)



From oharboe at mail.berlios.de  Sun Apr 19 10:05:58 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Sun, 19 Apr 2009 10:05:58 +0200
Subject: [Openocd-svn] r1464 - trunk/src/jtag
Message-ID: <200904190805.n3J85w9J027461@sheep.berlios.de>

Author: oharboe
Date: 2009-04-19 10:05:54 +0200 (Sun, 19 Apr 2009)
New Revision: 1464

Modified:
   trunk/src/jtag/amt_jtagaccel.c
   trunk/src/jtag/dummy.c
   trunk/src/jtag/gw16012.c
   trunk/src/jtag/jtag.c
Log:
Zach Welch <zw at superlucidity.net>  use tap_state_t

Modified: trunk/src/jtag/amt_jtagaccel.c
===================================================================
--- trunk/src/jtag/amt_jtagaccel.c	2009-04-19 08:04:23 UTC (rev 1463)
+++ trunk/src/jtag/amt_jtagaccel.c	2009-04-19 08:05:54 UTC (rev 1464)
@@ -156,7 +156,7 @@
 	return ERROR_OK;
 }
 
-void amt_jtagaccel_end_state(int state)
+void amt_jtagaccel_end_state(tap_state_t state)
 {
 	if (tap_is_state_stable(state))
 		tap_set_end_state(state);

Modified: trunk/src/jtag/dummy.c
===================================================================
--- trunk/src/jtag/dummy.c	2009-04-19 08:04:23 UTC (rev 1463)
+++ trunk/src/jtag/dummy.c	2009-04-19 08:05:54 UTC (rev 1464)
@@ -91,7 +91,7 @@
 	{
 		if( tck )
 		{
-			int old_state = dummy_state;
+			tap_state_t old_state = dummy_state;
 			dummy_state = tap_state_transition( old_state, tms );
 
 			if( old_state != dummy_state )

Modified: trunk/src/jtag/gw16012.c
===================================================================
--- trunk/src/jtag/gw16012.c	2009-04-19 08:04:23 UTC (rev 1463)
+++ trunk/src/jtag/gw16012.c	2009-04-19 08:05:54 UTC (rev 1464)
@@ -194,7 +194,7 @@
 	return ERROR_OK;
 }
 
-void gw16012_end_state(int state)
+void gw16012_end_state(tap_state_t state)
 {
 	if (tap_is_state_stable(state))
 		tap_set_end_state(state);

Modified: trunk/src/jtag/jtag.c
===================================================================
--- trunk/src/jtag/jtag.c	2009-04-19 08:04:23 UTC (rev 1463)
+++ trunk/src/jtag/jtag.c	2009-04-19 08:05:54 UTC (rev 1464)
@@ -219,7 +219,7 @@
 void jtag_add_end_state(tap_state_t endstate);
 void jtag_add_sleep(u32 us);
 int jtag_execute_queue(void);
-int tap_state_by_name(const char *name);
+tap_state_t tap_state_by_name(const char *name);
 
 /* jtag commands */
 int handle_interface_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
@@ -2652,7 +2652,7 @@
 
 int handle_endstate_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
-	int state;
+	tap_state_t state;
 
 	if (argc < 1)
 	{
@@ -2665,7 +2665,7 @@
 			command_print( cmd_ctx, "Invalid state name: %s\n", args[0] );
 			return ERROR_COMMAND_SYNTAX_ERROR;
 		}
-		jtag_add_end_state( (tap_state_t)(state));
+		jtag_add_end_state(state);
 		jtag_execute_queue();
 	}
 	command_print(cmd_ctx, "current endstate: %s", tap_state_name(cmd_queue_end_state));
@@ -2729,7 +2729,7 @@
 	int i;
 	scan_field_t *fields;
 	jtag_tap_t *tap;
-	int endstate;
+	tap_state_t endstate;
 
 	if ((argc < 2) || (argc % 2))
 	{
@@ -2807,7 +2807,7 @@
 	int field_count = 0;
 	int i, e;
 	jtag_tap_t *tap;
-	int endstate;
+	tap_state_t endstate;
 
 	/* args[1] = device
 	 * args[2] = num_bits
@@ -3269,9 +3269,9 @@
 	return ret;
 }
 
-int tap_state_by_name( const char *name )
+tap_state_t tap_state_by_name( const char *name )
 {
-	int x;
+	tap_state_t x;
 
 	for( x = 0 ; x < TAP_NUM_STATES ; x++ ){
 		/* be nice to the human */



From oharboe at mail.berlios.de  Sun Apr 19 10:15:33 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Sun, 19 Apr 2009 10:15:33 +0200
Subject: [Openocd-svn] r1465 - trunk/src/jtag
Message-ID: <200904190815.n3J8FX7Z028103@sheep.berlios.de>

Author: oharboe
Date: 2009-04-19 10:15:32 +0200 (Sun, 19 Apr 2009)
New Revision: 1465

Modified:
   trunk/src/jtag/usbprog.c
Log:
Zach Welch <zw at superlucidity.net>  fix warnings in usbprog

Modified: trunk/src/jtag/usbprog.c
===================================================================
--- trunk/src/jtag/usbprog.c	2009-04-19 08:05:54 UTC (rev 1464)
+++ trunk/src/jtag/usbprog.c	2009-04-19 08:15:32 UTC (rev 1465)
@@ -347,18 +347,16 @@
 
 	usbprog_jtag_tms_send(usbprog_jtag_handle);
 
-	if (type == SCAN_OUT)
-	{
-		usbprog_jtag_write_tdi(usbprog_jtag_handle,buffer, scan_size);
+	void (*f)(struct usbprog_jtag *usbprog_jtag, char * buffer, int size);
+	switch (type) {
+	case SCAN_OUT: f = &usbprog_jtag_write_tdi; break;
+	case SCAN_IN: f = &usbprog_jtag_read_tdo; break;
+	case SCAN_IO: f = &usbprog_jtag_write_and_read; break;
+	default:
+		LOG_ERROR("unknown scan type: %i", type);
+		exit(-1);
 	}
-	if (type == SCAN_IN)
-	{
-		usbprog_jtag_read_tdo(usbprog_jtag_handle,buffer, scan_size);
-	}
-	if (type == SCAN_IO)
-	{
-		usbprog_jtag_write_and_read(usbprog_jtag_handle,buffer, scan_size);
-	}
+	f(usbprog_jtag_handle, (char *)buffer, scan_size);
 
 	if (ir_scan)
 		tap_set_state(TAP_IRPAUSE);



From oharboe at mail.berlios.de  Sun Apr 19 10:17:05 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Sun, 19 Apr 2009 10:17:05 +0200
Subject: [Openocd-svn] r1466 - trunk/src/flash
Message-ID: <200904190817.n3J8H5qt028178@sheep.berlios.de>

Author: oharboe
Date: 2009-04-19 10:16:58 +0200 (Sun, 19 Apr 2009)
New Revision: 1466

Modified:
   trunk/src/flash/aduc702x.c
   trunk/src/flash/at91sam7.c
   trunk/src/flash/cfi.c
   trunk/src/flash/ecos.c
   trunk/src/flash/flash.c
   trunk/src/flash/lpc2000.c
   trunk/src/flash/lpc2000.h
   trunk/src/flash/lpc288x.c
   trunk/src/flash/lpc3180_nand_controller.c
   trunk/src/flash/nand.c
   trunk/src/flash/ocl.c
   trunk/src/flash/pic32mx.c
   trunk/src/flash/stellaris.c
   trunk/src/flash/stm32x.c
   trunk/src/flash/str7x.c
   trunk/src/flash/str9x.c
   trunk/src/flash/str9xpec.c
   trunk/src/flash/tms470.c
Log:
Zach Welch <zw at superlucidity.net> fix signed/unsigned comparisons

Modified: trunk/src/flash/aduc702x.c
===================================================================
--- trunk/src/flash/aduc702x.c	2009-04-19 08:15:32 UTC (rev 1465)
+++ trunk/src/flash/aduc702x.c	2009-04-19 08:16:58 UTC (rev 1466)
@@ -331,7 +331,7 @@
  * working area available. */
 static int aduc702x_write_single(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
 {
-	int x;
+	u32 x;
         u8 b;
 	target_t *target = bank->target;
 	

Modified: trunk/src/flash/at91sam7.c
===================================================================
--- trunk/src/flash/at91sam7.c	2009-04-19 08:15:32 UTC (rev 1465)
+++ trunk/src/flash/at91sam7.c	2009-04-19 08:16:58 UTC (rev 1466)
@@ -937,7 +937,8 @@
 static int at91sam7_protect(struct flash_bank_s *bank, int set, int first, int last)
 {
 	u32 cmd;
-	u32 sector, pagen;
+	int sector;
+	u32 pagen;
 
 	at91sam7_flash_bank_t *at91sam7_info = bank->driver_priv;
 

Modified: trunk/src/flash/cfi.c
===================================================================
--- trunk/src/flash/cfi.c	2009-04-19 08:15:32 UTC (rev 1465)
+++ trunk/src/flash/cfi.c	2009-04-19 08:16:58 UTC (rev 1466)
@@ -1113,7 +1113,7 @@
 	};
 	u8 target_code[4*CFI_MAX_INTEL_CODESIZE];
 	const u32 *target_code_src;
-	int target_code_size;
+	u32 target_code_size;
 	int retval = ERROR_OK;
 
 
@@ -1969,7 +1969,7 @@
 			bufferwsize/=(bank->bus_width / bank->chip_width);
 
 			/* fall back to memory writes */
-			while (count >= bank->bus_width)
+			while (count >= (u32)bank->bus_width)
 			{
 				int fallback;
 				if ((write_p & 0xff) == 0)
@@ -2268,7 +2268,7 @@
 
 		LOG_DEBUG("size: 0x%x, interface desc: %i, max buffer write size: %x", 1 << cfi_info->dev_size, cfi_info->interface_desc, (1 << cfi_info->max_buf_write_size));
 
-		if (((1 << cfi_info->dev_size) * bank->bus_width / bank->chip_width) != bank->size)
+		if ((u32)((1 << cfi_info->dev_size) * bank->bus_width / bank->chip_width) != bank->size)
 		{
 			LOG_WARNING("configuration specifies 0x%x size, but a 0x%x size flash was found", bank->size, 1 << cfi_info->dev_size);
 		}
@@ -2361,7 +2361,7 @@
 
 		for (i = 0; i < cfi_info->num_erase_regions; i++)
 		{
-			int j;
+			u32 j;
 			for (j = 0; j < (cfi_info->erase_region_info[i] & 0xffff) + 1; j++)
 			{
 				bank->sectors[sector].offset = offset;

Modified: trunk/src/flash/ecos.c
===================================================================
--- trunk/src/flash/ecos.c	2009-04-19 08:15:32 UTC (rev 1465)
+++ trunk/src/flash/ecos.c	2009-04-19 08:16:58 UTC (rev 1466)
@@ -328,7 +328,7 @@
 		return retval;
 
 
-	int i;
+	u32 i;
 	for (i=0; i<len; i+=chunk)
 	{
 		int t=len-i;

Modified: trunk/src/flash/flash.c
===================================================================
--- trunk/src/flash/flash.c	2009-04-19 08:15:32 UTC (rev 1465)
+++ trunk/src/flash/flash.c	2009-04-19 08:16:58 UTC (rev 1466)
@@ -346,7 +346,7 @@
 static int handle_flash_info_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	flash_bank_t *p;
-	int i = 0;
+	u32 i = 0;
 	int j = 0;
 	int retval;
 
@@ -726,12 +726,12 @@
 	u8 chunk[1024];
 	u32 wrote = 0;
 	u32 cur_size = 0;
-	int chunk_count;
+	u32 chunk_count;
 	char *duration_text;
 	duration_t duration;
 	target_t *target = get_current_target(cmd_ctx);
 	u32 i;
-	int wordsize;
+	u32 wordsize;
 
 	if (argc != 3)
 	{
@@ -1129,7 +1129,7 @@
 	u8 buffer[1024];
 	int buffer_size = sizeof(buffer);
 	int i;
-	int nBytes;
+	u32 nBytes;
 
 	if (bank->target->state != TARGET_HALTED)
 	{
@@ -1139,12 +1139,12 @@
 
 	for (i = 0; i < bank->num_sectors; i++)
 	{
-		int j;
+		u32 j;
 		bank->sectors[i].is_erased = 1;
 
 		for (j = 0; j < bank->sectors[i].size; j += buffer_size)
 		{
-			int chunk;
+			u32 chunk;
 			int retval;
 			chunk = buffer_size;
 			if (chunk > (j - bank->sectors[i].size))

Modified: trunk/src/flash/lpc2000.c
===================================================================
--- trunk/src/flash/lpc2000.c	2009-04-19 08:15:32 UTC (rev 1465)
+++ trunk/src/flash/lpc2000.c	2009-04-19 08:16:58 UTC (rev 1466)
@@ -587,7 +587,7 @@
 		else
 		{
 			u8 *last_buffer = malloc(thisrun_bytes);
-			int i;
+			u32 i;
 			memcpy(last_buffer, buffer + bytes_written, bytes_remaining);
 			for (i = bytes_remaining; i < thisrun_bytes; i++)
 				last_buffer[i] = 0xff;

Modified: trunk/src/flash/lpc2000.h
===================================================================
--- trunk/src/flash/lpc2000.h	2009-04-19 08:15:32 UTC (rev 1465)
+++ trunk/src/flash/lpc2000.h	2009-04-19 08:16:58 UTC (rev 1466)
@@ -32,7 +32,7 @@
 	int cmd51_can_256b;
 	int cmd51_can_8192b;
 	int calc_checksum;
-	int cmd51_max_buffer;
+	u32 cmd51_max_buffer;
 } lpc2000_flash_bank_t;
 
 enum lpc2000_status_codes

Modified: trunk/src/flash/lpc288x.c
===================================================================
--- trunk/src/flash/lpc288x.c	2009-04-19 08:15:32 UTC (rev 1465)
+++ trunk/src/flash/lpc288x.c	2009-04-19 08:16:58 UTC (rev 1466)
@@ -328,10 +328,11 @@
 static int lpc288x_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
 {
 	u8 page_buffer[FLASH_PAGE_SIZE];
-	u32 i, status, source_offset,dest_offset;
+	u32 status, source_offset,dest_offset;
 	target_t *target = bank->target;
 	u32 bytes_remaining = count;
 	u32 first_sector, last_sector, sector, page;
+	int i;
 	
 	/* probed? halted? */
 	status = lpc288x_system_ready(bank);

Modified: trunk/src/flash/lpc3180_nand_controller.c
===================================================================
--- trunk/src/flash/lpc3180_nand_controller.c	2009-04-19 08:15:32 UTC (rev 1465)
+++ trunk/src/flash/lpc3180_nand_controller.c	2009-04-19 08:16:58 UTC (rev 1466)
@@ -546,7 +546,7 @@
 			return ERROR_NAND_OPERATION_NOT_SUPPORTED;
 		}
 		
-		if (data_size > device->page_size)
+		if (data_size > (u32)device->page_size)
 		{
 			LOG_ERROR("data size exceeds page size");
 			return ERROR_NAND_OPERATION_NOT_SUPPORTED;
@@ -681,7 +681,7 @@
 		}
 #endif
 		
-		if (data_size > device->page_size)
+		if (data_size > (u32)device->page_size)
 		{
 			LOG_ERROR("data size exceeds page size");
 			return ERROR_NAND_OPERATION_NOT_SUPPORTED;
@@ -741,7 +741,7 @@
 			target_write_u32(target, 0x200b8000, NAND_CMD_READSTART);
 		}
 		
-		while (page_bytes_done < device->page_size)
+		while (page_bytes_done < (u32)device->page_size)
 		{
 			/* MLC_ECC_AUTO_DEC_REG = dummy */
 			target_write_u32(target, 0x200b8014, 0xaa55aa55);

Modified: trunk/src/flash/nand.c
===================================================================
--- trunk/src/flash/nand.c	2009-04-19 08:15:32 UTC (rev 1465)
+++ trunk/src/flash/nand.c	2009-04-19 08:16:58 UTC (rev 1466)
@@ -834,7 +834,7 @@
 
 int nand_read_page_raw(struct nand_device_s *device, u32 page, u8 *data, u32 data_size, u8 *oob, u32 oob_size)
 {
-	int i;
+	u32 i;
 	
 	if (!device->device)
 		return ERROR_NAND_DEVICE_NOT_PROBED;
@@ -948,7 +948,7 @@
 
 int nand_write_page_raw(struct nand_device_s *device, u32 page, u8 *data, u32 data_size, u8 *oob, u32 oob_size)
 {
-	int i;
+	u32 i;
 	int retval;
 	u8 status;
 	
@@ -1400,7 +1400,7 @@
 
 			if (oob_format & NAND_OOB_SW_ECC)
 			{
-				int i, j;
+				u32 i, j;
 				u8 ecc[3];
 				memset(oob, 0xff, oob_size);
 				for (i = 0, j = 0; i < page_size; i += 256) {

Modified: trunk/src/flash/ocl.c
===================================================================
--- trunk/src/flash/ocl.c	2009-04-19 08:15:32 UTC (rev 1465)
+++ trunk/src/flash/ocl.c	2009-04-19 08:16:58 UTC (rev 1466)
@@ -66,8 +66,8 @@
 typedef struct ocl_priv_s
 {
 	arm_jtag_t *jtag_info;
-	int buflen;
-	int bufalign;
+	unsigned int buflen;
+	unsigned int bufalign;
 } ocl_priv_t;
 
 static int ocl_register_commands(struct command_context_s *cmd_ctx)

Modified: trunk/src/flash/pic32mx.c
===================================================================
--- trunk/src/flash/pic32mx.c	2009-04-19 08:15:32 UTC (rev 1465)
+++ trunk/src/flash/pic32mx.c	2009-04-19 08:16:58 UTC (rev 1466)
@@ -526,7 +526,7 @@
 	u32 address = bank->base + offset;
 	u32 bytes_written = 0;
 	u32 status;
-	u32 retval;
+	int retval;
 
 	if (bank->target->state != TARGET_HALTED)
 	{

Modified: trunk/src/flash/stellaris.c
===================================================================
--- trunk/src/flash/stellaris.c	2009-04-19 08:15:32 UTC (rev 1465)
+++ trunk/src/flash/stellaris.c	2009-04-19 08:16:58 UTC (rev 1466)
@@ -570,12 +570,12 @@
 		return ERROR_FLASH_OPERATION_FAILED;
 	}	
 	
-	if ((first < 0) || (last < first) || (last >= stellaris_info->num_pages))
+	if ((first < 0) || (last < first) || (last >= (int)stellaris_info->num_pages))
 	{
 		return ERROR_FLASH_SECTOR_INVALID;
 	}
 	
-	if ((first == 0) && (last == (stellaris_info->num_pages-1)))
+	if ((first == 0) && (last == ((int)stellaris_info->num_pages-1)))
 	{
 		return stellaris_mass_erase(bank);
 	}
@@ -821,7 +821,7 @@
 	u32 words_remaining = (count / 4);
 	u32 bytes_remaining = (count & 0x00000003);
 	u32 bytes_written = 0;
-	u32 retval;
+	int retval;
 	
 	if (bank->target->state != TARGET_HALTED)
 	{

Modified: trunk/src/flash/stm32x.c
===================================================================
--- trunk/src/flash/stm32x.c	2009-04-19 08:15:32 UTC (rev 1465)
+++ trunk/src/flash/stm32x.c	2009-04-19 08:16:58 UTC (rev 1466)
@@ -603,7 +603,7 @@
 	u32 address = bank->base + offset;
 	u32 bytes_written = 0;
 	u8 status;
-	u32 retval;
+	int retval;
 	
 	if (bank->target->state != TARGET_HALTED)
 	{

Modified: trunk/src/flash/str7x.c
===================================================================
--- trunk/src/flash/str7x.c	2009-04-19 08:15:32 UTC (rev 1465)
+++ trunk/src/flash/str7x.c	2009-04-19 08:16:58 UTC (rev 1466)
@@ -478,7 +478,7 @@
 	u32 address = bank->base + offset;
 	u32 bytes_written = 0;
 	u32 cmd;
-	u32 retval;
+	int retval;
 	u32 check_address = offset;
 	int i;
 	

Modified: trunk/src/flash/str9x.c
===================================================================
--- trunk/src/flash/str9x.c	2009-04-19 08:15:32 UTC (rev 1465)
+++ trunk/src/flash/str9x.c	2009-04-19 08:16:58 UTC (rev 1466)
@@ -509,7 +509,7 @@
 	u32 address = bank->base + offset;
 	u32 bytes_written = 0;
 	u8 status;
-	u32 retval;
+	int retval;
 	u32 check_address = offset;
 	u32 bank_adr;
 	int i;

Modified: trunk/src/flash/str9xpec.c
===================================================================
--- trunk/src/flash/str9xpec.c	2009-04-19 08:15:32 UTC (rev 1465)
+++ trunk/src/flash/str9xpec.c	2009-04-19 08:16:58 UTC (rev 1466)
@@ -687,8 +687,8 @@
 	scan_field_t field;
 	u8 *scanbuf;
 	int i;
-	u32 first_sector = 0;
-	u32 last_sector = 0;
+	int first_sector = 0;
+	int last_sector = 0;
 
 	tap = str9xpec_info->tap;
 

Modified: trunk/src/flash/tms470.c
===================================================================
--- trunk/src/flash/tms470.c	2009-04-19 08:15:32 UTC (rev 1465)
+++ trunk/src/flash/tms470.c	2009-04-19 08:16:58 UTC (rev 1466)
@@ -955,7 +955,8 @@
 {
 	target_t *target = bank->target;
 	u32 glbctrl, fmbac2, orig_fmregopt, fmbsea, fmbseb, fmmaxpp, fmmstat;
-	int i, result = ERROR_OK;
+	int result = ERROR_OK;
+	u32 i;
 
 	if (target->state != TARGET_HALTED)
 	{



From oharboe at mail.berlios.de  Sun Apr 19 10:18:02 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Sun, 19 Apr 2009 10:18:02 +0200
Subject: [Openocd-svn] r1467 - trunk/src/flash
Message-ID: <200904190818.n3J8I23v028234@sheep.berlios.de>

Author: oharboe
Date: 2009-04-19 10:18:01 +0200 (Sun, 19 Apr 2009)
New Revision: 1467

Modified:
   trunk/src/flash/tms470.c
Log:
Zach Welch <zw at superlucidity.net> trim logic in tms470.c

Modified: trunk/src/flash/tms470.c
===================================================================
--- trunk/src/flash/tms470.c	2009-04-19 08:16:58 UTC (rev 1466)
+++ trunk/src/flash/tms470.c	2009-04-19 08:18:01 UTC (rev 1467)
@@ -196,7 +196,7 @@
 	case 0x2b:
 		part_name = "TMS470R1A288";
 
-		if ((bank->base >= 0x00000000) && (bank->base < 0x00008000))
+		if (bank->base < 0x00008000)
 		{
 			tms470_info->ordinal = 0;
 			bank->base = 0x00000000;
@@ -232,7 +232,7 @@
 	case 0x2d:
 		part_name = "TMS470R1A384";
 
-		if ((bank->base >= 0x00000000) && (bank->base < 0x00020000))
+		if (bank->base < 0x00020000)
 		{
 			tms470_info->ordinal = 0;
 			bank->base = 0x00000000;



From oharboe at mail.berlios.de  Sun Apr 19 10:18:48 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Sun, 19 Apr 2009 10:18:48 +0200
Subject: [Openocd-svn] r1468 - trunk/src/flash
Message-ID: <200904190818.n3J8ImWF028267@sheep.berlios.de>

Author: oharboe
Date: 2009-04-19 10:18:46 +0200 (Sun, 19 Apr 2009)
New Revision: 1468

Modified:
   trunk/src/flash/nand.c
Log:
Zach Welch <zw at superlucidity.net> add missing initializers in nand.c


Modified: trunk/src/flash/nand.c
===================================================================
--- trunk/src/flash/nand.c	2009-04-19 08:18:01 UTC (rev 1467)
+++ trunk/src/flash/nand.c	2009-04-19 08:18:46 UTC (rev 1468)
@@ -165,7 +165,7 @@
 	{"NAND 2GiB 1,8V 16-bit",	0xB5, 0, 2048, 0, LP_OPTIONS16},
 	{"NAND 2GiB 3,3V 16-bit",	0xC5, 0, 2048, 0, LP_OPTIONS16},
 
-	{NULL, 0,}
+	{NULL, 0, 0, 0, 0, 0 }
 };
 
 /* Manufacturer ID list



From oharboe at mail.berlios.de  Sun Apr 19 14:06:52 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Sun, 19 Apr 2009 14:06:52 +0200
Subject: [Openocd-svn] r1469 - trunk/src/flash
Message-ID: <200904191206.n3JC6qip026977@sheep.berlios.de>

Author: oharboe
Date: 2009-04-19 14:06:49 +0200 (Sun, 19 Apr 2009)
New Revision: 1469

Modified:
   trunk/src/flash/cfi.c
   trunk/src/flash/cfi.h
   trunk/src/flash/non_cfi.c
   trunk/src/flash/non_cfi.h
Log:
Michael Schwingen <rincewind at discworld.dascon.de>  enhanced non-CFI flash support

Modified: trunk/src/flash/cfi.c
===================================================================
--- trunk/src/flash/cfi.c	2009-04-19 08:18:46 UTC (rev 1468)
+++ trunk/src/flash/cfi.c	2009-04-19 12:06:49 UTC (rev 1469)
@@ -1,6 +1,8 @@
 /***************************************************************************
  *   Copyright (C) 2005, 2007 by Dominic Rath                              *
  *   Dominic.Rath at gmx.de                                                   *
+ *   Copyright (C) 2009 Michael Schwingen                                  *
+ *   michael at schwingen.org                                                 *
  *                                                                         *
  *   This program is free software; you can redistribute it and/or modify  *
  *   it under the terms of the GNU General Public License as published by  *
@@ -82,24 +84,6 @@
 static void cfi_fixup_0002_unlock_addresses(flash_bank_t *flash, void *param);
 static void cfi_fixup_atmel_reversed_erase_regions(flash_bank_t *flash, void *param);
 
-/* fixup after identifying JEDEC manufactuer and ID */
-static cfi_fixup_t cfi_jedec_fixups[] = {
-	{CFI_MFR_SST, 0x00D4, cfi_fixup_non_cfi, NULL},
-	{CFI_MFR_SST, 0x00D5, cfi_fixup_non_cfi, NULL},
-	{CFI_MFR_SST, 0x00D6, cfi_fixup_non_cfi, NULL},
-	{CFI_MFR_SST, 0x00D7, cfi_fixup_non_cfi, NULL},
-	{CFI_MFR_SST, 0x2780, cfi_fixup_non_cfi, NULL},
-	{CFI_MFR_ST, 0x00D5, cfi_fixup_non_cfi, NULL},
-	{CFI_MFR_ST, 0x00D6, cfi_fixup_non_cfi, NULL},
-	{CFI_MFR_AMD, 0x2223, cfi_fixup_non_cfi, NULL},
-	{CFI_MFR_AMD, 0x22ab, cfi_fixup_non_cfi, NULL},
-	{CFI_MFR_FUJITSU, 0x226b, cfi_fixup_non_cfi, NULL},
-	{CFI_MFR_AMIC, 0xb31a, cfi_fixup_non_cfi, NULL},
-	{CFI_MFR_MX, 0x225b, cfi_fixup_non_cfi, NULL},
-	{CFI_MFR_AMD, 0x225b, cfi_fixup_non_cfi, NULL},
-	{0, 0, NULL, NULL}
-};
-
 /* fixup after reading cmdset 0002 primary query table */
 static cfi_fixup_t cfi_0002_fixups[] = {
 	{CFI_MFR_SST, 0x00D4, cfi_fixup_0002_unlock_addresses, &cfi_unlock_addresses[CFI_UNLOCK_5555_2AAA]},
@@ -633,6 +617,8 @@
 {
 	cfi_flash_bank_t *cfi_info;
 	int i;
+	(void) cmd_ctx;
+	(void) cmd;
 
 	if (argc < 6)
 	{
@@ -964,7 +950,7 @@
 			cfi_intel_protect(bank, set, first, last);
 			break;
 		default:
-			LOG_ERROR("cfi primary command set %i unsupported", cfi_info->pri_id);
+			LOG_ERROR("protect: cfi primary command set %i unsupported", cfi_info->pri_id);
 			break;
 	}
 
@@ -1843,7 +1829,7 @@
 			return cfi_intel_write_words(bank, word, wordcount, address);
 			break;
 		case 2:
-			return cfi_spansion_write_words(bank, word, wordcount, address); 
+			return cfi_spansion_write_words(bank, word, wordcount, address);
 			break;
 		default:
 			LOG_ERROR("cfi primary command set %i unsupported", cfi_info->pri_id);
@@ -1965,7 +1951,7 @@
 				LOG_ERROR("Unsupported chip width %d", bank->chip_width);
 				return ERROR_FLASH_OPERATION_FAILED;
 			}
-			
+
 			bufferwsize/=(bank->bus_width / bank->chip_width);
 
 			/* fall back to memory writes */
@@ -2064,6 +2050,7 @@
 
 static void cfi_fixup_atmel_reversed_erase_regions(flash_bank_t *bank, void *param)
 {
+	(void) param;
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
 	cfi_spansion_pri_ext_t *pri_ext = cfi_info->pri_ext;
 
@@ -2075,6 +2062,7 @@
 	int i;
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
 	cfi_spansion_pri_ext_t *pri_ext = cfi_info->pri_ext;
+	(void) param;
 
 	if ((pri_ext->_reversed_geometry) || (pri_ext->TopBottom == 3))
 	{
@@ -2110,7 +2098,6 @@
 	int num_sectors = 0;
 	int i;
 	int sector = 0;
-	u32 offset = 0;
 	u32 unlock1 = 0x555;
 	u32 unlock2 = 0x2aa;
 	int retval;
@@ -2175,6 +2162,7 @@
 		}
 	}
 
+	LOG_INFO("Flash Manufacturer/Device: 0x%04x 0x%04x", cfi_info->manufacturer, cfi_info->device_id);
 	/* switch back to read array mode */
 	cfi_command(bank, 0xf0, command);
 	if((retval = target->type->write_memory(target, flash_address(bank, 0, 0x00), bank->bus_width, 1, command)) != ERROR_OK)
@@ -2187,7 +2175,8 @@
 		return retval;
 	}
 
-	cfi_fixup(bank, cfi_jedec_fixups);
+	/* check device/manufacturer ID for known non-CFI flashes. */
+	cfi_fixup_non_cfi(bank);
 
 	/* query only if this is a CFI compatible flash,
 	 * otherwise the relevant info has already been filled in
@@ -2225,7 +2214,7 @@
 			{
 				return retval;
 			}
-			LOG_ERROR("Could not probe bank");
+			LOG_ERROR("Could not probe bank: no QRY");
 			return ERROR_FLASH_BANK_INVALID;
 		}
 
@@ -2261,18 +2250,13 @@
 			(1 << cfi_info->block_erase_timeout_max) * (1 << cfi_info->block_erase_timeout_typ),
 			(1 << cfi_info->chip_erase_timeout_max) * (1 << cfi_info->chip_erase_timeout_typ));
 
-		cfi_info->dev_size = cfi_query_u8(bank, 0, 0x27);
+		cfi_info->dev_size = 1<<cfi_query_u8(bank, 0, 0x27);
 		cfi_info->interface_desc = cfi_query_u16(bank, 0, 0x28);
 		cfi_info->max_buf_write_size = cfi_query_u16(bank, 0, 0x2a);
 		cfi_info->num_erase_regions = cfi_query_u8(bank, 0, 0x2c);
 
-		LOG_DEBUG("size: 0x%x, interface desc: %i, max buffer write size: %x", 1 << cfi_info->dev_size, cfi_info->interface_desc, (1 << cfi_info->max_buf_write_size));
+		LOG_DEBUG("size: 0x%x, interface desc: %i, max buffer write size: %x", cfi_info->dev_size, cfi_info->interface_desc, (1 << cfi_info->max_buf_write_size));
 
-		if ((u32)((1 << cfi_info->dev_size) * bank->bus_width / bank->chip_width) != bank->size)
-		{
-			LOG_WARNING("configuration specifies 0x%x size, but a 0x%x size flash was found", bank->size, 1 << cfi_info->dev_size);
-		}
-
 		if (cfi_info->num_erase_regions)
 		{
 			cfi_info->erase_region_info = malloc(4 * cfi_info->num_erase_regions);
@@ -2338,6 +2322,11 @@
 			break;
 	}
 
+	if ((cfi_info->dev_size * bank->bus_width / bank->chip_width) != bank->size)
+	{
+		LOG_WARNING("configuration specifies 0x%x size, but a 0x%x size flash was found", bank->size, cfi_info->dev_size);
+	}
+
 	if (cfi_info->num_erase_regions == 0)
 	{
 		/* a device might have only one erase block, spanning the whole device */
@@ -2351,6 +2340,8 @@
 	}
 	else
 	{
+		u32 offset = 0;
+
 		for (i = 0; i < cfi_info->num_erase_regions; i++)
 		{
 			num_sectors += (cfi_info->erase_region_info[i] & 0xffff) + 1;
@@ -2372,8 +2363,12 @@
 				sector++;
 			}
 		}
+		if (offset != cfi_info->dev_size)
+		{
+			LOG_WARNING("CFI size is 0x%x, but total sector size is 0x%x", cfi_info->dev_size, offset);
+		}
 	}
-	
+
 	cfi_info->probed = 1;
 
 	return ERROR_OK;
@@ -2504,7 +2499,7 @@
 	}
 
 	if (cfi_info->not_cfi == 0)
-	printed = snprintf(buf, buf_size, "\ncfi information:\n");
+		printed = snprintf(buf, buf_size, "\ncfi information:\n");
 	else
 		printed = snprintf(buf, buf_size, "\nnon-cfi flash:\n");
 	buf += printed;
@@ -2546,7 +2541,7 @@
 	buf_size -= printed;
 
 		printed = snprintf(buf, buf_size, "size: 0x%x, interface desc: %i, max buffer write size: %x\n",
-		                   1 << cfi_info->dev_size,
+		                   cfi_info->dev_size,
 		                   cfi_info->interface_desc,
 		                   1 << cfi_info->max_buf_write_size);
 	buf += printed;

Modified: trunk/src/flash/cfi.h
===================================================================
--- trunk/src/flash/cfi.h	2009-04-19 08:18:46 UTC (rev 1468)
+++ trunk/src/flash/cfi.h	2009-04-19 12:06:49 UTC (rev 1469)
@@ -26,8 +26,8 @@
 typedef struct cfi_flash_bank_s
 {
 	working_area_t *write_algorithm;
-	
 
+
 	int x16_as_x8;
 	int jedec_probe;
 	int not_cfi;
@@ -59,7 +59,7 @@
 	u8 chip_erase_timeout_max;
 
 	/* flash geometry */
-	u8 dev_size;
+	u32 dev_size;
 	u16 interface_desc;
 	u16 max_buf_write_size;
 	u8 num_erase_regions;

Modified: trunk/src/flash/non_cfi.c
===================================================================
--- trunk/src/flash/non_cfi.c	2009-04-19 08:18:46 UTC (rev 1468)
+++ trunk/src/flash/non_cfi.c	2009-04-19 12:06:49 UTC (rev 1469)
@@ -1,6 +1,8 @@
 /***************************************************************************
  *   Copyright (C) 2007 by Dominic Rath                                    *
  *   Dominic.Rath at gmx.de                                                   *
+ *   Copyright (C) 2009 Michael Schwingen                                  *
+ *   michael at schwingen.org                                                 *
  *                                                                         *
  *   This program is free software; you can redistribute it and/or modify  *
  *   it under the terms of the GNU General Public License as published by  *
@@ -29,212 +31,279 @@
 #include "cfi.h"
 #include "non_cfi.h"
 
+#define KB 1024
+#define MB (1024*1024)
+#define ERASE_REGION(num, size) (((size/256)<<16)|(num-1))
+
 /* non-CFI compatible flashes */
 non_cfi_t non_cfi_flashes[] = {
 	{
 		.mfr = CFI_MFR_SST,
 		.id = 0xd4,
 		.pri_id = 0x02,
-		.dev_size = 0x10,			/* 2^16 = 64KB */
+		.dev_size = 64*KB,
 		.interface_desc = 0x0,		/* x8 only device */
 		.max_buf_write_size = 0x0,
 		.num_erase_regions = 1,
 		.erase_region_info =
 		{
-			0x0010000f,				/* 16x  4KB */
-			0x00000000
+			ERASE_REGION(16, 4*KB)
 		}
 	},
 	{
 		.mfr = CFI_MFR_SST,
 		.id = 0xd5,
 		.pri_id = 0x02,
-		.dev_size = 0x11,			/* 2^17 = 128KB */
+		.dev_size = 128*KB,
 		.interface_desc = 0x0,		/* x8 only device */
 		.max_buf_write_size = 0x0,
 		.num_erase_regions = 1,
 		.erase_region_info =
 		{
-			0x0010001f,
-			0x00000000
+			ERASE_REGION(32, 4*KB)
 		}
 	},
 	{
 		.mfr = CFI_MFR_SST,
 		.id = 0xd6,
 		.pri_id = 0x02,
-		.dev_size = 0x12,			/* 2^18 = 256KB */
+		.dev_size = 256*KB,
 		.interface_desc = 0x0,		/* x8 only device */
 		.max_buf_write_size = 0x0,
 		.num_erase_regions = 1,
 		.erase_region_info =
 		{
-			0x0010003f,
-			0x00000000
+			ERASE_REGION(64, 4*KB)
 		}
 	},
 	{
 		.mfr = CFI_MFR_SST,
 		.id = 0xd7,
 		.pri_id = 0x02,
-		.dev_size = 0x13,			/* 2^19 = 512KB */
+		.dev_size = 512*KB,
 		.interface_desc = 0x0,		/* x8 only device */
 		.max_buf_write_size = 0x0,
 		.num_erase_regions = 1,
 		.erase_region_info =
 		{
-			0x0010007f,
-			0x00000000
+			ERASE_REGION(128, 4*KB)
 		}
 	},
 	{
 		.mfr = CFI_MFR_SST,
 		.id = 0x2780,
 		.pri_id = 0x02,
-		.dev_size = 0x13,			/* 2^19 = 512KB */
+		.dev_size = 512*KB,
 		.interface_desc = 0x2,		/* x8 or x16 device */
 		.max_buf_write_size = 0x0,
 		.num_erase_regions = 1,
 		.erase_region_info =
 		{
-			0x0010007f,
-			0x00000000
+			ERASE_REGION(128, 4*KB)
 		}
 	},
 	{
 		.mfr = CFI_MFR_ST,
 		.id = 0xd6,					/* ST29F400BB */
 		.pri_id = 0x02,
-		.dev_size = 0x13,			/* 2^19 = 512KB */
+		.dev_size = 512*KB,
 		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
 		.max_buf_write_size = 0x0,
 		.num_erase_regions = 4,
 		.erase_region_info =
 		{
-			0x00400000,		/* 1x 16KB */
-			0x00200001,		/* 2x  8KB */
-			0x00800000,		/* 1x 32KB */
-			0x01000006,		/* 7x 64KB */
-			0x00000000
+			ERASE_REGION( 1, 16*KB),
+			ERASE_REGION( 2,  8*KB),
+			ERASE_REGION( 1, 32*KB),
+			ERASE_REGION( 7, 64*KB)
 		}
 	},
 	{
 		.mfr = CFI_MFR_ST,
 		.id = 0xd5,					/* ST29F400BT */
 		.pri_id = 0x02,
-		.dev_size = 0x13,			/* 2^19 = 512KB */
+		.dev_size = 512*KB,
 		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
 		.max_buf_write_size = 0x0,
 		.num_erase_regions = 4,
 		.erase_region_info =
 		{
-			0x01000006,		/* 7x 64KB */
-			0x00800000,		/* 1x 32KB */
-			0x00200001,		/* 2x  8KB */
-			0x00400000,		/* 1x 16KB */
-			0x00000000
+			ERASE_REGION( 7, 64*KB),
+			ERASE_REGION( 1, 32*KB),
+			ERASE_REGION( 2,  8*KB),
+			ERASE_REGION( 1, 16*KB)
 		}
 	},
 	{
 		.mfr = CFI_MFR_AMD,
 		.id = 0x22ab,				/* AM29F400BB */
 		.pri_id = 0x02,
-		.dev_size = 0x13,			/* 2^19 = 512KB */
+		.dev_size = 512*KB,
 		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
 		.max_buf_write_size = 0x0,
 		.num_erase_regions = 4,
 		.erase_region_info =
 		{
-			0x00400000,		/* 1x 16KB */
-			0x00200001,		/* 2x  8KB */
-			0x00800000,		/* 1x 32KB */
-			0x01000006,		/* 7x 64KB */
-			0x00000000
+			ERASE_REGION( 1, 16*KB),
+			ERASE_REGION( 2,  8*KB),
+			ERASE_REGION( 1, 32*KB),
+			ERASE_REGION( 7, 64*KB)
 		}
 	},
 	{
 		.mfr = CFI_MFR_AMD,
 		.id = 0x2223,				/* AM29F400BT */
 		.pri_id = 0x02,
-		.dev_size = 0x13,			/* 2^19 = 512KB */
+		.dev_size = 512*KB,
 		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
 		.max_buf_write_size = 0x0,
 		.num_erase_regions = 4,
 		.erase_region_info =
 		{
-			0x01000006,		/* 7x 64KB */
-			0x00800000,		/* 1x 32KB */
-			0x00200001,		/* 2x  8KB */
-			0x00400000,		/* 1x 16KB */
-			0x00000000
+			ERASE_REGION( 7, 64*KB),
+			ERASE_REGION( 1, 32*KB),
+			ERASE_REGION( 2,  8*KB),
+			ERASE_REGION( 1, 16*KB)
 		}
 	},
 	{
 		.mfr = CFI_MFR_FUJITSU,
 		.id = 0x226b,				/* AM29SL800DB */
 		.pri_id = 0x02,
-		.dev_size = 0x14,			/* 2^20 = 1MB */
+		.dev_size = 1*MB,
 		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
 		.max_buf_write_size = 0x0,
 		.num_erase_regions = 4,
 		.erase_region_info =
 		{
-			0x00400000,				/* 1x 16KB */
-			0x00200001,				/* 2x 8KB */
-			0x00800000,				/* 1x 32KB */
-			0x0100000e,				/* 15x 64KB */
-			0x00000000
+			ERASE_REGION( 1, 16*KB),
+			ERASE_REGION( 2,  8*KB),
+			ERASE_REGION( 1, 32*KB),
+			ERASE_REGION(15, 64*KB)
 		}
 	},
 	{
 		.mfr = CFI_MFR_AMIC,
 		.id = 0xb31a,				/* A29L800A */
 		.pri_id = 0x02,
-		.dev_size = 0x14,
+		.dev_size = 1*MB,
 		.interface_desc = 0x2,
 		.max_buf_write_size = 0x0,
 		.num_erase_regions = 4,
 		.erase_region_info =
 		{
-			0x00400000,				/* 1x 16KB */
-			0x00200001,				/* 2x 8KB */
-			0x00800000,				/* 1x 32KB */
-			0x0100000e,				/* 15x 64KB */
-			0x00000000
+			ERASE_REGION( 1, 16*KB),
+			ERASE_REGION( 2,  8*KB),
+			ERASE_REGION( 1, 32*KB),
+			ERASE_REGION(15, 64*KB)
 		}
 	},
 	{
 		.mfr = CFI_MFR_MX,
 		.id = 0x225b,				/* MX29LV800B */
 		.pri_id = 0x02,
-		.dev_size = 0x14,			/* 2^20 = 1MB */
+		.dev_size = 1*MB,
 		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
 		.max_buf_write_size = 0x0,
 		.num_erase_regions = 4,
 		.erase_region_info =
 		{
-                        0x00400000,             /* 1x 16KB */
-                        0x00200001,             /* 2x 8KB */
-                        0x00800000,             /* 1x 32KB */
-                        0x0100000e,             /* 15x 64KB */
-			0x00000000
+			ERASE_REGION( 1, 16*KB),
+			ERASE_REGION( 2, 8*KB),
+			ERASE_REGION( 1, 32*KB),
+			ERASE_REGION(15, 64*KB)
 		}
 	},
+
 	{
+		.mfr = CFI_MFR_MX,
+		.id = 0x2249,				/* MX29LV160AB: 2MB */
+		.pri_id = 0x02,
+		.dev_size = 2*MB,
+		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
+		.max_buf_write_size = 0x0,
+		.num_erase_regions = 4,
+		.erase_region_info =
+		{
+			ERASE_REGION( 1, 16*KB),
+			ERASE_REGION( 2, 8*KB),
+			ERASE_REGION( 1, 32*KB),
+			ERASE_REGION(31, 64*KB)
+		}
+	},
+	{
+		.mfr = CFI_MFR_MX,
+		.id = 0x22C4,				/* MX29LV160AT: 2MB */
+		.pri_id = 0x02,
+		.dev_size = 2*MB,
+		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
+		.max_buf_write_size = 0x0,
+		.num_erase_regions = 4,
+		.erase_region_info =
+		{
+			ERASE_REGION(31, 64*KB),
+			ERASE_REGION( 1, 32*KB),
+			ERASE_REGION( 2, 8*KB),
+			ERASE_REGION( 1, 16*KB)
+		}
+	},
+	{
+		.mfr = CFI_MFR_SST,
+		.id = 0x2782,				/* SST39xF160 */
+		.pri_id = 0x02,
+		.dev_size = 2*MB,
+		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
+		.max_buf_write_size = 0x0,
+		.num_erase_regions = 1,
+		.erase_region_info =
+		{
+			ERASE_REGION(512, 4*KB)
+		}
+	},
+	{
+		.mfr = CFI_MFR_ATMEL,
+		.id = 0x00c0,				/* Atmel 49BV1614 */
+		.pri_id = 0x02,
+		.dev_size = 2*MB,
+		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
+		.max_buf_write_size = 0x0,
+		.num_erase_regions = 3,
+		.erase_region_info =
+		{
+			ERASE_REGION( 8,  8*KB),
+			ERASE_REGION( 2, 32*KB),
+			ERASE_REGION(30, 64*KB)
+		}
+	},
+	{
+		.mfr = CFI_MFR_ATMEL,
+		.id = 0xC2,					/* Atmel 49BV1614T */
+		.pri_id = 0x02,
+		.dev_size = 2*MB,
+		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
+		.max_buf_write_size = 0x0,
+		.num_erase_regions = 3,
+		.erase_region_info =
+		{
+			ERASE_REGION(30, 64*KB),
+			ERASE_REGION( 2, 32*KB),
+			ERASE_REGION( 8,  8*KB)
+		}
+	},
+	{
 		.mfr = CFI_MFR_AMD,
 		.id = 0x225b,				/* S29AL008D */
 		.pri_id = 0x02,
-		.dev_size = 0x14,			/* 2^20 = 1MB */
+		.dev_size = 1*MB,
 		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
 		.max_buf_write_size = 0x0,
 		.num_erase_regions = 4,
 		.erase_region_info =
 		{
-                        0x00400000,             /* 1x 16KB */
-                        0x00200001,             /* 2x 8KB */
-                        0x00800000,             /* 1x 32KB */
-                        0x0100000e,             /* 15x 64KB */
-			0x00000000
+			ERASE_REGION( 1, 16*KB),
+			ERASE_REGION( 2, 8*KB),
+			ERASE_REGION( 1, 32*KB),
+			ERASE_REGION(15, 64*KB)
 		}
 	},
 	{
@@ -243,23 +312,26 @@
 	}
 };
 
-void cfi_fixup_non_cfi(flash_bank_t *bank, void *param)
+void cfi_fixup_non_cfi(flash_bank_t *bank)
 {
 	cfi_flash_bank_t *cfi_info = bank->driver_priv;
 	non_cfi_t *non_cfi = non_cfi_flashes;
-	
-	while (non_cfi->mfr)
+
+	for (non_cfi = non_cfi_flashes; non_cfi->mfr; non_cfi++)
 	{
 		if ((cfi_info->manufacturer == non_cfi->mfr)
 			&& (cfi_info->device_id == non_cfi->id))
 		{
 			break;
 		}
-		non_cfi++;
 	}
-	
+
+	/* only fixup jedec flashs found in table */
+	if (!non_cfi->mfr)
+		return;
+
 	cfi_info->not_cfi = 1;
-	
+
 	/* fill in defaults for non-critical data */
 	cfi_info->vcc_min = 0x0;
 	cfi_info->vcc_max = 0x0;
@@ -273,22 +345,23 @@
 	cfi_info->buf_write_timeout_max = 0x0;
 	cfi_info->block_erase_timeout_max = 0x0;
 	cfi_info->chip_erase_timeout_max = 0x0;
-	
+
 	cfi_info->qry[0] = 'Q';
 	cfi_info->qry[1] = 'R';
 	cfi_info->qry[2] = 'Y';
-	
+
 	cfi_info->pri_id = non_cfi->pri_id;
 	cfi_info->pri_addr = 0x0;
 	cfi_info->alt_id = 0x0;
 	cfi_info->alt_addr = 0x0;
 	cfi_info->alt_ext = NULL;
-	
+
 	cfi_info->interface_desc = non_cfi->interface_desc;
 	cfi_info->max_buf_write_size = non_cfi->max_buf_write_size;
 	cfi_info->num_erase_regions = non_cfi->num_erase_regions;
 	cfi_info->erase_region_info = non_cfi->erase_region_info;
-	
+	cfi_info->dev_size = non_cfi->dev_size;
+
 	if (cfi_info->pri_id == 0x2)
 	{
 		cfi_spansion_pri_ext_t *pri_ext = malloc(sizeof(cfi_spansion_pri_ext_t));
@@ -296,10 +369,10 @@
 		pri_ext->pri[0] = 'P';
 		pri_ext->pri[1] = 'R';
 		pri_ext->pri[2] = 'I';
-		
+
 		pri_ext->major_version = '1';
 		pri_ext->minor_version = '0';
-		
+
 		pri_ext->SiliconRevision = 0x0;
 		pri_ext->EraseSuspend = 0x0;
 		pri_ext->EraseSuspend = 0x0;
@@ -312,9 +385,11 @@
 		pri_ext->VppMin = 0x0;
 		pri_ext->VppMax = 0x0;
 		pri_ext->TopBottom = 0x0;
-	
+
+		pri_ext->_unlock1 = 0x5555;
+		pri_ext->_unlock2 = 0x2AAA;
 		pri_ext->_reversed_geometry = 0;
-		
+
 		cfi_info->pri_ext = pri_ext;
 	} else if ((cfi_info->pri_id == 0x1) || (cfi_info->pri_id == 0x3))
 	{

Modified: trunk/src/flash/non_cfi.h
===================================================================
--- trunk/src/flash/non_cfi.h	2009-04-19 08:18:46 UTC (rev 1468)
+++ trunk/src/flash/non_cfi.h	2009-04-19 12:06:49 UTC (rev 1469)
@@ -27,7 +27,7 @@
 	u16 mfr;
 	u16 id;
 	u16 pri_id;
-	u8 dev_size;
+	u32 dev_size;
 	u16 interface_desc;
 	u16 max_buf_write_size;
 	u8 num_erase_regions;
@@ -35,6 +35,6 @@
 } non_cfi_t;
 
 extern non_cfi_t non_cfi_flashes[];
-extern void cfi_fixup_non_cfi(flash_bank_t *bank, void *param);
+extern void cfi_fixup_non_cfi(flash_bank_t *bank);
 
 #endif /* NON_CFI_H */



From mifi at mail.berlios.de  Sun Apr 19 16:52:03 2009
From: mifi at mail.berlios.de (mifi at mail.berlios.de)
Date: Sun, 19 Apr 2009 16:52:03 +0200
Subject: [Openocd-svn] r1470 - trunk/src/jtag
Message-ID: <200904191452.n3JEq3jq016760@sheep.berlios.de>

Author: mifi
Date: 2009-04-19 16:51:51 +0200 (Sun, 19 Apr 2009)
New Revision: 1470

Modified:
   trunk/src/jtag/jlink.c
Log:
Added functionality to support jtag_khz for the jlink.

Modified: trunk/src/jtag/jlink.c
===================================================================
--- trunk/src/jtag/jlink.c	2009-04-19 12:06:49 UTC (rev 1469)
+++ trunk/src/jtag/jlink.c	2009-04-19 14:51:51 UTC (rev 1470)
@@ -79,6 +79,7 @@
 /* External interface functions */
 int jlink_execute_queue(void);
 int jlink_speed(int speed);
+int jlink_speed_div(int speed, int* khz);
 int jlink_khz(int khz, int *jtag_speed);
 int jlink_register_commands(struct command_context_s *cmd_ctx);
 int jlink_init(void);
@@ -134,6 +135,7 @@
 	.name = "jlink",
 	.execute_queue = jlink_execute_queue,
 	.speed = jlink_speed,
+	.speed_div = jlink_speed_div,
 	.khz = jlink_khz,
 	.register_commands = jlink_register_commands,
 	.init = jlink_init,
@@ -270,6 +272,13 @@
 	return ERROR_OK;
 }
 
+int jlink_speed_div(int speed, int* khz)
+{
+	*khz = speed;
+
+	return ERROR_OK;
+}
+
 int jlink_khz(int khz, int *jtag_speed)
 {
 	*jtag_speed = khz;



From mifi at mail.berlios.de  Sun Apr 19 21:15:22 2009
From: mifi at mail.berlios.de (mifi at mail.berlios.de)
Date: Sun, 19 Apr 2009 21:15:22 +0200
Subject: [Openocd-svn] r1471 - trunk/src/jtag
Message-ID: <200904191915.n3JJFMak020124@sheep.berlios.de>

Author: mifi
Date: 2009-04-19 21:15:09 +0200 (Sun, 19 Apr 2009)
New Revision: 1471

Modified:
   trunk/src/jtag/jlink.c
   trunk/src/jtag/usbprog.c
Log:
Partially fix USBprog and JLink adapters on XScale target
Thanks to Peter Denison <openwrt(at)marshadder.org> 

Modified: trunk/src/jtag/jlink.c
===================================================================
--- trunk/src/jtag/jlink.c	2009-04-19 14:51:51 UTC (rev 1470)
+++ trunk/src/jtag/jlink.c	2009-04-19 19:15:09 UTC (rev 1471)
@@ -433,7 +433,10 @@
 	/* Move to appropriate scan state */
 	jlink_end_state(ir_scan ? TAP_IRSHIFT : TAP_DRSHIFT);
 
-	jlink_state_move();
+	/* Only move if we're not already there */
+	if (tap_get_state() != tap_get_end_state())
+		jlink_state_move();
+
 	jlink_end_state(saved_end_state);
 
 	/* Scan */

Modified: trunk/src/jtag/usbprog.c
===================================================================
--- trunk/src/jtag/usbprog.c	2009-04-19 14:51:51 UTC (rev 1470)
+++ trunk/src/jtag/usbprog.c	2009-04-19 19:15:09 UTC (rev 1471)
@@ -265,6 +265,10 @@
 	int num_states = cmd->num_states;
 	int state_count;
 
+	/* There may be queued transitions, and before following a specified
+	   path, we must flush those queued transitions */
+	usbprog_jtag_tms_send(usbprog_jtag_handle);
+
 	state_count = 0;
 	while (num_states)
 	{
@@ -323,6 +327,10 @@
 		usbprog_write(0, 0, 0);
 	}
 
+#ifdef _DEBUG_JTAG_IO_
+	LOG_DEBUG("runtest: cur_state %s end_state %s", tap_state_name(tap_get_state()), tap_state_name(tap_get_end_state()));
+#endif
+
 	/* finish in end_state */
 	/*
 	usbprog_end_state(saved_end_state);
@@ -340,9 +348,10 @@
 	else
 		usbprog_end_state(TAP_DRSHIFT);
 
-	/* usbprog_jtag_tms_send(usbprog_jtag_handle); */
+	/* Only move if we're not already there */
+	if (tap_get_state() != tap_get_end_state())
+		usbprog_state_move();
 
-	usbprog_state_move();
 	usbprog_end_state(saved_end_state);
 
 	usbprog_jtag_tms_send(usbprog_jtag_handle);
@@ -358,6 +367,7 @@
 	}
 	f(usbprog_jtag_handle, (char *)buffer, scan_size);
 
+	/* The adapter does the transition to PAUSE internally */
 	if (ir_scan)
 		tap_set_state(TAP_IRPAUSE);
 	else



From oharboe at mail.berlios.de  Sun Apr 19 22:51:30 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Sun, 19 Apr 2009 22:51:30 +0200
Subject: [Openocd-svn] r1472 - in trunk/src: helper jtag jtag/rlink pld
	server svf target xsvf
Message-ID: <200904192051.n3JKpUtf030770@sheep.berlios.de>

Author: oharboe
Date: 2009-04-19 22:51:16 +0200 (Sun, 19 Apr 2009)
New Revision: 1472

Modified:
   trunk/src/helper/binarybuffer.c
   trunk/src/jtag/jtag.c
   trunk/src/jtag/rlink/rlink.c
   trunk/src/pld/virtex2.c
   trunk/src/pld/xilinx_bit.c
   trunk/src/server/gdb_server.c
   trunk/src/svf/svf.c
   trunk/src/target/arm720t.h
   trunk/src/target/arm7_9_common.c
   trunk/src/target/arm7_9_common.h
   trunk/src/target/arm920t.h
   trunk/src/target/arm926ejs.h
   trunk/src/target/arm_jtag.h
   trunk/src/target/armv4_5.c
   trunk/src/target/armv7m.c
   trunk/src/target/cortex_m3.c
   trunk/src/target/embeddedice.c
   trunk/src/target/etb.c
   trunk/src/target/etb.h
   trunk/src/target/etm.c
   trunk/src/target/feroceon.c
   trunk/src/target/mips32.h
   trunk/src/target/mips_ejtag.c
   trunk/src/target/oocd_trace.c
   trunk/src/target/register.h
   trunk/src/target/target.c
   trunk/src/target/target_request.c
   trunk/src/target/trace.c
   trunk/src/target/trace.h
   trunk/src/target/xscale.c
   trunk/src/xsvf/xsvf.c
Log:
Zach Welch <zw at superlucidity.net> fix -Werror warnings

Modified: trunk/src/helper/binarybuffer.c
===================================================================
--- trunk/src/helper/binarybuffer.c	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/helper/binarybuffer.c	2009-04-19 20:51:16 UTC (rev 1472)
@@ -55,7 +55,7 @@
 
 u8* buf_cpy(u8 *from, u8 *to, int size)
 {
-	int num_bytes = CEIL(size, 8);
+	unsigned int num_bytes = CEIL(size, 8);
 	unsigned int i;
 
 	if (from == NULL)
@@ -244,7 +244,7 @@
 int str_to_buf(const char *str, int str_len, u8 *buf, int buf_len, int radix)
 {
 	char *charbuf;
-	u32 tmp;
+	char tmp;
 	float factor;
 	u8 *b256_buf;
 	int b256_len;

Modified: trunk/src/jtag/jtag.c
===================================================================
--- trunk/src/jtag/jtag.c	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/jtag/jtag.c	2009-04-19 20:51:16 UTC (rev 1472)
@@ -1758,7 +1758,7 @@
 					jteap = tap->event_action;
 					/* replace existing? */
 					while (jteap) {
-						if (jteap->event == n->value) {
+						if (jteap->event == (enum jtag_tap_event)n->value) {
 							break;
 						}
 						jteap = jteap->next;

Modified: trunk/src/jtag/rlink/rlink.c
===================================================================
--- trunk/src/jtag/rlink/rlink.c	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/jtag/rlink/rlink.c	2009-04-19 20:51:16 UTC (rev 1472)
@@ -268,7 +268,7 @@
 			USB_TIMEOUT_MS
 		);
 
-		if(usb_ret < sizeof(usb_buffer)) {
+		if((size_t)usb_ret < sizeof(usb_buffer)) {
 			break;
 		}
 
@@ -363,7 +363,7 @@
 		buffer += sizeof(*header);
 		length -= sizeof(*header);
 
-		if(length < header->length + 1) {
+		if(length < (size_t)header->length + 1) {
 			LOG_ERROR("Malformed DTC image\n");
 			exit(1);
 		}
@@ -605,8 +605,8 @@
 struct {
 	dtc_reply_queue_entry_t	*rq_head;
 	dtc_reply_queue_entry_t	*rq_tail;
-	int			cmd_index;
-	int			reply_index;
+	u32			cmd_index;
+	u32			reply_index;
 	u8			cmd_buffer[USB_EP2BANK_SIZE];
 } dtc_queue;
 
@@ -617,7 +617,7 @@
 
 static
 struct {
-	int	length;
+	u32	length;
 	u32	buffer;
 } tap_state_queue;
 

Modified: trunk/src/pld/virtex2.c
===================================================================
--- trunk/src/pld/virtex2.c	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/pld/virtex2.c	2009-04-19 20:51:16 UTC (rev 1472)
@@ -161,7 +161,7 @@
 	virtex2_pld_device_t *virtex2_info = pld_device->driver_priv;
 	xilinx_bit_file_t bit_file;
 	int retval;
-	int i;
+	unsigned int i;
 
 	scan_field_t field;
 

Modified: trunk/src/pld/xilinx_bit.c
===================================================================
--- trunk/src/pld/xilinx_bit.c	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/pld/xilinx_bit.c	2009-04-19 20:51:16 UTC (rev 1472)
@@ -40,7 +40,7 @@
 int read_section(FILE *input_file, int length_size, char section, u32 *buffer_length, u8 **buffer) 
 {
 	u8 length_buffer[4];
-	u32 length;
+	int length;
 	char section_char;
 	int read_count;
 	

Modified: trunk/src/server/gdb_server.c
===================================================================
--- trunk/src/server/gdb_server.c	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/server/gdb_server.c	2009-04-19 20:51:16 UTC (rev 1472)
@@ -348,7 +348,7 @@
 
 		char local_buffer[1024];
 		local_buffer[0] = '$';
-		if (len+4 <= sizeof(local_buffer))
+		if ((size_t)len + 4 <= sizeof(local_buffer))
 		{
 			/* performance gain on smaller packets by only a single call to gdb_write() */
 			memcpy(local_buffer+1, buffer, len++);
@@ -1213,7 +1213,7 @@
 	{
 		hex_buffer = malloc(len * 2 + 1);
 
-		int i;
+		u32 i;
 		for (i = 0; i < len; i++)
 		{
 			u8 t = buffer[i];
@@ -1243,7 +1243,7 @@
 
 	u8 *buffer;
 
-	int i;
+	u32 i;
 	int retval;
 
 	/* skip command character */
@@ -1540,12 +1540,12 @@
 
 int gdb_calc_blocksize(flash_bank_t *bank)
 {
-	int i;
-	int block_size = 0xffffffff;
+	u32 i;
+	u32 block_size = 0xffffffff;
 
 	/* loop through all sectors and return smallest sector size */
 
-	for (i = 0; i < bank->num_sectors; i++)
+	for (i = 0; i < (u32)bank->num_sectors; i++)
 	{
 		if (bank->sectors[i].size < block_size)
 			block_size = bank->sectors[i].size;

Modified: trunk/src/svf/svf.c
===================================================================
--- trunk/src/svf/svf.c	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/svf/svf.c	2009-04-19 20:51:16 UTC (rev 1472)
@@ -103,7 +103,7 @@
 	"ABSENT"
 };
 
-char *svf_tap_state_name[16];
+char *svf_tap_state_name[TAP_NUM_STATES];
 
 #define XXR_TDI						(1 << 0)
 #define XXR_TDO						(1 << 1)
@@ -316,7 +316,7 @@
 	svf_buffer_size = 2 * SVF_MAX_BUFFER_SIZE_TO_COMMIT;
 
 	memcpy(&svf_para, &svf_para_init, sizeof(svf_para));
-	for (i = 0; i < dimof(svf_tap_state_name); i++)
+	for (i = 0; i < (int)dimof(svf_tap_state_name); i++)
 	{
 		svf_tap_state_name[i] = (char *)tap_state_name(i);
 	}
@@ -515,7 +515,7 @@
 
 static int svf_tap_state_is_valid(tap_state_t state)
 {
-	return ((state >= 0) && (state < sizeof(svf_tap_state_name)));
+	return state >= 0 && state < TAP_NUM_STATES;
 }
 
 static int svf_find_string_in_array(char *str, char **strs, int num_of_element)

Modified: trunk/src/target/arm720t.h
===================================================================
--- trunk/src/target/arm720t.h	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/arm720t.h	2009-04-19 20:51:16 UTC (rev 1472)
@@ -32,7 +32,7 @@
 
 typedef struct arm720t_common_s
 {
-	int common_magic;
+	u32 common_magic;
 	armv4_5_mmu_common_t armv4_5_mmu;
 	arm7tdmi_common_t arm7tdmi_common;
 	u32 cp15_control_reg;

Modified: trunk/src/target/arm7_9_common.c
===================================================================
--- trunk/src/target/arm7_9_common.c	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/arm7_9_common.c	2009-04-19 20:51:16 UTC (rev 1472)
@@ -655,7 +655,8 @@
 	arm7_9_common_t *arm7_9 = armv4_5->arch_info;
 	arm_jtag_t *jtag_info = &arm7_9->jtag_info;
 	u32 *data;
-	int i, retval = ERROR_OK;
+	int retval = ERROR_OK;
+	u32 i;
 
 	data = malloc(size * (sizeof(u32)));
 
@@ -1956,7 +1957,7 @@
 	arm7_9_common_t *arm7_9 = armv4_5->arch_info;
 
 	u32 reg[16];
-	int num_accesses = 0;
+	u32 num_accesses = 0;
 	int thisrun_accesses;
 	int i;
 	u32 cpsr;
@@ -2133,7 +2134,7 @@
 	reg_t *dbg_ctrl = &arm7_9->eice_cache->reg_list[EICE_DBG_CTRL];
 
 	u32 reg[16];
-	int num_accesses = 0;
+	u32 num_accesses = 0;
 	int thisrun_accesses;
 	int i;
 	u32 cpsr;
@@ -2466,7 +2467,7 @@
 		0x04C11DB7				/* CRC32XOR:	.word 0x04C11DB7 */
 	};
 
-	int i;
+	u32 i;
 
 	if (target_alloc_working_area(target, sizeof(arm7_9_crc_code), &crc_algorithm) != ERROR_OK)
 	{
@@ -2518,7 +2519,7 @@
 	reg_param_t reg_params[3];
 	armv4_5_algorithm_t armv4_5_info;
 	int retval;
-	int i;
+	u32 i;
 
 	u32 erase_check_code[] =
 	{

Modified: trunk/src/target/arm7_9_common.h
===================================================================
--- trunk/src/target/arm7_9_common.h	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/arm7_9_common.h	2009-04-19 20:51:16 UTC (rev 1472)
@@ -40,7 +40,7 @@
 
 typedef struct arm7_9_common_s
 {
-	int common_magic;
+	u32 common_magic;
 	
 	arm_jtag_t jtag_info;
 	reg_cache_t *eice_cache;

Modified: trunk/src/target/arm920t.h
===================================================================
--- trunk/src/target/arm920t.h	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/arm920t.h	2009-04-19 20:51:16 UTC (rev 1472)
@@ -32,7 +32,7 @@
 
 typedef struct arm920t_common_s
 {
-	int common_magic;
+	u32 common_magic;
 	armv4_5_mmu_common_t armv4_5_mmu;
 	arm9tdmi_common_t arm9tdmi_common;
 	u32 cp15_control_reg;

Modified: trunk/src/target/arm926ejs.h
===================================================================
--- trunk/src/target/arm926ejs.h	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/arm926ejs.h	2009-04-19 20:51:16 UTC (rev 1472)
@@ -32,7 +32,7 @@
 
 typedef struct arm926ejs_common_s
 {
-	int common_magic;
+	u32 common_magic;
 	armv4_5_mmu_common_t armv4_5_mmu;
 	arm9tdmi_common_t arm9tdmi_common;
 	int (*read_cp15)(target_t *target, u32 op1, u32 op2, u32 CRn, u32 CRm, u32 *value);

Modified: trunk/src/target/arm_jtag.h
===================================================================
--- trunk/src/target/arm_jtag.h	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/arm_jtag.h	2009-04-19 20:51:16 UTC (rev 1472)
@@ -30,9 +30,9 @@
 {
 	jtag_tap_t *tap;
 	
-	int scann_size;
+	u32 scann_size;
 	u32 scann_instr;
-	int cur_scan_chain;
+	u32 cur_scan_chain;
 	
 	u32 intest_instr;
 } arm_jtag_t;

Modified: trunk/src/target/armv4_5.c
===================================================================
--- trunk/src/target/armv4_5.c	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/armv4_5.c	2009-04-19 20:51:16 UTC (rev 1472)
@@ -231,7 +231,7 @@
 			}
 		}
 
-		if (armv4_5_target->core_mode != (value & 0x1f))
+		if (armv4_5_target->core_mode != (enum armv4_5_mode)(value & 0x1f))
 		{
 			LOG_DEBUG("changing ARM core mode to '%s'", armv4_5_mode_strings[armv4_5_mode_to_number(value & 0x1f)]);
 			armv4_5_target->core_mode = value & 0x1f;

Modified: trunk/src/target/armv7m.c
===================================================================
--- trunk/src/target/armv7m.c	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/armv7m.c	2009-04-19 20:51:16 UTC (rev 1472)
@@ -591,7 +591,7 @@
 		0x1DB7, 0x04C1			/* CRC32XOR:	.word 0x04C11DB7 */
 	};
 
-	int i;
+	u32 i;
 
 	if (target_alloc_working_area(target, sizeof(cortex_m3_crc_code), &crc_algorithm) != ERROR_OK)
 	{
@@ -640,7 +640,7 @@
 	reg_param_t reg_params[3];
 	armv7m_algorithm_t armv7m_info;
 	int retval;
-	int i;
+	u32 i;
 
 	u16 erase_check_code[] =
 	{

Modified: trunk/src/target/cortex_m3.c
===================================================================
--- trunk/src/target/cortex_m3.c	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/cortex_m3.c	2009-04-19 20:51:16 UTC (rev 1472)
@@ -1475,7 +1475,7 @@
 	swjdp_common_t *swjdp = &cortex_m3->swjdp_info;
 	u8 data;
 	u8 ctrl;
-	int i;
+	u32 i;
 	
 	for (i = 0; i < (size * 4); i++)
 	{

Modified: trunk/src/target/embeddedice.c
===================================================================
--- trunk/src/target/embeddedice.c	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/embeddedice.c	2009-04-19 20:51:16 UTC (rev 1472)
@@ -484,7 +484,7 @@
 	u8 field1_out[1];
 	u8 field2_out[1];
 	int retval;
-	int hsact;
+	u32 hsact;
 	struct timeval lap;
 	struct timeval now;
 
@@ -544,7 +544,7 @@
 
 		gettimeofday(&now, NULL);
 	}
-	while ((now.tv_sec-lap.tv_sec)*1000 + (now.tv_usec-lap.tv_usec)/1000 <= timeout);
+	while ((u32)((now.tv_sec-lap.tv_sec)*1000 + (now.tv_usec-lap.tv_usec)/1000) <= timeout);
 
 	return ERROR_TARGET_TIMEOUT;
 }

Modified: trunk/src/target/etb.c
===================================================================
--- trunk/src/target/etb.c	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/etb.c	2009-04-19 20:51:16 UTC (rev 1472)
@@ -453,7 +453,7 @@
 		arm7_9->etm_ctx->capture_driver_priv = etb;
 
 		etb->tap  = tap;
-		etb->cur_scan_chain = -1;
+		etb->cur_scan_chain = ~0UL;
 		etb->reg_cache = NULL;
 		etb->ram_width = 0;
 		etb->ram_depth = 0;

Modified: trunk/src/target/etb.h
===================================================================
--- trunk/src/target/etb.h	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/etb.h	2009-04-19 20:51:16 UTC (rev 1472)
@@ -46,17 +46,17 @@
 {
 	etm_context_t *etm_ctx;
 	jtag_tap_t *tap;
-	int cur_scan_chain;
+	u32 cur_scan_chain;
 	reg_cache_t *reg_cache;
 	
 	/* ETB parameters */
-	int ram_depth;
-	int ram_width;
+	u32 ram_depth;
+	u32 ram_width;
 } etb_t;
 
 typedef struct etb_reg_s
 {
-	int addr;
+	u32 addr;
 	etb_t *etb;
 } etb_reg_t;
 

Modified: trunk/src/target/etm.c
===================================================================
--- trunk/src/target/etm.c	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/etm.c	2009-04-19 20:51:16 UTC (rev 1472)
@@ -647,7 +647,7 @@
 	u8 packet;
 	int shift = 0;
 	int apo;
-	int i;
+	u32 i;
 
 	/* quit analysis if less than two cycles are left in the trace
 	 * because we can't extract the APO */
@@ -998,7 +998,7 @@
 			if (((instruction.type == ARM_B) ||
 				(instruction.type == ARM_BL) ||
 				(instruction.type == ARM_BLX)) &&
-				(instruction.info.b_bl_bx_blx.target_address != -1))
+				(instruction.info.b_bl_bx_blx.target_address != ~0UL))
 			{
 				next_pc = instruction.info.b_bl_bx_blx.target_address;
 			}
@@ -1543,7 +1543,7 @@
 	armv4_5_common_t *armv4_5;
 	arm7_9_common_t *arm7_9;
 	etm_context_t *etm_ctx;
-	int i;
+	u32 i;
 
 	if (argc != 1)
 	{
@@ -1611,7 +1611,7 @@
 	armv4_5_common_t *armv4_5;
 	arm7_9_common_t *arm7_9;
 	etm_context_t *etm_ctx;
-	int i;
+	u32 i;
 
 	if (argc != 1)
 	{

Modified: trunk/src/target/feroceon.c
===================================================================
--- trunk/src/target/feroceon.c	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/feroceon.c	2009-04-19 20:51:16 UTC (rev 1472)
@@ -517,7 +517,7 @@
 	arm7_9_common_t *arm7_9 = armv4_5->arch_info;
 	enum armv4_5_state core_state = armv4_5->core_state;
 	u32 x, flip, shift, save[7];
-	int i;
+	u32 i;
 
 	/*
 	 * We can't use the dcc flow control bits, so let's transfer data
@@ -547,7 +547,7 @@
 		0xeafffff3,	/*	b	3b			*/
 	};
 
-	int dcc_size = sizeof(dcc_code);
+	u32 dcc_size = sizeof(dcc_code);
 
 	if (!arm7_9->dcc_downloads)
 		return target->type->write_memory(target, address, 4, count, buffer);

Modified: trunk/src/target/mips32.h
===================================================================
--- trunk/src/target/mips32.h	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/mips32.h	2009-04-19 20:51:16 UTC (rev 1472)
@@ -47,7 +47,7 @@
 
 typedef struct mips32_common_s
 {
-	int common_magic;
+	u32 common_magic;
 	void *arch_info;
 	reg_cache_t *core_cache;
 	mips_ejtag_t ejtag_info;

Modified: trunk/src/target/mips_ejtag.c
===================================================================
--- trunk/src/target/mips_ejtag.c	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/mips_ejtag.c	2009-04-19 20:51:16 UTC (rev 1472)
@@ -40,7 +40,7 @@
 	if (tap==NULL)
 		return ERROR_FAIL;
 
-	if (buf_get_u32(tap->cur_instr, 0, tap->ir_length) != new_instr)
+	if (buf_get_u32(tap->cur_instr, 0, tap->ir_length) != (u32)new_instr)
 	{
 		scan_field_t field;
 		u8 t[4];

Modified: trunk/src/target/oocd_trace.c
===================================================================
--- trunk/src/target/oocd_trace.c	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/oocd_trace.c	2009-04-19 20:51:16 UTC (rev 1472)
@@ -78,7 +78,8 @@
 
 int oocd_trace_read_memory(oocd_trace_t *oocd_trace, u8 *data, u32 address, u32 size)
 {
-	size_t bytes_written, bytes_read, bytes_to_read;
+	size_t bytes_written, bytes_to_read;
+	ssize_t bytes_read;
 	u8 cmd;
 
 	oocd_trace_write_reg(oocd_trace, OOCD_TRACE_ADDRESS, address);
@@ -188,7 +189,7 @@
 	u32 first_frame = 0x0;
 	u32 num_frames = 1048576;
 	u8 *trace_data;
-	int i;
+	u32 i;
 
 	oocd_trace_read_reg(oocd_trace, OOCD_TRACE_STATUS, &status);
 	oocd_trace_read_reg(oocd_trace, OOCD_TRACE_ADDRESS, &address);

Modified: trunk/src/target/register.h
===================================================================
--- trunk/src/target/register.h	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/register.h	2009-04-19 20:51:16 UTC (rev 1472)
@@ -40,7 +40,7 @@
 	u8 *value;
 	int dirty;
 	int valid;
-	int size;
+	u32 size;
 	bitfield_desc_t *bitfield_desc;
 	int num_bitfields;
 	void *arch_info;

Modified: trunk/src/target/target.c
===================================================================
--- trunk/src/target/target.c	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/target.c	2009-04-19 20:51:16 UTC (rev 1472)
@@ -985,7 +985,7 @@
 	/* handle unaligned head bytes */
 	if (address % 4)
 	{
-		int unaligned = 4 - (address % 4);
+		u32 unaligned = 4 - (address % 4);
 
 		if (unaligned > size)
 			unaligned = size;
@@ -1060,7 +1060,7 @@
 	/* handle unaligned head bytes */
 	if (address % 4)
 	{
-		int unaligned = 4 - (address % 4);
+		u32 unaligned = 4 - (address % 4);
 
 		if (unaligned > size)
 			unaligned = size;
@@ -1100,7 +1100,7 @@
 {
 	u8 *buffer;
 	int retval;
-	int i;
+	u32 i;
 	u32 checksum = 0;
 	if (!target->type->examined)
 	{
@@ -2273,7 +2273,7 @@
 				retval = target->type->read_memory(target, image.sections[i].base_address, size, count, data);
 				if (retval == ERROR_OK)
 				{
-					int t;
+					u32 t;
 					for (t = 0; t < buf_cnt; t++)
 					{
 						if (data[t] != buffer[t])
@@ -2508,9 +2508,9 @@
 }
 
 /* Dump a gmon.out histogram file. */
-static void writeGmon(u32 *samples, int sampleNum, char *filename)
+static void writeGmon(u32 *samples, u32 sampleNum, char *filename)
 {
-	int i;
+	u32 i;
 	FILE *f=fopen(filename, "w");
 	if (f==NULL)
 		return;
@@ -2539,8 +2539,8 @@
 
 	int addressSpace=(max-min+1);
 
-	static int const maxBuckets=256*1024; /* maximum buckets. */
-	int length=addressSpace;
+	static const u32 maxBuckets = 256 * 1024; /* maximum buckets. */
+	u32 length = addressSpace;
 	if (length > maxBuckets)
 	{
 		length=maxBuckets;
@@ -2747,7 +2747,8 @@
 	u32 v;
 	const char *varname;
 	u8 buffer[4096];
-	int  i, n, e, retval;
+	int  n, e, retval;
+	u32 i;
 
 	/* argv[1] = name of array to receive the data
 	 * argv[2] = desired width
@@ -2928,7 +2929,8 @@
 	u32 v;
 	const char *varname;
 	u8 buffer[4096];
-	int  i, n, e, retval;
+	int  n, e, retval;
+	u32 i;
 
 	/* argv[1] = name of array to get the data
 	 * argv[2] = desired width
@@ -3200,7 +3202,7 @@
 				teap = target->event_action;
 				/* replace existing? */
 				while( teap ){
-					if( teap->event == n->value ){
+					if( teap->event == (enum target_event)n->value ){
 						break;
 					}
 					teap = teap->next;

Modified: trunk/src/target/target_request.c
===================================================================
--- trunk/src/target/target_request.c	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/target_request.c	2009-04-19 20:51:16 UTC (rev 1472)
@@ -73,7 +73,7 @@
 	char line[128];
 	int line_len;
 	debug_msg_receiver_t *c = target->dbgmsg;
-	int i;
+	u32 i;
 	
 	LOG_DEBUG("size: %i, length: %i", size, length);
 

Modified: trunk/src/target/trace.c
===================================================================
--- trunk/src/target/trace.c	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/trace.c	2009-04-19 20:51:16 UTC (rev 1472)
@@ -31,7 +31,7 @@
 #include <string.h>
 #include <inttypes.h>
 
-int trace_point(target_t *target, int number)
+int trace_point(target_t *target, u32 number)
 {
 	trace_t *trace = target->trace_info;
 
@@ -60,7 +60,7 @@
 	
 	if (argc == 0)
 	{
-		int i;
+		u32 i;
 		
 		for (i = 0; i < trace->num_trace_points; i++)
 		{
@@ -125,9 +125,9 @@
 	}
 	else
 	{
-		int i;
-		int first = 0;
-		int last = trace->trace_history_pos;
+		u32 i;
+		u32 first = 0;
+		u32 last = trace->trace_history_pos;
 
 		if ( !trace->trace_history_size ) {
 			command_print(cmd_ctx, "trace history buffer is not allocated");

Modified: trunk/src/target/trace.h
===================================================================
--- trunk/src/target/trace.h	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/trace.h	2009-04-19 20:51:16 UTC (rev 1472)
@@ -32,12 +32,12 @@
 
 typedef struct trace_s
 {
-	int num_trace_points;
-	int trace_points_size;
+	u32 num_trace_points;
+	u32 trace_points_size;
 	trace_point_t *trace_points;
-	int trace_history_size;
+	u32 trace_history_size;
 	u32 *trace_history;
-	int trace_history_pos;
+	u32 trace_history_pos;
 	int trace_history_overflowed;
 } trace_t;
 
@@ -50,7 +50,7 @@
 	TRACE_OVERFLOWED = 0x8,
 } trace_status_t;
 
-extern int trace_point(struct target_s *target, int number);
+extern int trace_point(struct target_s *target, u32 number);
 extern int trace_register_commands(struct command_context_s *cmd_ctx);
 
 #define ERROR_TRACE_IMAGE_UNAVAILABLE		-(1500)

Modified: trunk/src/target/xscale.c
===================================================================
--- trunk/src/target/xscale.c	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/target/xscale.c	2009-04-19 20:51:16 UTC (rev 1472)
@@ -1631,7 +1631,7 @@
 	u32 binary_size;
 
 	u32 buf_cnt;
-	int i;
+	u32 i;
 	int retval;
 
 	breakpoint_t *breakpoint = target->breakpoints;
@@ -1928,7 +1928,7 @@
 	armv4_5_common_t *armv4_5 = target->arch_info;
 	xscale_common_t *xscale = armv4_5->arch_info;
 	u32 *buf32;
-	int i;
+	u32 i;
 	int retval;
 
 	LOG_DEBUG("address: 0x%8.8x, size: 0x%8.8x, count: 0x%8.8x", address, size, count);
@@ -2933,7 +2933,7 @@
 						(((instruction.type == ARM_B) ||
 							(instruction.type == ARM_BL) ||
 							(instruction.type == ARM_BLX)) &&
-							(instruction.info.b_bl_bx_blx.target_address != -1)))
+							(instruction.info.b_bl_bx_blx.target_address != ~0UL)))
 					{
 						xscale->trace.current_pc = instruction.info.b_bl_bx_blx.target_address;
 					}

Modified: trunk/src/xsvf/xsvf.c
===================================================================
--- trunk/src/xsvf/xsvf.c	2009-04-19 19:15:09 UTC (rev 1471)
+++ trunk/src/xsvf/xsvf.c	2009-04-19 20:51:16 UTC (rev 1472)
@@ -743,7 +743,7 @@
 
 		case XCOMMENT:
 			{
-				int		ndx = 0;
+				unsigned int ndx = 0;
 				char 	comment[128];
 
 				do



From oharboe at mail.berlios.de  Sun Apr 19 23:04:36 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Sun, 19 Apr 2009 23:04:36 +0200
Subject: [Openocd-svn] r1473 - trunk
Message-ID: <200904192104.n3JL4aJh032495@sheep.berlios.de>

Author: oharboe
Date: 2009-04-19 23:04:34 +0200 (Sun, 19 Apr 2009)
New Revision: 1473

Modified:
   trunk/configure.in
Log:
Zach Welch <zw at superlucidity.net> treat warnings as errors

Modified: trunk/configure.in
===================================================================
--- trunk/configure.in	2009-04-19 20:51:16 UTC (rev 1472)
+++ trunk/configure.in	2009-04-19 21:04:34 UTC (rev 1473)
@@ -178,9 +178,18 @@
 )
 
 AC_ARG_ENABLE(gccwarnings,
-	AS_HELP_STRING([--enable-gccwarnings], [Enable compiler warnings, default yes]),
+	AS_HELP_STRING([--disable-gccwarnings], [Disable compiler warnings]),
 	[gcc_warnings=$enableval], [gcc_warnings=yes])
 
+AC_ARG_ENABLE(wextra,
+	AS_HELP_STRING([--disable-wextra], [Disable extra compiler warnings]),
+	[gcc_wextra=$enableval], [gcc_wextra=$gcc_warnings])
+
+AC_ARG_ENABLE(werror,
+	AS_HELP_STRING([--disable-werror], [Do not treat warnings as errors]),
+	[gcc_werror=$enableval], [gcc_werror=$gcc_warnings])
+
+
 AC_ARG_ENABLE(parport,
   AS_HELP_STRING([--enable-parport], [Enable building the pc parallel port driver]), 
   [build_parport=$enableval], [build_parport=no])
@@ -684,6 +693,12 @@
 
 # set default gcc warnings
 GCC_WARNINGS="-Wall -Wstrict-prototypes"
+if test "${gcc_wextra}" = yes; then
+	GCC_WARNINGS="${GCC_WARNINGS} -Wextra -Wno-unused-parameter"
+fi
+if test "${gcc_werror}" = yes; then
+	GCC_WARNINGS="${GCC_WARNINGS} -Werror"
+fi
 
 # overide default gcc cflags
 if test $gcc_warnings = yes; then



From oharboe at mail.berlios.de  Mon Apr 20 01:27:19 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Mon, 20 Apr 2009 01:27:19 +0200
Subject: [Openocd-svn] r1474 - trunk/src/target
Message-ID: <200904192327.n3JNRJX8004895@sheep.berlios.de>

Author: oharboe
Date: 2009-04-20 01:27:17 +0200 (Mon, 20 Apr 2009)
New Revision: 1474

Modified:
   trunk/src/target/armv4_5.h
Log:
Zach Welch <zw at superlucidity.net> use ARM4_5_MODE_ANY instead of -1

Modified: trunk/src/target/armv4_5.h
===================================================================
--- trunk/src/target/armv4_5.h	2009-04-19 21:04:34 UTC (rev 1473)
+++ trunk/src/target/armv4_5.h	2009-04-19 23:27:17 UTC (rev 1474)
@@ -133,7 +133,7 @@
 		case 6: return ARMV4_5_MODE_SYS; break;
 		default: 
 			LOG_ERROR("mode index out of bounds");
-			return -1;
+			return ARMV4_5_MODE_ANY;
 	}
 };
 



From oharboe at mail.berlios.de  Mon Apr 20 01:30:17 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Mon, 20 Apr 2009 01:30:17 +0200
Subject: [Openocd-svn] r1475 - trunk/src/jtag
Message-ID: <200904192330.n3JNUHiC008193@sheep.berlios.de>

Author: oharboe
Date: 2009-04-20 01:30:15 +0200 (Mon, 20 Apr 2009)
New Revision: 1475

Modified:
   trunk/src/jtag/jlink.c
Log:
Nikolay Shadrin whoney at gmail.com, Zach Welch <zw at superlucidity.net> unstable USB J-Link in OpenOCD (revised patch provided)

Modified: trunk/src/jtag/jlink.c
===================================================================
--- trunk/src/jtag/jlink.c	2009-04-19 23:27:17 UTC (rev 1474)
+++ trunk/src/jtag/jlink.c	2009-04-19 23:30:15 UTC (rev 1475)
@@ -115,7 +115,7 @@
 void jlink_usb_close(jlink_jtag_t *jlink_jtag);
 int jlink_usb_message(jlink_jtag_t *jlink_jtag, int out_length, int in_length);
 int jlink_usb_write(jlink_jtag_t *jlink_jtag, int out_length);
-int jlink_usb_read(jlink_jtag_t *jlink_jtag);
+int jlink_usb_read(jlink_jtag_t *jlink_jtag, int expected_size);
 int jlink_usb_read_emu_result(jlink_jtag_t *jlink_jtag);
 
 /* helper functions */
@@ -497,7 +497,7 @@
 	int result;
 
 	jlink_simple_command(EMU_CMD_GET_STATE);
-	result = jlink_usb_read(jlink_jtag_handle);
+	result = jlink_usb_read(jlink_jtag_handle, 8);
 
 	if (result == 8)
 	{
@@ -527,12 +527,12 @@
 
 	/* query hardware version */
 	jlink_simple_command(EMU_CMD_VERSION);
-	result = jlink_usb_read(jlink_jtag_handle);
+	result = jlink_usb_read(jlink_jtag_handle, 2);
 
 	if (result == 2)
 	{
 		len = buf_get_u32(usb_in_buffer, 0, 16);
-		result = jlink_usb_read(jlink_jtag_handle);
+		result = jlink_usb_read(jlink_jtag_handle, len);
 
 		if (result == len)
 		{
@@ -806,7 +806,7 @@
 	result = jlink_usb_write(jlink_jtag, out_length);
 	if (result == out_length)
 	{
-		result = jlink_usb_read(jlink_jtag);
+		result = jlink_usb_read(jlink_jtag, in_length);
 		if (result == in_length || result == in_length+1)
 		{
 			if (result == in_length)
@@ -859,6 +859,54 @@
 	}
 }
 
+int usb_bulk_write_ex(usb_dev_handle *dev, int ep, char *bytes, int size,
+                      int timeout) {
+
+	int rc = 0, tries = 3, this_size;
+
+	while (tries && size) {
+
+		this_size = usb_bulk_write (dev, ep, bytes, size, timeout);
+
+		if (this_size > 0) {
+			
+			size -= this_size;
+			rc += this_size;
+			bytes += this_size;
+
+		} else
+			tries --;
+	}
+
+	return rc;
+
+
+}
+
+int usb_bulk_read_ex(usb_dev_handle *dev, int ep, char *bytes, int size,
+                  int timeout) {
+
+	int rc = 0, tries = 3, this_size;
+
+	while (tries && size) {
+
+		this_size = usb_bulk_read (dev, ep, bytes, size, timeout);
+
+		if (this_size > 0) {
+			
+			size -= this_size;
+			rc += this_size;
+			bytes += this_size;
+
+		} else
+			tries --;
+	}
+
+	return rc;
+
+}
+
+
 /* Write data from out_buffer to USB. */
 int jlink_usb_write(jlink_jtag_t *jlink_jtag, int out_length)
 {
@@ -870,7 +918,7 @@
 		return -1;
 	}
 
-	result = usb_bulk_write(jlink_jtag->usb_handle, JLINK_WRITE_ENDPOINT,
+	result = usb_bulk_write_ex(jlink_jtag->usb_handle, JLINK_WRITE_ENDPOINT,
 		(char *)usb_out_buffer, out_length, JLINK_USB_TIMEOUT);
 
 	DEBUG_JTAG_IO("jlink_usb_write, out_length = %d, result = %d", out_length, result);
@@ -882,10 +930,10 @@
 }
 
 /* Read data from USB into in_buffer. */
-int jlink_usb_read(jlink_jtag_t *jlink_jtag)
+int jlink_usb_read(jlink_jtag_t *jlink_jtag, int expected_size)
 {
-	int result = usb_bulk_read(jlink_jtag->usb_handle, JLINK_READ_ENDPOINT,
-		(char *)usb_in_buffer, JLINK_IN_BUFFER_SIZE, JLINK_USB_TIMEOUT);
+	int result = usb_bulk_read_ex(jlink_jtag->usb_handle, JLINK_READ_ENDPOINT,
+		(char *)usb_in_buffer, expected_size, JLINK_USB_TIMEOUT);
 
 	DEBUG_JTAG_IO("jlink_usb_read, result = %d", result);
 
@@ -898,8 +946,8 @@
 /* Read the result from the previous EMU cmd into result_buffer. */
 int jlink_usb_read_emu_result(jlink_jtag_t *jlink_jtag)
 {
-	int result = usb_bulk_read(jlink_jtag->usb_handle, JLINK_READ_ENDPOINT,
-		(char *)usb_emu_result_buffer, JLINK_EMU_RESULT_BUFFER_SIZE,
+	int result = usb_bulk_read_ex(jlink_jtag->usb_handle, JLINK_READ_ENDPOINT,
+		(char *)usb_emu_result_buffer, 1 /* JLINK_EMU_RESULT_BUFFER_SIZE */,
 		JLINK_USB_TIMEOUT);
 
 	DEBUG_JTAG_IO("jlink_usb_read_result, result = %d", result);



From oharboe at mail.berlios.de  Mon Apr 20 08:40:48 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Mon, 20 Apr 2009 08:40:48 +0200
Subject: [Openocd-svn] r1476 - trunk/src/jtag
Message-ID: <200904200640.n3K6emEj010034@sheep.berlios.de>

Author: oharboe
Date: 2009-04-20 08:40:45 +0200 (Mon, 20 Apr 2009)
New Revision: 1476

Modified:
   trunk/src/jtag/bitq.c
   trunk/src/jtag/ft2232.c
   trunk/src/jtag/presto.c
Log:
Zach Welch <zw at superlucidity.net> fix ft2232/presto warnings

Modified: trunk/src/jtag/bitq.c
===================================================================
--- trunk/src/jtag/bitq.c	2009-04-19 23:30:15 UTC (rev 1475)
+++ trunk/src/jtag/bitq.c	2009-04-20 06:40:45 UTC (rev 1476)
@@ -39,7 +39,7 @@
 bitq_state_t      bitq_in_state;        /* state of input queue */
 
 u8* bitq_in_buffer;                     /* buffer dynamically reallocated as needed */
-unsigned long     bitq_in_bufsize = 32; /* min. buffer size */
+int     bitq_in_bufsize = 32; /* min. buffer size */
 
 /*
  * input queue processing does not use jtag_read_buffer() to avoid unnecessary overhead

Modified: trunk/src/jtag/ft2232.c
===================================================================
--- trunk/src/jtag/ft2232.c	2009-04-19 23:30:15 UTC (rev 1475)
+++ trunk/src/jtag/ft2232.c	2009-04-20 06:40:45 UTC (rev 1476)
@@ -158,7 +158,7 @@
 	{ "stm32stick",           stm32stick_init,           stm32stick_reset,   NULL                    },
 	{ "axm0432_jtag",         axm0432_jtag_init,         axm0432_jtag_reset, NULL                    },
 	{"sheevaplug",            sheevaplug_init,           sheevaplug_reset,   NULL                    },
-	{ NULL,                   NULL,                      NULL },
+	{ NULL,                   NULL,                      NULL,               NULL                    },
 };
 
 static u8                  nTRST, nTRSTnOE, nSRST, nSRSTnOE;
@@ -233,7 +233,7 @@
 }
 
 
-int ft2232_read(u8* buf, int size, u32* bytes_read)
+int ft2232_read(u8* buf, u32 size, u32* bytes_read)
 {
 #if BUILD_FT2232_FTD2XX == 1
 	DWORD     dw_bytes_read;
@@ -1607,7 +1607,7 @@
 		if (status == FT_OK)
 		{
 			char** desc_array = malloc( sizeof(char*) * (num_devices + 1) );
-			int    i;
+			u32 i;
 
 			for (i = 0; i < num_devices; i++)
 				desc_array[i] = malloc(64);

Modified: trunk/src/jtag/presto.c
===================================================================
--- trunk/src/jtag/presto.c	2009-04-19 23:30:15 UTC (rev 1475)
+++ trunk/src/jtag/presto.c	2009-04-20 06:40:45 UTC (rev 1476)
@@ -138,7 +138,7 @@
 	0x80, 0xA0, 0xA8, 0xB0, 0xC0, 0xE0
 };
 
-int presto_write(u8 *buf, int size)
+int presto_write(u8 *buf, u32 size)
 {
 #if BUILD_PRESTO_FTD2XX == 1
 	DWORD ftbytes;
@@ -160,14 +160,14 @@
 
 	if (ftbytes != size)
 	{
-		LOG_ERROR("couldn't write the requested number of bytes to PRESTO (%i < %i)", ftbytes, size);
+		LOG_ERROR("couldn't write the requested number of bytes to PRESTO (%u < %u)", (u32)ftbytes, size);
 		return ERROR_JTAG_DEVICE_ERROR;
 	}
 
 	return ERROR_OK;
 }
 
-int presto_read(u8* buf, int size)
+int presto_read(u8* buf, u32 size)
 {
 #if BUILD_PRESTO_FTD2XX == 1
 	DWORD ftbytes;
@@ -202,7 +202,7 @@
 	if (ftbytes != size)
 	{
 		/* this is just a warning, there might have been timeout when detecting PRESTO, which is not fatal */
-		LOG_WARNING("couldn't read the requested number of bytes from PRESTO (%i < %i)", ftbytes, size);
+		LOG_WARNING("couldn't read the requested number of bytes from PRESTO (%u < %u)", (u32)ftbytes, size);
 		return ERROR_JTAG_DEVICE_ERROR;
 	}
 
@@ -212,7 +212,7 @@
 #if BUILD_PRESTO_FTD2XX == 1
 int presto_open_ftd2xx(char *req_serial)
 {
-	int i;
+	u32 i;
 	DWORD numdevs;
 	DWORD vidpid;
 	char devname[FT_DEVICE_NAME_LEN];
@@ -238,7 +238,7 @@
 		return ERROR_JTAG_DEVICE_ERROR;
 	}
 
-	LOG_DEBUG("FTDI devices available: %i", numdevs);
+	LOG_DEBUG("FTDI devices available: %lu", numdevs);
 	for (i = 0; i < numdevs; i++)
 	{
 		if ((presto->status = FT_Open(i, &(presto->handle))) != FT_OK)
@@ -257,7 +257,7 @@
 				break;
 		}
 		else
-			LOG_DEBUG("FT_GetDeviceInfo failed: %i", presto->status);
+			LOG_DEBUG("FT_GetDeviceInfo failed: %lu", presto->status);
 
 		LOG_DEBUG("FTDI device %i does not match, closing", i);
 		FT_Close(presto->handle);



From oharboe at mail.berlios.de  Mon Apr 20 12:52:12 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Mon, 20 Apr 2009 12:52:12 +0200
Subject: [Openocd-svn] r1477 - trunk/src/target
Message-ID: <200904201052.n3KAqCjO022579@sheep.berlios.de>

Author: oharboe
Date: 2009-04-20 12:52:08 +0200 (Mon, 20 Apr 2009)
New Revision: 1477

Modified:
   trunk/src/target/arm7_9_common.c
Log:
Holger Freyther <zecke at selfish.org> Attempt to fix arm7_9 breakpoint handling

Modified: trunk/src/target/arm7_9_common.c
===================================================================
--- trunk/src/target/arm7_9_common.c	2009-04-20 06:40:45 UTC (rev 1476)
+++ trunk/src/target/arm7_9_common.c	2009-04-20 10:52:08 UTC (rev 1477)
@@ -78,6 +78,26 @@
 	return jtag_execute_queue();
 }
 
+static void arm7_9_assign_wp(arm7_9_common_t *arm7_9, breakpoint_t *breakpoint)
+{
+	if (!arm7_9->wp0_used)
+	{
+		arm7_9->wp0_used = 1;
+		breakpoint->set = 1;
+		arm7_9->wp_available--;
+	}
+	else if (!arm7_9->wp1_used)
+	{
+		arm7_9->wp1_used = 1;
+		breakpoint->set = 2;
+		arm7_9->wp_available--;
+	}
+	else
+	{
+		LOG_ERROR("BUG: no hardware comparator available");
+	}
+}
+
 /* set up embedded ice registers */
 static int arm7_9_set_software_breakpoints(arm7_9_common_t *arm7_9)
 {
@@ -182,6 +202,13 @@
 	{
 		/* either an ARM (4 byte) or Thumb (2 byte) breakpoint */
 		u32 mask = (breakpoint->length == 4) ? 0x3u : 0x1u;
+
+		/* reassign a hw breakpoint */
+		if (breakpoint->set==0)
+		{
+			arm7_9_assign_wp(arm7_9, breakpoint);
+		}
+
 		if (breakpoint->set==1)
 		{
 			embeddedice_set_reg(&arm7_9->eice_cache->reg_list[EICE_W0_ADDR_VALUE], breakpoint->address);
@@ -288,11 +315,13 @@
 		{
 			embeddedice_set_reg(&arm7_9->eice_cache->reg_list[EICE_W0_CONTROL_VALUE], 0x0);
 			arm7_9->wp0_used = 0;
+			arm7_9->wp_available++;
 		}
 		else if (breakpoint->set == 2)
 		{
 			embeddedice_set_reg(&arm7_9->eice_cache->reg_list[EICE_W1_CONTROL_VALUE], 0x0);
 			arm7_9->wp1_used = 0;
+			arm7_9->wp_available++;
 		}
 		retval = jtag_execute_queue();
 		breakpoint->set = 0;
@@ -367,22 +396,7 @@
 
 	if (breakpoint->type == BKPT_HARD)
 	{
-		arm7_9->wp_available--;
-
-		if (!arm7_9->wp0_used)
-		{
-			arm7_9->wp0_used = 1;
-			breakpoint->set = 1;
-		}
-		else if (!arm7_9->wp1_used)
-		{
-			arm7_9->wp1_used = 1;
-			breakpoint->set = 2;
-		}
-		else
-		{
-			LOG_ERROR("BUG: no hardware comparator available");
-		}
+		arm7_9_assign_wp(arm7_9, breakpoint);
 	}
 
 	arm7_9->breakpoint_count++;



From ntfreak at mail.berlios.de  Tue Apr 21 00:38:29 2009
From: ntfreak at mail.berlios.de (ntfreak at BerliOS)
Date: Tue, 21 Apr 2009 00:38:29 +0200
Subject: [Openocd-svn] r1478 - in trunk/src: jtag target/target
Message-ID: <200904202238.n3KMcTwB011226@sheep.berlios.de>

Author: ntfreak
Date: 2009-04-21 00:38:27 +0200 (Tue, 21 Apr 2009)
New Revision: 1478

Modified:
   trunk/src/jtag/at91rm9200.c
   trunk/src/target/target/lpc2124.cfg
   trunk/src/target/target/lpc2378.cfg
Log:
- fix at91rm9200 warning. Thanks Zach Welch <zw at superlucidity.net>
- add missing svn props from previous commit

Modified: trunk/src/jtag/at91rm9200.c
===================================================================
--- trunk/src/jtag/at91rm9200.c	2009-04-20 10:52:08 UTC (rev 1477)
+++ trunk/src/jtag/at91rm9200.c	2009-04-20 22:38:27 UTC (rev 1478)
@@ -104,7 +104,7 @@
 struct device_t devices[] =
 {
 	{ "rea_ecr", PIOD, P27, PIOA, NC, PIOD, P23, PIOD, P24, PIOD, P26, PIOC, P5 },
-	{ NULL, 0 }
+	{ .name = NULL },
 };
 
 /* configuration */

Modified: trunk/src/target/target/lpc2124.cfg
===================================================================
--- trunk/src/target/target/lpc2124.cfg	2009-04-20 10:52:08 UTC (rev 1477)
+++ trunk/src/target/target/lpc2124.cfg	2009-04-20 22:38:27 UTC (rev 1478)
@@ -1,38 +1,38 @@
-#LPC-2124 CPU
-
-if { [info exists CHIPNAME] } {
-   set  _CHIPNAME $CHIPNAME
-} else {
-   set  _CHIPNAME lpc2124
-}
-
-if { [info exists ENDIAN] } {
-   set  _ENDIAN $ENDIAN
-} else {
-   set  _ENDIAN little
-}
-
-if { [info exists CPUTAPID ] } {
-   set _CPUTAPID $CPUTAPID
-} else {
-  # force an error till we get a good number
-    set _CPUTAPID 0x4f1f0f0f
-}
-
-
-#use combined on interfaces or targets that can't set TRST/SRST separately
-reset_config trst_and_srst srst_pulls_trst
-jtag_nsrst_delay 10
-jtag_khz 1000
-
-#jtag scan chain
-jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
-
-set _TARGETNAME [format "%s.cpu" $_CHIPNAME]
-target create $_TARGETNAME arm7tdmi -endian $_ENDIAN -chain-position $_TARGETNAME -variant arm7tdmi-s_r4
-
-$_TARGETNAME configure -work-area-virt 0 -work-area-phys 0x40000000 -work-area-size 0x4000 -work-area-backup 0
-
-
-#flash bank <driver> <base> <size> <chip_width> <bus_width>
-flash bank lpc2000 0x0 0x40000 0 0 0 lpc2000_v1 14745 calc_checksum
+#LPC-2124 CPU
+
+if { [info exists CHIPNAME] } {
+   set  _CHIPNAME $CHIPNAME
+} else {
+   set  _CHIPNAME lpc2124
+}
+
+if { [info exists ENDIAN] } {
+   set  _ENDIAN $ENDIAN
+} else {
+   set  _ENDIAN little
+}
+
+if { [info exists CPUTAPID ] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+  # force an error till we get a good number
+    set _CPUTAPID 0x4f1f0f0f
+}
+
+
+#use combined on interfaces or targets that can't set TRST/SRST separately
+reset_config trst_and_srst srst_pulls_trst
+jtag_nsrst_delay 10
+jtag_khz 1000
+
+#jtag scan chain
+jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+
+set _TARGETNAME [format "%s.cpu" $_CHIPNAME]
+target create $_TARGETNAME arm7tdmi -endian $_ENDIAN -chain-position $_TARGETNAME -variant arm7tdmi-s_r4
+
+$_TARGETNAME configure -work-area-virt 0 -work-area-phys 0x40000000 -work-area-size 0x4000 -work-area-backup 0
+
+
+#flash bank <driver> <base> <size> <chip_width> <bus_width>
+flash bank lpc2000 0x0 0x40000 0 0 0 lpc2000_v1 14745 calc_checksum


Property changes on: trunk/src/target/target/lpc2124.cfg
___________________________________________________________________
Name: svn:eol-style
   + native

Modified: trunk/src/target/target/lpc2378.cfg
===================================================================
--- trunk/src/target/target/lpc2378.cfg	2009-04-20 10:52:08 UTC (rev 1477)
+++ trunk/src/target/target/lpc2378.cfg	2009-04-20 22:38:27 UTC (rev 1478)
@@ -1,49 +1,49 @@
-# NXP LPC2378 ARM7TDMI-S with 512kB Flash and 32kB Local On-Chip SRAM (58kB total), clocked with 4MHz internal RC oscillator
-
-if { [info exists CHIPNAME] } {
-	set  _CHIPNAME $CHIPNAME
-} else {
-	set  _CHIPNAME lpc2378
-}
-
-if { [info exists ENDIAN] } {
-	set  _ENDIAN $ENDIAN
-} else {
-	set  _ENDIAN little
-}
-
-if { [info exists CPUTAPID ] } {
-	set _CPUTAPID $CPUTAPID
-} else {
-	set _CPUTAPID 0x4f1f0f0f
-}
-
-#delays on reset lines
-jtag_nsrst_delay 200
-jtag_ntrst_delay 200
-
-# LPC2000 -> SRST causes TRST
-reset_config trst_and_srst srst_pulls_trst
-
-jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
-
-set _TARGETNAME [format "%s.cpu" $_CHIPNAME]
-target create $_TARGETNAME arm7tdmi -endian $_ENDIAN -chain-position $_TARGETNAME -variant arm7tdmi-s_r4
-
-# LPC2378 has 32kB of SRAM on its main system bus (so-called Local On-Chip SRAM)
-$_TARGETNAME configure -work-area-virt 0 -work-area-phys 0x40000000 -work-area-size 0x8000 -work-area-backup 0
-
-$_TARGETNAME configure -event reset-init {
-	# Force target into ARM state
-	soft_reset_halt
-	#do not remap 0x0000-0x0020 to anything but the flash
-	mwb 0xE01FC040 0x01
-}
-
-# LPC2378 has 512kB of FLASH, but upper 8kB are occupied by bootloader.
-# After reset the chip uses its internal 4MHz RC oscillator
-#flash bank lpc2000 <base> <size> 0 0 <target#> <variant>
-flash bank lpc2000 0x0 0x0007D000 0 0 0 lpc2000_v2 4000 calc_checksum
-
-# 4MHz / 6 = 666kHz, so use 500
-jtag_khz 500
+# NXP LPC2378 ARM7TDMI-S with 512kB Flash and 32kB Local On-Chip SRAM (58kB total), clocked with 4MHz internal RC oscillator
+
+if { [info exists CHIPNAME] } {
+	set  _CHIPNAME $CHIPNAME
+} else {
+	set  _CHIPNAME lpc2378
+}
+
+if { [info exists ENDIAN] } {
+	set  _ENDIAN $ENDIAN
+} else {
+	set  _ENDIAN little
+}
+
+if { [info exists CPUTAPID ] } {
+	set _CPUTAPID $CPUTAPID
+} else {
+	set _CPUTAPID 0x4f1f0f0f
+}
+
+#delays on reset lines
+jtag_nsrst_delay 200
+jtag_ntrst_delay 200
+
+# LPC2000 -> SRST causes TRST
+reset_config trst_and_srst srst_pulls_trst
+
+jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+
+set _TARGETNAME [format "%s.cpu" $_CHIPNAME]
+target create $_TARGETNAME arm7tdmi -endian $_ENDIAN -chain-position $_TARGETNAME -variant arm7tdmi-s_r4
+
+# LPC2378 has 32kB of SRAM on its main system bus (so-called Local On-Chip SRAM)
+$_TARGETNAME configure -work-area-virt 0 -work-area-phys 0x40000000 -work-area-size 0x8000 -work-area-backup 0
+
+$_TARGETNAME configure -event reset-init {
+	# Force target into ARM state
+	soft_reset_halt
+	#do not remap 0x0000-0x0020 to anything but the flash
+	mwb 0xE01FC040 0x01
+}
+
+# LPC2378 has 512kB of FLASH, but upper 8kB are occupied by bootloader.
+# After reset the chip uses its internal 4MHz RC oscillator
+#flash bank lpc2000 <base> <size> 0 0 <target#> <variant>
+flash bank lpc2000 0x0 0x0007D000 0 0 0 lpc2000_v2 4000 calc_checksum
+
+# 4MHz / 6 = 666kHz, so use 500
+jtag_khz 500


Property changes on: trunk/src/target/target/lpc2378.cfg
___________________________________________________________________
Name: svn:eol-style
   + native



From oharboe at mail.berlios.de  Tue Apr 21 07:29:41 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Tue, 21 Apr 2009 07:29:41 +0200
Subject: [Openocd-svn] r1479 - trunk/src/jtag
Message-ID: <200904210529.n3L5TfLQ007390@sheep.berlios.de>

Author: oharboe
Date: 2009-04-21 07:29:23 +0200 (Tue, 21 Apr 2009)
New Revision: 1479

Modified:
   trunk/src/jtag/amt_jtagaccel.c
   trunk/src/jtag/arm-jtag-ew.c
   trunk/src/jtag/at91rm9200.c
   trunk/src/jtag/bitbang.c
   trunk/src/jtag/bitq.c
   trunk/src/jtag/dummy.c
   trunk/src/jtag/ep93xx.c
   trunk/src/jtag/ft2232.c
   trunk/src/jtag/gw16012.c
   trunk/src/jtag/jlink.c
   trunk/src/jtag/jtag.c
   trunk/src/jtag/parport.c
   trunk/src/jtag/presto.c
   trunk/src/jtag/usbprog.c
   trunk/src/jtag/vsllink.c
Log:
Zach Welch <zw at superlucidity.net> use static keyword in jtag layer and drivers

Modified: trunk/src/jtag/amt_jtagaccel.c
===================================================================
--- trunk/src/jtag/amt_jtagaccel.c	2009-04-20 22:38:27 UTC (rev 1478)
+++ trunk/src/jtag/amt_jtagaccel.c	2009-04-21 05:29:23 UTC (rev 1479)
@@ -56,7 +56,7 @@
 #include "log.h"
 
 /* configuration */
-u16 amt_jtagaccel_port;
+static u16 amt_jtagaccel_port;
 
 /* interface variables
  */
@@ -68,28 +68,33 @@
 
 #if PARPORT_USE_PPDEV == 1
 static int device_handle;
-int addr_mode = IEEE1284_MODE_EPP | IEEE1284_ADDR ;
-int data_mode = IEEE1284_MODE_EPP | IEEE1284_DATA ;
+
+static int addr_mode = IEEE1284_MODE_EPP | IEEE1284_ADDR ;
 #define AMT_AW(val)	do { ioctl(device_handle, PPSETMODE, &addr_mode); write(device_handle, &val, 1); } while (0)
 #define AMT_AR(val)	do { ioctl(device_handle, PPSETMODE, &addr_mode); read(device_handle, &val, 1); } while (0)
+
+static int data_mode = IEEE1284_MODE_EPP | IEEE1284_DATA ;
 #define AMT_DW(val)	do { ioctl(device_handle, PPSETMODE, &data_mode); write(device_handle, &val, 1); } while (0)
 #define AMT_DR(val)	do { ioctl(device_handle, PPSETMODE, &data_mode); read(device_handle, &val, 1); } while (0)
+
 #else
+
 #define AMT_AW(val)	do { outb(val, amt_jtagaccel_port + 3); } while (0)
 #define AMT_AR(val)	do { val = inb(amt_jtagaccel_port + 3); } while (0)
 #define AMT_DW(val)	do { outb(val, amt_jtagaccel_port + 4); } while (0)
 #define AMT_DR(val)	do { val = inb(amt_jtagaccel_port + 4); } while (0)
-#endif
 
-int amt_jtagaccel_execute_queue(void);
-int amt_jtagaccel_register_commands(struct command_context_s *cmd_ctx);
-int amt_jtagaccel_speed(int speed);
-int amt_jtagaccel_init(void);
-int amt_jtagaccel_quit(void);
+#endif // PARPORT_USE_PPDEV
 
-int amt_jtagaccel_handle_parport_port_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int amt_jtagaccel_handle_rtck_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int amt_jtagaccel_execute_queue(void);
+static int amt_jtagaccel_register_commands(struct command_context_s *cmd_ctx);
+static int amt_jtagaccel_speed(int speed);
+static int amt_jtagaccel_init(void);
+static int amt_jtagaccel_quit(void);
 
+static int amt_jtagaccel_handle_parport_port_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int amt_jtagaccel_handle_rtck_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+
 /* tap_move[i][j]: tap movement command to go from state i to state j
  * 0: Test-Logic-Reset
  * 1: Run-Test/Idle
@@ -98,7 +103,7 @@
  * 4: Shift-IR
  * 5: Pause-IR
  */
-u8 amt_jtagaccel_tap_move[6][6][2] =
+static u8 amt_jtagaccel_tap_move[6][6][2] =
 {
 	/*	   RESET         IDLE        DRSHIFT       DRPAUSE       IRSHIFT       IRPAUSE             */
 	{{0x1f, 0x00}, {0x0f, 0x00}, {0x8a, 0x04}, {0x0a, 0x00}, {0x06, 0x00}, {0x96, 0x00}},	/* RESET */
@@ -122,7 +127,7 @@
 	.quit = amt_jtagaccel_quit,
 };
 
-int amt_jtagaccel_register_commands(struct command_context_s *cmd_ctx)
+static int amt_jtagaccel_register_commands(struct command_context_s *cmd_ctx)
 {
 	register_command(cmd_ctx, NULL, "parport_port", amt_jtagaccel_handle_parport_port_command,
 					 COMMAND_CONFIG, NULL);
@@ -132,7 +137,7 @@
 	return ERROR_OK;
 }
 
-void amt_jtagaccel_reset(int trst, int srst)
+static void amt_jtagaccel_reset(int trst, int srst)
 {
 	if (trst == 1)
 		aw_control_rst |= 0x4;
@@ -147,7 +152,7 @@
 	AMT_AW(aw_control_rst);
 }
 
-int amt_jtagaccel_speed(int speed)
+static int amt_jtagaccel_speed(int speed)
 {
 	aw_control_baudrate &= 0xf0;
 	aw_control_baudrate |= speed & 0x0f;
@@ -156,7 +161,7 @@
 	return ERROR_OK;
 }
 
-void amt_jtagaccel_end_state(tap_state_t state)
+static void amt_jtagaccel_end_state(tap_state_t state)
 {
 	if (tap_is_state_stable(state))
 		tap_set_end_state(state);
@@ -167,7 +172,7 @@
 	}
 }
 
-void amt_wait_scan_busy(void)
+static void amt_wait_scan_busy(void)
 {
 	int timeout = 4096;
 	u8 ar_status;
@@ -183,7 +188,7 @@
 	}
 }
 
-void amt_jtagaccel_state_move(void)
+static void amt_jtagaccel_state_move(void)
 {
 	u8 aw_scan_tms_5;
 	u8 tms_scan[2];
@@ -210,7 +215,7 @@
 	tap_set_state(end_state);
 }
 
-void amt_jtagaccel_runtest(int num_cycles)
+static void amt_jtagaccel_runtest(int num_cycles)
 {
 	int i = 0;
 	u8 aw_scan_tms_5;
@@ -243,7 +248,7 @@
 		amt_jtagaccel_state_move();
 }
 
-void amt_jtagaccel_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size)
+static void amt_jtagaccel_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size)
 {
 	int bits_left = scan_size;
 	int bit_count = 0;
@@ -325,7 +330,7 @@
 	tap_set_state(tap_get_end_state());
 }
 
-int amt_jtagaccel_execute_queue(void)
+static int amt_jtagaccel_execute_queue(void)
 {
 	jtag_command_t *cmd = jtag_command_queue; /* currently processed command */
 	int scan_size;
@@ -431,7 +436,7 @@
 }
 #endif
 
-int amt_jtagaccel_init(void)
+static int amt_jtagaccel_init(void)
 {
 #if PARPORT_USE_PPDEV == 1
 	char buffer[256];
@@ -536,13 +541,13 @@
 	return ERROR_OK;
 }
 
-int amt_jtagaccel_quit(void)
+static int amt_jtagaccel_quit(void)
 {
 
 	return ERROR_OK;
 }
 
-int amt_jtagaccel_handle_parport_port_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int amt_jtagaccel_handle_parport_port_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc == 0)
 		return ERROR_OK;
@@ -554,7 +559,7 @@
 	return ERROR_OK;
 }
 
-int amt_jtagaccel_handle_rtck_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int amt_jtagaccel_handle_rtck_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc == 0)
 	{

Modified: trunk/src/jtag/arm-jtag-ew.c
===================================================================
--- trunk/src/jtag/arm-jtag-ew.c	2009-04-20 22:38:27 UTC (rev 1478)
+++ trunk/src/jtag/arm-jtag-ew.c	2009-04-21 05:29:23 UTC (rev 1479)
@@ -77,32 +77,32 @@
 static u8 usb_out_buffer[ARMJTAGEW_OUT_BUFFER_SIZE];
 
 /* External interface functions */
-int armjtagew_execute_queue(void);
-int armjtagew_speed(int speed);
-int armjtagew_khz(int khz, int *jtag_speed);
-int armjtagew_register_commands(struct command_context_s *cmd_ctx);
-int armjtagew_init(void);
-int armjtagew_quit(void);
+static int armjtagew_execute_queue(void);
+static int armjtagew_speed(int speed);
+static int armjtagew_khz(int khz, int *jtag_speed);
+static int armjtagew_register_commands(struct command_context_s *cmd_ctx);
+static int armjtagew_init(void);
+static int armjtagew_quit(void);
 
 /* CLI command handler functions */
-int armjtagew_handle_armjtagew_info_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int armjtagew_handle_armjtagew_info_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
 /* Queue command functions */
-void armjtagew_end_state(tap_state_t state);
-void armjtagew_state_move(void);
-void armjtagew_path_move(int num_states, tap_state_t *path);
-void armjtagew_runtest(int num_cycles);
-void armjtagew_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size, scan_command_t *command);
-void armjtagew_reset(int trst, int srst);
-void armjtagew_simple_command(u8 command);
-int armjtagew_get_status(void);
+static void armjtagew_end_state(tap_state_t state);
+static void armjtagew_state_move(void);
+static void armjtagew_path_move(int num_states, tap_state_t *path);
+static void armjtagew_runtest(int num_cycles);
+static void armjtagew_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size, scan_command_t *command);
+static void armjtagew_reset(int trst, int srst);
+//static void armjtagew_simple_command(u8 command);
+static int armjtagew_get_status(void);
 
 /* tap buffer functions */
-void armjtagew_tap_init(void);
-int armjtagew_tap_execute(void);
-void armjtagew_tap_ensure_space(int scans, int bits);
-void armjtagew_tap_append_step(int tms, int tdi);
-void armjtagew_tap_append_scan(int length, u8 *buffer, scan_command_t *command);
+static void armjtagew_tap_init(void);
+static int armjtagew_tap_execute(void);
+static void armjtagew_tap_ensure_space(int scans, int bits);
+static void armjtagew_tap_append_step(int tms, int tdi);
+static void armjtagew_tap_append_scan(int length, u8 *buffer, scan_command_t *command);
 
 /* ARM-JTAG-EW lowlevel functions */
 typedef struct armjtagew_jtag
@@ -110,20 +110,20 @@
 	struct usb_dev_handle* usb_handle;
 } armjtagew_jtag_t;
 
-armjtagew_jtag_t *armjtagew_usb_open(void);
-void armjtagew_usb_close(armjtagew_jtag_t *armjtagew_jtag);
-int armjtagew_usb_message(armjtagew_jtag_t *armjtagew_jtag, int out_length, int in_length);
-int armjtagew_usb_write(armjtagew_jtag_t *armjtagew_jtag, int out_length);
-int armjtagew_usb_read(armjtagew_jtag_t *armjtagew_jtag, int exp_in_length);
+static armjtagew_jtag_t *armjtagew_usb_open(void);
+static void armjtagew_usb_close(armjtagew_jtag_t *armjtagew_jtag);
+static int armjtagew_usb_message(armjtagew_jtag_t *armjtagew_jtag, int out_length, int in_length);
+static int armjtagew_usb_write(armjtagew_jtag_t *armjtagew_jtag, int out_length);
+static int armjtagew_usb_read(armjtagew_jtag_t *armjtagew_jtag, int exp_in_length);
 
 /* helper functions */
-int armjtagew_get_version_info(void);
+static int armjtagew_get_version_info(void);
 
 #ifdef _DEBUG_USB_COMMS_
-void armjtagew_debug_buffer(u8 *buffer, int length);
+static void armjtagew_debug_buffer(u8 *buffer, int length);
 #endif
 
-armjtagew_jtag_t* armjtagew_jtag_handle;
+static armjtagew_jtag_t* armjtagew_jtag_handle;
 
 
 
@@ -142,7 +142,7 @@
 };
 
 
-int armjtagew_execute_queue(void)
+static int armjtagew_execute_queue(void)
 {
 	jtag_command_t *cmd = jtag_command_queue;
 	int scan_size;
@@ -239,7 +239,7 @@
 
 
 /* Sets speed in kHz. */
-int armjtagew_speed(int speed)
+static int armjtagew_speed(int speed)
 {
     int result;
     int speed_real;
@@ -273,21 +273,21 @@
 }
 
 
-int armjtagew_khz(int khz, int *jtag_speed)
+static int armjtagew_khz(int khz, int *jtag_speed)
 {
 	*jtag_speed = khz;
 
 	return ERROR_OK;
 }
 
-int armjtagew_register_commands(struct command_context_s *cmd_ctx)
+static int armjtagew_register_commands(struct command_context_s *cmd_ctx)
 {
 	register_command(cmd_ctx, NULL, "armjtagew_info", armjtagew_handle_armjtagew_info_command, COMMAND_EXEC,
 		"query armjtagew info");
 	return ERROR_OK;
 }
 
-int armjtagew_init(void)
+static int armjtagew_init(void)
 {
 	int check_cnt;
 
@@ -325,7 +325,7 @@
 	return ERROR_OK;
 }
 
-int armjtagew_quit(void)
+static int armjtagew_quit(void)
 {
 	armjtagew_usb_close(armjtagew_jtag_handle);
 	return ERROR_OK;
@@ -334,7 +334,7 @@
 /***************************************************************************/
 /* Queue command implementations */
 
-void armjtagew_end_state(tap_state_t state)
+static void armjtagew_end_state(tap_state_t state)
 {
 	if (tap_is_state_stable(state))
 	{
@@ -348,7 +348,7 @@
 }
 
 /* Goes to the end state. */
-void armjtagew_state_move(void)
+static void armjtagew_state_move(void)
 {
 	int i;
 	int tms = 0;
@@ -363,7 +363,7 @@
 	tap_set_state(tap_get_end_state());
 }
 
-void armjtagew_path_move(int num_states, tap_state_t *path)
+static void armjtagew_path_move(int num_states, tap_state_t *path)
 {
 	int i;
 
@@ -394,7 +394,7 @@
 	tap_set_end_state(tap_get_state());
 }
 
-void armjtagew_runtest(int num_cycles)
+static void armjtagew_runtest(int num_cycles)
 {
 	int i;
 
@@ -421,7 +421,7 @@
 	}
 }
 
-void armjtagew_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size, scan_command_t *command)
+static void armjtagew_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size, scan_command_t *command)
 {
 	tap_state_t saved_end_state;
 
@@ -449,7 +449,7 @@
 	}
 }
 
-void armjtagew_reset(int trst, int srst)
+static void armjtagew_reset(int trst, int srst)
 {
 	const u8 trst_mask = (1u<<5);
 	const u8 srst_mask = (1u<<6);
@@ -498,7 +498,7 @@
 }
 
 
-int armjtagew_get_status(void)
+static int armjtagew_get_status(void)
 {
 	int result;
 
@@ -530,7 +530,7 @@
 	return ERROR_OK;
 }
 
-int armjtagew_get_version_info(void)
+static int armjtagew_get_version_info(void)
 {
 	int result;
 	char sn[16];
@@ -559,7 +559,7 @@
 	return ERROR_OK;
 }
 
-int armjtagew_handle_armjtagew_info_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int armjtagew_handle_armjtagew_info_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (armjtagew_get_version_info() == ERROR_OK)
 	{
@@ -596,13 +596,13 @@
 
 static int last_tms;
 
-void armjtagew_tap_init(void)
+static void armjtagew_tap_init(void)
 {
 	tap_length = 0;
 	pending_scan_results_length = 0;
 }
 
-void armjtagew_tap_ensure_space(int scans, int bits)
+static void armjtagew_tap_ensure_space(int scans, int bits)
 {
 	int available_scans = MAX_PENDING_SCAN_RESULTS - pending_scan_results_length;
 	int available_bits = ARMJTAGEW_TAP_BUFFER_SIZE * 8 - tap_length;
@@ -613,7 +613,7 @@
 	}
 }
 
-void armjtagew_tap_append_step(int tms, int tdi)
+static void armjtagew_tap_append_step(int tms, int tdi)
 {
 	last_tms = tms;
 	int index = tap_length / 8;
@@ -668,7 +668,7 @@
 
 /* Pad and send a tap sequence to the device, and receive the answer.
  * For the purpose of padding we assume that we are in idle or pause state. */
-int armjtagew_tap_execute(void)
+static int armjtagew_tap_execute(void)
 {
 	int byte_length;
 	int tms_offset;
@@ -764,7 +764,7 @@
 /*****************************************************************************/
 /* JLink USB low-level functions */
 
-armjtagew_jtag_t* armjtagew_usb_open()
+static armjtagew_jtag_t* armjtagew_usb_open()
 {
 	struct usb_bus *busses;
 	struct usb_bus *bus;
@@ -812,14 +812,14 @@
 	return NULL;
 }
 
-void armjtagew_usb_close(armjtagew_jtag_t *armjtagew_jtag)
+static void armjtagew_usb_close(armjtagew_jtag_t *armjtagew_jtag)
 {
 	usb_close(armjtagew_jtag->usb_handle);
 	free(armjtagew_jtag);
 }
 
 /* Send a message and receive the reply. */
-int armjtagew_usb_message(armjtagew_jtag_t *armjtagew_jtag, int out_length, int in_length)
+static int armjtagew_usb_message(armjtagew_jtag_t *armjtagew_jtag, int out_length, int in_length)
 {
 	int result;
 
@@ -842,7 +842,7 @@
 }
 
 /* Write data from out_buffer to USB. */
-int armjtagew_usb_write(armjtagew_jtag_t *armjtagew_jtag, int out_length)
+static int armjtagew_usb_write(armjtagew_jtag_t *armjtagew_jtag, int out_length)
 {
 	int result;
 
@@ -864,7 +864,7 @@
 }
 
 /* Read data from USB into in_buffer. */
-int armjtagew_usb_read(armjtagew_jtag_t *armjtagew_jtag, int exp_in_length)
+static int armjtagew_usb_read(armjtagew_jtag_t *armjtagew_jtag, int exp_in_length)
 {
 	int result = usb_bulk_read(armjtagew_jtag->usb_handle, ARMJTAGEW_EPT_BULK_IN, \
 		(char*)usb_in_buffer, exp_in_length, ARMJTAGEW_USB_TIMEOUT);
@@ -881,7 +881,7 @@
 #ifdef _DEBUG_USB_COMMS_
 #define BYTES_PER_LINE  16
 
-void armjtagew_debug_buffer(u8 *buffer, int length)
+static void armjtagew_debug_buffer(u8 *buffer, int length)
 {
 	char line[81];
 	char s[4];

Modified: trunk/src/jtag/at91rm9200.c
===================================================================
--- trunk/src/jtag/at91rm9200.c	2009-04-20 22:38:27 UTC (rev 1478)
+++ trunk/src/jtag/at91rm9200.c	2009-04-21 05:29:23 UTC (rev 1479)
@@ -119,14 +119,14 @@
 
 /* low level command set
  */
-int at91rm9200_read(void);
-void at91rm9200_write(int tck, int tms, int tdi);
-void at91rm9200_reset(int trst, int srst);
+static int at91rm9200_read(void);
+static void at91rm9200_write(int tck, int tms, int tdi);
+static void at91rm9200_reset(int trst, int srst);
 
-int at91rm9200_speed(int speed);
-int at91rm9200_register_commands(struct command_context_s *cmd_ctx);
-int at91rm9200_init(void);
-int at91rm9200_quit(void);
+static int at91rm9200_speed(int speed);
+static int at91rm9200_register_commands(struct command_context_s *cmd_ctx);
+static int at91rm9200_init(void);
+static int at91rm9200_quit(void);
 
 jtag_interface_t at91rm9200_interface =
 {
@@ -140,7 +140,7 @@
 	.quit = at91rm9200_quit,
 };
 
-bitbang_interface_t at91rm9200_bitbang =
+static bitbang_interface_t at91rm9200_bitbang =
 {
 	.read = at91rm9200_read,
 	.write = at91rm9200_write,
@@ -148,12 +148,12 @@
 	.blink = 0
 };
 
-int at91rm9200_read(void)
+static int at91rm9200_read(void)
 {
 	return (pio_base[device->TDO_PIO + PIO_PDSR] & device->TDO_MASK) != 0;
 }
 
-void at91rm9200_write(int tck, int tms, int tdi)
+static void at91rm9200_write(int tck, int tms, int tdi)
 {
 	if (tck)
 		pio_base[device->TCK_PIO + PIO_SODR] = device->TCK_MASK;
@@ -172,7 +172,7 @@
 }
 
 /* (1) assert or (0) deassert reset lines */
-void at91rm9200_reset(int trst, int srst)
+static void at91rm9200_reset(int trst, int srst)
 {
 	if (trst == 0)
 		pio_base[device->TRST_PIO + PIO_SODR] = device->TRST_MASK;
@@ -185,13 +185,13 @@
 		pio_base[device->SRST_PIO + PIO_CODR] = device->SRST_MASK;
 }
 
-int at91rm9200_speed(int speed)
+static int at91rm9200_speed(int speed)
 {
 
 	return ERROR_OK;
 }
 
-int at91rm9200_handle_device_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int at91rm9200_handle_device_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc == 0)
 		return ERROR_OK;
@@ -206,14 +206,14 @@
 	return ERROR_OK;
 }
 
-int at91rm9200_register_commands(struct command_context_s *cmd_ctx)
+static int at91rm9200_register_commands(struct command_context_s *cmd_ctx)
 {
 	register_command(cmd_ctx, NULL, "at91rm9200_device", at91rm9200_handle_device_command,
 		COMMAND_CONFIG, NULL);
 	return ERROR_OK;
 }
 
-int at91rm9200_init(void)
+static int at91rm9200_init(void)
 {
 	struct device_t *cur_device;
 
@@ -284,7 +284,7 @@
 	return ERROR_OK;
 }
 
-int at91rm9200_quit(void)
+static int at91rm9200_quit(void)
 {
 
 	return ERROR_OK;

Modified: trunk/src/jtag/bitbang.c
===================================================================
--- trunk/src/jtag/bitbang.c	2009-04-20 22:38:27 UTC (rev 1478)
+++ trunk/src/jtag/bitbang.c	2009-04-21 05:29:23 UTC (rev 1479)
@@ -71,12 +71,9 @@
  */
 #define CLOCK_IDLE() 0
 
-int bitbang_execute_queue(void);
 
-
 /* The bitbang driver leaves the TCK 0 when in idle */
-
-void bitbang_end_state(tap_state_t state)
+static void bitbang_end_state(tap_state_t state)
 {
 	if (tap_is_state_stable(state))
 		tap_set_end_state(state);
@@ -87,7 +84,7 @@
 	}
 }
 
-void bitbang_state_move(void)
+static void bitbang_state_move(void)
 {
 	int i=0, tms=0;
 	u8 tms_scan = tap_get_tms_path(tap_get_state(), tap_get_end_state());
@@ -103,7 +100,7 @@
 	tap_set_state(tap_get_end_state());
 }
 
-void bitbang_path_move(pathmove_command_t *cmd)
+static void bitbang_path_move(pathmove_command_t *cmd)
 {
 	int num_states = cmd->num_states;
 	int state_count;
@@ -139,7 +136,7 @@
 	tap_set_end_state(tap_get_state());
 }
 
-void bitbang_runtest(int num_cycles)
+static void bitbang_runtest(int num_cycles)
 {
 	int i;
 
@@ -182,7 +179,7 @@
 
 
 
-void bitbang_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size)
+static void bitbang_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size)
 {
 	tap_state_t saved_end_state = tap_get_end_state();
 	int bit_cnt;

Modified: trunk/src/jtag/bitq.c
===================================================================
--- trunk/src/jtag/bitq.c	2009-04-20 22:38:27 UTC (rev 1478)
+++ trunk/src/jtag/bitq.c	2009-04-21 05:29:23 UTC (rev 1479)
@@ -36,10 +36,10 @@
 
 bitq_interface_t* bitq_interface;       /* low level bit queue interface */
 
-bitq_state_t      bitq_in_state;        /* state of input queue */
+static bitq_state_t      bitq_in_state;        /* state of input queue */
 
-u8* bitq_in_buffer;                     /* buffer dynamically reallocated as needed */
-int     bitq_in_bufsize = 32; /* min. buffer size */
+static u8* bitq_in_buffer;                     /* buffer dynamically reallocated as needed */
+static int     bitq_in_bufsize = 32; /* min. buffer size */
 
 /*
  * input queue processing does not use jtag_read_buffer() to avoid unnecessary overhead

Modified: trunk/src/jtag/dummy.c
===================================================================
--- trunk/src/jtag/dummy.c	2009-04-20 22:38:27 UTC (rev 1478)
+++ trunk/src/jtag/dummy.c	2009-04-21 05:29:23 UTC (rev 1479)
@@ -37,10 +37,10 @@
 static u32 dummy_data;
 
 
-int dummy_speed(int speed);
-int dummy_register_commands(struct command_context_s *cmd_ctx);
-int dummy_init(void);
-int dummy_quit(void);
+static int dummy_speed(int speed);
+static int dummy_register_commands(struct command_context_s *cmd_ctx);
+static int dummy_init(void);
+static int dummy_quit(void);
 static int dummy_khz(int khz, int *jtag_speed);
 static int dummy_speed_div(int speed, int *khz);
 
@@ -63,12 +63,12 @@
 	.quit = dummy_quit,
 };
 
-int dummy_read(void);
-void dummy_write(int tck, int tms, int tdi);
-void dummy_reset(int trst, int srst);
-void dummy_led(int on);
+static int dummy_read(void);
+static void dummy_write(int tck, int tms, int tdi);
+static void dummy_reset(int trst, int srst);
+static void dummy_led(int on);
 
-bitbang_interface_t dummy_bitbang =
+static bitbang_interface_t dummy_bitbang =
 {
 	.read = dummy_read,
 	.write = dummy_write,
@@ -76,7 +76,7 @@
 	.blink = dummy_led
 };
 
-int dummy_read(void)
+static int dummy_read(void)
 {
 	int data = 1 & dummy_data;
 	dummy_data = (dummy_data >> 1) | (1<<31);
@@ -84,7 +84,7 @@
 }
 
 
-void dummy_write(int tck, int tms, int tdi)
+static void dummy_write(int tck, int tms, int tdi)
 {
 	/* TAP standard: "state transitions occur on rising edge of clock" */
 	if( tck != dummy_clock )
@@ -121,7 +121,7 @@
 	}
 }
 
-void dummy_reset(int trst, int srst)
+static void dummy_reset(int trst, int srst)
 {
 	dummy_clock = 0;
 
@@ -158,29 +158,29 @@
 	return ERROR_OK;
 }
 
-int dummy_speed(int speed)
+static int dummy_speed(int speed)
 {
 	return ERROR_OK;
 }
 
-int dummy_register_commands(struct command_context_s *cmd_ctx)
+static int dummy_register_commands(struct command_context_s *cmd_ctx)
 {
 	return ERROR_OK;
 }
 
-int dummy_init(void)
+static int dummy_init(void)
 {
 	bitbang_interface = &dummy_bitbang;
 
 	return ERROR_OK;
 }
 
-int dummy_quit(void)
+static int dummy_quit(void)
 {
 	return ERROR_OK;
 }
 
-void dummy_led(int on)
+static void dummy_led(int on)
 {
 }
 

Modified: trunk/src/jtag/ep93xx.c
===================================================================
--- trunk/src/jtag/ep93xx.c	2009-04-20 22:38:27 UTC (rev 1478)
+++ trunk/src/jtag/ep93xx.c	2009-04-21 05:29:23 UTC (rev 1479)
@@ -50,14 +50,14 @@
 
 /* low level command set
  */
-int ep93xx_read(void);
-void ep93xx_write(int tck, int tms, int tdi);
-void ep93xx_reset(int trst, int srst);
+static int ep93xx_read(void);
+static void ep93xx_write(int tck, int tms, int tdi);
+static void ep93xx_reset(int trst, int srst);
 
-int ep93xx_speed(int speed);
-int ep93xx_register_commands(struct command_context_s *cmd_ctx);
-int ep93xx_init(void);
-int ep93xx_quit(void);
+static int ep93xx_speed(int speed);
+static int ep93xx_register_commands(struct command_context_s *cmd_ctx);
+static int ep93xx_init(void);
+static int ep93xx_quit(void);
 
 struct timespec ep93xx_zzzz;
 
@@ -73,7 +73,7 @@
 	.quit = ep93xx_quit,
 };
 
-bitbang_interface_t ep93xx_bitbang =
+static bitbang_interface_t ep93xx_bitbang =
 {
 	.read = ep93xx_read,
 	.write = ep93xx_write,
@@ -81,12 +81,12 @@
 	.blink = 0,
 };
 
-int ep93xx_read(void)
+static int ep93xx_read(void)
 {
 	return !!(*gpio_data_register & TDO_BIT);
 }
 
-void ep93xx_write(int tck, int tms, int tdi)
+static void ep93xx_write(int tck, int tms, int tdi)
 {
 	if (tck)
 		output_value |= TCK_BIT;
@@ -108,7 +108,7 @@
 }
 
 /* (1) assert or (0) deassert reset lines */
-void ep93xx_reset(int trst, int srst)
+static void ep93xx_reset(int trst, int srst)
 {
 	if (trst == 0)
 		output_value |= TRST_BIT;
@@ -124,13 +124,13 @@
 	nanosleep(&ep93xx_zzzz, NULL);
 }
 
-int ep93xx_speed(int speed)
+static int ep93xx_speed(int speed)
 {
 
 	return ERROR_OK;
 }
 
-int ep93xx_register_commands(struct command_context_s *cmd_ctx)
+static int ep93xx_register_commands(struct command_context_s *cmd_ctx)
 {
 
 	return ERROR_OK;
@@ -157,7 +157,7 @@
 	return ERROR_OK;
 }
 
-int ep93xx_init(void)
+static int ep93xx_init(void)
 {
 	int ret;
 
@@ -231,7 +231,7 @@
 	return ERROR_OK;
 }
 
-int ep93xx_quit(void)
+static int ep93xx_quit(void)
 {
 
 	return ERROR_OK;

Modified: trunk/src/jtag/ft2232.c
===================================================================
--- trunk/src/jtag/ft2232.c	2009-04-20 22:38:27 UTC (rev 1478)
+++ trunk/src/jtag/ft2232.c	2009-04-21 05:29:23 UTC (rev 1479)
@@ -70,20 +70,20 @@
 #define _DEBUG_USB_COMMS_
 #endif
 
-int ft2232_execute_queue(void);
+static int ft2232_execute_queue(void);
 
-int ft2232_speed(int speed);
-int ft2232_speed_div(int speed, int* khz);
-int ft2232_khz(int khz, int* jtag_speed);
-int ft2232_register_commands(struct command_context_s* cmd_ctx);
-int ft2232_init(void);
-int ft2232_quit(void);
+static int ft2232_speed(int speed);
+static int ft2232_speed_div(int speed, int* khz);
+static int ft2232_khz(int khz, int* jtag_speed);
+static int ft2232_register_commands(struct command_context_s* cmd_ctx);
+static int ft2232_init(void);
+static int ft2232_quit(void);
 
-int ft2232_handle_device_desc_command(struct command_context_s* cmd_ctx, char* cmd, char** args, int argc);
-int ft2232_handle_serial_command(struct command_context_s* cmd_ctx, char* cmd, char** args, int argc);
-int ft2232_handle_layout_command(struct command_context_s* cmd_ctx, char* cmd, char** args, int argc);
-int ft2232_handle_vid_pid_command(struct command_context_s* cmd_ctx, char* cmd, char** args, int argc);
-int ft2232_handle_latency_command(struct command_context_s* cmd_ctx, char* cmd, char** args, int argc);
+static int ft2232_handle_device_desc_command(struct command_context_s* cmd_ctx, char* cmd, char** args, int argc);
+static int ft2232_handle_serial_command(struct command_context_s* cmd_ctx, char* cmd, char** args, int argc);
+static int ft2232_handle_layout_command(struct command_context_s* cmd_ctx, char* cmd, char** args, int argc);
+static int ft2232_handle_vid_pid_command(struct command_context_s* cmd_ctx, char* cmd, char** args, int argc);
+static int ft2232_handle_latency_command(struct command_context_s* cmd_ctx, char* cmd, char** args, int argc);
 
 
 /**
@@ -97,11 +97,11 @@
 static int ft2232_stableclocks(int num_cycles, jtag_command_t* cmd);
 
 
-char *        ft2232_device_desc_A = NULL;
-char*         ft2232_device_desc = NULL;
-char*         ft2232_serial  = NULL;
-char*         ft2232_layout  = NULL;
-unsigned char ft2232_latency = 2;
+static char *        ft2232_device_desc_A = NULL;
+static char*         ft2232_device_desc = NULL;
+static char*         ft2232_serial  = NULL;
+static char*         ft2232_layout  = NULL;
+static unsigned char ft2232_latency = 2;
 
 #define MAX_USB_IDS 8
 /* vid = pid = 0 marks the end of the list */
@@ -117,31 +117,31 @@
 } ft2232_layout_t;
 
 /* init procedures for supported layouts */
-int  usbjtag_init(void);
-int  jtagkey_init(void);
-int  olimex_jtag_init(void);
-int  flyswatter_init(void);
-int  turtle_init(void);
-int  comstick_init(void);
-int  stm32stick_init(void);
-int  axm0432_jtag_init(void);
-int sheevaplug_init(void);
+static int  usbjtag_init(void);
+static int  jtagkey_init(void);
+static int  olimex_jtag_init(void);
+static int  flyswatter_init(void);
+static int  turtle_init(void);
+static int  comstick_init(void);
+static int  stm32stick_init(void);
+static int  axm0432_jtag_init(void);
+static int sheevaplug_init(void);
 
 /* reset procedures for supported layouts */
-void usbjtag_reset(int trst, int srst);
-void jtagkey_reset(int trst, int srst);
-void olimex_jtag_reset(int trst, int srst);
-void flyswatter_reset(int trst, int srst);
-void turtle_reset(int trst, int srst);
-void comstick_reset(int trst, int srst);
-void stm32stick_reset(int trst, int srst);
-void axm0432_jtag_reset(int trst, int srst);
-void sheevaplug_reset(int trst, int srst);
+static void usbjtag_reset(int trst, int srst);
+static void jtagkey_reset(int trst, int srst);
+static void olimex_jtag_reset(int trst, int srst);
+static void flyswatter_reset(int trst, int srst);
+static void turtle_reset(int trst, int srst);
+static void comstick_reset(int trst, int srst);
+static void stm32stick_reset(int trst, int srst);
+static void axm0432_jtag_reset(int trst, int srst);
+static void sheevaplug_reset(int trst, int srst);
 
 /* blink procedures for layouts that support a blinking led */
-void olimex_jtag_blink(void);
-void flyswatter_jtag_blink(void);
-void turtle_jtag_blink(void);
+static void olimex_jtag_blink(void);
+static void flyswatter_jtag_blink(void);
+static void turtle_jtag_blink(void);
 
 ft2232_layout_t            ft2232_layouts[] =
 {
@@ -200,7 +200,7 @@
 	.quit = ft2232_quit,
 };
 
-int ft2232_write(u8* buf, int size, u32* bytes_written)
+static int ft2232_write(u8* buf, int size, u32* bytes_written)
 {
 #if BUILD_FT2232_FTD2XX == 1
 	FT_STATUS status;
@@ -233,7 +233,7 @@
 }
 
 
-int ft2232_read(u8* buf, u32 size, u32* bytes_read)
+static int ft2232_read(u8* buf, u32 size, u32* bytes_read)
 {
 #if BUILD_FT2232_FTD2XX == 1
 	DWORD     dw_bytes_read;
@@ -281,7 +281,7 @@
 }
 
 
-int ft2232_speed(int speed)
+static int ft2232_speed(int speed)
 {
 	u8  buf[3];
 	int retval;
@@ -302,7 +302,7 @@
 }
 
 
-int ft2232_speed_div(int speed, int* khz)
+static int ft2232_speed_div(int speed, int* khz)
 {
 	/* Take a look in the FT2232 manual,
 	 * AN2232C-01 Command Processor for
@@ -314,7 +314,7 @@
 }
 
 
-int ft2232_khz(int khz, int* jtag_speed)
+static int ft2232_khz(int khz, int* jtag_speed)
 {
 	if (khz==0)
 	{
@@ -355,7 +355,7 @@
 }
 
 
-int ft2232_register_commands(struct command_context_s* cmd_ctx)
+static int ft2232_register_commands(struct command_context_s* cmd_ctx)
 {
 	register_command(cmd_ctx, NULL, "ft2232_device_desc", ft2232_handle_device_desc_command,
 			COMMAND_CONFIG, "the USB device description of the FTDI FT2232 device");
@@ -383,7 +383,7 @@
 }
 
 
-void ft2232_read_scan(enum scan_type type, u8* buffer, int scan_size)
+static void ft2232_read_scan(enum scan_type type, u8* buffer, int scan_size)
 {
 	int num_bytes = (scan_size + 7) / 8;
 	int bits_left = scan_size;
@@ -407,7 +407,7 @@
 }
 
 
-void ft2232_debug_dump_buffer(void)
+static void ft2232_debug_dump_buffer(void)
 {
 	int   i;
 	char  line[256];
@@ -428,7 +428,7 @@
 }
 
 
-int ft2232_send_and_recv(jtag_command_t* first, jtag_command_t* last)
+static int ft2232_send_and_recv(jtag_command_t* first, jtag_command_t* last)
 {
 	jtag_command_t* cmd;
 	u8*             buffer;
@@ -546,7 +546,7 @@
 }
 
 
-void ft2232_add_pathmove(pathmove_command_t* cmd)
+static void ft2232_add_pathmove(pathmove_command_t* cmd)
 {
 	int num_states = cmd->num_states;
 	int state_count = 0;
@@ -742,7 +742,7 @@
 }
 
 
-int ft2232_large_scan(scan_command_t* cmd, enum scan_type type, u8* buffer, int scan_size)
+static int ft2232_large_scan(scan_command_t* cmd, enum scan_type type, u8* buffer, int scan_size)
 {
 	int num_bytes = (scan_size + 7) / 8;
 	int bits_left = scan_size;
@@ -952,7 +952,7 @@
 }
 
 
-int ft2232_predict_scan_out(int scan_size, enum scan_type type)
+static int ft2232_predict_scan_out(int scan_size, enum scan_type type)
 {
 	int predicted_size = 3;
 	int num_bytes = (scan_size - 1) / 8;
@@ -979,7 +979,7 @@
 }
 
 
-int ft2232_predict_scan_in(int scan_size, enum scan_type type)
+static int ft2232_predict_scan_in(int scan_size, enum scan_type type)
 {
 	int predicted_size = 0;
 
@@ -1001,7 +1001,7 @@
 }
 
 
-void usbjtag_reset(int trst, int srst)
+static void usbjtag_reset(int trst, int srst)
 {
 	if (trst == 1)
 	{
@@ -1040,7 +1040,7 @@
 }
 
 
-void jtagkey_reset(int trst, int srst)
+static void jtagkey_reset(int trst, int srst)
 {
 	if (trst == 1)
 	{
@@ -1081,7 +1081,7 @@
 }
 
 
-void olimex_jtag_reset(int trst, int srst)
+static void olimex_jtag_reset(int trst, int srst)
 {
 	if (trst == 1)
 	{
@@ -1116,7 +1116,7 @@
 }
 
 
-void axm0432_jtag_reset(int trst, int srst)
+static void axm0432_jtag_reset(int trst, int srst)
 {
 	if (trst == 1)
 	{
@@ -1146,7 +1146,7 @@
 }
 
 
-void flyswatter_reset(int trst, int srst)
+static void flyswatter_reset(int trst, int srst)
 {
 	if (trst == 1)
 	{
@@ -1174,7 +1174,7 @@
 }
 
 
-void turtle_reset(int trst, int srst)
+static void turtle_reset(int trst, int srst)
 {
 	trst = trst;
 
@@ -1195,7 +1195,7 @@
 }
 
 
-void comstick_reset(int trst, int srst)
+static void comstick_reset(int trst, int srst)
 {
 	if (trst == 1)
 	{
@@ -1224,7 +1224,7 @@
 }
 
 
-void stm32stick_reset(int trst, int srst)
+static void stm32stick_reset(int trst, int srst)
 {
 	if (trst == 1)
 	{
@@ -1259,7 +1259,7 @@
 
 
 
-void sheevaplug_reset(int trst, int srst)
+static void sheevaplug_reset(int trst, int srst)
 {
 	if (trst == 1)
 		high_output &= ~nTRST;
@@ -1278,7 +1278,7 @@
 	LOG_DEBUG("trst: %i, srst: %i, high_output: 0x%2.2x, high_direction: 0x%2.2x", trst, srst, high_output, high_direction);
 }
 
-int ft2232_execute_queue()
+static int ft2232_execute_queue()
 {
 	jtag_command_t* cmd = jtag_command_queue;   /* currently processed command */
 	u8*             buffer;
@@ -1755,7 +1755,7 @@
 
 #endif /* BUILD_FT2232_LIBFTDI == 1 */
 
-int ft2232_init(void)
+static int ft2232_init(void)
 {
 	u8  buf[1];
 	int retval;
@@ -1837,7 +1837,7 @@
 }
 
 
-int usbjtag_init(void)
+static int usbjtag_init(void)
 {
 	u8  buf[3];
 	u32 bytes_written;
@@ -1912,7 +1912,7 @@
 }
 
 
-int axm0432_jtag_init(void)
+static int axm0432_jtag_init(void)
 {
 	u8  buf[3];
 	u32 bytes_written;
@@ -1982,7 +1982,7 @@
 }
 
 
-int jtagkey_init(void)
+static int jtagkey_init(void)
 {
 	u8  buf[3];
 	u32 bytes_written;
@@ -2064,7 +2064,7 @@
 }
 
 
-int olimex_jtag_init(void)
+static int olimex_jtag_init(void)
 {
 	u8  buf[3];
 	u32 bytes_written;
@@ -2131,7 +2131,7 @@
 }
 
 
-int flyswatter_init(void)
+static int flyswatter_init(void)
 {
 	u8  buf[3];
 	u32 bytes_written;
@@ -2178,7 +2178,7 @@
 }
 
 
-int turtle_init(void)
+static int turtle_init(void)
 {
 	u8  buf[3];
 	u32 bytes_written;
@@ -2219,7 +2219,7 @@
 }
 
 
-int comstick_init(void)
+static int comstick_init(void)
 {
 	u8  buf[3];
 	u32 bytes_written;
@@ -2263,7 +2263,7 @@
 }
 
 
-int stm32stick_init(void)
+static int stm32stick_init(void)
 {
 	u8  buf[3];
 	u32 bytes_written;
@@ -2307,7 +2307,7 @@
 }
 
 
-int sheevaplug_init(void)
+static int sheevaplug_init(void)
 {
 	u8 buf[3];
 	u32 bytes_written;
@@ -2358,7 +2358,7 @@
 	return ERROR_OK;
 }
 
-void olimex_jtag_blink(void)
+static void olimex_jtag_blink(void)
 {
 	/* Olimex ARM-USB-OCD has a LED connected to ACBUS3
 	 * ACBUS3 is bit 3 of the GPIOH port
@@ -2380,7 +2380,7 @@
 }
 
 
-void flyswatter_jtag_blink(void)
+static void flyswatter_jtag_blink(void)
 {
 	/*
 	 * Flyswatter has two LEDs connected to ACBUS2 and ACBUS3
@@ -2393,7 +2393,7 @@
 }
 
 
-void turtle_jtag_blink(void)
+static void turtle_jtag_blink(void)
 {
 	/*
 	 * Turtelizer2 has two LEDs connected to ACBUS2 and ACBUS3
@@ -2413,7 +2413,7 @@
 }
 
 
-int ft2232_quit(void)
+static int ft2232_quit(void)
 {
 #if BUILD_FT2232_FTD2XX == 1
 	FT_STATUS status;
@@ -2434,7 +2434,7 @@
 }
 
 
-int ft2232_handle_device_desc_command(struct command_context_s* cmd_ctx, char* cmd, char** args, int argc)
+static int ft2232_handle_device_desc_command(struct command_context_s* cmd_ctx, char* cmd, char** args, int argc)
 {
 	char *cp;
 	char buf[200];
@@ -2469,7 +2469,7 @@
 }
 
 
-int ft2232_handle_serial_command(struct command_context_s* cmd_ctx, char* cmd, char** args, int argc)
+static int ft2232_handle_serial_command(struct command_context_s* cmd_ctx, char* cmd, char** args, int argc)
 {
 	if (argc == 1)
 	{
@@ -2484,7 +2484,7 @@
 }
 
 
-int ft2232_handle_layout_command(struct command_context_s* cmd_ctx, char* cmd, char** args, int argc)
+static int ft2232_handle_layout_command(struct command_context_s* cmd_ctx, char* cmd, char** args, int argc)
 {
 	if (argc == 0)
 		return ERROR_OK;
@@ -2496,7 +2496,7 @@
 }
 
 
-int ft2232_handle_vid_pid_command(struct command_context_s* cmd_ctx, char* cmd, char** args, int argc)
+static int ft2232_handle_vid_pid_command(struct command_context_s* cmd_ctx, char* cmd, char** args, int argc)
 {
 	int i;
 
@@ -2529,7 +2529,7 @@
 }
 
 
-int ft2232_handle_latency_command(struct command_context_s* cmd_ctx, char* cmd, char** args, int argc)
+static int ft2232_handle_latency_command(struct command_context_s* cmd_ctx, char* cmd, char** args, int argc)
 {
 	if (argc == 1)
 	{

Modified: trunk/src/jtag/gw16012.c
===================================================================
--- trunk/src/jtag/gw16012.c	2009-04-20 22:38:27 UTC (rev 1478)
+++ trunk/src/jtag/gw16012.c	2009-04-21 05:29:23 UTC (rev 1479)
@@ -89,13 +89,13 @@
 static int device_handle;
 #endif
 
-int gw16012_execute_queue(void);
-int gw16012_register_commands(struct command_context_s *cmd_ctx);
-int gw16012_speed(int speed);
-int gw16012_init(void);
-int gw16012_quit(void);
+static int gw16012_execute_queue(void);
+static int gw16012_register_commands(struct command_context_s *cmd_ctx);
+static int gw16012_speed(int speed);
+static int gw16012_init(void);
+static int gw16012_quit(void);
 
-int gw16012_handle_parport_port_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int gw16012_handle_parport_port_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
 jtag_interface_t gw16012_interface =
 {
@@ -109,7 +109,7 @@
 	.quit = gw16012_quit,
 };
 
-int gw16012_register_commands(struct command_context_s *cmd_ctx)
+static int gw16012_register_commands(struct command_context_s *cmd_ctx)
 {
 	register_command(cmd_ctx, NULL, "parport_port", gw16012_handle_parport_port_command,
 					 COMMAND_CONFIG, NULL);
@@ -117,7 +117,7 @@
 	return ERROR_OK;
 }
 
-void gw16012_data(u8 value)
+static void gw16012_data(u8 value)
 {
 	value = (value & 0x7f) | gw16012_msb;
 	gw16012_msb ^= 0x80; /* toggle MSB */
@@ -137,7 +137,7 @@
 	#endif
 }
 
-void gw16012_control(u8 value)
+static void gw16012_control(u8 value)
 {
 	if (value != gw16012_control_value)
 	{
@@ -159,7 +159,7 @@
 	}
 }
 
-void gw16012_input(u8 *value)
+static void gw16012_input(u8 *value)
 {
 	#if PARPORT_USE_PPDEV == 1
 		ioctl(device_handle, PPRSTATUS, value);
@@ -173,7 +173,7 @@
 }
 
 /* (1) assert or (0) deassert reset lines */
-void gw16012_reset(int trst, int srst)
+static void gw16012_reset(int trst, int srst)
 {
 	LOG_DEBUG("trst: %i, srst: %i", trst, srst);
 
@@ -188,13 +188,13 @@
 		gw16012_control(0x0b);
 }
 
-int gw16012_speed(int speed)
+static int gw16012_speed(int speed)
 {
 
 	return ERROR_OK;
 }
 
-void gw16012_end_state(tap_state_t state)
+static void gw16012_end_state(tap_state_t state)
 {
 	if (tap_is_state_stable(state))
 		tap_set_end_state(state);
@@ -205,7 +205,7 @@
 	}
 }
 
-void gw16012_state_move(void)
+static void gw16012_state_move(void)
 {
 	int i=0, tms=0;
 	u8 tms_scan = tap_get_tms_path(tap_get_state(), tap_get_end_state());
@@ -221,7 +221,7 @@
 	tap_set_state(tap_get_end_state());
 }
 
-void gw16012_path_move(pathmove_command_t *cmd)
+static void gw16012_path_move(pathmove_command_t *cmd)
 {
 	int num_states = cmd->num_states;
 	int state_count;
@@ -252,7 +252,7 @@
 	tap_set_end_state(tap_get_state());
 }
 
-void gw16012_runtest(int num_cycles)
+static void gw16012_runtest(int num_cycles)
 {
 	tap_state_t saved_end_state = tap_get_end_state();
 	int i;
@@ -275,7 +275,7 @@
 		gw16012_state_move();
 }
 
-void gw16012_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size)
+static void gw16012_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size)
 {
 	int bits_left = scan_size;
 	int bit_count = 0;
@@ -348,7 +348,7 @@
 	}
 }
 
-int gw16012_execute_queue(void)
+static int gw16012_execute_queue(void)
 {
 	jtag_command_t *cmd = jtag_command_queue; /* currently processed command */
 	int scan_size;
@@ -436,7 +436,7 @@
 }
 
 #if PARPORT_USE_GIVEIO == 1
-int gw16012_get_giveio_access()
+static int gw16012_get_giveio_access()
 {
 	HANDLE h;
 	OSVERSIONINFO version;
@@ -461,7 +461,7 @@
 }
 #endif
 
-int gw16012_init(void)
+static int gw16012_init(void)
 {
 #if PARPORT_USE_PPDEV == 1
 	char buffer[256];
@@ -555,13 +555,13 @@
 	return ERROR_OK;
 }
 
-int gw16012_quit(void)
+static int gw16012_quit(void)
 {
 
 	return ERROR_OK;
 }
 
-int gw16012_handle_parport_port_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int gw16012_handle_parport_port_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc == 0)
 		return ERROR_OK;

Modified: trunk/src/jtag/jlink.c
===================================================================
--- trunk/src/jtag/jlink.c	2009-04-20 22:38:27 UTC (rev 1478)
+++ trunk/src/jtag/jlink.c	2009-04-21 05:29:23 UTC (rev 1479)
@@ -77,33 +77,33 @@
 #define JLINK_MAX_SPEED 12000
 
 /* External interface functions */
-int jlink_execute_queue(void);
-int jlink_speed(int speed);
-int jlink_speed_div(int speed, int* khz);
-int jlink_khz(int khz, int *jtag_speed);
-int jlink_register_commands(struct command_context_s *cmd_ctx);
-int jlink_init(void);
-int jlink_quit(void);
+static int jlink_execute_queue(void);
+static int jlink_speed(int speed);
+static int jlink_speed_div(int speed, int* khz);
+static int jlink_khz(int khz, int *jtag_speed);
+static int jlink_register_commands(struct command_context_s *cmd_ctx);
+static int jlink_init(void);
+static int jlink_quit(void);
 
 /* CLI command handler functions */
-int jlink_handle_jlink_info_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int jlink_handle_jlink_info_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
 /* Queue command functions */
-void jlink_end_state(tap_state_t state);
-void jlink_state_move(void);
-void jlink_path_move(int num_states, tap_state_t *path);
-void jlink_runtest(int num_cycles);
-void jlink_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size, scan_command_t *command);
-void jlink_reset(int trst, int srst);
-void jlink_simple_command(u8 command);
-int jlink_get_status(void);
+static void jlink_end_state(tap_state_t state);
+static void jlink_state_move(void);
+static void jlink_path_move(int num_states, tap_state_t *path);
+static void jlink_runtest(int num_cycles);
+static void jlink_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size, scan_command_t *command);
+static void jlink_reset(int trst, int srst);
+static void jlink_simple_command(u8 command);
+static int jlink_get_status(void);
 
 /* J-Link tap buffer functions */
-void jlink_tap_init(void);
-int jlink_tap_execute(void);
-void jlink_tap_ensure_space(int scans, int bits);
-void jlink_tap_append_step(int tms, int tdi);
-void jlink_tap_append_scan(int length, u8 *buffer, scan_command_t *command);
+static void jlink_tap_init(void);
+static int jlink_tap_execute(void);
+static void jlink_tap_ensure_space(int scans, int bits);
+static void jlink_tap_append_step(int tms, int tdi);
+static void jlink_tap_append_scan(int length, u8 *buffer, scan_command_t *command);
 
 /* Jlink lowlevel functions */
 typedef struct jlink_jtag
@@ -111,21 +111,21 @@
 	struct usb_dev_handle* usb_handle;
 } jlink_jtag_t;
 
-jlink_jtag_t *jlink_usb_open(void);
-void jlink_usb_close(jlink_jtag_t *jlink_jtag);
-int jlink_usb_message(jlink_jtag_t *jlink_jtag, int out_length, int in_length);
-int jlink_usb_write(jlink_jtag_t *jlink_jtag, int out_length);
-int jlink_usb_read(jlink_jtag_t *jlink_jtag, int expected_size);
-int jlink_usb_read_emu_result(jlink_jtag_t *jlink_jtag);
+static jlink_jtag_t *jlink_usb_open(void);
+static void jlink_usb_close(jlink_jtag_t *jlink_jtag);
+static int jlink_usb_message(jlink_jtag_t *jlink_jtag, int out_length, int in_length);
+static int jlink_usb_write(jlink_jtag_t *jlink_jtag, int out_length);
+static int jlink_usb_read(jlink_jtag_t *jlink_jtag, int expected_size);
+static int jlink_usb_read_emu_result(jlink_jtag_t *jlink_jtag);
 
 /* helper functions */
-int jlink_get_version_info(void);
+static int jlink_get_version_info(void);
 
 #ifdef _DEBUG_USB_COMMS_
-void jlink_debug_buffer(u8 *buffer, int length);
+static void jlink_debug_buffer(u8 *buffer, int length);
 #endif
 
-jlink_jtag_t* jlink_jtag_handle;
+static jlink_jtag_t* jlink_jtag_handle;
 
 /***************************************************************************/
 /* External interface implementation */
@@ -142,7 +142,7 @@
 	.quit = jlink_quit
 };
 
-int jlink_execute_queue(void)
+static int jlink_execute_queue(void)
 {
 	jtag_command_t *cmd = jtag_command_queue;
 	int scan_size;
@@ -238,7 +238,7 @@
 }
 
 /* Sets speed in kHz. */
-int jlink_speed(int speed)
+static int jlink_speed(int speed)
 {
 	int result;
 
@@ -272,28 +272,28 @@
 	return ERROR_OK;
 }
 
-int jlink_speed_div(int speed, int* khz)
+static int jlink_speed_div(int speed, int* khz)
 {
 	*khz = speed;
 
 	return ERROR_OK;
 }
 
-int jlink_khz(int khz, int *jtag_speed)
+static int jlink_khz(int khz, int *jtag_speed)
 {
 	*jtag_speed = khz;
 
 	return ERROR_OK;
 }
 
-int jlink_register_commands(struct command_context_s *cmd_ctx)
+static int jlink_register_commands(struct command_context_s *cmd_ctx)
 {
 	register_command(cmd_ctx, NULL, "jlink_info", jlink_handle_jlink_info_command, COMMAND_EXEC,
 		"query jlink info");
 	return ERROR_OK;
 }
 
-int jlink_init(void)
+static int jlink_init(void)
 {
 	int check_cnt;
 
@@ -331,7 +331,7 @@
 	return ERROR_OK;
 }
 
-int jlink_quit(void)
+static int jlink_quit(void)
 {
 	jlink_usb_close(jlink_jtag_handle);
 	return ERROR_OK;
@@ -340,7 +340,7 @@
 /***************************************************************************/
 /* Queue command implementations */
 
-void jlink_end_state(tap_state_t state)
+static void jlink_end_state(tap_state_t state)
 {
 	if (tap_is_state_stable(state))
 	{
@@ -354,7 +354,7 @@
 }
 
 /* Goes to the end state. */
-void jlink_state_move(void)
+static void jlink_state_move(void)
 {
 	int i;
 	int tms = 0;
@@ -369,7 +369,7 @@
 	tap_set_state(tap_get_end_state());
 }
 
-void jlink_path_move(int num_states, tap_state_t *path)
+static void jlink_path_move(int num_states, tap_state_t *path)
 {
 	int i;
 
@@ -395,7 +395,7 @@
 	tap_set_end_state(tap_get_state());
 }
 
-void jlink_runtest(int num_cycles)
+static void jlink_runtest(int num_cycles)
 {
 	int i;
 
@@ -422,7 +422,7 @@
 	}
 }
 
-void jlink_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size, scan_command_t *command)
+static void jlink_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size, scan_command_t *command)
 {
 	tap_state_t saved_end_state;
 
@@ -453,7 +453,7 @@
 	}
 }
 
-void jlink_reset(int trst, int srst)
+static void jlink_reset(int trst, int srst)
 {
 	LOG_DEBUG("trst: %i, srst: %i", trst, srst);
 
@@ -477,7 +477,7 @@
 	}
 }
 
-void jlink_simple_command(u8 command)
+static void jlink_simple_command(u8 command)
 {
 	int result;
 
@@ -492,7 +492,7 @@
 	}
 }
 
-int jlink_get_status(void)
+static int jlink_get_status(void)
 {
 	int result;
 
@@ -520,7 +520,7 @@
 	return ERROR_OK;
 }
 
-int jlink_get_version_info(void)
+static int jlink_get_version_info(void)
 {
 	int result;
 	int len = 0;
@@ -546,7 +546,7 @@
 	return ERROR_JTAG_DEVICE_ERROR;
 }
 
-int jlink_handle_jlink_info_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int jlink_handle_jlink_info_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (jlink_get_version_info() == ERROR_OK)
 	{
@@ -583,13 +583,13 @@
 
 static int last_tms;
 
-void jlink_tap_init(void)
+static void jlink_tap_init(void)
 {
 	tap_length = 0;
 	pending_scan_results_length = 0;
 }
 
-void jlink_tap_ensure_space(int scans, int bits)
+static void jlink_tap_ensure_space(int scans, int bits)
 {
 	int available_scans = MAX_PENDING_SCAN_RESULTS - pending_scan_results_length;
 	int available_bits = JLINK_TAP_BUFFER_SIZE * 8 - tap_length;
@@ -600,7 +600,7 @@
 	}
 }
 
-void jlink_tap_append_step(int tms, int tdi)
+static void jlink_tap_append_step(int tms, int tdi)
 {
 	last_tms = tms;
 	int index = tap_length / 8;
@@ -636,7 +636,7 @@
 	}
 }
 
-void jlink_tap_append_scan(int length, u8 *buffer, scan_command_t *command)
+static void jlink_tap_append_scan(int length, u8 *buffer, scan_command_t *command)
 {
 	pending_scan_result_t *pending_scan_result = &pending_scan_results_buffer[pending_scan_results_length];
 	int i;
@@ -655,7 +655,7 @@
 
 /* Pad and send a tap sequence to the device, and receive the answer.
  * For the purpose of padding we assume that we are in idle or pause state. */
-int jlink_tap_execute(void)
+static int jlink_tap_execute(void)
 {
 	int byte_length;
 	int tms_offset;
@@ -745,7 +745,7 @@
 /*****************************************************************************/
 /* JLink USB low-level functions */
 
-jlink_jtag_t* jlink_usb_open()
+static jlink_jtag_t* jlink_usb_open()
 {
 	struct usb_bus *busses;
 	struct usb_bus *bus;
@@ -791,14 +791,14 @@
 	return NULL;
 }
 
-void jlink_usb_close(jlink_jtag_t *jlink_jtag)
+static void jlink_usb_close(jlink_jtag_t *jlink_jtag)
 {
 	usb_close(jlink_jtag->usb_handle);
 	free(jlink_jtag);
 }
 
 /* Send a message and receive the reply. */
-int jlink_usb_message(jlink_jtag_t *jlink_jtag, int out_length, int in_length)
+static int jlink_usb_message(jlink_jtag_t *jlink_jtag, int out_length, int in_length)
 {
 	int result;
 	int result2;
@@ -859,7 +859,7 @@
 	}
 }
 
-int usb_bulk_write_ex(usb_dev_handle *dev, int ep, char *bytes, int size,
+static int usb_bulk_write_ex(usb_dev_handle *dev, int ep, char *bytes, int size,
                       int timeout) {
 
 	int rc = 0, tries = 3, this_size;
@@ -883,7 +883,7 @@
 
 }
 
-int usb_bulk_read_ex(usb_dev_handle *dev, int ep, char *bytes, int size,
+static int usb_bulk_read_ex(usb_dev_handle *dev, int ep, char *bytes, int size,
                   int timeout) {
 
 	int rc = 0, tries = 3, this_size;
@@ -908,7 +908,7 @@
 
 
 /* Write data from out_buffer to USB. */
-int jlink_usb_write(jlink_jtag_t *jlink_jtag, int out_length)
+static int jlink_usb_write(jlink_jtag_t *jlink_jtag, int out_length)
 {
 	int result;
 
@@ -930,7 +930,7 @@
 }
 
 /* Read data from USB into in_buffer. */
-int jlink_usb_read(jlink_jtag_t *jlink_jtag, int expected_size)
+static int jlink_usb_read(jlink_jtag_t *jlink_jtag, int expected_size)
 {
 	int result = usb_bulk_read_ex(jlink_jtag->usb_handle, JLINK_READ_ENDPOINT,
 		(char *)usb_in_buffer, expected_size, JLINK_USB_TIMEOUT);
@@ -944,7 +944,7 @@
 }
 
 /* Read the result from the previous EMU cmd into result_buffer. */
-int jlink_usb_read_emu_result(jlink_jtag_t *jlink_jtag)
+static int jlink_usb_read_emu_result(jlink_jtag_t *jlink_jtag)
 {
 	int result = usb_bulk_read_ex(jlink_jtag->usb_handle, JLINK_READ_ENDPOINT,
 		(char *)usb_emu_result_buffer, 1 /* JLINK_EMU_RESULT_BUFFER_SIZE */,
@@ -961,7 +961,7 @@
 #ifdef _DEBUG_USB_COMMS_
 #define BYTES_PER_LINE  16
 
-void jlink_debug_buffer(u8 *buffer, int length)
+static void jlink_debug_buffer(u8 *buffer, int length)
 {
 	char line[81];
 	char s[4];

Modified: trunk/src/jtag/jtag.c
===================================================================
--- trunk/src/jtag/jtag.c	2009-04-20 22:38:27 UTC (rev 1478)
+++ trunk/src/jtag/jtag.c	2009-04-21 05:29:23 UTC (rev 1479)
@@ -80,8 +80,8 @@
 int jtag_verify_capture_ir = 1;
 
 /* how long the OpenOCD should wait before attempting JTAG communication after reset lines deasserted (in ms) */
-int jtag_nsrst_delay = 0; /* default to no nSRST delay */
-int jtag_ntrst_delay = 0; /* default to no nTRST delay */
+static int jtag_nsrst_delay = 0; /* default to no nSRST delay */
+static int jtag_ntrst_delay = 0; /* default to no nTRST delay */
 
 /* maximum number of JTAG devices expected in the chain
  */
@@ -210,35 +210,35 @@
 jtag_interface_t *jtag = NULL;
 
 /* configuration */
-jtag_interface_t *jtag_interface = NULL;
+static jtag_interface_t *jtag_interface = NULL;
 int jtag_speed = 0;
 
 /* forward declarations */
-void jtag_add_pathmove(int num_states, tap_state_t *path);
-void jtag_add_runtest(int num_cycles, tap_state_t endstate);
-void jtag_add_end_state(tap_state_t endstate);
-void jtag_add_sleep(u32 us);
-int jtag_execute_queue(void);
-tap_state_t tap_state_by_name(const char *name);
+//void jtag_add_pathmove(int num_states, tap_state_t *path);
+//void jtag_add_runtest(int num_cycles, tap_state_t endstate);
+//void jtag_add_end_state(tap_state_t endstate);
+//void jtag_add_sleep(u32 us);
+//int jtag_execute_queue(void);
+static tap_state_t tap_state_by_name(const char *name);
 
 /* jtag commands */
-int handle_interface_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_jtag_speed_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_jtag_khz_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_jtag_device_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_reset_config_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_jtag_nsrst_delay_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_jtag_ntrst_delay_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_interface_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_jtag_speed_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_jtag_khz_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_jtag_device_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_reset_config_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_jtag_nsrst_delay_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_jtag_ntrst_delay_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
-int handle_scan_chain_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_scan_chain_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
-int handle_endstate_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_jtag_reset_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_runtest_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_irscan_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int Jim_Command_drscan(Jim_Interp *interp, int argc, Jim_Obj *const *argv);
+static int handle_endstate_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_jtag_reset_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_runtest_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_irscan_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int Jim_Command_drscan(Jim_Interp *interp, int argc, Jim_Obj *const *argv);
 
-int handle_verify_ircapture_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_verify_ircapture_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
 jtag_tap_t *jtag_AllTaps(void)
 {
@@ -2305,7 +2305,7 @@
 	return ERROR_OK;
 }
 
-int handle_interface_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_interface_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	int i;
 	int retval;
@@ -2368,7 +2368,7 @@
 	return ERROR_JTAG_INVALID_INTERFACE;
 }
 
-int handle_jtag_device_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_jtag_device_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	int e;
 	char buf[1024];
@@ -2429,7 +2429,7 @@
 	return e;
 }
 
-int handle_scan_chain_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_scan_chain_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	jtag_tap_t *tap;
 
@@ -2466,7 +2466,7 @@
 	return ERROR_OK;
 }
 
-int handle_reset_config_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_reset_config_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc < 1)
 		return ERROR_COMMAND_SYNTAX_ERROR;
@@ -2542,7 +2542,7 @@
 	return ERROR_OK;
 }
 
-int handle_jtag_nsrst_delay_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_jtag_nsrst_delay_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc < 1)
 	{
@@ -2557,7 +2557,7 @@
 	return ERROR_OK;
 }
 
-int handle_jtag_ntrst_delay_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_jtag_ntrst_delay_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc < 1)
 	{
@@ -2572,7 +2572,7 @@
 	return ERROR_OK;
 }
 
-int handle_jtag_speed_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_jtag_speed_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	int retval=ERROR_OK;
 
@@ -2600,7 +2600,7 @@
 	return retval;
 }
 
-int handle_jtag_khz_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_jtag_khz_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	int retval=ERROR_OK;
 	LOG_DEBUG("handle jtag khz");
@@ -2650,7 +2650,7 @@
 
 }
 
-int handle_endstate_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_endstate_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	tap_state_t state;
 
@@ -2673,7 +2673,7 @@
 	return ERROR_OK;
 }
 
-int handle_jtag_reset_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_jtag_reset_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	int trst = -1;
 	int srst = -1;
@@ -2710,7 +2710,7 @@
 	return ERROR_OK;
 }
 
-int handle_runtest_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_runtest_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc < 1)
 	{
@@ -2724,7 +2724,7 @@
 
 }
 
-int handle_irscan_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_irscan_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	int i;
 	scan_field_t *fields;
@@ -2799,7 +2799,7 @@
 	return ERROR_OK;
 }
 
-int Jim_Command_drscan(Jim_Interp *interp, int argc, Jim_Obj *const *args)
+static int Jim_Command_drscan(Jim_Interp *interp, int argc, Jim_Obj *const *args)
 {
 	int retval;
 	scan_field_t *fields;
@@ -2936,7 +2936,7 @@
 	return JIM_OK;
 }
 
-int handle_verify_ircapture_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_verify_ircapture_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc == 1)
 	{
@@ -3269,7 +3269,7 @@
 	return ret;
 }
 
-tap_state_t tap_state_by_name( const char *name )
+static tap_state_t tap_state_by_name( const char *name )
 {
 	tap_state_t x;
 

Modified: trunk/src/jtag/parport.c
===================================================================
--- trunk/src/jtag/parport.c	2009-04-20 22:38:27 UTC (rev 1478)
+++ trunk/src/jtag/parport.c	2009-04-21 05:29:23 UTC (rev 1479)
@@ -96,7 +96,7 @@
 	u8 LED_MASK;	/* data port bit for LED */
 } cable_t;
 
-cable_t cables[] = 
+static cable_t cables[] = 
 {	
 	/* name					tdo   trst  tms   tck   tdi   srst  o_inv i_inv init  exit  led */
 	{ "wiggler",			0x80, 0x10, 0x02, 0x04, 0x08, 0x01, 0x01, 0x80, 0x80, 0x80, 0x00 },
@@ -123,8 +123,8 @@
 };
 
 /* configuration */
-char* parport_cable = NULL;
-u16 parport_port;
+static char* parport_cable = NULL;
+static u16 parport_port;
 static int parport_exit = 0;
 
 /* interface variables
@@ -141,20 +141,20 @@
 
 /* low level command set
  */
-int parport_read(void);
-void parport_write(int tck, int tms, int tdi);
-void parport_reset(int trst, int srst);
-void parport_led(int on);
+static int parport_read(void);
+static void parport_write(int tck, int tms, int tdi);
+static void parport_reset(int trst, int srst);
+static void parport_led(int on);
 
-int parport_speed(int speed);
-int parport_register_commands(struct command_context_s *cmd_ctx);
-int parport_init(void);
-int parport_quit(void);
+static int parport_speed(int speed);
+static int parport_register_commands(struct command_context_s *cmd_ctx);
+static int parport_init(void);
+static int parport_quit(void);
 
 /* interface commands */
-int parport_handle_parport_port_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int parport_handle_parport_cable_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int parport_handle_write_on_exit_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int parport_handle_parport_port_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int parport_handle_parport_cable_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int parport_handle_write_on_exit_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
 jtag_interface_t parport_interface = 
 {
@@ -168,7 +168,7 @@
 	.quit = parport_quit,
 };
 
-bitbang_interface_t parport_bitbang =
+static bitbang_interface_t parport_bitbang =
 {
 	.read = parport_read,
 	.write = parport_write,
@@ -176,7 +176,7 @@
 	.blink = parport_led
 };
 
-int parport_read(void)
+static int parport_read(void)
 {
 	int data = 0;
 	
@@ -208,7 +208,7 @@
 #endif
 }
 
-void parport_write(int tck, int tms, int tdi)
+static void parport_write(int tck, int tms, int tdi)
 {
 	int i = jtag_speed + 1;
 	
@@ -232,7 +232,7 @@
 }
 
 /* (1) assert or (0) deassert reset lines */
-void parport_reset(int trst, int srst)
+static void parport_reset(int trst, int srst)
 {
 	LOG_DEBUG("trst: %i, srst: %i", trst, srst);
 
@@ -250,7 +250,7 @@
 }
 	
 /* turn LED on parport adapter on (1) or off (0) */
-void parport_led(int on)
+static void parport_led(int on)
 {
 	if (on)
 		dataport_value |= cable->LED_MASK;
@@ -260,12 +260,12 @@
 	parport_write_data();
 }
 
-int parport_speed(int speed)
+static int parport_speed(int speed)
 {
 	return ERROR_OK;
 }
 
-int parport_register_commands(struct command_context_s *cmd_ctx)
+static int parport_register_commands(struct command_context_s *cmd_ctx)
 {
 	register_command(cmd_ctx, NULL, "parport_port", parport_handle_parport_port_command,
 		COMMAND_CONFIG, "either the address of the I/O port or the number of the ?/dev/parport? device");
@@ -278,7 +278,7 @@
 }
 
 #if PARPORT_USE_GIVEIO == 1
-int parport_get_giveio_access(void)
+static int parport_get_giveio_access(void)
 {
 	HANDLE h;
 	OSVERSIONINFO version;
@@ -303,7 +303,7 @@
 }
 #endif
 
-int parport_init(void)
+static int parport_init(void)
 {
 	cable_t *cur_cable;
 #if PARPORT_USE_PPDEV == 1
@@ -429,7 +429,7 @@
 	return ERROR_OK;
 }
 
-int parport_quit(void)
+static int parport_quit(void)
 {
 	parport_led(0);
 
@@ -448,7 +448,7 @@
 	return ERROR_OK;
 }
 
-int parport_handle_parport_port_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int parport_handle_parport_port_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc == 0)
 		return ERROR_OK;
@@ -460,7 +460,7 @@
 	return ERROR_OK;
 }
 
-int parport_handle_parport_cable_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int parport_handle_parport_cable_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc == 0)
 		return ERROR_OK;
@@ -475,7 +475,7 @@
 	return ERROR_OK;
 }
 
-int parport_handle_write_on_exit_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int parport_handle_write_on_exit_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc != 1)
 	{

Modified: trunk/src/jtag/presto.c
===================================================================
--- trunk/src/jtag/presto.c	2009-04-20 22:38:27 UTC (rev 1478)
+++ trunk/src/jtag/presto.c	2009-04-21 05:29:23 UTC (rev 1479)
@@ -49,12 +49,12 @@
 #error "BUG: either FTD2XX and LIBFTDI has to be used"
 #endif
 
-int presto_jtag_speed(int speed);
-int presto_jtag_khz(int khz, int *jtag_speed);
-int presto_jtag_speed_div(int speed, int *khz);
-int presto_jtag_register_commands(struct command_context_s *cmd_ctx);
-int presto_jtag_init(void);
-int presto_jtag_quit(void);
+static int presto_jtag_speed(int speed);
+static int presto_jtag_khz(int khz, int *jtag_speed);
+static int presto_jtag_speed_div(int speed, int *khz);
+static int presto_jtag_register_commands(struct command_context_s *cmd_ctx);
+static int presto_jtag_init(void);
+static int presto_jtag_quit(void);
 
 jtag_interface_t presto_interface =
 {
@@ -68,14 +68,14 @@
 	.quit = presto_jtag_quit,
 };
 
-int presto_bitq_out(int tms, int tdi, int tdo_req);
-int presto_bitq_flush(void);
-int presto_bitq_sleep(unsigned long us);
-int presto_bitq_reset(int trst, int srst);
-int presto_bitq_in_rdy(void);
-int presto_bitq_in(void);
+static int presto_bitq_out(int tms, int tdi, int tdo_req);
+static int presto_bitq_flush(void);
+static int presto_bitq_sleep(unsigned long us);
+static int presto_bitq_reset(int trst, int srst);
+static int presto_bitq_in_rdy(void);
+static int presto_bitq_in(void);
 
-bitq_interface_t presto_bitq =
+static bitq_interface_t presto_bitq =
 {
 	.out = presto_bitq_out,
 	.flush = presto_bitq_flush,
@@ -130,15 +130,15 @@
 	
 } presto_t;
 
-presto_t presto_state;
-presto_t *presto = &presto_state;
+static presto_t presto_state;
+static presto_t *presto = &presto_state;
 
-u8 presto_init_seq[] =
+static u8 presto_init_seq[] =
 {
 	0x80, 0xA0, 0xA8, 0xB0, 0xC0, 0xE0
 };
 
-int presto_write(u8 *buf, u32 size)
+static int presto_write(u8 *buf, u32 size)
 {
 #if BUILD_PRESTO_FTD2XX == 1
 	DWORD ftbytes;
@@ -167,7 +167,7 @@
 	return ERROR_OK;
 }
 
-int presto_read(u8* buf, u32 size)
+static int presto_read(u8* buf, u32 size)
 {
 #if BUILD_PRESTO_FTD2XX == 1
 	DWORD ftbytes;
@@ -210,7 +210,7 @@
 }
 
 #if BUILD_PRESTO_FTD2XX == 1
-int presto_open_ftd2xx(char *req_serial)
+static int presto_open_ftd2xx(char *req_serial)
 {
 	u32 i;
 	DWORD numdevs;
@@ -340,7 +340,7 @@
 }
 
 #elif BUILD_PRESTO_LIBFTDI == 1
-int presto_open_libftdi(char *req_serial)
+static int presto_open_libftdi(char *req_serial)
 {
 	u8 presto_data;
 
@@ -413,7 +413,7 @@
 }
 #endif /* BUILD_PRESTO_LIBFTDI == 1 */
 
-int presto_open(char *req_serial)
+static int presto_open(char *req_serial)
 {
 	presto->buff_out_pos=0;
 	presto->buff_in_pos=0;
@@ -438,7 +438,7 @@
 #endif
 }
 
-int presto_close(void)
+static int presto_close(void)
 {
 
 	int result = ERROR_OK;
@@ -482,7 +482,7 @@
 	return result;
 }
 
-int presto_flush(void)
+static int presto_flush(void)
 {
 	if (presto->buff_out_pos == 0)
 		return ERROR_OK;
@@ -525,7 +525,7 @@
 	return ERROR_OK;
 }
 
-int presto_sendbyte(int data)
+static int presto_sendbyte(int data)
 {
 	if (data == EOF) return presto_flush();
 
@@ -549,7 +549,8 @@
 	return ERROR_OK;
 }
 
-int presto_getbyte(void)
+#if 0
+static int presto_getbyte(void)
 {
 	if (presto->buff_in_pos < presto->buff_in_len)
 		return presto->buff_in[presto->buff_in_pos++];
@@ -565,10 +566,11 @@
 
 	return -1;
 }
+#endif
 
 /* -------------------------------------------------------------------------- */
 
-int presto_tdi_flush(void)
+static int presto_tdi_flush(void)
 {
 	if (presto->jtag_tdi_count == 0)
 		return 0;
@@ -587,7 +589,7 @@
 	return 0;
 }
 
-int presto_tck_idle(void)
+static int presto_tck_idle(void)
 {
 	if (presto->jtag_tck == 1)
 	{
@@ -600,7 +602,7 @@
 
 /* -------------------------------------------------------------------------- */
 
-int presto_bitq_out(int tms, int tdi, int tdo_req)
+static int presto_bitq_out(int tms, int tdi, int tdo_req)
 {
 	int i;
 	unsigned char cmd;
@@ -646,7 +648,7 @@
 	return 0;
 }
 
-int presto_bitq_flush(void)
+static int presto_bitq_flush(void)
 {
 	presto_tdi_flush();
 	presto_tck_idle();
@@ -656,14 +658,14 @@
 	return presto_flush();
 }
 
-int presto_bitq_in_rdy(void)
+static int presto_bitq_in_rdy(void)
 {
 	if (presto->buff_in_pos>=presto->buff_in_len)
 		return 0;
 	return presto->buff_in_len-presto->buff_in_pos;
 }
 
-int presto_bitq_in(void)
+static int presto_bitq_in(void)
 {
 	if (presto->buff_in_pos>=presto->buff_in_len)
 		return -1;
@@ -671,7 +673,7 @@
 	return 0;
 }
 
-int presto_bitq_sleep(unsigned long us)
+static int presto_bitq_sleep(unsigned long us)
 {
 	long waits;
 
@@ -692,7 +694,7 @@
 	return 0;
 }
 
-int presto_bitq_reset(int trst, int srst)
+static int presto_bitq_reset(int trst, int srst)
 {
 	presto_tdi_flush();
 	presto_tck_idle();
@@ -709,7 +711,7 @@
 
 /* -------------------------------------------------------------------------- */
 
-int presto_jtag_khz(int khz, int *jtag_speed)
+static int presto_jtag_khz(int khz, int *jtag_speed)
 {
 	if (khz < 0)
 	{
@@ -723,7 +725,7 @@
 	return 0;
 }
 
-int presto_jtag_speed_div(int speed, int *khz)
+static int presto_jtag_speed_div(int speed, int *khz)
 {
 	if ((speed < 0) || (speed > 1000))
 	{
@@ -737,7 +739,7 @@
 	return 0;
 }
 
-int presto_jtag_speed(int speed)
+static int presto_jtag_speed(int speed)
 {
 	int khz;
 	
@@ -756,9 +758,9 @@
 	return 0;
 }
 
-char *presto_serial;
+static char *presto_serial;
 
-int presto_handle_serial_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int presto_handle_serial_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc == 1)
 	{
@@ -774,14 +776,14 @@
 	return ERROR_OK;
 }
 
-int presto_jtag_register_commands(struct command_context_s *cmd_ctx)
+static int presto_jtag_register_commands(struct command_context_s *cmd_ctx)
 {
 	register_command(cmd_ctx, NULL, "presto_serial", presto_handle_serial_command,
 		COMMAND_CONFIG, NULL);
 	return ERROR_OK;
 }
 
-int presto_jtag_init(void)
+static int presto_jtag_init(void)
 {
 	if (presto_open(presto_serial) != ERROR_OK)
 	{
@@ -801,7 +803,7 @@
 	return ERROR_OK;
 }
 
-int presto_jtag_quit(void)
+static int presto_jtag_quit(void)
 {
 	bitq_cleanup();
 	presto_close();

Modified: trunk/src/jtag/usbprog.c
===================================================================
--- trunk/src/jtag/usbprog.c	2009-04-20 22:38:27 UTC (rev 1478)
+++ trunk/src/jtag/usbprog.c	2009-04-21 05:29:23 UTC (rev 1479)
@@ -52,17 +52,17 @@
 #define TCK_BIT			2
 #define TMS_BIT			1
 
-int usbprog_execute_queue(void);
-int usbprog_speed(int speed);
-int usbprog_register_commands(struct command_context_s *cmd_ctx);
-int usbprog_init(void);
-int usbprog_quit(void);
+static int usbprog_execute_queue(void);
+static int usbprog_speed(int speed);
+static int usbprog_register_commands(struct command_context_s *cmd_ctx);
+static int usbprog_init(void);
+static int usbprog_quit(void);
 
-void usbprog_end_state(tap_state_t state);
-void usbprog_state_move(void);
-void usbprog_path_move(pathmove_command_t *cmd);
-void usbprog_runtest(int num_cycles);
-void usbprog_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size);
+static void usbprog_end_state(tap_state_t state);
+static void usbprog_state_move(void);
+static void usbprog_path_move(pathmove_command_t *cmd);
+static void usbprog_runtest(int num_cycles);
+static void usbprog_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size);
 
 jtag_interface_t usbprog_interface =
 {
@@ -91,43 +91,44 @@
 	struct usb_dev_handle* usb_handle;
 };
 
-struct usbprog_jtag * usbprog_jtag_handle;
+static struct usbprog_jtag * usbprog_jtag_handle;
 
-struct usbprog_jtag* usbprog_jtag_open(void);
-void usbprog_jtag_close(struct usbprog_jtag *usbprog_jtag);
-void usbprog_jtag_init(struct usbprog_jtag *usbprog_jtag);
-unsigned char usbprog_jtag_message(struct usbprog_jtag *usbprog_jtag, char *msg, int msglen);
+static struct usbprog_jtag* usbprog_jtag_open(void);
+//static void usbprog_jtag_close(struct usbprog_jtag *usbprog_jtag);
+static void usbprog_jtag_init(struct usbprog_jtag *usbprog_jtag);
+static unsigned char usbprog_jtag_message(struct usbprog_jtag *usbprog_jtag, char *msg, int msglen);
 
-void usbprog_jtag_read_tdo(struct usbprog_jtag *usbprog_jtag, char * buffer, int size);
-void usbprog_jtag_write_tdi(struct usbprog_jtag *usbprog_jtag, char * buffer, int size);
-void usbprog_jtag_write_and_read(struct usbprog_jtag *usbprog_jtag, char * buffer, int size);
-void usbprog_jtag_write_tms(struct usbprog_jtag *usbprog_jtag, char tms_scan);
+static void usbprog_jtag_read_tdo(struct usbprog_jtag *usbprog_jtag, char * buffer, int size);
+static void usbprog_jtag_write_tdi(struct usbprog_jtag *usbprog_jtag, char * buffer, int size);
+static void usbprog_jtag_write_and_read(struct usbprog_jtag *usbprog_jtag, char * buffer, int size);
+static void usbprog_jtag_write_tms(struct usbprog_jtag *usbprog_jtag, char tms_scan);
 
-char tms_chain[64];
-int tms_chain_index;
-void usbprog_jtag_tms_collect(char tms_scan);
-void usbprog_jtag_tms_send(struct usbprog_jtag *usbprog_jtag);
+static char tms_chain[64];
+static int tms_chain_index;
 
-void usbprog_write(int tck, int tms, int tdi);
-void usbprog_reset(int trst, int srst);
+static void usbprog_jtag_tms_collect(char tms_scan);
+static void usbprog_jtag_tms_send(struct usbprog_jtag *usbprog_jtag);
 
-void usbprog_jtag_set_direction(struct usbprog_jtag *usbprog_jtag, unsigned char direction);
-void usbprog_jtag_write_slice(struct usbprog_jtag *usbprog_jtag,unsigned char value);
-unsigned char usbprog_jtag_get_port(struct usbprog_jtag *usbprog_jtag);
-void usbprog_jtag_set_bit(struct usbprog_jtag *usbprog_jtag,int bit, int value);
-int usbprog_jtag_get_bit(struct usbprog_jtag *usbprog_jtag, int bit);
+static void usbprog_write(int tck, int tms, int tdi);
+static void usbprog_reset(int trst, int srst);
 
-int usbprog_speed(int speed)
+static void usbprog_jtag_set_direction(struct usbprog_jtag *usbprog_jtag, unsigned char direction);
+static void usbprog_jtag_write_slice(struct usbprog_jtag *usbprog_jtag,unsigned char value);
+//static unsigned char usbprog_jtag_get_port(struct usbprog_jtag *usbprog_jtag);
+static void usbprog_jtag_set_bit(struct usbprog_jtag *usbprog_jtag,int bit, int value);
+//static int usbprog_jtag_get_bit(struct usbprog_jtag *usbprog_jtag, int bit);
+
+static int usbprog_speed(int speed)
 {
 	return ERROR_OK;
 }
 
-int usbprog_register_commands(struct command_context_s *cmd_ctx)
+static int usbprog_register_commands(struct command_context_s *cmd_ctx)
 {
 	return ERROR_OK;
 }
 
-int usbprog_execute_queue(void)
+static int usbprog_execute_queue(void)
 {
 	jtag_command_t *cmd = jtag_command_queue; /* currently processed command */
 	int scan_size;
@@ -209,7 +210,7 @@
 	return ERROR_OK;
 }
 
-int usbprog_init(void)
+static int usbprog_init(void)
 {
 	usbprog_jtag_handle = usbprog_jtag_open();
 
@@ -229,13 +230,13 @@
 	return ERROR_OK;
 }
 
-int usbprog_quit(void)
+static int usbprog_quit(void)
 {
 	return ERROR_OK;
 }
 
 /*************** jtag execute commands **********************/
-void usbprog_end_state(tap_state_t state)
+static void usbprog_end_state(tap_state_t state)
 {
 	if (tap_is_state_stable(state))
 		tap_set_end_state(state);
@@ -246,7 +247,7 @@
 	}
 }
 
-void usbprog_state_move(void)
+static void usbprog_state_move(void)
 {
 	int i = 0, tms = 0;
 	u8 tms_scan = tap_get_tms_path(tap_get_state(), tap_get_end_state());
@@ -260,7 +261,7 @@
 	tap_set_state(tap_get_end_state());
 }
 
-void usbprog_path_move(pathmove_command_t *cmd)
+static void usbprog_path_move(pathmove_command_t *cmd)
 {
 	int num_states = cmd->num_states;
 	int state_count;
@@ -298,7 +299,7 @@
 	tap_set_end_state(tap_get_state());
 }
 
-void usbprog_runtest(int num_cycles)
+static void usbprog_runtest(int num_cycles)
 {
 	int i;
 
@@ -339,7 +340,7 @@
 	*/
 }
 
-void usbprog_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size)
+static void usbprog_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size)
 {
 	tap_state_t saved_end_state = tap_get_end_state();
 
@@ -379,7 +380,7 @@
 
 /*************** jtag wrapper functions *********************/
 
-void usbprog_write(int tck, int tms, int tdi)
+static void usbprog_write(int tck, int tms, int tdi)
 {
 	unsigned char output_value=0x00;
 
@@ -394,7 +395,7 @@
 }
 
 /* (1) assert or (0) deassert reset lines */
-void usbprog_reset(int trst, int srst)
+static void usbprog_reset(int trst, int srst)
 {
 	LOG_DEBUG("trst: %i, srst: %i", trst, srst);
 
@@ -449,13 +450,15 @@
 	return 0;
 }
 
-void usbprog_jtag_close(struct usbprog_jtag *usbprog_jtag)
+#if 0
+static void usbprog_jtag_close(struct usbprog_jtag *usbprog_jtag)
 {
 	usb_close(usbprog_jtag->usb_handle);
 	free(usbprog_jtag);
 }
+#endif
 
-unsigned char usbprog_jtag_message(struct usbprog_jtag *usbprog_jtag, char *msg, int msglen)
+static unsigned char usbprog_jtag_message(struct usbprog_jtag *usbprog_jtag, char *msg, int msglen)
 {
 	int res = usb_bulk_write(usbprog_jtag->usb_handle, 3, msg,msglen, 100);
 	if ((msg[0] == 2) || (msg[0] == 1) || (msg[0] == 4) || (msg[0] == 0) || \
@@ -475,12 +478,12 @@
 	return 0;
 }
 
-void usbprog_jtag_init(struct usbprog_jtag *usbprog_jtag)
+static void usbprog_jtag_init(struct usbprog_jtag *usbprog_jtag)
 {
 	usbprog_jtag_set_direction(usbprog_jtag, 0xFE);
 }
 
-void usbprog_jtag_write_and_read(struct usbprog_jtag *usbprog_jtag, char * buffer, int size)
+static void usbprog_jtag_write_and_read(struct usbprog_jtag *usbprog_jtag, char * buffer, int size)
 {
 	char tmp[64];	/* fastes packet size for usb controller */
 	int send_bits, bufindex = 0, fillindex = 0, i, loops;
@@ -535,7 +538,7 @@
 	}
 }
 
-void usbprog_jtag_read_tdo(struct usbprog_jtag *usbprog_jtag, char * buffer, int size)
+static void usbprog_jtag_read_tdo(struct usbprog_jtag *usbprog_jtag, char * buffer, int size)
 {
 	char tmp[64];	/* fastes packet size for usb controller */
 	int send_bits, fillindex = 0, i, loops;
@@ -582,7 +585,7 @@
 	}
 }
 
-void usbprog_jtag_write_tdi(struct usbprog_jtag *usbprog_jtag, char * buffer, int size)
+static void usbprog_jtag_write_tdi(struct usbprog_jtag *usbprog_jtag, char * buffer, int size)
 {
 	char tmp[64];	/* fastes packet size for usb controller */
 	int send_bits, bufindex = 0, i, loops;
@@ -618,12 +621,12 @@
 	}
 }
 
-void usbprog_jtag_write_tms(struct usbprog_jtag *usbprog_jtag, char tms_scan)
+static void usbprog_jtag_write_tms(struct usbprog_jtag *usbprog_jtag, char tms_scan)
 {
 	usbprog_jtag_tms_collect(tms_scan);
 }
 
-void usbprog_jtag_set_direction(struct usbprog_jtag *usbprog_jtag, unsigned char direction)
+static void usbprog_jtag_set_direction(struct usbprog_jtag *usbprog_jtag, unsigned char direction)
 {
 	char tmp[2];
 	tmp[0] = PORT_DIRECTION;
@@ -631,7 +634,7 @@
 	usbprog_jtag_message(usbprog_jtag, tmp, 2);
 }
 
-void usbprog_jtag_write_slice(struct usbprog_jtag *usbprog_jtag,unsigned char value)
+static void usbprog_jtag_write_slice(struct usbprog_jtag *usbprog_jtag,unsigned char value)
 {
 	char tmp[2];
 	tmp[0] = PORT_SET;
@@ -639,15 +642,17 @@
 	usbprog_jtag_message(usbprog_jtag, tmp, 2);
 }
 
-unsigned char usbprog_jtag_get_port(struct usbprog_jtag *usbprog_jtag)
+#if 0
+static unsigned char usbprog_jtag_get_port(struct usbprog_jtag *usbprog_jtag)
 {
 	char tmp[2];
 	tmp[0] = PORT_GET;
 	tmp[1] = 0x00;
 	return usbprog_jtag_message(usbprog_jtag, tmp, 2);
 }
+#endif
 
-void usbprog_jtag_set_bit(struct usbprog_jtag *usbprog_jtag,int bit, int value)
+static void usbprog_jtag_set_bit(struct usbprog_jtag *usbprog_jtag,int bit, int value)
 {
 	char tmp[3];
 	tmp[0] = PORT_SETBIT;
@@ -659,7 +664,8 @@
 	usbprog_jtag_message(usbprog_jtag, tmp, 3);
 }
 
-int usbprog_jtag_get_bit(struct usbprog_jtag *usbprog_jtag, int bit)
+#if 0
+static int usbprog_jtag_get_bit(struct usbprog_jtag *usbprog_jtag, int bit)
 {
 	char tmp[2];
 	tmp[0] = PORT_GETBIT;
@@ -670,14 +676,15 @@
 	else
 		return 0;
 }
+#endif
 
-void usbprog_jtag_tms_collect(char tms_scan)
+static void usbprog_jtag_tms_collect(char tms_scan)
 {
 	tms_chain[tms_chain_index] = tms_scan;
 	tms_chain_index++;
 }
 
-void usbprog_jtag_tms_send(struct usbprog_jtag *usbprog_jtag)
+static void usbprog_jtag_tms_send(struct usbprog_jtag *usbprog_jtag)
 {
 	int i;
 	/* LOG_INFO("TMS SEND"); */

Modified: trunk/src/jtag/vsllink.c
===================================================================
--- trunk/src/jtag/vsllink.c	2009-04-20 22:38:27 UTC (rev 1478)
+++ trunk/src/jtag/vsllink.c	2009-04-21 05:29:23 UTC (rev 1479)
@@ -49,10 +49,10 @@
 #define DEBUG_JTAG_IO(expr ...)
 #endif
 
-u16 vsllink_vid;
-u16 vsllink_pid;
-u8 vsllink_bulkout;
-u8 vsllink_bulkin;
+static u16 vsllink_vid;
+static u16 vsllink_pid;
+static u8 vsllink_bulkout;
+static u8 vsllink_bulkin;
 
 #define VSLLINK_USB_TIMEOUT			10000
 
@@ -104,7 +104,7 @@
  *
  * SD->SD and SI->SI have to be caught in interface specific code
  */
-u8 VSLLINK_tap_move[6][6] =
+static u8 VSLLINK_tap_move[6][6] =
 {
 /*	  TLR   RTI   SD    PD    SI    PI             */
 	{0xff, 0x7f, 0x2f, 0x0a, 0x37, 0x16},	/* TLR */
@@ -121,7 +121,7 @@
 	unsigned char insert_position;
 }insert_insignificant_operation_t;
 
-insert_insignificant_operation_t VSLLINK_TAP_MOVE_INSERT_INSIGNIFICANT[6][6] =
+static insert_insignificant_operation_t VSLLINK_TAP_MOVE_INSERT_INSIGNIFICANT[6][6] =
 {
 /*	 stuff	offset   */
 	{/*	TLR	*/
@@ -168,7 +168,7 @@
 	{0,		0,}},	/* PI  */
 };
 
-u8 VSLLINK_BIT_MSK[8] =
+static u8 VSLLINK_BIT_MSK[8] =
 {
 	0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f
 };
@@ -187,35 +187,35 @@
 static pending_scan_result_t pending_scan_results_buffer[MAX_PENDING_SCAN_RESULTS];
 
 /* External interface functions */
-int vsllink_execute_queue(void);
-int vsllink_speed(int speed);
-int vsllink_khz(int khz, int *jtag_speed);
-int vsllink_speed_div(int jtag_speed, int *khz);
-int vsllink_register_commands(struct command_context_s *cmd_ctx);
-int vsllink_init(void);
-int vsllink_quit(void);
+static int vsllink_execute_queue(void);
+static int vsllink_speed(int speed);
+static int vsllink_khz(int khz, int *jtag_speed);
+static int vsllink_speed_div(int jtag_speed, int *khz);
+static int vsllink_register_commands(struct command_context_s *cmd_ctx);
+static int vsllink_init(void);
+static int vsllink_quit(void);
 
 /* CLI command handler functions */
-int vsllink_handle_usb_vid_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int vsllink_handle_usb_pid_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int vsllink_handle_usb_bulkin_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int vsllink_handle_usb_bulkout_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int vsllink_handle_usb_vid_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int vsllink_handle_usb_pid_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int vsllink_handle_usb_bulkin_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int vsllink_handle_usb_bulkout_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
 /* Queue command functions */
-void vsllink_end_state(tap_state_t state);
-void vsllink_state_move(void);
-void vsllink_path_move(int num_states, tap_state_t *path);
-void vsllink_runtest(int num_cycles);
-void vsllink_stableclocks(int num_cycles, int tms);
-void vsllink_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size, scan_command_t *command);
-void vsllink_reset(int trst, int srst);
-void vsllink_simple_command(u8 command);
+static void vsllink_end_state(tap_state_t state);
+static void vsllink_state_move(void);
+static void vsllink_path_move(int num_states, tap_state_t *path);
+static void vsllink_runtest(int num_cycles);
+static void vsllink_stableclocks(int num_cycles, int tms);
+static void vsllink_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size, scan_command_t *command);
+static void vsllink_reset(int trst, int srst);
+static void vsllink_simple_command(u8 command);
 
 /* VSLLink tap buffer functions */
-void vsllink_tap_init(void);
-int vsllink_tap_execute(void);
-void vsllink_tap_ensure_space(int scans, int bytes);
-void vsllink_tap_append_scan(int length, u8 *buffer, scan_command_t *command, int offset);
+static void vsllink_tap_init(void);
+static int vsllink_tap_execute(void);
+static void vsllink_tap_ensure_space(int scans, int bytes);
+static void vsllink_tap_append_scan(int length, u8 *buffer, scan_command_t *command, int offset);
 
 /* VSLLink lowlevel functions */
 typedef struct vsllink_jtag
@@ -223,18 +223,20 @@
 	struct usb_dev_handle* usb_handle;
 } vsllink_jtag_t;
 
-vsllink_jtag_t *vsllink_usb_open(void);
-void vsllink_usb_close(vsllink_jtag_t *vsllink_jtag);
-int vsllink_usb_message(vsllink_jtag_t *vsllink_jtag, int out_length, int in_length);
-int vsllink_usb_write(vsllink_jtag_t *vsllink_jtag, int out_length);
-int vsllink_usb_read(vsllink_jtag_t *vsllink_jtag);
+static vsllink_jtag_t *vsllink_usb_open(void);
+static void vsllink_usb_close(vsllink_jtag_t *vsllink_jtag);
+static int vsllink_usb_message(vsllink_jtag_t *vsllink_jtag, int out_length, int in_length);
+static int vsllink_usb_write(vsllink_jtag_t *vsllink_jtag, int out_length);
+static int vsllink_usb_read(vsllink_jtag_t *vsllink_jtag);
 
-void vsllink_debug_buffer(u8 *buffer, int length);
+#ifdef _DEBUG_USB_COMMS_
+static void vsllink_debug_buffer(u8 *buffer, int length);
+#endif
 
 static int vsllink_tms_data_len = 0;
 static u8* vsllink_tms_cmd_pos;
 
-vsllink_jtag_t* vsllink_jtag_handle;
+static vsllink_jtag_t* vsllink_jtag_handle;
 
 /***************************************************************************/
 /* External interface implementation */
@@ -251,7 +253,7 @@
 	.quit = vsllink_quit
 };
 
-int vsllink_execute_queue(void)
+static int vsllink_execute_queue(void)
 {
 	jtag_command_t *cmd = jtag_command_queue;
 	int scan_size;
@@ -384,7 +386,7 @@
 	return vsllink_tap_execute();
 }
 
-int vsllink_speed(int speed)
+static int vsllink_speed(int speed)
 {
 	int result;
 
@@ -407,21 +409,21 @@
 	return ERROR_OK;
 }
 
-int vsllink_khz(int khz, int *jtag_speed)
+static int vsllink_khz(int khz, int *jtag_speed)
 {
 	*jtag_speed = khz;
 
 	return ERROR_OK;
 }
 
-int vsllink_speed_div(int jtag_speed, int *khz)
+static int vsllink_speed_div(int jtag_speed, int *khz)
 {
 	*khz = jtag_speed;
 
 	return ERROR_OK;
 }
 
-int vsllink_register_commands(struct command_context_s *cmd_ctx)
+static int vsllink_register_commands(struct command_context_s *cmd_ctx)
 {
 	register_command(cmd_ctx, NULL, "vsllink_usb_vid", vsllink_handle_usb_vid_command,
 					COMMAND_CONFIG, NULL);
@@ -435,7 +437,7 @@
 	return ERROR_OK;
 }
 
-int vsllink_init(void)
+static int vsllink_init(void)
 {
 	int check_cnt;
 	int result;
@@ -521,7 +523,7 @@
 	return ERROR_OK;
 }
 
-int vsllink_quit(void)
+static int vsllink_quit(void)
 {
 	if ((vsllink_usb_in_buffer != NULL) && (vsllink_usb_out_buffer != NULL))
 	{
@@ -553,7 +555,7 @@
 
 // when vsllink_tms_data_len > 0, vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx] is the byte that need to be appended.
 // length of VSLLINK_CMDJTAGSEQ_TMSBYTE has been set, no need to set it here.
-void vsllink_append_tms(void)
+static void vsllink_append_tms(void)
 {
 	u8 tms_scan = VSLLINK_TAP_MOVE(tap_get_state(), tap_get_end_state());
 	u16 tms2;
@@ -587,7 +589,7 @@
 /***************************************************************************/
 /* Queue command implementations */
 
-void vsllink_end_state(tap_state_t state)
+static void vsllink_end_state(tap_state_t state)
 {
 	if (tap_is_state_stable(state))
 	{
@@ -601,7 +603,7 @@
 }
 
 /* Goes to the end state. */
-void vsllink_state_move(void)
+static void vsllink_state_move(void)
 {
 	if (vsllink_tms_data_len > 0)
 	{
@@ -619,7 +621,7 @@
 }
 
 // write tms from current vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx]
-void vsllink_add_path(int start, int num, tap_state_t *path)
+static void vsllink_add_path(int start, int num, tap_state_t *path)
 {
 	int i;
 
@@ -658,7 +660,7 @@
 	tap_set_end_state(tap_get_state());
 }
 
-void vsllink_path_move(int num_states, tap_state_t *path)
+static void vsllink_path_move(int num_states, tap_state_t *path)
 {
 	int i, tms_len, tms_cmd_pos, path_idx = 0;
 
@@ -778,7 +780,7 @@
 	}
 }
 
-void vsllink_stableclocks(int num_cycles, int tms)
+static void vsllink_stableclocks(int num_cycles, int tms)
 {
 	int tms_len;
 	u16 tms_append_byte;
@@ -933,7 +935,7 @@
 	}
 }
 
-void vsllink_runtest(int num_cycles)
+static void vsllink_runtest(int num_cycles)
 {
 	tap_state_t saved_end_state = tap_get_end_state();
 
@@ -956,7 +958,7 @@
 	}
 }
 
-void vsllink_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size, scan_command_t *command)
+static void vsllink_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size, scan_command_t *command)
 {
 	tap_state_t saved_end_state;
 	u8 bits_left, tms_tmp, tdi_len;
@@ -1073,7 +1075,7 @@
 	tap_set_state(tap_get_end_state());
 }
 
-void vsllink_reset(int trst, int srst)
+static void vsllink_reset(int trst, int srst)
 {
 	int result;
 
@@ -1099,7 +1101,7 @@
 	}
 }
 
-void vsllink_simple_command(u8 command)
+static void vsllink_simple_command(u8 command)
 {
 	int result;
 
@@ -1114,7 +1116,7 @@
 	}
 }
 
-int vsllink_handle_usb_vid_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int vsllink_handle_usb_vid_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc != 1) {
 		LOG_ERROR("parameter error, should be one parameter for VID");
@@ -1126,7 +1128,7 @@
 	return ERROR_OK;
 }
 
-int vsllink_handle_usb_pid_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int vsllink_handle_usb_pid_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc != 1) {
 		LOG_ERROR("parameter error, should be one parameter for PID");
@@ -1138,7 +1140,7 @@
 	return ERROR_OK;
 }
 
-int vsllink_handle_usb_bulkin_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int vsllink_handle_usb_bulkin_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc != 1) {
 		LOG_ERROR("parameter error, should be one parameter for BULKIN endpoint");
@@ -1150,7 +1152,7 @@
 	return ERROR_OK;
 }
 
-int vsllink_handle_usb_bulkout_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int vsllink_handle_usb_bulkout_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc != 1) {
 		LOG_ERROR("parameter error, should be one parameter for BULKOUT endpoint");
@@ -1165,14 +1167,14 @@
 /***************************************************************************/
 /* VSLLink tap functions */
 
-void vsllink_tap_init(void)
+static void vsllink_tap_init(void)
 {
 	vsllink_usb_out_buffer_idx = 0;
 	vsllink_usb_in_want_length = 0;
 	pending_scan_results_length = 0;
 }
 
-void vsllink_tap_ensure_space(int scans, int bytes)
+static void vsllink_tap_ensure_space(int scans, int bytes)
 {
 	int available_scans = MAX_PENDING_SCAN_RESULTS - pending_scan_results_length;
 	int available_bytes = VSLLINK_BufferSize - vsllink_usb_out_buffer_idx;
@@ -1183,7 +1185,7 @@
 	}
 }
 
-void vsllink_tap_append_scan(int length, u8 *buffer, scan_command_t *command, int offset)
+static void vsllink_tap_append_scan(int length, u8 *buffer, scan_command_t *command, int offset)
 {
 	pending_scan_result_t *pending_scan_result = &pending_scan_results_buffer[pending_scan_results_length];
 	int i;
@@ -1211,7 +1213,7 @@
 
 /* Pad and send a tap sequence to the device, and receive the answer.
  * For the purpose of padding we assume that we are in reset or idle or pause state. */
-int vsllink_tap_execute(void)
+static int vsllink_tap_execute(void)
 {
 	int i;
 	int result;
@@ -1350,14 +1352,14 @@
 	return NULL;
 }
 
-void vsllink_usb_close(vsllink_jtag_t *vsllink_jtag)
+static void vsllink_usb_close(vsllink_jtag_t *vsllink_jtag)
 {
 	usb_close(vsllink_jtag->usb_handle);
 	free(vsllink_jtag);
 }
 
 /* Send a message and receive the reply. */
-int vsllink_usb_message(vsllink_jtag_t *vsllink_jtag, int out_length, int in_length)
+static int vsllink_usb_message(vsllink_jtag_t *vsllink_jtag, int out_length, int in_length)
 {
 	int result;
 
@@ -1387,7 +1389,7 @@
 }
 
 /* Write data from out_buffer to USB. */
-int vsllink_usb_write(vsllink_jtag_t *vsllink_jtag, int out_length)
+static int vsllink_usb_write(vsllink_jtag_t *vsllink_jtag, int out_length)
 {
 	int result;
 
@@ -1415,7 +1417,7 @@
 }
 
 /* Read data from USB into in_buffer. */
-int vsllink_usb_read(vsllink_jtag_t *vsllink_jtag)
+static int vsllink_usb_read(vsllink_jtag_t *vsllink_jtag)
 {
 	int result = usb_bulk_read(vsllink_jtag->usb_handle, vsllink_bulkin, \
 		(char *)vsllink_usb_in_buffer, VSLLINK_BufferSize, VSLLINK_USB_TIMEOUT);
@@ -1431,7 +1433,8 @@
 
 #define BYTES_PER_LINE  16
 
-void vsllink_debug_buffer(u8 *buffer, int length)
+#ifdef _DEBUG_USB_COMMS_
+static void vsllink_debug_buffer(u8 *buffer, int length)
 {
 	char line[81];
 	char s[4];
@@ -1449,3 +1452,4 @@
 		LOG_DEBUG(line);
 	}
 }
+#endif // _DEBUG_USB_COMMS_



From oharboe at mail.berlios.de  Tue Apr 21 07:31:23 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Tue, 21 Apr 2009 07:31:23 +0200
Subject: [Openocd-svn] r1480 - in trunk: . src/flash
Message-ID: <200904210531.n3L5VNgl008856@sheep.berlios.de>

Author: oharboe
Date: 2009-04-21 07:31:18 +0200 (Tue, 21 Apr 2009)
New Revision: 1480

Modified:
   trunk/AUTHORS
   trunk/src/flash/cfi.c
   trunk/src/flash/cfi.h
   trunk/src/flash/non_cfi.c
   trunk/src/flash/non_cfi.h
Log:
Michael Schwingen <rincewind at discworld.dascon.de> add non-CFI SST flashs

Modified: trunk/AUTHORS
===================================================================
--- trunk/AUTHORS	2009-04-21 05:29:23 UTC (rev 1479)
+++ trunk/AUTHORS	2009-04-21 05:31:18 UTC (rev 1480)
@@ -5,3 +5,4 @@
 Carsten Schlote <schlote at vahanus.net>
 ?yvind Harboe <oyvind.harboe at zylin.com>
 Duane Ellis <openocd at duaneellis.com>
+Michael Schwingen <michael at schwingen.org>

Modified: trunk/src/flash/cfi.c
===================================================================
--- trunk/src/flash/cfi.c	2009-04-21 05:29:23 UTC (rev 1479)
+++ trunk/src/flash/cfi.c	2009-04-21 05:31:18 UTC (rev 1480)
@@ -296,13 +296,14 @@
 int cfi_spansion_wait_status_busy(flash_bank_t *bank, int timeout)
 {
 	u8 status, oldstatus;
+	cfi_flash_bank_t *cfi_info = bank->driver_priv;
 
 	oldstatus = cfi_get_u8(bank, 0, 0x0);
 
 	do {
 		status = cfi_get_u8(bank, 0, 0x0);
 		if ((status ^ oldstatus) & 0x40) {
-			if (status & 0x20) {
+			if (status & cfi_info->status_poll_mask & 0x20) {
 				oldstatus = cfi_get_u8(bank, 0, 0x0);
 				status = cfi_get_u8(bank, 0, 0x0);
 				if ((status ^ oldstatus) & 0x40) {
@@ -313,7 +314,7 @@
 					return(ERROR_OK);
 				}
 			}
-		} else {
+		} else { /* no toggle: finished, OK */
 			LOG_DEBUG("status: 0x%x", status);
 			return(ERROR_OK);
 		}
@@ -2283,6 +2284,7 @@
 				break;
 			/* AMD/Spansion, Atmel, ... command set */
 			case 0x0002:
+				cfi_info->status_poll_mask = CFI_STATUS_POLL_MASK_DQ5_DQ6_DQ7; /* default for all CFI flashs */
 				cfi_read_0002_pri_ext(bank);
 				break;
 			default:
@@ -2303,7 +2305,7 @@
 		{
 			return retval;
 		}
-	}
+	} /* end CFI case */
 
 	/* apply fixups depending on the primary command set */
 	switch(cfi_info->pri_id)

Modified: trunk/src/flash/cfi.h
===================================================================
--- trunk/src/flash/cfi.h	2009-04-21 05:29:23 UTC (rev 1479)
+++ trunk/src/flash/cfi.h	2009-04-21 05:31:18 UTC (rev 1480)
@@ -23,11 +23,13 @@
 #include "flash.h"
 #include "target.h"
 
+#define CFI_STATUS_POLL_MASK_DQ5_DQ6_DQ7 0xE0 /* DQ5..DQ7 */
+#define CFI_STATUS_POLL_MASK_DQ6_DQ7     0xC0 /* DQ6..DQ7 */
+
 typedef struct cfi_flash_bank_s
 {
 	working_area_t *write_algorithm;
 
-
 	int x16_as_x8;
 	int jedec_probe;
 	int not_cfi;
@@ -58,6 +60,8 @@
 	u8 block_erase_timeout_max;
 	u8 chip_erase_timeout_max;
 
+	u8 status_poll_mask;
+
 	/* flash geometry */
 	u32 dev_size;
 	u16 interface_desc;

Modified: trunk/src/flash/non_cfi.c
===================================================================
--- trunk/src/flash/non_cfi.c	2009-04-21 05:29:23 UTC (rev 1479)
+++ trunk/src/flash/non_cfi.c	2009-04-21 05:31:18 UTC (rev 1480)
@@ -44,6 +44,7 @@
 		.dev_size = 64*KB,
 		.interface_desc = 0x0,		/* x8 only device */
 		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ5_DQ6_DQ7,
 		.num_erase_regions = 1,
 		.erase_region_info =
 		{
@@ -57,6 +58,7 @@
 		.dev_size = 128*KB,
 		.interface_desc = 0x0,		/* x8 only device */
 		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ5_DQ6_DQ7,
 		.num_erase_regions = 1,
 		.erase_region_info =
 		{
@@ -70,6 +72,7 @@
 		.dev_size = 256*KB,
 		.interface_desc = 0x0,		/* x8 only device */
 		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ5_DQ6_DQ7,
 		.num_erase_regions = 1,
 		.erase_region_info =
 		{
@@ -83,6 +86,7 @@
 		.dev_size = 512*KB,
 		.interface_desc = 0x0,		/* x8 only device */
 		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ5_DQ6_DQ7,
 		.num_erase_regions = 1,
 		.erase_region_info =
 		{
@@ -96,6 +100,7 @@
 		.dev_size = 512*KB,
 		.interface_desc = 0x2,		/* x8 or x16 device */
 		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ5_DQ6_DQ7,
 		.num_erase_regions = 1,
 		.erase_region_info =
 		{
@@ -109,6 +114,7 @@
 		.dev_size = 512*KB,
 		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
 		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ5_DQ6_DQ7,
 		.num_erase_regions = 4,
 		.erase_region_info =
 		{
@@ -125,6 +131,7 @@
 		.dev_size = 512*KB,
 		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
 		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ5_DQ6_DQ7,
 		.num_erase_regions = 4,
 		.erase_region_info =
 		{
@@ -134,13 +141,102 @@
 			ERASE_REGION( 1, 16*KB)
 		}
 	},
+
+	/* SST 39VF* do not support DQ5 status polling - this currently is
+	   only supported by the host algorithm, not by the target code using
+	   the work area. */
 	{
+		.mfr = CFI_MFR_SST,
+		.id = 0x2782,				/* SST39xF160 */
+		.pri_id = 0x02,
+		.dev_size = 2*MB,
+		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
+		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ6_DQ7,
+		.num_erase_regions = 1,
+		.erase_region_info =
+		{
+			ERASE_REGION(512, 4*KB)
+		}
+	},
+	{
+		.mfr = CFI_MFR_SST,
+		.id = 0x2783,				/* SST39VF320 */
+		.pri_id = 0x02,
+		.dev_size = 4*MB,
+		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
+		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ6_DQ7,
+		.num_erase_regions = 1,
+		.erase_region_info =
+		{
+			ERASE_REGION(1024, 4*KB)
+		}
+	},
+	{
+		.mfr = CFI_MFR_SST,
+		.id = 0x234b,				/* SST39VF1601 */
+		.pri_id = 0x02,
+		.dev_size = 2*MB,
+		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
+		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ6_DQ7,
+		.num_erase_regions = 1,
+		.erase_region_info =
+		{
+			ERASE_REGION(512, 4*KB)
+		}
+	},
+	{
+		.mfr = CFI_MFR_SST,
+		.id = 0x234a,				/* SST39VF1602 */
+		.pri_id = 0x02,
+		.dev_size = 2*MB,
+		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
+		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ6_DQ7,
+		.num_erase_regions = 1,
+		.erase_region_info =
+		{
+			ERASE_REGION(512, 4*KB)
+		}
+	},
+	{
+		.mfr = CFI_MFR_SST,
+		.id = 0x235b,				/* SST39VF3201 */
+		.pri_id = 0x02,
+		.dev_size = 4*MB,
+		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
+		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ6_DQ7,
+		.num_erase_regions = 1,
+		.erase_region_info =
+		{
+			ERASE_REGION(1024, 4*KB)
+		}
+	},
+	{
+		.mfr = CFI_MFR_SST,
+		.id = 0x235a,				/* SST39VF3202 */
+		.pri_id = 0x02,
+		.dev_size = 4*MB,
+		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
+		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ6_DQ7,
+		.num_erase_regions = 1,
+		.erase_region_info =
+		{
+			ERASE_REGION(1024, 4*KB)
+		}
+	},
+	{
 		.mfr = CFI_MFR_AMD,
 		.id = 0x22ab,				/* AM29F400BB */
 		.pri_id = 0x02,
 		.dev_size = 512*KB,
 		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
 		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ5_DQ6_DQ7,
 		.num_erase_regions = 4,
 		.erase_region_info =
 		{
@@ -157,6 +253,7 @@
 		.dev_size = 512*KB,
 		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
 		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ5_DQ6_DQ7,
 		.num_erase_regions = 4,
 		.erase_region_info =
 		{
@@ -173,6 +270,7 @@
 		.dev_size = 1*MB,
 		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
 		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ5_DQ6_DQ7,
 		.num_erase_regions = 4,
 		.erase_region_info =
 		{
@@ -189,6 +287,7 @@
 		.dev_size = 1*MB,
 		.interface_desc = 0x2,
 		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ5_DQ6_DQ7,
 		.num_erase_regions = 4,
 		.erase_region_info =
 		{
@@ -205,6 +304,7 @@
 		.dev_size = 1*MB,
 		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
 		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ5_DQ6_DQ7,
 		.num_erase_regions = 4,
 		.erase_region_info =
 		{
@@ -222,6 +322,7 @@
 		.dev_size = 2*MB,
 		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
 		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ5_DQ6_DQ7,
 		.num_erase_regions = 4,
 		.erase_region_info =
 		{
@@ -238,6 +339,7 @@
 		.dev_size = 2*MB,
 		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
 		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ5_DQ6_DQ7,
 		.num_erase_regions = 4,
 		.erase_region_info =
 		{
@@ -248,25 +350,13 @@
 		}
 	},
 	{
-		.mfr = CFI_MFR_SST,
-		.id = 0x2782,				/* SST39xF160 */
-		.pri_id = 0x02,
-		.dev_size = 2*MB,
-		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
-		.max_buf_write_size = 0x0,
-		.num_erase_regions = 1,
-		.erase_region_info =
-		{
-			ERASE_REGION(512, 4*KB)
-		}
-	},
-	{
 		.mfr = CFI_MFR_ATMEL,
 		.id = 0x00c0,				/* Atmel 49BV1614 */
 		.pri_id = 0x02,
 		.dev_size = 2*MB,
 		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
 		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ5_DQ6_DQ7,
 		.num_erase_regions = 3,
 		.erase_region_info =
 		{
@@ -282,6 +372,7 @@
 		.dev_size = 2*MB,
 		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
 		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ5_DQ6_DQ7,
 		.num_erase_regions = 3,
 		.erase_region_info =
 		{
@@ -297,6 +388,7 @@
 		.dev_size = 1*MB,
 		.interface_desc = 0x2,		/* x8 or x16 device with nBYTE */
 		.max_buf_write_size = 0x0,
+		.status_poll_mask = CFI_STATUS_POLL_MASK_DQ5_DQ6_DQ7,
 		.num_erase_regions = 4,
 		.erase_region_info =
 		{
@@ -358,6 +450,7 @@
 
 	cfi_info->interface_desc = non_cfi->interface_desc;
 	cfi_info->max_buf_write_size = non_cfi->max_buf_write_size;
+	cfi_info->status_poll_mask = non_cfi->status_poll_mask;
 	cfi_info->num_erase_regions = non_cfi->num_erase_regions;
 	cfi_info->erase_region_info = non_cfi->erase_region_info;
 	cfi_info->dev_size = non_cfi->dev_size;

Modified: trunk/src/flash/non_cfi.h
===================================================================
--- trunk/src/flash/non_cfi.h	2009-04-21 05:29:23 UTC (rev 1479)
+++ trunk/src/flash/non_cfi.h	2009-04-21 05:31:18 UTC (rev 1480)
@@ -32,6 +32,7 @@
 	u16 max_buf_write_size;
 	u8 num_erase_regions;
 	u32 erase_region_info[6];
+	u8  status_poll_mask;
 } non_cfi_t;
 
 extern non_cfi_t non_cfi_flashes[];



From oharboe at mail.berlios.de  Tue Apr 21 07:33:51 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Tue, 21 Apr 2009 07:33:51 +0200
Subject: [Openocd-svn] r1481 - in trunk/src: helper jtag target xsvf
Message-ID: <200904210533.n3L5XprN009601@sheep.berlios.de>

Author: oharboe
Date: 2009-04-21 07:33:47 +0200 (Tue, 21 Apr 2009)
New Revision: 1481

Modified:
   trunk/src/helper/options.c
   trunk/src/jtag/arm-jtag-ew.c
   trunk/src/jtag/jlink.c
   trunk/src/jtag/vsllink.c
   trunk/src/target/target.c
   trunk/src/xsvf/xsvf.c
Log:
Zach Welch <zw at superlucidity.net> fix -Wformat-security warnings (1 of 4)

Modified: trunk/src/helper/options.c
===================================================================
--- trunk/src/helper/options.c	2009-04-21 05:31:18 UTC (rev 1480)
+++ trunk/src/helper/options.c	2009-04-21 05:33:47 UTC (rev 1481)
@@ -54,7 +54,7 @@
 
 int configuration_output_handler(struct command_context_s *context, const char* line)
 {
-	LOG_USER_N(line);
+	LOG_USER_N("%s", line);
 
 	return ERROR_OK;
 }

Modified: trunk/src/jtag/arm-jtag-ew.c
===================================================================
--- trunk/src/jtag/arm-jtag-ew.c	2009-04-21 05:31:18 UTC (rev 1480)
+++ trunk/src/jtag/arm-jtag-ew.c	2009-04-21 05:33:47 UTC (rev 1481)
@@ -896,7 +896,7 @@
 			snprintf(s, 4, " %02x", buffer[j]);
 			strcat(line, s);
 		}
-		LOG_DEBUG(line);
+		LOG_DEBUG("%s", line);
 	}
 }
 #endif

Modified: trunk/src/jtag/jlink.c
===================================================================
--- trunk/src/jtag/jlink.c	2009-04-21 05:31:18 UTC (rev 1480)
+++ trunk/src/jtag/jlink.c	2009-04-21 05:33:47 UTC (rev 1481)
@@ -537,7 +537,7 @@
 		if (result == len)
 		{
 			usb_in_buffer[result] = 0;
-			LOG_INFO((char *)usb_in_buffer);
+			LOG_INFO("%s", (char *)usb_in_buffer);
 			return ERROR_OK;
 		}
 	}

Modified: trunk/src/jtag/vsllink.c
===================================================================
--- trunk/src/jtag/vsllink.c	2009-04-21 05:31:18 UTC (rev 1480)
+++ trunk/src/jtag/vsllink.c	2009-04-21 05:33:47 UTC (rev 1481)
@@ -470,7 +470,7 @@
 			vsllink_usb_in_buffer[result] = 0;
 			VSLLINK_BufferSize = vsllink_usb_in_buffer[0] + (vsllink_usb_in_buffer[1] << 8);
 			strncpy(version_str, (char *)vsllink_usb_in_buffer + 2, sizeof(version_str));
-			LOG_INFO(version_str);
+			LOG_INFO("%s", version_str);
 
 			// free the pre-alloc memroy
 			free(vsllink_usb_in_buffer);
@@ -1449,7 +1449,7 @@
 			snprintf(s, 4, " %02x", buffer[j]);
 			strcat(line, s);
 		}
-		LOG_DEBUG(line);
+		LOG_DEBUG("%s", line);
 	}
 }
 #endif // _DEBUG_USB_COMMS_

Modified: trunk/src/target/target.c
===================================================================
--- trunk/src/target/target.c	2009-04-21 05:31:18 UTC (rev 1480)
+++ trunk/src/target/target.c	2009-04-21 05:33:47 UTC (rev 1481)
@@ -3961,7 +3961,7 @@
 	};
 
 	LOG_DEBUG("Target command params:");
-	LOG_DEBUG(Jim_Debug_ArgvString( interp, argc, argv) );
+	LOG_DEBUG("%s", Jim_Debug_ArgvString(interp, argc, argv));
 
 	cmd_ctx = Jim_GetAssocData( interp, "context" );
 

Modified: trunk/src/xsvf/xsvf.c
===================================================================
--- trunk/src/xsvf/xsvf.c	2009-04-21 05:31:18 UTC (rev 1480)
+++ trunk/src/xsvf/xsvf.c	2009-04-21 05:33:47 UTC (rev 1481)
@@ -761,7 +761,7 @@
 
 				comment[sizeof(comment)-1] = 0;		/* regardless, terminate */
 				if (verbose)
-					LOG_USER(comment);
+					LOG_USER("%s", comment);
 			}
 			break;
 



From oharboe at mail.berlios.de  Tue Apr 21 07:35:12 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Tue, 21 Apr 2009 07:35:12 +0200
Subject: [Openocd-svn] r1482 - trunk/src/target
Message-ID: <200904210535.n3L5ZClP009777@sheep.berlios.de>

Author: oharboe
Date: 2009-04-21 07:35:10 +0200 (Tue, 21 Apr 2009)
New Revision: 1482

Modified:
   trunk/src/target/target.c
Log:
Zach Welch <zw at superlucidity.net>fix unused return value warnings (3 of 4)

Modified: trunk/src/target/target.c
===================================================================
--- trunk/src/target/target.c	2009-04-21 05:33:47 UTC (rev 1481)
+++ trunk/src/target/target.c	2009-04-21 05:35:10 UTC (rev 1482)
@@ -2491,20 +2491,27 @@
 	return retval;
 }
 
+static void writeData(FILE *f, const void *data, size_t len)
+{
+	size_t written = fwrite(data, len, 1, f);
+	if (written != len)
+		LOG_ERROR("failed to write %u bytes: %s", len, strerror(errno));
+}
+
 static void writeLong(FILE *f, int l)
 {
 	int i;
 	for (i=0; i<4; i++)
 	{
 		char c=(l>>(i*8))&0xff;
-		fwrite(&c, 1, 1, f);
+		writeData(f, &c, 1);
 	}
 
 }
 
 static void writeString(FILE *f, char *s)
 {
-	fwrite(s, 1, strlen(s), f);
+	writeData(f, s, strlen(s));
 }
 
 /* Dump a gmon.out histogram file. */
@@ -2514,13 +2521,14 @@
 	FILE *f=fopen(filename, "w");
 	if (f==NULL)
 		return;
-	fwrite("gmon", 1, 4, f);
+	writeString(f, "gmon");
 	writeLong(f, 0x00000001); /* Version */
 	writeLong(f, 0); /* padding */
 	writeLong(f, 0); /* padding */
 	writeLong(f, 0); /* padding */
 
-	fwrite("", 1, 1, f);  /* GMON_TAG_TIME_HIST */
+	u8 zero = 0;  /* GMON_TAG_TIME_HIST */
+	writeData(f, &zero, 1);
 
 	/* figure out bucket size */
 	u32 min=samples[0];
@@ -2569,9 +2577,7 @@
 	writeLong(f, 64000000); 	/* 64MHz */
 	writeString(f, "seconds");
 	for (i=0; i<(15-strlen("seconds")); i++)
-	{
-		fwrite("", 1, 1, f);	/* padding */
-	}
+		writeData(f, &zero, 1);
 	writeString(f, "s");
 
 	/*append binary memory gmon.out profile_hist_data (profile_hist_data + profile_hist_hdr.hist_size) */
@@ -2591,7 +2597,7 @@
 			data[i*2+1]=(val>>8)&0xff;
 		}
 		free(buckets);
-		fwrite(data, 1, length*2, f);
+		writeData(f, data, length * 2);
 		free(data);
 	} else
 	{



From oharboe at mail.berlios.de  Tue Apr 21 07:35:52 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Tue, 21 Apr 2009 07:35:52 +0200
Subject: [Openocd-svn] r1483 - trunk
Message-ID: <200904210535.n3L5Zq47009944@sheep.berlios.de>

Author: oharboe
Date: 2009-04-21 07:35:51 +0200 (Tue, 21 Apr 2009)
New Revision: 1483

Modified:
   trunk/configure.in
Log:
Zach Welch <zw at superlucidity.net> add -Wformat-security (4 of 4)

Modified: trunk/configure.in
===================================================================
--- trunk/configure.in	2009-04-21 05:35:10 UTC (rev 1482)
+++ trunk/configure.in	2009-04-21 05:35:51 UTC (rev 1483)
@@ -692,7 +692,7 @@
 AC_PROG_RANLIB
 
 # set default gcc warnings
-GCC_WARNINGS="-Wall -Wstrict-prototypes"
+GCC_WARNINGS="-Wall -Wstrict-prototypes -Wformat-security"
 if test "${gcc_wextra}" = yes; then
 	GCC_WARNINGS="${GCC_WARNINGS} -Wextra -Wno-unused-parameter"
 fi



From oharboe at mail.berlios.de  Tue Apr 21 07:36:58 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Tue, 21 Apr 2009 07:36:58 +0200
Subject: [Openocd-svn] r1484 - trunk/src/flash
Message-ID: <200904210536.n3L5av7x010418@sheep.berlios.de>

Author: oharboe
Date: 2009-04-21 07:36:53 +0200 (Tue, 21 Apr 2009)
New Revision: 1484

Modified:
   trunk/src/flash/str9x.c
Log:
Zach Welch <zw at superlucidity.net> fix str9x type-punned pointer

Modified: trunk/src/flash/str9x.c
===================================================================
--- trunk/src/flash/str9x.c	2009-04-21 05:35:51 UTC (rev 1483)
+++ trunk/src/flash/str9x.c	2009-04-21 05:36:53 UTC (rev 1484)
@@ -194,6 +194,7 @@
 	int i;
 	u32 adr;
 	u32 status = 0;
+	u16 hstatus = 0;
 
 	if (bank->target->state != TARGET_HALTED)
 	{
@@ -212,10 +213,11 @@
 			{
 				return retval;
 			}
-			if ((retval=target_read_u16(target, adr, (u16*)&status))!=ERROR_OK)
+			if ((retval=target_read_u16(target, adr, &hstatus))!=ERROR_OK)
 			{
 				return retval;
 			}
+			status = hstatus;
 		}
 		else
 		{
@@ -237,10 +239,11 @@
 		{
 			return retval;
 		}
-		if ((retval=target_read_u16(target, adr, (u16*)&status))!=ERROR_OK)
+		if ((retval=target_read_u16(target, adr, &hstatus))!=ERROR_OK)
 		{
 			return retval;
 		}
+		status = hstatus;
 	}
 	
 	/* read array command */



From oharboe at mail.berlios.de  Tue Apr 21 07:39:40 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Tue, 21 Apr 2009 07:39:40 +0200
Subject: [Openocd-svn] r1485 - trunk/src/flash
Message-ID: <200904210539.n3L5deP1013496@sheep.berlios.de>

Author: oharboe
Date: 2009-04-21 07:39:36 +0200 (Tue, 21 Apr 2009)
New Revision: 1485

Modified:
   trunk/src/flash/at91sam7.c
   trunk/src/flash/pic32mx.c
Log:
Zach Welch <zw at superlucidity.net>  fix at91sam7 uninitialized variable warnings

Modified: trunk/src/flash/at91sam7.c
===================================================================
--- trunk/src/flash/at91sam7.c	2009-04-21 05:36:53 UTC (rev 1484)
+++ trunk/src/flash/at91sam7.c	2009-04-21 05:39:36 UTC (rev 1485)
@@ -322,11 +322,11 @@
 	u16 bnk, sec;
 	u16 arch;
 	u32 cidr;
-	u8 banks_num;
-	u16 num_nvmbits;
-	u16 sectors_num;
-	u16 pages_per_sector;
-	u16 page_size;
+	u8 banks_num = 0;
+	u16 num_nvmbits = 0;
+	u16 sectors_num = 0;
+	u16 pages_per_sector = 0;
+	u16 page_size = 0;
 	u32 ext_freq;
 	u32 bank_size;
 	u32 base_address = 0;

Modified: trunk/src/flash/pic32mx.c
===================================================================
--- trunk/src/flash/pic32mx.c	2009-04-21 05:36:53 UTC (rev 1484)
+++ trunk/src/flash/pic32mx.c	2009-04-21 05:39:36 UTC (rev 1485)
@@ -611,7 +611,7 @@
 	mips32_common_t *mips32 = target->arch_info;
 	mips_ejtag_t *ejtag_info = &mips32->ejtag_info;
 	int i;
-	u16 num_pages;
+	u16 num_pages = 0;
 	u32 device_id;
 	int page_size;
 
@@ -704,7 +704,7 @@
 	mips32_common_t *mips32 = target->arch_info;
 	mips_ejtag_t *ejtag_info = &mips32->ejtag_info;
 	u32 device_id;
-	int printed, i;
+	int printed = 0, i;
 
 	device_id = ejtag_info->idcode;
 



From oharboe at mail.berlios.de  Tue Apr 21 07:42:20 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Tue, 21 Apr 2009 07:42:20 +0200
Subject: [Openocd-svn] r1486 - trunk/src/helper
Message-ID: <200904210542.n3L5gKuo015013@sheep.berlios.de>

Author: oharboe
Date: 2009-04-21 07:42:18 +0200 (Tue, 21 Apr 2009)
New Revision: 1486

Modified:
   trunk/src/helper/jim.c
Log:
Zach Welch <zw at superlucidity.net>  fix unused return value warnings (2 of 4)

Modified: trunk/src/helper/jim.c
===================================================================
--- trunk/src/helper/jim.c	2009-04-21 05:39:36 UTC (rev 1485)
+++ trunk/src/helper/jim.c	2009-04-21 05:42:18 UTC (rev 1486)
@@ -133,7 +133,9 @@
 	buf[sizeof(buf)-1] = 0;
 #else
 	char *buf;
-	vasprintf( &buf, fmt, ap );
+	int result;
+	result = vasprintf( &buf, fmt, ap );
+	if (result < 0) exit(-1);
 #endif
 	return buf;
 }
@@ -8953,7 +8955,7 @@
     	const int cwd_len=2048;
 		char *cwd=malloc(cwd_len);
         Jim_SetResult(interp, Jim_NewEmptyStringObj(interp));
-	getcwd( cwd, cwd_len );
+	if (!getcwd( cwd, cwd_len )) strcpy(cwd, "unknown");
         Jim_AppendStrings(interp, Jim_GetResult(interp),
 	"Error loading script \"", filename, "\"",
 	    " cwd: ", cwd,



From oharboe at mail.berlios.de  Tue Apr 21 08:23:48 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Tue, 21 Apr 2009 08:23:48 +0200
Subject: [Openocd-svn] r1487 - trunk/src/jtag
Message-ID: <200904210623.n3L6Nmia014963@sheep.berlios.de>

Author: oharboe
Date: 2009-04-21 08:23:47 +0200 (Tue, 21 Apr 2009)
New Revision: 1487

Modified:
   trunk/src/jtag/at91rm9200.c
Log:
Zach Welch <zw at superlucidity.net> add static keywords to at91rm9200
				

Modified: trunk/src/jtag/at91rm9200.c
===================================================================
--- trunk/src/jtag/at91rm9200.c	2009-04-21 05:42:18 UTC (rev 1486)
+++ trunk/src/jtag/at91rm9200.c	2009-04-21 06:23:47 UTC (rev 1487)
@@ -101,14 +101,14 @@
 	u32 SRST_MASK;	/* SRST bitmask */
 };
 
-struct device_t devices[] =
+static struct device_t devices[] =
 {
 	{ "rea_ecr", PIOD, P27, PIOA, NC, PIOD, P23, PIOD, P24, PIOD, P26, PIOC, P5 },
 	{ .name = NULL },
 };
 
 /* configuration */
-char* at91rm9200_device;
+static char* at91rm9200_device;
 
 /* interface variables
  */



From ntfreak at mail.berlios.de  Tue Apr 21 10:51:09 2009
From: ntfreak at mail.berlios.de (ntfreak at BerliOS)
Date: Tue, 21 Apr 2009 10:51:09 +0200
Subject: [Openocd-svn] r1488 - trunk/src/helper
Message-ID: <200904210851.n3L8p9FV022352@sheep.berlios.de>

Author: ntfreak
Date: 2009-04-21 10:51:07 +0200 (Tue, 21 Apr 2009)
New Revision: 1488

Modified:
   trunk/src/helper/jim.c
Log:
- remove environ warning under win32 build

Modified: trunk/src/helper/jim.c
===================================================================
--- trunk/src/helper/jim.c	2009-04-21 06:23:47 UTC (rev 1487)
+++ trunk/src/helper/jim.c	2009-04-21 08:51:07 UTC (rev 1488)
@@ -11976,7 +11976,10 @@
     char *val;
 
     if (argc == 1) {
+
+#ifndef _WIN32
         extern char **environ;
+#endif
 
         int i;
         Jim_Obj *listObjPtr = Jim_NewListObj(interp, NULL, 0);



From ntfreak at mail.berlios.de  Tue Apr 21 11:02:42 2009
From: ntfreak at mail.berlios.de (ntfreak at BerliOS)
Date: Tue, 21 Apr 2009 11:02:42 +0200
Subject: [Openocd-svn] r1489 - in trunk/src: helper server
Message-ID: <200904210902.n3L92gTO024690@sheep.berlios.de>

Author: ntfreak
Date: 2009-04-21 11:02:42 +0200 (Tue, 21 Apr 2009)
New Revision: 1489

Modified:
   trunk/src/helper/Makefile.am
   trunk/src/server/Makefile.am
Log:
- fix signed/unsigned build errors under win32. Thanks Zach Welch <zw at superlucidity.net>

Modified: trunk/src/helper/Makefile.am
===================================================================
--- trunk/src/helper/Makefile.am	2009-04-21 08:51:07 UTC (rev 1488)
+++ trunk/src/helper/Makefile.am	2009-04-21 09:02:42 UTC (rev 1489)
@@ -18,6 +18,11 @@
 libhelper_a_SOURCES += ioutil.c
 endif
 
+libhelper_a_CFLAGS =
+if IS_MINGW
+# FD_* macros are sloppy with their signs on MinGW32 platform
+libhelper_a_CFLAGS += -Wno-sign-compare
+endif
 
 noinst_HEADERS = binarybuffer.h configuration.h types.h log.h command.h \
 	time_support.h replacements.h fileio.h jim.h jim-eventloop.h \

Modified: trunk/src/server/Makefile.am
===================================================================
--- trunk/src/server/Makefile.am	2009-04-21 08:51:07 UTC (rev 1488)
+++ trunk/src/server/Makefile.am	2009-04-21 09:02:42 UTC (rev 1489)
@@ -8,6 +8,11 @@
 libserver_a_SOURCES += httpd.c
 endif
 
+libserver_a_CFLAGS =
+if IS_MINGW
+# FD_* macros are sloppy with their signs on MinGW32 platform
+libserver_a_CFLAGS += -Wno-sign-compare
+endif
 
 # tcl server addons
 noinst_HEADERS += tcl_server.h



From oharboe at mail.berlios.de  Tue Apr 21 11:05:03 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Tue, 21 Apr 2009 11:05:03 +0200
Subject: [Openocd-svn] r1490 - trunk
Message-ID: <200904210905.n3L953cj025090@sheep.berlios.de>

Author: oharboe
Date: 2009-04-21 11:05:02 +0200 (Tue, 21 Apr 2009)
New Revision: 1490

Modified:
   trunk/configure.in
Log:
Zach Welch <zw at superlucidity.net> improve Linux ftd2xx configure-time support

Modified: trunk/configure.in
===================================================================
--- trunk/configure.in	2009-04-21 09:02:42 UTC (rev 1489)
+++ trunk/configure.in	2009-04-21 09:05:02 UTC (rev 1490)
@@ -522,7 +522,6 @@
 fi
 
 if test $build_ft2232_ftd2xx = yes ; then
-   AC_MSG_CHECKING([for libftd2xx.a (linux)])
    # Must be linux -
    # Cause FTDICHIP does not supply a MAC-OS version
    if test $host_os != linux-gnu && test $host_os != linux ; then
@@ -531,30 +530,26 @@
    # Are we given a TAR directory?
    if test "${with_ftd2xx_linux_tardir+set}" = set
    then
+        AC_MSG_CHECKING([uninstalled ftd2xx distribution])
 	# The .H file is simple..
-	f=$with_ftd2xx_linux_tardir/ftd2xx.h
-	if test ! -f $f ; then
-	   AC_MSG_ERROR([Option: --with-ftd2xx-linux-tardir appears wrong, cannot find: $f])
+	FTD2XX_H=$with_ftd2xx_linux_tardir/ftd2xx.h
+	if test ! -f "${FTD2XX_H}"; then
+	   AC_MSG_ERROR([Option: --with-ftd2xx-linux-tardir appears wrong, cannot find: ${FTD2XX_H}])
 	fi
 	CFLAGS="$CFLAGS -I$with_ftd2xx_linux_tardir"
-	if test $with_ftd2xx_lib = shared
-	then
-	    LDFLAGS="$LDFLAGS -L$with_ftd2xx_linux_tardir"
-	    LIBS="$LIBS -lftd2xx"
-	    AC_MSG_RESULT([ Assuming: -L$with_ftd2xx_linux_tardir -lftd2xx])
-	else
+	FTD2XX_LDFLAGS="-L$with_ftd2xx_linux_tardir"
+	FTD2XX_LIB="-lftd2xx"
+	if test $with_ftd2xx_lib != shared; then
 	    # Test #1 - Future proof - if/when ftdichip fixes their distro.
 	    # Try it with the simple ".a" suffix.
-	    f=$with_ftd2xx_linux_tardir/static_lib/libftd2xx.a
-	    if test -f $f ; then
-	       # Yea we are done
-	       LDFLAGS="$LDFLAGS -L$with_ftd2xx_linux_tardir/static_lib"
-	       LIBS="$LIBS -lftd2xx"
+	    FTD2XX_LIB="$with_ftd2xx_linux_tardir/static_lib/libftd2xx.a"
+	    if test -f "${FTD2XX_LIB}"; then
+	       FTD2XX_LDFLAGS="${FTD2XX_LDFLAGS}/static_lib"
             else
 	       # Test Number2.
 	       # Grr.. perhaps it exists as a version number?
-	       f="$with_ftd2xx_linux_tardir/static_lib/libftd2xx.a.*.*.*"
-	       count=`ls $f | wc -l`
+	       FTD2XX_LIB="$with_ftd2xx_linux_tardir/static_lib/libftd2xx.a.*.*.*"
+	       count=`ls ${FTD2XX_LIB} | wc -l`
 	       if test $count -gt 1 ; then
 	          AC_MSG_ERROR([Multiple libftd2xx.a files found in: $with_ftd2xx_linux_tardir/static_lib sorry cannot handle this yet])
 	       fi
@@ -563,17 +558,20 @@
 	       fi
 	       # Because the "-l" rules do not understand version numbers...
 	       # we will just stuff the absolute path onto the LIBS variable
-	       f=`ls $f`
-	       #
-	       LIBS="$LIBS $f -lpthread"
-	       # No need to bother with LDFLAGS...
+	       FTD2XX_LIB="`ls ${FTD2XX_LIB}` -lpthread"
+	       FTD2XX_LDFLAGS=""
 	    fi
-	    AC_MSG_RESULT([Found: $f])
         fi
+	LDFLAGS="${LDFLAGS} ${FTD2XX_LDFLAGS}"
+	LIBS="${LIBS} ${FTD2XX_LIB}"
+	AC_MSG_RESULT([${FTD2XX_LDFLAGS} ${FTD2XX_LIB}])
    else
-	LIBS="$LIBS -lftd2xx"
-	AC_MSG_RESULT([Assumed: installed])
-	AC_MSG_WARN([The (linux) FTDICHIP.COM files ftd2xx.h and libftd2xx.so are assumed to be in a proper place])
+	AC_CHECK_HEADER([ftd2xx.h],[],[
+			AC_MSG_ERROR([You seem to be missing the FTD2xx driver header file.])
+		])
+	AC_SEARCH_LIBS([FT_GetLibraryVersion],[ftd2xx],,[
+			AC_MSG_ERROR([You appear to be missing the FTD2xx driver library.])
+		],[])
    fi
 fi
 fi
@@ -583,7 +581,7 @@
 # Before we go any further - make sure we can *BUILD* and *RUN*
 # a simple app with the "ftd2xx.lib" file - in what ever form we where given
 # We should be able to compile, link and run this test program now
-  AC_MSG_CHECKING([Test: Build & Link with ftd2xx])
+  AC_MSG_CHECKING([whether ftd2xx library works])
 
 #
 # Save the LDFLAGS for later..



From ntfreak at mail.berlios.de  Tue Apr 21 11:08:46 2009
From: ntfreak at mail.berlios.de (ntfreak at BerliOS)
Date: Tue, 21 Apr 2009 11:08:46 +0200
Subject: [Openocd-svn] r1491 - in trunk/src: jtag target/interface
Message-ID: <200904210908.n3L98kXj025283@sheep.berlios.de>

Author: ntfreak
Date: 2009-04-21 11:08:43 +0200 (Tue, 21 Apr 2009)
New Revision: 1491

Added:
   trunk/src/target/interface/vsllink.cfg
Modified:
   trunk/src/jtag/vsllink.c
Log:
- vsllink update from SimonQian [simonqian at SimonQian.com]

Modified: trunk/src/jtag/vsllink.c
===================================================================
--- trunk/src/jtag/vsllink.c	2009-04-21 09:05:02 UTC (rev 1490)
+++ trunk/src/jtag/vsllink.c	2009-04-21 09:08:43 UTC (rev 1491)
@@ -49,12 +49,16 @@
 #define DEBUG_JTAG_IO(expr ...)
 #endif
 
-static u16 vsllink_vid;
-static u16 vsllink_pid;
-static u8 vsllink_bulkout;
-static u8 vsllink_bulkin;
+#define VSLLINK_MODE_NORMAL			0
+#define VSLLINK_MODE_DMA			1
 
-#define VSLLINK_USB_TIMEOUT			10000
+static u16 vsllink_usb_vid;
+static u16 vsllink_usb_pid;
+static u8 vsllink_usb_bulkout;
+static u8 vsllink_usb_bulkin;
+static u8 vsllink_usb_interface;
+static u8 vsllink_mode = VSLLINK_MODE_NORMAL;
+static int VSLLINK_USB_TIMEOUT = 10000;
 
 static int VSLLINK_BufferSize = 1024;
 
@@ -74,6 +78,7 @@
 #define VSLLINK_CMD_HW_JTAGSEQCMD	0xA0
 #define VSLLINK_CMD_HW_JTAGHLCMD	0xA1
 #define VSLLINK_CMD_HW_SWDCMD		0xA2
+#define VSLLINK_CMD_HW_JTAGRAWCMD	0xA3
 
 #define VSLLINK_CMDJTAGSEQ_TMSBYTE	0x00
 #define VSLLINK_CMDJTAGSEQ_TMSCLOCK	0x40
@@ -101,7 +106,7 @@
  * 3: Pause-DR
  * 4: Shift-IR
  * 5: Pause-IR
- *
+ * 
  * SD->SD and SI->SI have to be caught in interface specific code
  */
 static u8 VSLLINK_tap_move[6][6] =
@@ -110,9 +115,9 @@
 	{0xff, 0x7f, 0x2f, 0x0a, 0x37, 0x16},	/* TLR */
 	{0xff, 0x00, 0x45, 0x05, 0x4b, 0x0b},	/* RTI */
 	{0xff, 0x61, 0x00, 0x01, 0x0f, 0x2f},	/* SD  */
-	{0xff, 0x60, 0x40, 0x5c, 0x3c, 0x5e},	/* PD  */
+	{0xfe, 0x60, 0x40, 0x5c, 0x3c, 0x5e},	/* PD  */
 	{0xff, 0x61, 0x07, 0x17, 0x00, 0x01},	/* SI  */
-	{0xff, 0x60, 0x38, 0x5c, 0x40, 0x5e}	/* PI  */
+	{0xfe, 0x60, 0x38, 0x5c, 0x40, 0x5e}	/* PI  */
 };
 
 typedef struct insert_insignificant_operation
@@ -175,8 +180,8 @@
 
 typedef struct
 {
+	int offset;
 	int length; /* Number of bits to read */
-	int offset;
 	scan_command_t *command; /* Corresponding scan command */
 	u8 *buffer;
 } pending_scan_result_t;
@@ -200,22 +205,42 @@
 static int vsllink_handle_usb_pid_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 static int vsllink_handle_usb_bulkin_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 static int vsllink_handle_usb_bulkout_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int vsllink_handle_usb_interface_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int vsllink_handle_mode_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
 /* Queue command functions */
 static void vsllink_end_state(tap_state_t state);
-static void vsllink_state_move(void);
-static void vsllink_path_move(int num_states, tap_state_t *path);
+static void vsllink_state_move_dma(void);
+static void vsllink_state_move_normal(void);
+static void (*vsllink_state_move)(void);
+static void vsllink_path_move_dma(int num_states, tap_state_t *path);
+static void vsllink_path_move_normal(int num_states, tap_state_t *path);
+static void (*vsllink_path_move)(int num_states, tap_state_t *path);
 static void vsllink_runtest(int num_cycles);
-static void vsllink_stableclocks(int num_cycles, int tms);
-static void vsllink_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size, scan_command_t *command);
+static void vsllink_stableclocks_dma(int num_cycles, int tms);
+static void vsllink_stableclocks_normal(int num_cycles, int tms);
+static void (*vsllink_stableclocks)(int num_cycles, int tms);
+static void vsllink_scan_dma(int ir_scan, enum scan_type type, u8 *buffer, int scan_size, scan_command_t *command);
+static void vsllink_scan_normal(int ir_scan, enum scan_type type, u8 *buffer, int scan_size, scan_command_t *command);
+static void (*vsllink_scan)(int ir_scan, enum scan_type type, u8 *buffer, int scan_size, scan_command_t *command);
 static void vsllink_reset(int trst, int srst);
 static void vsllink_simple_command(u8 command);
+static int vsllink_connect(void);
+static int vsllink_disconnect(void);
 
 /* VSLLink tap buffer functions */
-static void vsllink_tap_init(void);
-static int vsllink_tap_execute(void);
-static void vsllink_tap_ensure_space(int scans, int bytes);
-static void vsllink_tap_append_scan(int length, u8 *buffer, scan_command_t *command, int offset);
+static void vsllink_tap_append_step(int tms, int tdi);
+static void vsllink_tap_init_dma(void);
+static void vsllink_tap_init_normal(void);
+static void (*vsllink_tap_init)(void);
+static int vsllink_tap_execute_dma(void);
+static int vsllink_tap_execute_normal(void);
+static int (*vsllink_tap_execute)(void);
+static void vsllink_tap_ensure_space_dma(int scans, int length);
+static void vsllink_tap_ensure_space_normal(int scans, int length);
+static void (*vsllink_tap_ensure_space)(int scans, int length);
+static void vsllink_tap_append_scan_dma(int length, u8 *buffer, scan_command_t *command);
+static void vsllink_tap_append_scan_normal(int length, u8 *buffer, scan_command_t *command, int offset);
 
 /* VSLLink lowlevel functions */
 typedef struct vsllink_jtag
@@ -236,8 +261,15 @@
 static int vsllink_tms_data_len = 0;
 static u8* vsllink_tms_cmd_pos;
 
-static vsllink_jtag_t* vsllink_jtag_handle;
+static int tap_length = 0;
+static int tap_buffer_size = 0;
+static u8 *tms_buffer = NULL;
+static u8 *tdi_buffer = NULL;
+static u8 *tdo_buffer = NULL;
+static int last_tms;
 
+static vsllink_jtag_t* vsllink_jtag_handle = NULL;
+
 /***************************************************************************/
 /* External interface implementation */
 
@@ -253,6 +285,19 @@
 	.quit = vsllink_quit
 };
 
+static void reset_command_pointer(void)
+{
+	if (vsllink_mode == VSLLINK_MODE_NORMAL)
+	{
+		vsllink_usb_out_buffer[0] = VSLLINK_CMD_HW_JTAGSEQCMD;
+		vsllink_usb_out_buffer_idx = 3;
+	}
+	else
+	{
+		tap_length = 0;
+	}
+}
+
 static int vsllink_execute_queue(void)
 {
 	jtag_command_t *cmd = jtag_command_queue;
@@ -262,56 +307,55 @@
 
 	DEBUG_JTAG_IO("--------------------------------- vsllink -------------------------------------");
 
-	vsllink_usb_out_buffer[0] = VSLLINK_CMD_HW_JTAGSEQCMD;
-	vsllink_usb_out_buffer_idx = 3;
+	reset_command_pointer();
 	while (cmd != NULL)
 	{
 		switch (cmd->type)
 		{
 			case JTAG_END_STATE:
 				DEBUG_JTAG_IO("end_state: %s", tap_state_name(cmd->cmd.end_state->end_state));
-
+			
 				if (cmd->cmd.end_state->end_state != TAP_INVALID)
 				{
 					vsllink_end_state(cmd->cmd.end_state->end_state);
 				}
 				break;
-
+				
 			case JTAG_RUNTEST:
 				DEBUG_JTAG_IO( "runtest %i cycles, end in %s", cmd->cmd.runtest->num_cycles, \
 					tap_state_name(cmd->cmd.runtest->end_state));
-
+					
 				if (cmd->cmd.runtest->end_state != TAP_INVALID)
 				{
 					vsllink_end_state(cmd->cmd.runtest->end_state);
 				}
 				vsllink_runtest(cmd->cmd.runtest->num_cycles);
 				break;
-
+				
 			case JTAG_STATEMOVE:
 				DEBUG_JTAG_IO("statemove end in %s", tap_state_name(cmd->cmd.statemove->end_state));
-
+				
 				if (cmd->cmd.statemove->end_state != TAP_INVALID)
 				{
 					vsllink_end_state(cmd->cmd.statemove->end_state);
 				}
 				vsllink_state_move();
 				break;
-
+				
 			case JTAG_PATHMOVE:
 				DEBUG_JTAG_IO("pathmove: %i states, end in %s", \
 					cmd->cmd.pathmove->num_states, \
 					tap_state_name(cmd->cmd.pathmove->path[cmd->cmd.pathmove->num_states - 1]));
-
+					
 				vsllink_path_move(cmd->cmd.pathmove->num_states, cmd->cmd.pathmove->path);
 				break;
-
+				
 			case JTAG_SCAN:
 				if (cmd->cmd.scan->end_state != TAP_INVALID)
 				{
 					vsllink_end_state(cmd->cmd.scan->end_state);
 				}
-
+				
 				scan_size = jtag_build_buffer(cmd->cmd.scan, &buffer);
 				if (cmd->cmd.scan->ir_scan)
 				{
@@ -321,37 +365,34 @@
 				{
 					DEBUG_JTAG_IO("JTAG Scan write DR(%d bits), end in %s:", scan_size, tap_state_name(cmd->cmd.scan->end_state));
 				}
-
+				
 #ifdef _DEBUG_JTAG_IO_
 				vsllink_debug_buffer(buffer, (scan_size + 7) >> 3);
 #endif
-
+				
 				type = jtag_scan_type(cmd->cmd.scan);
-
+				
 				vsllink_scan(cmd->cmd.scan->ir_scan, type, buffer, scan_size, cmd->cmd.scan);
 				break;
-
+				
 			case JTAG_RESET:
 				DEBUG_JTAG_IO("reset trst: %i srst %i", cmd->cmd.reset->trst, cmd->cmd.reset->srst);
-
+				
 				vsllink_tap_execute();
-
+				
 				if (cmd->cmd.reset->trst == 1)
 				{
 					tap_set_state(TAP_RESET);
 				}
 				vsllink_reset(cmd->cmd.reset->trst, cmd->cmd.reset->srst);
-
-				vsllink_usb_out_buffer[0] = VSLLINK_CMD_HW_JTAGSEQCMD;
-				vsllink_usb_out_buffer_idx = 3;
 				break;
-
+				
 			case JTAG_SLEEP:
 				DEBUG_JTAG_IO("sleep %i", cmd->cmd.sleep->us);
 				vsllink_tap_execute();
 				jtag_sleep(cmd->cmd.sleep->us);
 				break;
-
+				
 			case JTAG_STABLECLOCKS:
 				DEBUG_JTAG_IO("add %d clocks", cmd->cmd.stableclocks->num_cycles);
 				switch(tap_get_state())
@@ -375,27 +416,27 @@
 				}
 				vsllink_stableclocks(cmd->cmd.stableclocks->num_cycles, scan_size);
 				break;
-
+				
 			default:
 				LOG_ERROR("BUG: unknown JTAG command type encountered: %d", cmd->type);
 				exit(-1);
 		}
 		cmd = cmd->next;
 	}
-
+	
 	return vsllink_tap_execute();
 }
 
 static int vsllink_speed(int speed)
 {
 	int result;
-
+	
 	vsllink_usb_out_buffer[0] = VSLLINK_CMD_SET_SPEED;
 	vsllink_usb_out_buffer[1] = (speed >> 0) & 0xff;
 	vsllink_usb_out_buffer[2] = (speed >> 8) & 0xFF;
-
+	
 	result = vsllink_usb_write(vsllink_jtag_handle, 3);
-
+	
 	if (result == 3)
 	{
 		return ERROR_OK;
@@ -405,44 +446,30 @@
 		LOG_ERROR("VSLLink setting speed failed (%d)", result);
 		return ERROR_JTAG_DEVICE_ERROR;
 	}
-
+	
 	return ERROR_OK;
 }
 
 static int vsllink_khz(int khz, int *jtag_speed)
 {
 	*jtag_speed = khz;
-
+	
 	return ERROR_OK;
 }
 
 static int vsllink_speed_div(int jtag_speed, int *khz)
 {
 	*khz = jtag_speed;
-
+	
 	return ERROR_OK;
 }
 
-static int vsllink_register_commands(struct command_context_s *cmd_ctx)
-{
-	register_command(cmd_ctx, NULL, "vsllink_usb_vid", vsllink_handle_usb_vid_command,
-					COMMAND_CONFIG, NULL);
-	register_command(cmd_ctx, NULL, "vsllink_usb_pid", vsllink_handle_usb_pid_command,
-					COMMAND_CONFIG, NULL);
-	register_command(cmd_ctx, NULL, "vsllink_usb_bulkin", vsllink_handle_usb_bulkin_command,
-					COMMAND_CONFIG, NULL);
-	register_command(cmd_ctx, NULL, "vsllink_usb_bulkout", vsllink_handle_usb_bulkout_command,
-					COMMAND_CONFIG, NULL);
-
-	return ERROR_OK;
-}
-
 static int vsllink_init(void)
 {
-	int check_cnt;
+	int check_cnt, to_tmp;
 	int result;
 	char version_str[100];
-
+	
 	vsllink_usb_in_buffer = malloc(VSLLINK_BufferSize);
 	vsllink_usb_out_buffer = malloc(VSLLINK_BufferSize);
 	if ((vsllink_usb_in_buffer == NULL) || (vsllink_usb_out_buffer == NULL))
@@ -450,34 +477,37 @@
 		LOG_ERROR("Not enough memory");
 		exit(-1);
 	}
-
+	
 	vsllink_jtag_handle = vsllink_usb_open();
-
+	
 	if (vsllink_jtag_handle == 0)
 	{
 		LOG_ERROR("Can't find USB JTAG Interface! Please check connection and permissions.");
 		return ERROR_JTAG_INIT_FAILED;
 	}
-
+	LOG_DEBUG("vsllink found on %04X:%04X", vsllink_usb_vid, vsllink_usb_pid);
+	
+	to_tmp = VSLLINK_USB_TIMEOUT;
+	VSLLINK_USB_TIMEOUT = 100;
 	check_cnt = 0;
-	while (check_cnt < 3)
+	while (check_cnt < 5)
 	{
-		vsllink_simple_command(VSLLINK_CMD_CONN);
+		vsllink_simple_command(0x00);
 		result = vsllink_usb_read(vsllink_jtag_handle);
-
+		
 		if (result > 2)
 		{
 			vsllink_usb_in_buffer[result] = 0;
 			VSLLINK_BufferSize = vsllink_usb_in_buffer[0] + (vsllink_usb_in_buffer[1] << 8);
 			strncpy(version_str, (char *)vsllink_usb_in_buffer + 2, sizeof(version_str));
 			LOG_INFO("%s", version_str);
-
+			
 			// free the pre-alloc memroy
 			free(vsllink_usb_in_buffer);
 			free(vsllink_usb_out_buffer);
 			vsllink_usb_in_buffer = NULL;
 			vsllink_usb_out_buffer = NULL;
-
+			
 			// alloc new memory
 			vsllink_usb_in_buffer = malloc(VSLLINK_BufferSize);
 			vsllink_usb_out_buffer = malloc(VSLLINK_BufferSize);
@@ -490,20 +520,64 @@
 			{
 				LOG_INFO("buffer size for USB is %d bytes", VSLLINK_BufferSize);
 			}
+			// alloc memory for dma mode
+			if (vsllink_mode == VSLLINK_MODE_DMA)
+			{
+				tap_buffer_size = (VSLLINK_BufferSize - 3) / 2;
+				tms_buffer = (u8*)malloc(tap_buffer_size);
+				tdi_buffer = (u8*)malloc(tap_buffer_size);
+				tdo_buffer = (u8*)malloc(tap_buffer_size);
+				if ((tms_buffer == NULL) || (tdi_buffer == NULL) || (tdo_buffer == NULL))
+				{
+					LOG_ERROR("Not enough memory");
+					exit(-1);
+				}
+			}
 			break;
 		}
 		vsllink_simple_command(VSLLINK_CMD_DISCONN);
-
 		check_cnt++;
 	}
-
 	if (check_cnt == 3)
 	{
 		// It's dangerout to proced
 		LOG_ERROR("VSLLink initial failed");
 		exit(-1);
 	}
-
+	VSLLINK_USB_TIMEOUT = to_tmp;
+	
+	// connect to vsllink
+	vsllink_connect();
+	// initialize function pointers
+	if (vsllink_mode == VSLLINK_MODE_NORMAL)
+	{
+		// normal mode
+		vsllink_state_move = vsllink_state_move_normal;
+		vsllink_path_move = vsllink_path_move_normal;
+		vsllink_stableclocks = vsllink_stableclocks_normal;
+		vsllink_scan = vsllink_scan_normal;
+		
+		vsllink_tap_init = vsllink_tap_init_normal;
+		vsllink_tap_execute = vsllink_tap_execute_normal;
+		vsllink_tap_ensure_space = vsllink_tap_ensure_space_normal;
+		
+		LOG_INFO("vsllink run in NORMAL mode");
+	}
+	else
+	{
+		// dma mode
+		vsllink_state_move = vsllink_state_move_dma;
+		vsllink_path_move = vsllink_path_move_dma;
+		vsllink_stableclocks = vsllink_stableclocks_dma;
+		vsllink_scan = vsllink_scan_dma;
+		
+		vsllink_tap_init = vsllink_tap_init_dma;
+		vsllink_tap_execute = vsllink_tap_execute_dma;
+		vsllink_tap_ensure_space = vsllink_tap_ensure_space_dma;
+		
+		LOG_INFO("vsllink run in DMA mode");
+	}
+	
 	// Set SRST and TRST to output, Set USR1 and USR2 to input
 	vsllink_usb_out_buffer[0] = VSLLINK_CMD_SET_PORTDIR;
 	vsllink_usb_out_buffer[1] = JTAG_PINMSK_SRST | JTAG_PINMSK_TRST | JTAG_PINMSK_USR1 | JTAG_PINMSK_USR2;
@@ -513,13 +587,13 @@
 		LOG_ERROR("VSLLink USB send data error");
 		exit(-1);
 	}
-
+	
 	vsllink_reset(0, 0);
-
+	
 	LOG_INFO("VSLLink JTAG Interface ready");
-
+	
 	vsllink_tap_init();
-
+	
 	return ERROR_OK;
 }
 
@@ -536,31 +610,60 @@
 			LOG_ERROR("VSLLink USB send data error");
 			exit(-1);
 		}
-
+		
 		// disconnect
-		vsllink_simple_command(VSLLINK_CMD_DISCONN);
+		vsllink_disconnect();
 		vsllink_usb_close(vsllink_jtag_handle);
+		vsllink_jtag_handle = NULL;
 	}
-
+	
 	if (vsllink_usb_in_buffer != NULL)
 	{
 		free(vsllink_usb_in_buffer);
+		vsllink_usb_in_buffer = NULL;
 	}
 	if (vsllink_usb_out_buffer != NULL)
 	{
 		free(vsllink_usb_out_buffer);
+		vsllink_usb_out_buffer = NULL;
 	}
+	
 	return ERROR_OK;
 }
 
+/***************************************************************************/
+/* Queue command implementations */
+static int vsllink_disconnect(void)
+{
+	vsllink_simple_command(VSLLINK_CMD_DISCONN);
+	return ERROR_OK;
+}
+
+static int vsllink_connect(void)
+{
+	char vsllink_str[100];
+	
+	vsllink_usb_out_buffer[0] = VSLLINK_CMD_CONN;
+	vsllink_usb_out_buffer[1] = vsllink_mode;
+	vsllink_usb_message(vsllink_jtag_handle, 2, 0);
+	if (vsllink_usb_read(vsllink_jtag_handle) > 2)
+	{
+		strncpy(vsllink_str, (char *)vsllink_usb_in_buffer + 2, sizeof(vsllink_str));
+		LOG_INFO("%s", vsllink_str);
+	}
+	
+	return ERROR_OK;
+}
+
 // when vsllink_tms_data_len > 0, vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx] is the byte that need to be appended.
 // length of VSLLINK_CMDJTAGSEQ_TMSBYTE has been set, no need to set it here.
 static void vsllink_append_tms(void)
 {
 	u8 tms_scan = VSLLINK_TAP_MOVE(tap_get_state(), tap_get_end_state());
 	u16 tms2;
-	tap_state_t	end_state = tap_get_end_state();
-
+	insert_insignificant_operation_t *insert = \
+		&VSLLINK_TAP_MOVE_INSERT_INSIGNIFICANT[tap_move_ndx(tap_get_state())][tap_move_ndx(tap_get_end_state())];
+		
 	if (((tap_get_state() != TAP_RESET) && (tap_get_state() != TAP_IDLE) && (tap_get_state() != TAP_DRPAUSE) && (tap_get_state() != TAP_IRPAUSE)) || \
 			(vsllink_tms_data_len <= 0) || (vsllink_tms_data_len >= 8) || \
 			(vsllink_tms_cmd_pos == NULL))
@@ -568,27 +671,24 @@
 		LOG_ERROR("There MUST be some bugs in the driver");
 		exit(-1);
 	}
-
-	tms2 = (tms_scan & VSLLINK_BIT_MSK[VSLLINK_TAP_MOVE_INSERT_INSIGNIFICANT[tap_move_ndx(tap_get_state())][tap_move_ndx(end_state)].insert_position]) << \
+	
+	tms2 = (tms_scan & VSLLINK_BIT_MSK[insert->insert_position]) << \
 				vsllink_tms_data_len;
-	if (VSLLINK_TAP_MOVE_INSERT_INSIGNIFICANT[tap_move_ndx(tap_get_state())][tap_move_ndx(end_state)].insert_value == 1)
+	if (insert->insert_value == 1)
 	{
 		tms2 |= VSLLINK_BIT_MSK[8 - vsllink_tms_data_len] << \
-				(vsllink_tms_data_len + VSLLINK_TAP_MOVE_INSERT_INSIGNIFICANT[tap_move_ndx(tap_get_state())][tap_move_ndx(end_state)].insert_position);
+				(vsllink_tms_data_len + insert->insert_position);
 	}
-	tms2 |= (tms_scan >> VSLLINK_TAP_MOVE_INSERT_INSIGNIFICANT[tap_move_ndx(tap_get_state())][tap_move_ndx(end_state)].insert_position) << \
-				(8 + VSLLINK_TAP_MOVE_INSERT_INSIGNIFICANT[tap_move_ndx(tap_get_state())][tap_move_ndx(end_state)].insert_position);
-
+	tms2 |= (tms_scan >> insert->insert_position) << \
+				(8 + insert->insert_position);
+				
 	vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] |= (tms2 >> 0) & 0xff;
 	vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = (tms2 >> 8) & 0xff;
-
+	
 	vsllink_tms_data_len = 0;
 	vsllink_tms_cmd_pos = NULL;
 }
 
-/***************************************************************************/
-/* Queue command implementations */
-
 static void vsllink_end_state(tap_state_t state)
 {
 	if (tap_is_state_stable(state))
@@ -603,7 +703,7 @@
 }
 
 /* Goes to the end state. */
-static void vsllink_state_move(void)
+static void vsllink_state_move_normal(void)
 {
 	if (vsllink_tms_data_len > 0)
 	{
@@ -612,19 +712,65 @@
 	else
 	{
 		vsllink_tap_ensure_space(0, 2);
-
+		
 		vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = VSLLINK_CMDJTAGSEQ_TMSBYTE;
 		vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = VSLLINK_TAP_MOVE(tap_get_state(), tap_get_end_state());
 	}
-
+	
 	tap_set_state(tap_get_end_state());
 }
+static void vsllink_state_move_dma(void)
+{
+	int i, insert_length = (tap_length % 8) ? (8 - (tap_length % 8)) : 0;
+	insert_insignificant_operation_t *insert = \
+		&VSLLINK_TAP_MOVE_INSERT_INSIGNIFICANT[tap_move_ndx(tap_get_state())][tap_move_ndx(tap_get_end_state())];
+	u8 tms_scan = VSLLINK_TAP_MOVE(tap_get_state(), tap_get_end_state());
+	
+	vsllink_tap_ensure_space(0, 8);
+	
+	if (tap_get_state() == TAP_RESET)
+	{
+		for (i = 0; i < 8; i++)
+		{
+			vsllink_tap_append_step(1, 0);
+		}
+	}
+	
+	if (insert_length > 0)
+	{
+		vsllink_tap_ensure_space(0, 16);
+		
+		for (i = 0; i < insert->insert_position; i++)
+		{
+			vsllink_tap_append_step((tms_scan >> i) & 1, 0);
+		}
+		for (i = 0; i < insert_length; i++)
+		{
+			vsllink_tap_append_step(insert->insert_value, 0);
+		}
+		for (i = insert->insert_position; i < 8; i++)
+		{
+			vsllink_tap_append_step((tms_scan >> i) & 1, 0);
+		}
+	}
+	else
+	{
+		vsllink_tap_ensure_space(0, 8);
+		
+		for (i = 0; i < 8; i++)
+		{
+			vsllink_tap_append_step((tms_scan >> i) & 1, 0);
+		}
+	}
+	
+	tap_set_state(tap_get_end_state());
+}
 
 // write tms from current vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx]
 static void vsllink_add_path(int start, int num, tap_state_t *path)
 {
 	int i;
-
+	
 	for (i = start; i < (start + num); i++)
 	{
 		if ((i & 7) == 0)
@@ -635,7 +781,7 @@
 			}
 			vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx] = 0;
 		}
-
+		
 		if (path[i - start] == tap_state_transition(tap_get_state(), true))
 		{
 			vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx] |= 1 << (i & 7);
@@ -656,14 +802,14 @@
 		vsllink_usb_out_buffer_idx++;
 		vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx] = 0;
 	}
-
+	
 	tap_set_end_state(tap_get_state());
 }
 
-static void vsllink_path_move(int num_states, tap_state_t *path)
+static void vsllink_path_move_normal(int num_states, tap_state_t *path)
 {
 	int i, tms_len, tms_cmd_pos, path_idx = 0;
-
+	
 	if (vsllink_tms_data_len > 0)
 	{
 		// there are vsllink_tms_data_len more tms bits to be shifted
@@ -714,7 +860,7 @@
 				// end last tms shift command
 				vsllink_add_path(vsllink_tms_data_len, num_states, path);
 			}
-
+			
 			vsllink_tms_data_len = (vsllink_tms_data_len + num_states) & 7;
 			if (vsllink_tms_data_len == 0)
 			{
@@ -725,19 +871,19 @@
 		else
 		{
 			vsllink_add_path(vsllink_tms_data_len, 16 - vsllink_tms_data_len, path);
-
+			
 			path += 16 - vsllink_tms_data_len;
 			num_states -= 16 - vsllink_tms_data_len;
 			vsllink_tms_data_len = 0;
 			vsllink_tms_cmd_pos = NULL;
 		}
 	}
-
+	
 	if (num_states > 0)
 	{
 		// Normal operation, don't need to append tms data
 		vsllink_tms_data_len = num_states & 7;
-
+		
 		while (num_states > 0)
 		{
 			if (num_states > ((VSLLINK_CMDJTAGSEQ_LENMSK + 1) * 8))
@@ -752,13 +898,13 @@
 			vsllink_tap_ensure_space(0, tms_len + 2);
 			tms_cmd_pos = vsllink_usb_out_buffer_idx;
 			vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = VSLLINK_CMDJTAGSEQ_TMSBYTE | (tms_len - 1);
-
+			
 			vsllink_add_path(0, i, path + path_idx);
-
+			
 			path_idx += i;
 			num_states -= i;
 		}
-
+		
 		if (vsllink_tms_data_len > 0)
 		{
 			if (tms_len < (VSLLINK_CMDJTAGSEQ_LENMSK + 1))
@@ -769,7 +915,7 @@
 			else
 			{
 				vsllink_usb_out_buffer[tms_cmd_pos]--;
-
+				
 				tms_len = vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx];
 				vsllink_tap_ensure_space(0, 3);
 				vsllink_tms_cmd_pos = &vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx];
@@ -779,12 +925,71 @@
 		}
 	}
 }
+static void vsllink_path_move_dma(int num_states, tap_state_t *path)
+{
+	int i, j = 0;
+	
+	if (tap_length & 7)
+	{
+		if ((8 - (tap_length & 7)) < num_states)
+		{
+			j = 8 - (tap_length & 7);
+		}
+		else
+		{
+			j = num_states;
+		}
+		for (i = 0; i < j; i++)
+		{
+			if (path[i] == tap_state_transition(tap_get_state(), false))
+			{
+				vsllink_tap_append_step(0, 0);
+			}
+			else if (path[i] == tap_state_transition(tap_get_state(), true))
+			{
+				vsllink_tap_append_step(1, 0);
+			}
+			else
+			{
+				LOG_ERROR("BUG: %s -> %s isn't a valid TAP transition", tap_state_name(tap_get_state()), tap_state_name(path[i]));
+				exit(-1);
+			}
+			tap_set_state(path[i]);
+		}
+		num_states -= j;
+	}
+	
+	if (num_states > 0)
+	{
+		vsllink_tap_ensure_space(0, num_states);
+		
+		for (i = 0; i < num_states; i++)
+		{
+			if (path[j + i] == tap_state_transition(tap_get_state(), false))
+			{
+				vsllink_tap_append_step(0, 0);
+			}
+			else if (path[j + i] == tap_state_transition(tap_get_state(), true))
+			{
+				vsllink_tap_append_step(1, 0);
+			}
+			else
+			{
+				LOG_ERROR("BUG: %s -> %s isn't a valid TAP transition", tap_state_name(tap_get_state()), tap_state_name(path[i]));
+				exit(-1);
+			}
+			tap_set_state(path[j + i]);
+		}
+	}
+	
+	tap_set_end_state(tap_get_state());
+}
 
-static void vsllink_stableclocks(int num_cycles, int tms)
+static void vsllink_stableclocks_normal(int num_cycles, int tms)
 {
 	int tms_len;
 	u16 tms_append_byte;
-
+	
 	if (vsllink_tms_data_len > 0)
 	{
 		// there are vsllink_tms_data_len more tms bits to be shifted
@@ -850,7 +1055,7 @@
 				vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] |= (u8)(tms_append_byte & 0xFF);
 				vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = (u8)(tms_append_byte >> 8);
 			}
-
+			
 			vsllink_tms_data_len = tms_len & 7;
 			if (vsllink_tms_data_len == 0)
 			{
@@ -863,14 +1068,14 @@
 			// more shifts will be needed
 			vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] |= (u8)(tms_append_byte & 0xFF);
 			vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = (u8)(tms_append_byte >> 8);
-
+			
 			num_cycles -= 16 - vsllink_tms_data_len;
 			vsllink_tms_data_len = 0;
 			vsllink_tms_cmd_pos = NULL;
 		}
 	}
 	// from here vsllink_tms_data_len == 0 or num_cycles == 0
-
+	
 	if (vsllink_tms_data_len > 0)
 	{
 		// num_cycles == 0
@@ -903,17 +1108,17 @@
 			vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = (tms_len >> 8) & 0xff;
 			vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = (tms_len >> 16) & 0xff;
 			vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = (tms_len >> 24) & 0xff;
-
+			
 			vsllink_usb_in_want_length += 1;
 			pending_scan_results_buffer[pending_scan_results_length].buffer = NULL;
 			pending_scan_results_length++;
-
+			
 			if (tms_len > 0xFFFF)
 			{
 				vsllink_tap_execute();
 			}
 		}
-
+		
 		// post-process
 		vsllink_tms_data_len = num_cycles & 7;
 		if (vsllink_tms_data_len > 0)
@@ -934,20 +1139,62 @@
 		}
 	}
 }
+static void vsllink_stableclocks_dma(int num_cycles, int tms)
+{
+	int i, cur_cycles;
+	
+	if (tap_length & 7)
+	{
+		if ((8 - (tap_length & 7)) < num_cycles)
+		{
+			cur_cycles = 8 - (tap_length & 7);
+		}
+		else
+		{
+			cur_cycles = num_cycles;
+		}
+		for (i = 0; i < cur_cycles; i++)
+		{
+			vsllink_tap_append_step(tms, 0);
+		}
+		num_cycles -= cur_cycles;
+	}
+	
+	while (num_cycles > 0)
+	{
+		if (num_cycles > 8 * tap_buffer_size)
+		{
+			cur_cycles = 8 * tap_buffer_size;
+		}
+		else
+		{
+			cur_cycles = num_cycles;
+		}
+		
+		vsllink_tap_ensure_space(0, cur_cycles);
+		
+		for (i = 0; i < cur_cycles; i++)
+		{
+			vsllink_tap_append_step(tms, 0);
+		}
+		
+		num_cycles -= cur_cycles;
+	}
+}
 
 static void vsllink_runtest(int num_cycles)
 {
 	tap_state_t saved_end_state = tap_get_end_state();
-
+	
 	if (tap_get_state() != TAP_IDLE)
 	{
 		// enter into IDLE state
 		vsllink_end_state(TAP_IDLE);
 		vsllink_state_move();
 	}
-
+	
 	vsllink_stableclocks(num_cycles, 0);
-
+	
 	// post-process
 	// set end_state
 	vsllink_end_state(saved_end_state);
@@ -958,29 +1205,29 @@
 	}
 }
 
-static void vsllink_scan(int ir_scan, enum scan_type type, u8 *buffer, int scan_size, scan_command_t *command)
+static void vsllink_scan_normal(int ir_scan, enum scan_type type, u8 *buffer, int scan_size, scan_command_t *command)
 {
 	tap_state_t saved_end_state;
 	u8 bits_left, tms_tmp, tdi_len;
 	int i;
-
+	
 	if (0 == scan_size )
 	{
 		return;
 	}
-
+	
 	tdi_len = ((scan_size + 7) >> 3);
 	if ((tdi_len + 7) > VSLLINK_BufferSize)
 	{
 		LOG_ERROR("Your implementation of VSLLink has not enough buffer");
 		exit(-1);
 	}
-
+	
 	saved_end_state = tap_get_end_state();
-
+	
 	/* Move to appropriate scan state */
 	vsllink_end_state(ir_scan ? TAP_IRSHIFT : TAP_DRSHIFT);
-
+	
 	if (vsllink_tms_data_len > 0)
 	{
 		if (tap_get_state() == tap_get_end_state())
@@ -1002,16 +1249,16 @@
 				tms_tmp = vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx];
 				*vsllink_tms_cmd_pos -= 2;
 			}
-
+			
 			vsllink_tap_ensure_space(1, tdi_len + 7);
-			// VSLLINK_CMDJTAGSEQ_SCAN ored by 1 means that tms_before is valid
+			// VSLLINK_CMDJTAGSEQ_SCAN ored by 1 means that tms_before is valid 
 			// which is merged from the last tms shift command
 			vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = VSLLINK_CMDJTAGSEQ_SCAN | 1;
 			vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = ((tdi_len + 1) >> 0) & 0xff;
 			vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = ((tdi_len + 1)>> 8) & 0xff;
 			vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = tms_tmp;
 			vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = buffer[0] << (8 - vsllink_tms_data_len);
-
+			
 			for (i = 0; i < tdi_len; i++)
 			{
 				buffer[i] >>= 8 - vsllink_tms_data_len;
@@ -1020,40 +1267,40 @@
 					buffer[i] += buffer[i + 1] << vsllink_tms_data_len;
 				}
 			}
-
-			vsllink_tap_append_scan(scan_size - vsllink_tms_data_len, buffer, command, vsllink_tms_data_len);
+			
+			vsllink_tap_append_scan_normal(scan_size - vsllink_tms_data_len, buffer, command, vsllink_tms_data_len);
 			scan_size -= 8 - vsllink_tms_data_len;
 			vsllink_tms_data_len = 0;
 		}
 		else
 		{
-			vsllink_append_tms();
+			vsllink_state_move();
 			vsllink_tap_ensure_space(1, tdi_len + 5);
-
+			
 			vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = VSLLINK_CMDJTAGSEQ_SCAN;
 			vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = (tdi_len >> 0) & 0xff;
 			vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = (tdi_len >> 8) & 0xff;
-
-			vsllink_tap_append_scan(scan_size, buffer, command, 0);
+			
+			vsllink_tap_append_scan_normal(scan_size, buffer, command, 0);
 		}
 	}
 	else
 	{
 		vsllink_tap_ensure_space(1, tdi_len + 7);
-
+		
 		vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = VSLLINK_CMDJTAGSEQ_SCAN | 1;
 		vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = ((tdi_len + 1) >> 0) & 0xff;
 		vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = ((tdi_len + 1)>> 8) & 0xff;
 		vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = VSLLINK_TAP_MOVE(tap_get_state(), tap_get_end_state());
 		vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = 0;
-
-		vsllink_tap_append_scan(scan_size, buffer, command, 8);
+		
+		vsllink_tap_append_scan_normal(scan_size, buffer, command, 8);
 	}
 	vsllink_end_state(saved_end_state);
-
+	
 	bits_left = scan_size & 0x07;
 	tap_set_state(ir_scan ? TAP_IRPAUSE : TAP_DRPAUSE);
-
+	
 	if (bits_left > 0)
 	{
 		vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = 1 << (bits_left - 1);
@@ -1062,7 +1309,7 @@
 	{
 		vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = 1 << 7;
 	}
-
+	
 	if (tap_get_state() != tap_get_end_state())
 	{
 		vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = VSLLINK_TAP_MOVE(tap_get_state(), tap_get_end_state());
@@ -1071,16 +1318,44 @@
 	{
 		vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = 0;
 	}
-
+	
 	tap_set_state(tap_get_end_state());
 }
+static void vsllink_scan_dma(int ir_scan, enum scan_type type, u8 *buffer, int scan_size, scan_command_t *command)
+{
+	tap_state_t saved_end_state;
+	
+	saved_end_state = tap_get_end_state();
+	
+	/* Move to appropriate scan state */
+	vsllink_end_state(ir_scan ? TAP_IRSHIFT : TAP_DRSHIFT);
+	
+	vsllink_state_move();
+	vsllink_end_state(saved_end_state);
+	
+	/* Scan */
+	vsllink_tap_ensure_space(1, (scan_size + 7) & ~0x00000007);
+	vsllink_tap_append_scan_dma(scan_size, buffer, command);
+	
+	tap_set_state(ir_scan ? TAP_IRPAUSE : TAP_DRPAUSE);
+	while (tap_length % 8 != 0)
+	{
+		// more 0s in Pause
+		vsllink_tap_append_step(0, 0);
+	}
+	
+	if (tap_get_state() != tap_get_end_state())
+	{
+		vsllink_state_move();
+	}
+}
 
 static void vsllink_reset(int trst, int srst)
 {
 	int result;
-
+	
 	LOG_DEBUG("trst: %i, srst: %i", trst, srst);
-
+	
 	/* Signals are active low */
 	vsllink_usb_out_buffer[0] = VSLLINK_CMD_SET_PORT;
 	vsllink_usb_out_buffer[1] = JTAG_PINMSK_SRST | JTAG_PINMSK_TRST;
@@ -1093,7 +1368,7 @@
 	{
 		vsllink_usb_out_buffer[2] |= JTAG_PINMSK_TRST;
 	}
-
+	
 	result = vsllink_usb_write(vsllink_jtag_handle, 3);
 	if (result != 3)
 	{
@@ -1104,92 +1379,202 @@
 static void vsllink_simple_command(u8 command)
 {
 	int result;
-
+	
 	DEBUG_JTAG_IO("0x%02x", command);
-
+	
 	vsllink_usb_out_buffer[0] = command;
 	result = vsllink_usb_write(vsllink_jtag_handle, 1);
-
+	
 	if (result != 1)
 	{
 		LOG_ERROR("VSLLink command 0x%02x failed (%d)", command, result);
 	}
 }
 
-static int vsllink_handle_usb_vid_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int vsllink_register_commands(struct command_context_s *cmd_ctx)
 {
+	register_command(cmd_ctx, NULL, "vsllink_usb_vid", vsllink_handle_usb_vid_command, 
+					COMMAND_CONFIG, NULL);
+	register_command(cmd_ctx, NULL, "vsllink_usb_pid", vsllink_handle_usb_pid_command, 
+					COMMAND_CONFIG, NULL);
+	register_command(cmd_ctx, NULL, "vsllink_usb_bulkin", vsllink_handle_usb_bulkin_command, 
+					COMMAND_CONFIG, NULL);
+	register_command(cmd_ctx, NULL, "vsllink_usb_bulkout", vsllink_handle_usb_bulkout_command, 
+					COMMAND_CONFIG, NULL);
+	register_command(cmd_ctx, NULL, "vsllink_usb_interface", vsllink_handle_usb_interface_command, 
+					COMMAND_CONFIG, NULL);
+	register_command(cmd_ctx, NULL, "vsllink_mode", vsllink_handle_mode_command, 
+					COMMAND_CONFIG, NULL);
+					
+	return ERROR_OK;
+}
+
+static int vsllink_handle_mode_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+{
 	if (argc != 1) {
 		LOG_ERROR("parameter error, should be one parameter for VID");
+		return ERROR_FAIL;
+	}
+	
+	if (!strcmp(args[0], "normal"))
+	{
+		vsllink_mode = VSLLINK_MODE_NORMAL;
+	}
+	else if (!strcmp(args[0], "dma"))
+	{
+		vsllink_mode = VSLLINK_MODE_DMA;
+	}
+	else
+	{
+		LOG_ERROR("invalid vsllink_mode: %s", args[0]);
+		return ERROR_FAIL;
+	}
+	
+	return ERROR_OK;
+}
+
+static int vsllink_handle_usb_vid_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+{
+	if (argc != 1)
+	{
+		LOG_ERROR("parameter error, should be one parameter for VID");
 		return ERROR_OK;
 	}
-
-	vsllink_vid = strtol(args[0], NULL, 0);
-
+	
+	vsllink_usb_vid = strtol(args[0], NULL, 0);
+	
 	return ERROR_OK;
 }
 
 static int vsllink_handle_usb_pid_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
-	if (argc != 1) {
+	if (argc != 1)
+	{
 		LOG_ERROR("parameter error, should be one parameter for PID");
 		return ERROR_OK;
 	}
-
-	vsllink_pid = strtol(args[0], NULL, 0);
-
+	
+	vsllink_usb_pid = strtol(args[0], NULL, 0);
+	
 	return ERROR_OK;
 }
 
 static int vsllink_handle_usb_bulkin_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
-	if (argc != 1) {
+	if (argc != 1)
+	{
 		LOG_ERROR("parameter error, should be one parameter for BULKIN endpoint");
 		return ERROR_OK;
 	}
-
-	vsllink_bulkin = strtol(args[0], NULL, 0) | 0x80;
-
+	
+	vsllink_usb_bulkin = strtol(args[0], NULL, 0) | 0x80;
+	
 	return ERROR_OK;
 }
 
 static int vsllink_handle_usb_bulkout_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
-	if (argc != 1) {
+	if (argc != 1)
+	{
 		LOG_ERROR("parameter error, should be one parameter for BULKOUT endpoint");
 		return ERROR_OK;
 	}
+	
+	vsllink_usb_bulkout = strtol(args[0], NULL, 0);
+	
+	return ERROR_OK;
+}
 
-	vsllink_bulkout = strtol(args[0], NULL, 0);
-
+static int vsllink_handle_usb_interface_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+{
+	if (argc != 1)
+	{
+		LOG_ERROR("parameter error, should be one parameter for interface number");
+		return ERROR_OK;
+	}
+	
+	vsllink_usb_interface = strtol(args[0], NULL, 0);
+	
 	return ERROR_OK;
 }
 
 /***************************************************************************/
 /* VSLLink tap functions */
 
-static void vsllink_tap_init(void)
+static void vsllink_tap_init_normal(void)
 {
 	vsllink_usb_out_buffer_idx = 0;
 	vsllink_usb_in_want_length = 0;
 	pending_scan_results_length = 0;
 }
+static void vsllink_tap_init_dma(void)
+{
+	tap_length = 0;
+	pending_scan_results_length = 0;
+}
 
-static void vsllink_tap_ensure_space(int scans, int bytes)
+static void vsllink_tap_ensure_space_normal(int scans, int length)
 {
 	int available_scans = MAX_PENDING_SCAN_RESULTS - pending_scan_results_length;
 	int available_bytes = VSLLINK_BufferSize - vsllink_usb_out_buffer_idx;
-
-	if (scans > available_scans || bytes > available_bytes)
+	
+	if (scans > available_scans || length > available_bytes)
 	{
 		vsllink_tap_execute();
 	}
 }
+static void vsllink_tap_ensure_space_dma(int scans, int length)
+{
+	int available_scans = MAX_PENDING_SCAN_RESULTS - pending_scan_results_length;
+	int available_bytes = tap_buffer_size * 8 - tap_length;
+	
+	if (scans > available_scans || length > available_bytes)
+	{
+		vsllink_tap_execute();
+	}
+}
 
-static void vsllink_tap_append_scan(int length, u8 *buffer, scan_command_t *command, int offset)
+static void vsllink_tap_append_step(int tms, int tdi)
 {
+	last_tms = tms;
+	int index = tap_length / 8;
+	
+	if (index < tap_buffer_size)
+	{
+		int bit_index = tap_length % 8;
+		u8 bit = 1 << bit_index;
+		
+		if (tms)
+		{
+			tms_buffer[index] |= bit;
+		}
+		else
+		{
+			tms_buffer[index] &= ~bit;
+		}
+		
+		if (tdi)
+		{
+			tdi_buffer[index] |= bit;
+		}
+		else
+		{
+			tdi_buffer[index] &= ~bit;
+		}
+		
+		tap_length++;
+	}
+	else
+	{
+		LOG_ERROR("buffer overflow, tap_length=%d", tap_length);
+	}
+}
+
+static void vsllink_tap_append_scan_normal(int length, u8 *buffer, scan_command_t *command, int offset)
+{
 	pending_scan_result_t *pending_scan_result = &pending_scan_results_buffer[pending_scan_results_length];
 	int i;
-
+	
 	if (offset > 0)
 	{
 		vsllink_usb_in_want_length += ((length + 7) >> 3) + 1;
@@ -1202,30 +1587,47 @@
 	pending_scan_result->offset = offset;
 	pending_scan_result->command = command;
 	pending_scan_result->buffer = buffer;
-
+	
 	for (i = 0; i < ((length + 7) >> 3); i++)
 	{
 		vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = buffer[i];
 	}
-
+	
 	pending_scan_results_length++;
 }
+static void vsllink_tap_append_scan_dma(int length, u8 *buffer, scan_command_t *command)
+{
+	pending_scan_result_t *pending_scan_result = &pending_scan_results_buffer[pending_scan_results_length];
+	int i;
+	
+	pending_scan_result->offset = tap_length;
+	pending_scan_result->length = length;
+	pending_scan_result->command = command;
+	pending_scan_result->buffer = buffer;
+	
+	for (i = 0; i < length; i++)
+	{
+		vsllink_tap_append_step((i < length-1 ? 0 : 1), (buffer[i/8] >> (i%8)) & 1);
+	}
+	
+	pending_scan_results_length++;
+}
 
 /* Pad and send a tap sequence to the device, and receive the answer.
  * For the purpose of padding we assume that we are in reset or idle or pause state. */
-static int vsllink_tap_execute(void)
+static int vsllink_tap_execute_normal(void)
 {
 	int i;
 	int result;
 	int first = 0;
-
+	
 	if (vsllink_tms_data_len > 0)
 	{
 		if((tap_get_state() != TAP_RESET) && (tap_get_state() != TAP_IDLE) && (tap_get_state() != TAP_IRPAUSE) && (tap_get_state() != TAP_DRPAUSE))
 		{
 			LOG_WARNING("%s is not in RESET or IDLE or PAUSR state", tap_state_name(tap_get_state()));
 		}
-
+		
 		if (vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx] & (1 << (vsllink_tms_data_len - 1)))
 		{
 			// last tms bit is '1'
@@ -1241,7 +1643,7 @@
 			vsllink_tms_data_len = 0;
 		}
 	}
-
+	
 	if (vsllink_usb_out_buffer_idx > 3)
 	{
 		if (vsllink_usb_out_buffer[0] == VSLLINK_CMD_HW_JTAGSEQCMD)
@@ -1249,9 +1651,9 @@
 			vsllink_usb_out_buffer[1] = (vsllink_usb_out_buffer_idx >> 0) & 0xff;
 			vsllink_usb_out_buffer[2] = (vsllink_usb_out_buffer_idx >> 8) & 0xff;
 		}
-
+		
 		result = vsllink_usb_message(vsllink_jtag_handle, vsllink_usb_out_buffer_idx, vsllink_usb_in_want_length);
-
+		
 		if (result == vsllink_usb_in_want_length)
 		{
 			for (i = 0; i < pending_scan_results_length; i++)
@@ -1261,24 +1663,24 @@
 				int length = pending_scan_result->length;
 				int offset = pending_scan_result->offset;
 				scan_command_t *command = pending_scan_result->command;
-
+				
 				if (buffer != NULL)
 				{
 					// IRSHIFT or DRSHIFT
 					buf_set_buf(vsllink_usb_in_buffer, first * 8 + offset, buffer, 0, length);
 					first += (length + offset + 7) >> 3;
-
+					
 					DEBUG_JTAG_IO("JTAG scan read(%d bits):", length);
 #ifdef _DEBUG_JTAG_IO_
 					vsllink_debug_buffer(buffer, (length + 7) >> 3);
 #endif
-
+					
 					if (jtag_read_buffer(buffer, command) != ERROR_OK)
 					{
 						vsllink_tap_init();
 						return ERROR_JTAG_QUEUE_FAILED;
 					}
-
+					
 					free(pending_scan_result->buffer);
 					pending_scan_result->buffer = NULL;
 				}
@@ -1293,68 +1695,162 @@
 			LOG_ERROR("vsllink_tap_execute, wrong result %d, expected %d", result, vsllink_usb_in_want_length);
 			return ERROR_JTAG_QUEUE_FAILED;
 		}
-
+		
 		vsllink_tap_init();
 	}
-
-	vsllink_usb_out_buffer[0] = VSLLINK_CMD_HW_JTAGSEQCMD;
-	vsllink_usb_out_buffer_idx = 3;
-
+	reset_command_pointer();
+	
 	return ERROR_OK;
 }
+static int vsllink_tap_execute_dma(void)
+{
+	int byte_length;
+	int i;
+	int result;
+	
+	if (tap_length > 0)
+	{
+		/* Pad last byte so that tap_length is divisible by 8 */
+		while (tap_length % 8 != 0)
+		{
+			/* More of the last TMS value keeps us in the same state,
+			 * analogous to free-running JTAG interfaces. */
+			vsllink_tap_append_step(last_tms, 0);
+		}
+		byte_length = tap_length / 8;
+		
+		vsllink_usb_out_buffer[0] = VSLLINK_CMD_HW_JTAGRAWCMD;
+		vsllink_usb_out_buffer[1] = ((byte_length * 2 + 3) >> 0) & 0xff;		// package size
+		vsllink_usb_out_buffer[2] = ((byte_length * 2 + 3) >> 8) & 0xff;
+		
+		memcpy(&vsllink_usb_out_buffer[3], tdi_buffer, byte_length);
+		memcpy(&vsllink_usb_out_buffer[3 + byte_length], tms_buffer, byte_length);
+		
+		result = vsllink_usb_message(vsllink_jtag_handle, 3 + 2 * byte_length, byte_length);
+		if (result == byte_length)
+		{
+			for (i = 0; i < pending_scan_results_length; i++)
+			{
+				pending_scan_result_t *pending_scan_result = &pending_scan_results_buffer[i];
+				u8 *buffer = pending_scan_result->buffer;
+				int length = pending_scan_result->length;
+				int first = pending_scan_result->offset;
+				
+				scan_command_t *command = pending_scan_result->command;
+				buf_set_buf(vsllink_usb_in_buffer, first, buffer, 0, length);
+				
+				DEBUG_JTAG_IO("JTAG scan read(%d bits, from %d bits):", length, first);
+#ifdef _DEBUG_JTAG_IO_
+				vsllink_debug_buffer(buffer, (length + 7) >> 3);
+#endif
+				
+				if (jtag_read_buffer(buffer, command) != ERROR_OK)
+				{
+					vsllink_tap_init();
+					return ERROR_JTAG_QUEUE_FAILED;
+				}
+				
+				if (pending_scan_result->buffer != NULL)
+				{
+					free(pending_scan_result->buffer);
+				}
+			}
+		}
+		else
+		{
+			LOG_ERROR("vsllink_tap_execute, wrong result %d, expected %d", result, byte_length);
+			return ERROR_JTAG_QUEUE_FAILED;
+		}
+		
+		vsllink_tap_init();
+	}
+	
+	return ERROR_OK;
+}
 
 /*****************************************************************************/
 /* VSLLink USB low-level functions */
 
-vsllink_jtag_t* vsllink_usb_open(void)
+static vsllink_jtag_t* vsllink_usb_open(void)
 {
 	struct usb_bus *busses;
 	struct usb_bus *bus;
 	struct usb_device *dev;
-
+	int ret;
+	
 	vsllink_jtag_t *result;
-
+	
 	result = (vsllink_jtag_t*) malloc(sizeof(vsllink_jtag_t));
-
+	
 	usb_init();
 	usb_find_busses();
 	usb_find_devices();
-
+	
 	busses = usb_get_busses();
-
+	
 	/* find vsllink_jtag device in usb bus */
-
+	
 	for (bus = busses; bus; bus = bus->next)
 	{
 		for (dev = bus->devices; dev; dev = dev->next)
 		{
-			if ((dev->descriptor.idVendor == vsllink_vid) && (dev->descriptor.idProduct == vsllink_pid))
+			if ((dev->descriptor.idVendor == vsllink_usb_vid) && (dev->descriptor.idProduct == vsllink_usb_pid))
 			{
 				result->usb_handle = usb_open(dev);
-
+				if (NULL == result->usb_handle)
+				{
+					LOG_ERROR("failed to open %04X:%04X, not enough permissions?", vsllink_usb_vid, vsllink_usb_pid);
+					exit(-1);
+				}
+				
 				/* usb_set_configuration required under win32 */
-				usb_set_configuration(result->usb_handle, dev->config[0].bConfigurationValue);
-				usb_claim_interface(result->usb_handle, 0);
-
+				ret = usb_set_configuration(result->usb_handle, dev->config[0].bConfigurationValue);
+				if (ret != 0)
+				{
+					LOG_ERROR("fail to set configuration to %d, %d returned, not enough permissions?", dev->config[0].bConfigurationValue, ret);
+					exit(-1);
+				}
+				ret = usb_claim_interface(result->usb_handle, vsllink_usb_interface);
+				if (ret != 0)
+				{
+					LOG_ERROR("fail to claim interface %d, %d returned", vsllink_usb_interface, ret);
+					exit(-1);
+				}
+				
 #if 0
-				/*
+				/* 
 				 * This makes problems under Mac OS X. And is not needed
 				 * under Windows. Hopefully this will not break a linux build
 				 */
 				usb_set_altinterface(result->usb_handle, 0);
-#endif
+#endif				
 				return result;
 			}
 		}
 	}
-
+	
 	free(result);
 	return NULL;
 }
 
 static void vsllink_usb_close(vsllink_jtag_t *vsllink_jtag)
 {
-	usb_close(vsllink_jtag->usb_handle);
+	int ret;
+
+	ret = usb_release_interface(vsllink_jtag->usb_handle, vsllink_usb_interface);
+	if (ret != 0)
+	{
+		LOG_ERROR("fail to release interface %d, %d returned", vsllink_usb_interface, ret);
+		exit(-1);
+	}
+
+	ret = usb_close(vsllink_jtag->usb_handle);
+	if (ret != 0)
+	{
+		LOG_ERROR("fail to close usb, %d returned", ret);
+		exit(-1);
+	}
+
 	free(vsllink_jtag);
 }
 
@@ -1362,7 +1858,7 @@
 static int vsllink_usb_message(vsllink_jtag_t *vsllink_jtag, int out_length, int in_length)
 {
 	int result;
-
+	
 	result = vsllink_usb_write(vsllink_jtag, out_length);
 	if (result == out_length)
 	{
@@ -1392,18 +1888,18 @@
 static int vsllink_usb_write(vsllink_jtag_t *vsllink_jtag, int out_length)
 {
 	int result;
-
+	
 	if (out_length > VSLLINK_BufferSize)
 	{
 		LOG_ERROR("vsllink_jtag_write illegal out_length=%d (max=%d)", out_length, VSLLINK_BufferSize);
 		return -1;
 	}
-
-	result = usb_bulk_write(vsllink_jtag->usb_handle, vsllink_bulkout, \
+	
+	result = usb_bulk_write(vsllink_jtag->usb_handle, vsllink_usb_bulkout, \
 		(char *)vsllink_usb_out_buffer, out_length, VSLLINK_USB_TIMEOUT);
-
+	
 	DEBUG_JTAG_IO("vsllink_usb_write, out_length = %d, result = %d", out_length, result);
-
+	
 #ifdef _DEBUG_USB_COMMS_
 	LOG_DEBUG("USB out:");
 	vsllink_debug_buffer(vsllink_usb_out_buffer, out_length);
@@ -1419,11 +1915,11 @@
 /* Read data from USB into in_buffer. */
 static int vsllink_usb_read(vsllink_jtag_t *vsllink_jtag)
 {
-	int result = usb_bulk_read(vsllink_jtag->usb_handle, vsllink_bulkin, \
+	int result = usb_bulk_read(vsllink_jtag->usb_handle, vsllink_usb_bulkin, \
 		(char *)vsllink_usb_in_buffer, VSLLINK_BufferSize, VSLLINK_USB_TIMEOUT);
-
+		
 	DEBUG_JTAG_IO("vsllink_usb_read, result = %d", result);
-
+	
 #ifdef _DEBUG_USB_COMMS_
 	LOG_DEBUG("USB in:");
 	vsllink_debug_buffer(vsllink_usb_in_buffer, result);
@@ -1440,7 +1936,7 @@
 	char s[4];
 	int i;
 	int j;
-
+	
 	for (i = 0; i < length; i += BYTES_PER_LINE)
 	{
 		snprintf(line, 5, "%04x", i);

Added: trunk/src/target/interface/vsllink.cfg
===================================================================
--- trunk/src/target/interface/vsllink.cfg	2009-04-21 09:05:02 UTC (rev 1490)
+++ trunk/src/target/interface/vsllink.cfg	2009-04-21 09:08:43 UTC (rev 1491)
@@ -0,0 +1,25 @@
+#
+# Versaloon Link -- VSLLink
+#
+# http://www.simonqian.com/en/Versaloon
+#
+
+interface vsllink
+
+#vsllink_usb_vid		0x03EB
+#vsllink_usb_pid		0x2103
+#vsllink_usb_bulkin	0x02
+#vsllink_usb_bulkout	0x02
+#vsllink_usb_interface	0
+
+vsllink_usb_vid		0x0483
+vsllink_usb_pid		0x5740
+vsllink_usb_bulkin	0x02
+vsllink_usb_bulkout	0x03
+vsllink_usb_interface	1
+
+# vsllink mode, dma or normal
+# for low jtag_khz, use normal
+# for high jtag_khz, use dma
+#vsllink_mode dma
+vsllink_mode normal


Property changes on: trunk/src/target/interface/vsllink.cfg
___________________________________________________________________
Name: svn:eol-style
   + native



From oharboe at mail.berlios.de  Tue Apr 21 11:41:41 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Tue, 21 Apr 2009 11:41:41 +0200
Subject: [Openocd-svn] r1492 - trunk/src/jtag
Message-ID: <200904210941.n3L9ffqk029879@sheep.berlios.de>

Author: oharboe
Date: 2009-04-21 11:41:41 +0200 (Tue, 21 Apr 2009)
New Revision: 1492

Modified:
   trunk/src/jtag/jlink.c
Log:
Zach Welch <zw at superlucidity.net>  factor jlink usb_bulk_*_ex functions

Modified: trunk/src/jtag/jlink.c
===================================================================
--- trunk/src/jtag/jlink.c	2009-04-21 09:08:43 UTC (rev 1491)
+++ trunk/src/jtag/jlink.c	2009-04-21 09:41:41 UTC (rev 1492)
@@ -859,15 +859,17 @@
 	}
 }
 
-static int usb_bulk_write_ex(usb_dev_handle *dev, int ep, char *bytes, int size,
-                      int timeout) {
-
+/* calls the given usb_bulk_* function, allowing for the data to trickle in with some timeouts  */
+static int usb_bulk_with_retries(
+		int (*f)(usb_dev_handle *, int, char *, int, int),
+		usb_dev_handle *dev, int ep,
+		char *bytes, int size, int timeout)
+{
 	int rc = 0, tries = 3, this_size;
 
 	while (tries && size) {
 
-		this_size = usb_bulk_write (dev, ep, bytes, size, timeout);
-
+		this_size = f(dev, ep, bytes, size, timeout);
 		if (this_size > 0) {
 			
 			size -= this_size;
@@ -877,36 +879,21 @@
 		} else
 			tries --;
 	}
-
 	return rc;
-
-
 }
-
-static int usb_bulk_read_ex(usb_dev_handle *dev, int ep, char *bytes, int size,
-                  int timeout) {
-
-	int rc = 0, tries = 3, this_size;
-
-	while (tries && size) {
-
-		this_size = usb_bulk_read (dev, ep, bytes, size, timeout);
-
-		if (this_size > 0) {
-			
-			size -= this_size;
-			rc += this_size;
-			bytes += this_size;
-
-		} else
-			tries --;
-	}
-
-	return rc;
-
+static inline int usb_bulk_write_ex(usb_dev_handle *dev, int ep,
+		char *bytes, int size, int timeout)
+{
+	return usb_bulk_with_retries(&usb_bulk_write,
+			dev, ep, bytes, size, timeout);
 }
+static inline int usb_bulk_read_ex(usb_dev_handle *dev, int ep,
+		char *bytes, int size, int timeout)
+{
+	return usb_bulk_with_retries(&usb_bulk_read,
+			dev, ep, bytes, size, timeout);
+}
 
-
 /* Write data from out_buffer to USB. */
 static int jlink_usb_write(jlink_jtag_t *jlink_jtag, int out_length)
 {



From oharboe at mail.berlios.de  Tue Apr 21 13:33:31 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Tue, 21 Apr 2009 13:33:31 +0200
Subject: [Openocd-svn] r1493 - trunk/src/jtag
Message-ID: <200904211133.n3LBXVJj023292@sheep.berlios.de>

Author: oharboe
Date: 2009-04-21 13:33:29 +0200 (Tue, 21 Apr 2009)
New Revision: 1493

Modified:
   trunk/src/jtag/jlink.c
Log:
Zach Welch <zw at superlucidity.net>  fix jlink format warning

Modified: trunk/src/jtag/jlink.c
===================================================================
--- trunk/src/jtag/jlink.c	2009-04-21 09:41:41 UTC (rev 1492)
+++ trunk/src/jtag/jlink.c	2009-04-21 11:33:29 UTC (rev 1493)
@@ -963,7 +963,7 @@
 			snprintf(s, 4, " %02x", buffer[j]);
 			strcat(line, s);
 		}
-		LOG_DEBUG(line);
+		LOG_DEBUG("%s", line);
 	}
 }
 #endif



From oharboe at mail.berlios.de  Tue Apr 21 13:35:59 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Tue, 21 Apr 2009 13:35:59 +0200
Subject: [Openocd-svn] r1494 - trunk/src/target
Message-ID: <200904211135.n3LBZxIR026068@sheep.berlios.de>

Author: oharboe
Date: 2009-04-21 13:35:58 +0200 (Tue, 21 Apr 2009)
New Revision: 1494

Modified:
   trunk/src/target/mips32.h
   trunk/src/target/mips32_pracc.c
   trunk/src/target/mips32_pracc.h
Log:
Nico Coesel <ncoesel at dealogic.nl> MIPS32 speedup patches

Modified: trunk/src/target/mips32.h
===================================================================
--- trunk/src/target/mips32.h	2009-04-21 11:33:29 UTC (rev 1493)
+++ trunk/src/target/mips32.h	2009-04-21 11:35:58 UTC (rev 1494)
@@ -74,6 +74,7 @@
 } mips32_core_reg_t;
 
 #define MIPS32_OP_BEQ	0x04
+#define MIPS32_OP_BNE	0x05
 #define MIPS32_OP_ADDI	0x08
 #define MIPS32_OP_AND	0x24
 #define MIPS32_OP_COP0	0x10
@@ -102,6 +103,7 @@
 #define MIPS32_AND(reg, off, val)	MIPS32_R_INST(0, off, val, reg, 0, MIPS32_OP_AND)
 #define MIPS32_B(off)				MIPS32_BEQ(0, 0, off)
 #define MIPS32_BEQ(src,tar,off)		MIPS32_I_INST(MIPS32_OP_BEQ, src, tar, off)
+#define MIPS32_BNE(src,tar,off)		MIPS32_I_INST(MIPS32_OP_BNE, src, tar, off)
 #define MIPS32_MFC0(gpr, cpr, sel)	MIPS32_R_INST(MIPS32_OP_COP0, MIPS32_COP0_MF, gpr, cpr, 0, sel)
 #define MIPS32_MTC0(gpr,cpr, sel)	MIPS32_R_INST(MIPS32_OP_COP0, MIPS32_COP0_MT, gpr, cpr, 0, sel)
 #define MIPS32_LBU(reg, off, base)	MIPS32_I_INST(MIPS32_OP_LBU, base, reg, off)

Modified: trunk/src/target/mips32_pracc.c
===================================================================
--- trunk/src/target/mips32_pracc.c	2009-04-21 11:33:29 UTC (rev 1493)
+++ trunk/src/target/mips32_pracc.c	2009-04-21 11:35:58 UTC (rev 1494)
@@ -19,6 +19,57 @@
  *   Free Software Foundation, Inc.,                                       *
  *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
  ***************************************************************************/
+
+/*
+This version has optimized assembly routines for 32 bit operations:
+- read word
+- write word
+- write array of words
+
+One thing to be aware of is that the MIPS32 cpu will execute the 
+instruction after a branch instruction (one delay slot).
+
+For example:
+
+
+    LW $2, ($5 +10)
+    B foo
+    LW $1, ($2 +100)
+
+The LW $1, ($2 +100) instruction is also executed. If this is 
+not wanted a NOP can be inserted:
+
+    LW $2, ($5 +10)
+    B foo
+    NOP
+    LW $1, ($2 +100)
+
+or the code can be changed to:
+
+    B foo
+    LW $2, ($5 +10)
+    LW $1, ($2 +100)
+
+The original code contained NOPs. I have removed these and moved
+the branches.
+
+I also moved the PRACC_STACK to 0xFF204000. This allows
+the use of 16 bits offsets to get pointers to the input
+and output area relative to the stack. Note that the stack
+isn't really a stack (the stack pointer is not 'moving')
+but a FIFO simulated in software.
+
+These changes result in a 35% speed increase when programming an
+external flash.
+
+More improvement could be gained if the registers do no need
+to be preserved but in that case the routines should be aware
+OpenOCD is used as a flash programmer or as a debug tool.
+
+Nico Coesel
+*/
+
+
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
@@ -94,7 +145,7 @@
 		 * to start of debug vector */
 		
 		data = 0;
-		LOG_ERROR("Error reading unexpected address");
+		LOG_ERROR("Error reading unexpected address %8.8x", address);
 		return ERROR_JTAG_DEVICE_ERROR;
 	}
 	
@@ -103,10 +154,15 @@
 	mips_ejtag_drscan_32(ctx->ejtag_info, &data);
 
 	/* Clear the access pending bit (let the processor eat!) */
+
 	ejtag_ctrl = ejtag_info->ejtag_ctrl & ~EJTAG_CTRL_PRACC;
 	mips_ejtag_set_instr(ctx->ejtag_info, EJTAG_INST_CONTROL, NULL);
 	mips_ejtag_drscan_32(ctx->ejtag_info, &ejtag_ctrl);
+
+	jtag_add_clocks(5);
+	jtag_execute_queue();
 	
+
 	return ERROR_OK;
 }
 
@@ -115,7 +171,7 @@
 	u32 ejtag_ctrl,data;
 	int offset;
 	mips_ejtag_t *ejtag_info = ctx->ejtag_info;
-	
+
 	mips_ejtag_set_instr(ctx->ejtag_info, EJTAG_INST_DATA, NULL);
 	mips_ejtag_drscan_32(ctx->ejtag_info, &data);
 	
@@ -123,6 +179,9 @@
 	ejtag_ctrl = ejtag_info->ejtag_ctrl & ~EJTAG_CTRL_PRACC;
 	mips_ejtag_set_instr(ctx->ejtag_info, EJTAG_INST_CONTROL, NULL);
 	mips_ejtag_drscan_32(ctx->ejtag_info, &ejtag_ctrl);
+
+	jtag_add_clocks(5);
+	jtag_execute_queue();
 	
 	if ((address >= MIPS32_PRACC_PARAM_IN)
 		&& (address <= MIPS32_PRACC_PARAM_IN + ctx->num_iparam * 4))
@@ -143,7 +202,7 @@
 	}
 	else
 	{
-		LOG_ERROR("Error writing unexpected address");
+		LOG_ERROR("Error writing unexpected address %8.8x", address);
 		return ERROR_JTAG_DEVICE_ERROR;
 	}
 	
@@ -175,6 +234,8 @@
 		address = data = 0;
 		mips_ejtag_set_instr(ejtag_info, EJTAG_INST_ADDRESS, NULL);
 		mips_ejtag_drscan_32(ejtag_info, &address);
+
+//		printf("Adres: %.8x\n", address);
 		
 		/* Check for read or write */
 		if (ejtag_ctrl & EJTAG_CTRL_PRNW)
@@ -194,6 +255,7 @@
 			
 			if ((retval = mips32_pracc_exec_read(&ctx, address)) != ERROR_OK)
 				return retval;
+
 		}
 		
 		if (cycle == 0)
@@ -309,23 +371,16 @@
 		MIPS32_LUI(15,UPPER16(MIPS32_PRACC_STACK)), 		/* $15 = MIPS32_PRACC_STACK */
 		MIPS32_ORI(15,15,LOWER16(MIPS32_PRACC_STACK)),
 		MIPS32_SW(8,0,15), 									/* sw $8,($15) */
-		MIPS32_SW(9,0,15), 									/* sw $9,($15) */
 
-		MIPS32_LUI(8,UPPER16(MIPS32_PRACC_PARAM_IN)),		/* $8 = MIPS32_PRACC_PARAM_IN */
-		MIPS32_ORI(8,8,LOWER16(MIPS32_PRACC_PARAM_IN)),
-		MIPS32_LW(8,0,8),									/* $8=mem[$8]; read addr */
-		MIPS32_LUI(9,UPPER16(MIPS32_PRACC_PARAM_OUT)), 		/* $9=MIPS32_PRACC_PARAM_OUT */
-		MIPS32_ORI(9,9,LOWER16(MIPS32_PRACC_PARAM_OUT)),
+		MIPS32_LW(8,NEG16(MIPS32_PRACC_STACK-MIPS32_PRACC_PARAM_IN), 15),  //load R8 @ param_in[0] = address
 
 		MIPS32_LW(8,0,8), 									/* lw $8,0($8), Load $8 with the word @mem[$8] */
-		MIPS32_SW(8,0,9), 									/* sw $8,0($9) */
+		MIPS32_SW(8,NEG16(MIPS32_PRACC_STACK-MIPS32_PRACC_PARAM_OUT),15), 									/* sw $8,0($9) */
 
-		MIPS32_LW(9,0,15), 									/* lw $9,($15) */
 		MIPS32_LW(8,0,15), 									/* lw $8,($15) */
-		MIPS32_MFC0(15,31,0),								/* move COP0 DeSave to $15 */
+		MIPS32_B(NEG16(9)),	//was 17							/* b start */
+		MIPS32_MFC0(15,31,0),   //this instruction will be executed (MIPS executes instruction after jump)							/* move COP0 DeSave to $15 */
 		MIPS32_NOP,
-		MIPS32_B(NEG16(17)),								/* b start */
-		MIPS32_NOP,
 	};
 
 	int retval = ERROR_OK;
@@ -520,6 +575,8 @@
 
 int mips32_pracc_write_mem32(mips_ejtag_t *ejtag_info, u32 addr, int count, u32 *buf)
 {
+
+//NC: use destination pointer as loop counter (last address is in $10)
 	u32 code[] = {
 															/* start: */
 		MIPS32_MTC0(15,31,0),								/* move $15 to COP0 DeSave */
@@ -530,41 +587,33 @@
 		MIPS32_SW(10,0,15), 								/* sw $10,($15) */
 		MIPS32_SW(11,0,15), 								/* sw $11,($15) */
 		
-		MIPS32_LUI(8,UPPER16(MIPS32_PRACC_PARAM_IN)), 		/* $8 = MIPS32_PRACC_PARAM_IN */
-		MIPS32_ORI(8,8,LOWER16(MIPS32_PRACC_PARAM_IN)),
+		MIPS32_ADDI(8,15,NEG16(MIPS32_PRACC_STACK-MIPS32_PRACC_PARAM_IN)),  //$8= MIPS32_PRACC_PARAM_IN
 		MIPS32_LW(9,0,8), 									/* Load write addr to $9 */
-		MIPS32_LW(10,4,8), 									/* Load write count to $10 */
-		MIPS32_ADDI(8,8,8), 								/* $8+=8 */
-		MIPS32_NOP,
-															/* loop: */
-		MIPS32_BEQ(0,10,9),									/* beq $0, $10, end */
-		MIPS32_NOP,
-		
+		MIPS32_LW(10,4,8),	//last address 									/* Load write count to $10 */
+		MIPS32_ADDI(8,8,8), 	// $8+=8 beginning of data
+
+//loop:
 		MIPS32_LW(11,0,8), 									/* lw $11,0($8), Load $11 with the word @mem[$8] */
 		MIPS32_SW(11,0,9), 									/* sw $11,0($9) */
 		
-		MIPS32_ADDI(10,10,NEG16(1)), 						/* $10-- */
 		MIPS32_ADDI(9,9,4), 								/* $9+=4 */
-		MIPS32_ADDI(8,8,4), 								/* $8+=4 */
-		MIPS32_NOP,
-		MIPS32_B(NEG16(9)),									/* b loop */
-		MIPS32_NOP,
+		MIPS32_BNE(10,9,NEG16(4)),  //was 9 BNE $10, 9, loop									/* b loop */
+		MIPS32_ADDI(8,8,4),  //this instruction is part of the loop (one delay slot)!	/* $8+=4 */
 															/* end: */
 		MIPS32_LW(11,0,15), 								/* lw $11,($15) */
 		MIPS32_LW(10,0,15), 								/* lw $10,($15) */
 		MIPS32_LW(9,0,15), 									/* lw $9,($15) */
 		MIPS32_LW(8,0,15), 									/* lw $8,($15) */
+		MIPS32_B(NEG16(21)),	 //was 30							/* b start */
 		MIPS32_MFC0(15,31,0),								/* move COP0 DeSave to $15 */
-		MIPS32_NOP,
-		MIPS32_B(NEG16(30)),								/* b start */
-		MIPS32_NOP,
+		MIPS32_NOP, //this one will not be executed
 	};
 	
 	/* TODO remove array */
 	u32 param_in[count+2];
 	param_in[0] = addr;
-	param_in[1] = count;
-	
+	param_in[1] = addr + count * sizeof(u32);	//last address
+    
 	memcpy(&param_in[2], buf, count * sizeof(u32));
 	
 	mips32_pracc_exec(ejtag_info, sizeof(code)/sizeof(code[0]), code, \
@@ -582,20 +631,17 @@
 		MIPS32_ORI(15,15,LOWER16(MIPS32_PRACC_STACK)),
 		MIPS32_SW(8,0,15), 									/* sw $8,($15) */
 		MIPS32_SW(9,0,15), 									/* sw $9,($15) */
+	
+		MIPS32_LW(8,NEG16((MIPS32_PRACC_STACK-MIPS32_PRACC_PARAM_IN)-4), 15),  //load R8 @ param_in[1] = data
+		MIPS32_LW(9,NEG16(MIPS32_PRACC_STACK-MIPS32_PRACC_PARAM_IN), 15),  //load R9 @ param_in[0] = address
 
-		MIPS32_LUI(8,UPPER16((MIPS32_PRACC_PARAM_IN+4))), 	/* $8 = MIPS32_PRACC_PARAM_IN+4 */
-		MIPS32_ORI(8,8,LOWER16((MIPS32_PRACC_PARAM_IN+4))),
-		MIPS32_LW(9,NEG16(4),8), 							/* Load write addr to $9 */
-
-		MIPS32_LW(8,0,8), 									/* lw $8,0($8), Load $8 with the word @mem[$8] */
 		MIPS32_SW(8,0,9), 									/* sw $8,0($9) */
 
 		MIPS32_LW(9,0,15), 									/* lw $9,($15) */
 		MIPS32_LW(8,0,15), 									/* lw $8,($15) */
-		MIPS32_MFC0(15,31,0),								/* move COP0 DeSave to $15 */
+		MIPS32_B(NEG16(11)),								/* b start */
+		MIPS32_MFC0(15,31,0),							/* move COP0 DeSave to $15 */
 		MIPS32_NOP,
-		MIPS32_B(NEG16(15)),								/* b start */
-		MIPS32_NOP,
 	};
 
 	/* TODO remove array */

Modified: trunk/src/target/mips32_pracc.h
===================================================================
--- trunk/src/target/mips32_pracc.h	2009-04-21 11:33:29 UTC (rev 1493)
+++ trunk/src/target/mips32_pracc.h	2009-04-21 11:35:58 UTC (rev 1494)
@@ -25,7 +25,8 @@
 #include "mips_ejtag.h"
 
 #define MIPS32_PRACC_TEXT			0xFF200200
-#define MIPS32_PRACC_STACK			0xFF2FFFFC
+//#define MIPS32_PRACC_STACK			0xFF2FFFFC
+#define MIPS32_PRACC_STACK			0xFF204000
 #define MIPS32_PRACC_PARAM_IN		0xFF201000
 #define MIPS32_PRACC_PARAM_IN_SIZE	0x1000
 #define MIPS32_PRACC_PARAM_OUT		(MIPS32_PRACC_PARAM_IN + MIPS32_PRACC_PARAM_IN_SIZE)



From oharboe at mail.berlios.de  Tue Apr 21 13:37:17 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Tue, 21 Apr 2009 13:37:17 +0200
Subject: [Openocd-svn] r1495 - in trunk: . src/jtag
Message-ID: <200904211137.n3LBbHT7027903@sheep.berlios.de>

Author: oharboe
Date: 2009-04-21 13:37:15 +0200 (Tue, 21 Apr 2009)
New Revision: 1495

Modified:
   trunk/configure.in
   trunk/src/jtag/arm-jtag-ew.c
   trunk/src/jtag/ft2232.c
   trunk/src/jtag/jlink.c
   trunk/src/jtag/jtag.h
Log:
Zach Welch <zw at superlucidity.net>  add --enable-verbose* options

Modified: trunk/configure.in
===================================================================
--- trunk/configure.in	2009-04-21 11:35:58 UTC (rev 1494)
+++ trunk/configure.in	2009-04-21 11:37:15 UTC (rev 1495)
@@ -189,7 +189,52 @@
 	AS_HELP_STRING([--disable-werror], [Do not treat warnings as errors]),
 	[gcc_werror=$enableval], [gcc_werror=$gcc_warnings])
 
+# set default verbose options, overridden by following options
+debug_jtag_io=no
+debug_usb_io=no
+debug_usb_comms=no
 
+AC_ARG_ENABLE(verbose,
+	AS_HELP_STRING([--enable-verbose],
+  		[Enable verbose JTAG I/O messages (for debugging).]), 
+	[
+	debug_jtag_io=$enableval
+	debug_usb_io=$enableval
+	debug_usb_comms=$enableval
+	], [])
+
+AC_ARG_ENABLE(verbose_jtag_io,
+	AS_HELP_STRING([--enable-verbose-jtag-io],
+  		[Enable verbose JTAG I/O messages (for debugging).]), 
+	[debug_jtag_io=$enableval], [])
+AC_ARG_ENABLE(verbose_usb_io,
+	AS_HELP_STRING([--enable-verbose-usb-io],
+  		[Enable verbose USB I/O messages (for debugging)]), 
+	[debug_usb_io=$enableval], [])
+AC_ARG_ENABLE(verbose_usb_comms,
+	AS_HELP_STRING([--enable-verbose-usb-comms],
+  		[Enable verbose USB communication messages (for debugging)]), 
+	[debug_usb_comms=$enableval], [])
+
+AC_MSG_CHECKING([whether to enable verbose JTAB I/O messages]);
+AC_MSG_RESULT($debug_jtag_io)
+if test $debug_jtag_io = yes; then
+  AC_DEFINE([_DEBUG_JTAG_IO_],[1], [Print verbose JTAG I/O messages])
+fi
+
+AC_MSG_CHECKING([whether to enable verbose USB I/O messages]);
+AC_MSG_RESULT($debug_usb_io)
+if test $debug_usb_io = yes; then
+  AC_DEFINE([_DEBUG_USB_IO_],[1], [Print verbose USB I/O messages])
+fi
+
+AC_MSG_CHECKING([whether to enable verbose USB communication messages]);
+AC_MSG_RESULT($debug_usb_comms)
+if test $debug_usb_comms = yes; then
+  AC_DEFINE([_DEBUG_USB_COMMS_],[1], [Print verbose USB communication messages])
+fi
+
+
 AC_ARG_ENABLE(parport,
   AS_HELP_STRING([--enable-parport], [Enable building the pc parallel port driver]), 
   [build_parport=$enableval], [build_parport=no])

Modified: trunk/src/jtag/arm-jtag-ew.c
===================================================================
--- trunk/src/jtag/arm-jtag-ew.c	2009-04-21 11:35:58 UTC (rev 1494)
+++ trunk/src/jtag/arm-jtag-ew.c	2009-04-21 11:37:15 UTC (rev 1495)
@@ -35,19 +35,6 @@
 
 #include "log.h"
 
-/* enable this to debug communication
- */
-#if 1
-#define _DEBUG_USB_COMMS_
-#define _DEBUG_JTAG_IO_
-#endif
-
-#ifdef _DEBUG_JTAG_IO_
-#define DEBUG_JTAG_IO(expr ...)	LOG_DEBUG(expr)
-#else
-#define DEBUG_JTAG_IO(expr ...)
-#endif
-
 #define USB_VID						0x15ba
 #define USB_PID						0x001e
 

Modified: trunk/src/jtag/ft2232.c
===================================================================
--- trunk/src/jtag/ft2232.c	2009-04-21 11:35:58 UTC (rev 1494)
+++ trunk/src/jtag/ft2232.c	2009-04-21 11:37:15 UTC (rev 1495)
@@ -58,18 +58,6 @@
 #include <ftdi.h>
 #endif
 
-/* enable this to debug io latency
- */
-#if 0
-#define _DEBUG_USB_IO_
-#endif
-
-/* enable this to debug communication
- */
-#if 0
-#define _DEBUG_USB_COMMS_
-#endif
-
 static int ft2232_execute_queue(void);
 
 static int ft2232_speed(int speed);

Modified: trunk/src/jtag/jlink.c
===================================================================
--- trunk/src/jtag/jlink.c	2009-04-21 11:35:58 UTC (rev 1494)
+++ trunk/src/jtag/jlink.c	2009-04-21 11:37:15 UTC (rev 1495)
@@ -34,18 +34,6 @@
 
 #include "log.h"
 
-/* enable this to debug communication
- */
-#if 0
-#define _DEBUG_USB_COMMS_
-#endif
-
-#ifdef _DEBUG_JTAG_IO_
-#define DEBUG_JTAG_IO(expr ...)	LOG_DEBUG(expr)
-#else
-#define DEBUG_JTAG_IO(expr ...)
-#endif
-
 #define VID 0x1366
 #define PID 0x0101
 

Modified: trunk/src/jtag/jtag.h
===================================================================
--- trunk/src/jtag/jtag.h	2009-04-21 11:35:58 UTC (rev 1494)
+++ trunk/src/jtag/jtag.h	2009-04-21 11:37:15 UTC (rev 1495)
@@ -30,8 +30,10 @@
 #include "command.h"
 
 
-#if 0
-#define _DEBUG_JTAG_IO_
+#ifdef _DEBUG_JTAG_IO_
+#define DEBUG_JTAG_IO(expr ...)		LOG_DEBUG(expr)
+#else
+#define DEBUG_JTAG_IO(expr ...)
 #endif
 
 #ifndef DEBUG_JTAG_IOZ



From oharboe at mail.berlios.de  Tue Apr 21 14:09:36 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Tue, 21 Apr 2009 14:09:36 +0200
Subject: [Openocd-svn] r1496 - trunk/src/jtag
Message-ID: <200904211209.n3LC9aYZ025895@sheep.berlios.de>

Author: oharboe
Date: 2009-04-21 14:09:35 +0200 (Tue, 21 Apr 2009)
New Revision: 1496

Modified:
   trunk/src/jtag/vsllink.c
Log:
Zach Welch <zw at superlucidity.net>  add --enable-verbose* options

Modified: trunk/src/jtag/vsllink.c
===================================================================
--- trunk/src/jtag/vsllink.c	2009-04-21 11:37:15 UTC (rev 1495)
+++ trunk/src/jtag/vsllink.c	2009-04-21 12:09:35 UTC (rev 1496)
@@ -37,18 +37,6 @@
 
 //#define _VSLLINK_IN_DEBUG_MODE_
 
-/* enable this to view USB communication
- */
-#if 0
-#define _DEBUG_USB_COMMS_
-#endif
-
-#ifdef _DEBUG_JTAG_IO_
-#define DEBUG_JTAG_IO(expr ...)		LOG_DEBUG(expr)
-#else
-#define DEBUG_JTAG_IO(expr ...)
-#endif
-
 #define VSLLINK_MODE_NORMAL			0
 #define VSLLINK_MODE_DMA			1
 



From oharboe at mail.berlios.de  Tue Apr 21 14:10:29 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Tue, 21 Apr 2009 14:10:29 +0200
Subject: [Openocd-svn] r1497 - trunk/src/jtag
Message-ID: <200904211210.n3LCATvu026278@sheep.berlios.de>

Author: oharboe
Date: 2009-04-21 14:10:29 +0200 (Tue, 21 Apr 2009)
New Revision: 1497

Modified:
   trunk/src/jtag/ft2232.c
Log:
Zach Welch <zw at superlucidity.net> fix ft2232 usb io format warning

Modified: trunk/src/jtag/ft2232.c
===================================================================
--- trunk/src/jtag/ft2232.c	2009-04-21 12:09:35 UTC (rev 1496)
+++ trunk/src/jtag/ft2232.c	2009-04-21 12:10:29 UTC (rev 1497)
@@ -472,9 +472,10 @@
 		timeval_subtract(&d_inter2, &inter2, &start);
 		timeval_subtract(&d_end, &end, &start);
 
-		LOG_INFO("inter: %i.%06i, inter2: %i.%06i end: %i.%06i", d_inter.tv_sec, d_inter.tv_usec, d_inter2.tv_sec,
-				d_inter2.tv_usec, d_end.tv_sec,
-				d_end.tv_usec);
+		LOG_INFO("inter: %u.%06u, inter2: %u.%06u end: %u.%06u",
+			(unsigned)d_inter.tv_sec, (unsigned)d_inter.tv_usec,
+			(unsigned)d_inter2.tv_sec, (unsigned)d_inter2.tv_usec,
+			(unsigned)d_end.tv_sec, (unsigned)d_end.tv_usec);
 #endif
 
 		ft2232_buffer_size = bytes_read;



From oharboe at mail.berlios.de  Tue Apr 21 17:39:50 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Tue, 21 Apr 2009 17:39:50 +0200
Subject: [Openocd-svn] r1498 - trunk/src/jtag
Message-ID: <200904211539.n3LFdolD009103@sheep.berlios.de>

Author: oharboe
Date: 2009-04-21 17:39:49 +0200 (Tue, 21 Apr 2009)
New Revision: 1498

Modified:
   trunk/src/jtag/jlink.c
Log:
Zach Welch <zw at superlucidity.net> refactor

Modified: trunk/src/jtag/jlink.c
===================================================================
--- trunk/src/jtag/jlink.c	2009-04-21 12:10:29 UTC (rev 1497)
+++ trunk/src/jtag/jlink.c	2009-04-21 15:39:49 UTC (rev 1498)
@@ -230,31 +230,26 @@
 {
 	int result;
 
-	if (speed <= JLINK_MAX_SPEED)
+	if (speed > JLINK_MAX_SPEED)
 	{
-		/* check for RTCK setting */
-		if (speed == 0)
-			speed = -1;
+		LOG_INFO("Ignoring speed request: %dkHz exceeds %dkHz maximum",
+				speed, JLINK_MAX_SPEED);
+		return ERROR_OK;
+	}
 
-		usb_out_buffer[0] = EMU_CMD_SET_SPEED;
-		usb_out_buffer[1] = (speed >> 0) & 0xff;
-		usb_out_buffer[2] = (speed >> 8) & 0xff;
+	/* check for RTCK setting */
+	if (speed == 0)
+		speed = -1;
 
-		result = jlink_usb_write(jlink_jtag_handle, 3);
+	usb_out_buffer[0] = EMU_CMD_SET_SPEED;
+	usb_out_buffer[1] = (speed >> 0) & 0xff;
+	usb_out_buffer[2] = (speed >> 8) & 0xff;
 
-		if (result == 3)
-		{
-			return ERROR_OK;
-		}
-		else
-		{
-			LOG_ERROR("J-Link setting speed failed (%d)", result);
-			return ERROR_JTAG_DEVICE_ERROR;
-		}
-	}
-	else
+	result = jlink_usb_write(jlink_jtag_handle, 3);
+	if (result != 3)
 	{
-		LOG_INFO("Requested speed %dkHz exceeds maximum of %dkHz, ignored", speed, JLINK_MAX_SPEED);
+		LOG_ERROR("J-Link setting speed failed (%d)", result);
+		return ERROR_JTAG_DEVICE_ERROR;
 	}
 
 	return ERROR_OK;
@@ -485,53 +480,55 @@
 	int result;
 
 	jlink_simple_command(EMU_CMD_GET_STATE);
-	result = jlink_usb_read(jlink_jtag_handle, 8);
 
-	if (result == 8)
+	result = jlink_usb_read(jlink_jtag_handle, 8);
+	if (result != 8)
 	{
-		int vref = usb_in_buffer[0] + (usb_in_buffer[1] << 8);
-		LOG_INFO("Vref = %d.%d TCK = %d TDI = %d TDO = %d TMS = %d SRST = %d TRST = %d\n", \
-			vref / 1000, vref % 1000, \
-			usb_in_buffer[2], usb_in_buffer[3], usb_in_buffer[4], \
-			usb_in_buffer[5], usb_in_buffer[6], usb_in_buffer[7]);
-
-		if (vref < 1500)
-		{
-			LOG_ERROR("Vref too low. Check Target Power\n");
-		}
-	}
-	else
-	{
 		LOG_ERROR("J-Link command EMU_CMD_GET_STATE failed (%d)\n", result);
+		return ERROR_JTAG_DEVICE_ERROR;
 	}
 
+	int vref = usb_in_buffer[0] + (usb_in_buffer[1] << 8);
+	LOG_INFO("Vref = %d.%d TCK = %d TDI = %d TDO = %d TMS = %d SRST = %d TRST = %d\n", \
+		vref / 1000, vref % 1000, \
+		usb_in_buffer[2], usb_in_buffer[3], usb_in_buffer[4], \
+		usb_in_buffer[5], usb_in_buffer[6], usb_in_buffer[7]);
+
+	if (vref < 1500)
+		LOG_ERROR("Vref too low. Check Target Power\n");
+
 	return ERROR_OK;
 }
 
 static int jlink_get_version_info(void)
 {
 	int result;
-	int len = 0;
+	int len;
 
 	/* query hardware version */
 	jlink_simple_command(EMU_CMD_VERSION);
-	result = jlink_usb_read(jlink_jtag_handle, 2);
 
-	if (result == 2)
+	result = jlink_usb_read(jlink_jtag_handle, 2);
+	if (2 != result)
 	{
-		len = buf_get_u32(usb_in_buffer, 0, 16);
-		result = jlink_usb_read(jlink_jtag_handle, len);
+		LOG_ERROR("J-Link command EMU_CMD_VERSION failed (%d)\n",
+				result);
+		return ERROR_JTAG_DEVICE_ERROR;
+	}
 
-		if (result == len)
-		{
-			usb_in_buffer[result] = 0;
-			LOG_INFO("%s", (char *)usb_in_buffer);
-			return ERROR_OK;
-		}
+	len = buf_get_u32(usb_in_buffer, 0, 16);
+	result = jlink_usb_read(jlink_jtag_handle, len);
+	if (result != len)
+	{
+		LOG_ERROR("J-Link command EMU_CMD_VERSION failed (%d)\n",
+				result);
+		return ERROR_JTAG_DEVICE_ERROR;
 	}
 
-	LOG_ERROR("J-Link command EMU_CMD_VERSION failed (%d)\n", result);
-	return ERROR_JTAG_DEVICE_ERROR;
+	usb_in_buffer[result] = 0;
+	LOG_INFO("%s", (char *)usb_in_buffer);
+
+	return ERROR_OK;
 }
 
 static int jlink_handle_jlink_info_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
@@ -551,7 +548,7 @@
 /* 2048 is the max value we can use here */
 #define JLINK_TAP_BUFFER_SIZE 2048
 
-static int tap_length;
+static unsigned tap_length;
 static u8 tms_buffer[JLINK_TAP_BUFFER_SIZE];
 static u8 tdi_buffer[JLINK_TAP_BUFFER_SIZE];
 static u8 tdo_buffer[JLINK_TAP_BUFFER_SIZE];
@@ -593,40 +590,32 @@
 	last_tms = tms;
 	int index = tap_length / 8;
 
-	if (index < JLINK_TAP_BUFFER_SIZE)
+	if (index >= JLINK_TAP_BUFFER_SIZE)
 	{
-		int bit_index = tap_length % 8;
-		u8 bit = 1 << bit_index;
+		LOG_ERROR("jlink_tap_append_step: overflow");
+		exit(-1);
+	}
 
-		if (tms)
-		{
-			tms_buffer[index] |= bit;
-		}
-		else
-		{
-			tms_buffer[index] &= ~bit;
-		}
+	int bit_index = tap_length % 8;
+	u8 bit = 1 << bit_index;
 
-		if (tdi)
-		{
-			tdi_buffer[index] |= bit;
-		}
-		else
-		{
-			tdi_buffer[index] &= ~bit;
-		}
+	if (tms)
+		tms_buffer[index] |= bit;
+	else
+		tms_buffer[index] &= ~bit;
 
-		tap_length++;
-	}
+	if (tdi)
+		tdi_buffer[index] |= bit;
 	else
-	{
-		LOG_ERROR("jlink_tap_append_step, overflow");
-	}
+		tdi_buffer[index] &= ~bit;
+
+	tap_length++;
 }
 
 static void jlink_tap_append_scan(int length, u8 *buffer, scan_command_t *command)
 {
-	pending_scan_result_t *pending_scan_result = &pending_scan_results_buffer[pending_scan_results_length];
+	pending_scan_result_t *pending_scan_result =
+		&pending_scan_results_buffer[pending_scan_results_length];
 	int i;
 
 	pending_scan_result->first = tap_length;
@@ -636,7 +625,9 @@
 
 	for (i = 0; i < length; i++)
 	{
-		jlink_tap_append_step((i < length-1 ? 0 : 1), (buffer[i/8] >> (i%8)) & 1);
+		int tms = i < length - 1 ? 0 : 1;
+		int tdi = buffer[i / 8] & (1 << (i % 8));
+		jlink_tap_append_step(tms, tdi);
 	}
 	pending_scan_results_length++;
 }
@@ -651,82 +642,79 @@
 	int i;
 	int result;
 
-	if (tap_length > 0)
+	if (!tap_length)
+		return ERROR_OK;
+
+	/* Pad last byte so that tap_length is divisible by 8 */
+	while (tap_length % 8 != 0)
 	{
-		/* Pad last byte so that tap_length is divisible by 8 */
-		while (tap_length % 8 != 0)
-		{
-			/* More of the last TMS value keeps us in the same state,
-			 * analogous to free-running JTAG interfaces. */
-			jlink_tap_append_step(last_tms, 0);
-		}
+		/* More of the last TMS value keeps us in the same state,
+		 * analogous to free-running JTAG interfaces. */
+		jlink_tap_append_step(last_tms, 0);
+	}
 
-		byte_length = tap_length / 8;
+	byte_length = tap_length / 8;
 
-		usb_out_buffer[0] = EMU_CMD_HW_JTAG3;
-		usb_out_buffer[1] = 0;
-		usb_out_buffer[2] = (tap_length >> 0) & 0xff;
-		usb_out_buffer[3] = (tap_length >> 8) & 0xff;
+	usb_out_buffer[0] = EMU_CMD_HW_JTAG3;
+	usb_out_buffer[1] = 0;
+	usb_out_buffer[2] = (tap_length >> 0) & 0xff;
+	usb_out_buffer[3] = (tap_length >> 8) & 0xff;
 
-		tms_offset = 4;
-		for (i = 0; i < byte_length; i++)
-		{
-			usb_out_buffer[tms_offset + i] = tms_buffer[i];
-		}
+	tms_offset = 4;
+	for (i = 0; i < byte_length; i++)
+	{
+		usb_out_buffer[tms_offset + i] = tms_buffer[i];
+	}
 
-		tdi_offset = tms_offset + byte_length;
-		for (i = 0; i < byte_length; i++)
-		{
-			usb_out_buffer[tdi_offset + i] = tdi_buffer[i];
-		}
+	tdi_offset = tms_offset + byte_length;
+	for (i = 0; i < byte_length; i++)
+	{
+		usb_out_buffer[tdi_offset + i] = tdi_buffer[i];
+	}
 
-		result = jlink_usb_message(jlink_jtag_handle, 4 + 2 * byte_length, byte_length);
+	result = jlink_usb_message(jlink_jtag_handle, 4 + 2 * byte_length, byte_length);
 
-		if (result == byte_length)
-		{
-			for (i = 0; i < byte_length; i++)
-			{
-				tdo_buffer[i] = usb_in_buffer[i];
-			}
+	if (result != byte_length)
+	{
+		LOG_ERROR("jlink_tap_execute, wrong result %d (expected %d)",
+				result, byte_length);
+		return ERROR_JTAG_QUEUE_FAILED;
+	}
 
-			for (i = 0; i < pending_scan_results_length; i++)
-			{
-				pending_scan_result_t *pending_scan_result = &pending_scan_results_buffer[i];
-				u8 *buffer = pending_scan_result->buffer;
-				int length = pending_scan_result->length;
-				int first = pending_scan_result->first;
-				scan_command_t *command = pending_scan_result->command;
+	for (i = 0; i < byte_length; i++)
+		tdo_buffer[i] = usb_in_buffer[i];
 
-				/* Copy to buffer */
-				buf_set_buf(tdo_buffer, first, buffer, 0, length);
+	for (i = 0; i < pending_scan_results_length; i++)
+	{
+		pending_scan_result_t *pending_scan_result = &pending_scan_results_buffer[i];
+		u8 *buffer = pending_scan_result->buffer;
+		int length = pending_scan_result->length;
+		int first = pending_scan_result->first;
+		scan_command_t *command = pending_scan_result->command;
 
-				DEBUG_JTAG_IO("pending scan result, length = %d", length);
+		/* Copy to buffer */
+		buf_set_buf(tdo_buffer, first, buffer, 0, length);
 
+		DEBUG_JTAG_IO("pending scan result, length = %d", length);
+
 #ifdef _DEBUG_USB_COMMS_
-				jlink_debug_buffer(buffer, byte_length);
+		jlink_debug_buffer(buffer, byte_length);
 #endif
 
-				if (jtag_read_buffer(buffer, command) != ERROR_OK)
-				{
-					jlink_tap_init();
-					return ERROR_JTAG_QUEUE_FAILED;
-				}
-
-				if (pending_scan_result->buffer != NULL)
-				{
-					free(pending_scan_result->buffer);
-				}
-			}
-		}
-		else
+		if (jtag_read_buffer(buffer, command) != ERROR_OK)
 		{
-			LOG_ERROR("jlink_tap_execute, wrong result %d, expected %d", result, byte_length);
+			jlink_tap_init();
 			return ERROR_JTAG_QUEUE_FAILED;
 		}
 
-		jlink_tap_init();
+		if (pending_scan_result->buffer != NULL)
+		{
+			free(pending_scan_result->buffer);
+		}
 	}
 
+	jlink_tap_init();
+
 	return ERROR_OK;
 }
 
@@ -792,59 +780,48 @@
 	int result2;
 
 	result = jlink_usb_write(jlink_jtag, out_length);
-	if (result == out_length)
+	if (result != out_length)
 	{
-		result = jlink_usb_read(jlink_jtag, in_length);
-		if (result == in_length || result == in_length+1)
+		LOG_ERROR("usb_bulk_write failed (requested=%d, result=%d)",
+				out_length, result);
+		return ERROR_JTAG_DEVICE_ERROR;
+	}
+
+	result = jlink_usb_read(jlink_jtag, in_length);
+	if ((result != in_length) && (result != in_length + 1))
+	{
+		LOG_ERROR("usb_bulk_read failed (requested=%d, result=%d)",
+				in_length, result);
+		return ERROR_JTAG_DEVICE_ERROR;
+	}
+
+	if (result == in_length)
+	{
+		/* Must read the result from the EMU too */
+		result2 = jlink_usb_read_emu_result(jlink_jtag);
+		if (1 != result2)
 		{
-			if (result == in_length)
-			{
-				/* Must read the result from the EMU too */
-				result2 = jlink_usb_read_emu_result(jlink_jtag);
-				if (1 == result2)
-				{
-					/* Check the result itself */
-					if (0 == usb_emu_result_buffer[0])
-					{
-						return result;
-					}
-					else
-					{
-						LOG_ERROR("jlink_usb_read_emu_result (requested=0, result=%d)", usb_emu_result_buffer[0]);
-						return -1;
-					}
-				}
-				else
-				{
-					LOG_ERROR("jlink_usb_read_emu_result len (requested=1, result=%d)", result2);
-					return -1;
-				}
-			}
-			else
-			{
-				/* Check the result itself */
-				if (0 == usb_in_buffer[result-1])
-				{
-					return result-1;
-				}
-				else
-				{
-					LOG_ERROR("jlink_usb_read_emu_result (requested=0, result=%d)", usb_in_buffer[result]);
-					return -1;
-				}
-			}
+			LOG_ERROR("jlink_usb_read_emu_result failed "
+				"(requested=1, result=%d)", result2);
+			return ERROR_JTAG_DEVICE_ERROR;
 		}
-		else
-		{
-			LOG_ERROR("usb_bulk_read failed (requested=%d, result=%d)", in_length, result);
-			return -1;
-		}
+
+		/* Check the result itself */
+		result2 = usb_emu_result_buffer[0];
 	}
 	else
 	{
-		LOG_ERROR("usb_bulk_write failed (requested=%d, result=%d)", out_length, result);
-		return -1;
+		/* Save the result, then remove it from return value */
+		result2 = usb_in_buffer[result--];
 	}
+
+	if (result2)
+	{
+		LOG_ERROR("jlink_usb_message failed with result=%d)", result2);
+		return ERROR_JTAG_DEVICE_ERROR;
+	}
+
+	return result;
 }
 
 /* calls the given usb_bulk_* function, allowing for the data to trickle in with some timeouts  */



From oharboe at mail.berlios.de  Wed Apr 22 08:16:55 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Wed, 22 Apr 2009 08:16:55 +0200
Subject: [Openocd-svn] r1499 - trunk/src/target/interface
Message-ID: <200904220616.n3M6GtwB021751@sheep.berlios.de>

Author: oharboe
Date: 2009-04-22 08:16:53 +0200 (Wed, 22 Apr 2009)
New Revision: 1499

Removed:
   trunk/src/target/interface/luminary-libftdi.cfg
   trunk/src/target/interface/olimex-jtag-tiny-a.cfg
Modified:
   trunk/src/target/interface/calao-usb-a9260-c01.cfg
   trunk/src/target/interface/flyswatter.cfg
   trunk/src/target/interface/jtagkey-tiny.cfg
   trunk/src/target/interface/luminary.cfg
   trunk/src/target/interface/olimex-arm-usb-ocd.cfg
   trunk/src/target/interface/olimex-jtag-tiny.cfg
   trunk/src/target/interface/openocd-usb.cfg
   trunk/src/target/interface/sheevaplug.cfg
Log:
Uwe Hermann <uwe at hermann-uwe.de>  Drop non-A variants of ft2232 targets

Modified: trunk/src/target/interface/calao-usb-a9260-c01.cfg
===================================================================
--- trunk/src/target/interface/calao-usb-a9260-c01.cfg	2009-04-21 15:39:49 UTC (rev 1498)
+++ trunk/src/target/interface/calao-usb-a9260-c01.cfg	2009-04-22 06:16:53 UTC (rev 1499)
@@ -6,7 +6,7 @@
 
 interface ft2232
 ft2232_layout jtagkey
-ft2232_device_desc "USB-A9260"
+ft2232_device_desc "USB-A9260 A"
 ft2232_vid_pid 0x0403 0x6010
 script interface/calao-usb-a9260.cfg
 script target/at91sam9260minimal.cfg

Modified: trunk/src/target/interface/flyswatter.cfg
===================================================================
--- trunk/src/target/interface/flyswatter.cfg	2009-04-21 15:39:49 UTC (rev 1498)
+++ trunk/src/target/interface/flyswatter.cfg	2009-04-22 06:16:53 UTC (rev 1499)
@@ -5,7 +5,7 @@
 #
 
 interface ft2232
-ft2232_device_desc "Flyswatter"
+ft2232_device_desc "Flyswatter A"
 ft2232_layout "flyswatter"
 ft2232_vid_pid 0x0403 0x6010
 jtag_speed 1

Modified: trunk/src/target/interface/jtagkey-tiny.cfg
===================================================================
--- trunk/src/target/interface/jtagkey-tiny.cfg	2009-04-21 15:39:49 UTC (rev 1498)
+++ trunk/src/target/interface/jtagkey-tiny.cfg	2009-04-22 06:16:53 UTC (rev 1499)
@@ -4,8 +4,6 @@
 # http://www.amontec.com/jtagkey-tiny.shtml
 #
 
-interface ft2232
-ft2232_device_desc "Amontec JTAGkey"
-ft2232_layout jtagkey
-ft2232_vid_pid 0x0403 0xcff8
+# The JTAGkey-tiny uses exactly the same config as the JTAGkey.
+source [find interface/jtagkey.cfg]
 

Deleted: trunk/src/target/interface/luminary-libftdi.cfg
===================================================================
--- trunk/src/target/interface/luminary-libftdi.cfg	2009-04-21 15:39:49 UTC (rev 1498)
+++ trunk/src/target/interface/luminary-libftdi.cfg	2009-04-22 06:16:53 UTC (rev 1499)
@@ -1,11 +0,0 @@
-#
-# Luminary Micro Stellaris LM3S811 Evaluation Kit
-#
-# http://www.luminarymicro.com/products/stellaris_811_evaluation_kits.html
-#
-
-interface ft2232
-ft2232_device_desc "Stellaris Evaluation Board"
-ft2232_layout evb_lm3s811
-ft2232_vid_pid 0x0403 0xbcd9
-

Modified: trunk/src/target/interface/luminary.cfg
===================================================================
--- trunk/src/target/interface/luminary.cfg	2009-04-21 15:39:49 UTC (rev 1498)
+++ trunk/src/target/interface/luminary.cfg	2009-04-22 06:16:53 UTC (rev 1499)
@@ -1,5 +1,5 @@
 #
-# Luminary Micro LM3S811 Evaluation Kit(s)
+# Luminary Micro Stellaris LM3S811 Evaluation Kit
 #
 # http://www.luminarymicro.com/products/stellaris_811_evaluation_kits.html
 #
@@ -7,4 +7,5 @@
 interface ft2232
 ft2232_device_desc "Stellaris Evaluation Board A"
 ft2232_layout evb_lm3s811
+ft2232_vid_pid 0x0403 0xbcd9
 

Modified: trunk/src/target/interface/olimex-arm-usb-ocd.cfg
===================================================================
--- trunk/src/target/interface/olimex-arm-usb-ocd.cfg	2009-04-21 15:39:49 UTC (rev 1498)
+++ trunk/src/target/interface/olimex-arm-usb-ocd.cfg	2009-04-22 06:16:53 UTC (rev 1499)
@@ -5,7 +5,7 @@
 #
 
 interface ft2232
-ft2232_device_desc "Olimex OpenOCD JTAG"
+ft2232_device_desc "Olimex OpenOCD JTAG A"
 ft2232_layout olimex-jtag
 ft2232_vid_pid 0x15ba 0x0003
 

Deleted: trunk/src/target/interface/olimex-jtag-tiny-a.cfg
===================================================================
--- trunk/src/target/interface/olimex-jtag-tiny-a.cfg	2009-04-21 15:39:49 UTC (rev 1498)
+++ trunk/src/target/interface/olimex-jtag-tiny-a.cfg	2009-04-22 06:16:53 UTC (rev 1499)
@@ -1,11 +0,0 @@
-#
-# Olimex ARM-USB-TINY
-#
-# http://www.olimex.com/dev/arm-usb-tiny.html
-#
-
-interface ft2232
-ft2232_device_desc "Olimex OpenOCD JTAG TINY A"
-ft2232_layout olimex-jtag
-ft2232_vid_pid 0x15ba 0x0004
-

Modified: trunk/src/target/interface/olimex-jtag-tiny.cfg
===================================================================
--- trunk/src/target/interface/olimex-jtag-tiny.cfg	2009-04-21 15:39:49 UTC (rev 1498)
+++ trunk/src/target/interface/olimex-jtag-tiny.cfg	2009-04-22 06:16:53 UTC (rev 1499)
@@ -4,12 +4,8 @@
 # http://www.olimex.com/dev/arm-usb-tiny.html
 #
 
-# TODO: FIXME
-# Linux USB tends to see the device description without the 'A' as in target/olimex-jtag-tiny.cfg,
-# but Windows still needs the 'A'. This is a replacement for Linux users.
-
 interface ft2232
-ft2232_device_desc "Olimex OpenOCD JTAG TINY"
+ft2232_device_desc "Olimex OpenOCD JTAG TINY A"
 ft2232_layout olimex-jtag
 ft2232_vid_pid 0x15ba 0x0004
 

Modified: trunk/src/target/interface/openocd-usb.cfg
===================================================================
--- trunk/src/target/interface/openocd-usb.cfg	2009-04-21 15:39:49 UTC (rev 1498)
+++ trunk/src/target/interface/openocd-usb.cfg	2009-04-22 06:16:53 UTC (rev 1499)
@@ -6,7 +6,7 @@
 
 interface ft2232
 ft2232_vid_pid 0x0403 0x6010
-ft2232_device_desc "Dual RS232"
+ft2232_device_desc "Dual RS232 A"
 ft2232_layout "oocdlink"
 ft2232_latency 2
 # 6/(1+n) Mhz TCLK

Modified: trunk/src/target/interface/sheevaplug.cfg
===================================================================
--- trunk/src/target/interface/sheevaplug.cfg	2009-04-21 15:39:49 UTC (rev 1498)
+++ trunk/src/target/interface/sheevaplug.cfg	2009-04-22 06:16:53 UTC (rev 1499)
@@ -7,5 +7,6 @@
 interface ft2232
 ft2232_layout sheevaplug
 ft2232_vid_pid 0x0403 0x6010
+# TODO: Add ft2232_device_desc?
 jtag_khz 3000
 



From kc8apf at mail.berlios.de  Wed Apr 22 08:55:37 2009
From: kc8apf at mail.berlios.de (kc8apf at mail.berlios.de)
Date: Wed, 22 Apr 2009 08:55:37 +0200
Subject: [Openocd-svn] r1500 - trunk/src/jtag
Message-ID: <200904220655.n3M6tbBZ010843@sheep.berlios.de>

Author: kc8apf
Date: 2009-04-22 08:55:34 +0200 (Wed, 22 Apr 2009)
New Revision: 1500

Modified:
   trunk/src/jtag/jlink.c
Log:
refactor jlink_execute_queue courtesy of Zach Welch <zw at superlucidity.net>

Modified: trunk/src/jtag/jlink.c
===================================================================
--- trunk/src/jtag/jlink.c	2009-04-22 06:16:53 UTC (rev 1499)
+++ trunk/src/jtag/jlink.c	2009-04-22 06:55:34 UTC (rev 1500)
@@ -130,95 +130,113 @@
 	.quit = jlink_quit
 };
 
-static int jlink_execute_queue(void)
+static void jlink_execute_end_state(jtag_command_t *cmd)
 {
-	jtag_command_t *cmd = jtag_command_queue;
-	int scan_size;
-	enum scan_type type;
-	u8 *buffer;
+	DEBUG_JTAG_IO("end_state: %i", cmd->cmd.end_state->end_state);
 
-	while (cmd != NULL)
-	{
-		switch (cmd->type)
-		{
-			case JTAG_END_STATE:
-				DEBUG_JTAG_IO("end_state: %i", cmd->cmd.end_state->end_state);
+	if (cmd->cmd.end_state->end_state != TAP_INVALID)
+		jlink_end_state(cmd->cmd.end_state->end_state);
+}
 
-				if (cmd->cmd.end_state->end_state != TAP_INVALID)
-				{
-					jlink_end_state(cmd->cmd.end_state->end_state);
-				}
-				break;
+static void jlink_execute_runtest(jtag_command_t *cmd)
+{
+	DEBUG_JTAG_IO("runtest %i cycles, end in %i",
+			cmd->cmd.runtest->num_cycles,
+			cmd->cmd.runtest->end_state);
 
-			case JTAG_RUNTEST:
-				DEBUG_JTAG_IO( "runtest %i cycles, end in %i", cmd->cmd.runtest->num_cycles, \
-					cmd->cmd.runtest->end_state);
+	if (cmd->cmd.runtest->end_state != TAP_INVALID)
+		jlink_end_state(cmd->cmd.runtest->end_state);
 
-				if (cmd->cmd.runtest->end_state != TAP_INVALID)
-				{
-					jlink_end_state(cmd->cmd.runtest->end_state);
-				}
-				jlink_runtest(cmd->cmd.runtest->num_cycles);
-				break;
+	jlink_runtest(cmd->cmd.runtest->num_cycles);
+}
 
-			case JTAG_STATEMOVE:
-				DEBUG_JTAG_IO("statemove end in %i", cmd->cmd.statemove->end_state);
+static void jlink_execute_statemove(jtag_command_t *cmd)
+{
+	DEBUG_JTAG_IO("statemove end in %i", cmd->cmd.statemove->end_state);
 
-				if (cmd->cmd.statemove->end_state != TAP_INVALID)
-				{
-					jlink_end_state(cmd->cmd.statemove->end_state);
-				}
-				jlink_state_move();
-				break;
+	if (cmd->cmd.statemove->end_state != TAP_INVALID)
+	{
+		jlink_end_state(cmd->cmd.statemove->end_state);
+	}
+	jlink_state_move();
+}
 
-			case JTAG_PATHMOVE:
-				DEBUG_JTAG_IO("pathmove: %i states, end in %i", \
-					cmd->cmd.pathmove->num_states, \
-					cmd->cmd.pathmove->path[cmd->cmd.pathmove->num_states - 1]);
+static void jlink_execute_pathmove(jtag_command_t *cmd)
+{
+	DEBUG_JTAG_IO("pathmove: %i states, end in %i",
+		cmd->cmd.pathmove->num_states,
+		cmd->cmd.pathmove->path[cmd->cmd.pathmove->num_states - 1]);
 
-				jlink_path_move(cmd->cmd.pathmove->num_states, cmd->cmd.pathmove->path);
-				break;
+	jlink_path_move(cmd->cmd.pathmove->num_states,
+			cmd->cmd.pathmove->path);
+}
 
-			case JTAG_SCAN:
-				DEBUG_JTAG_IO("scan end in %i", cmd->cmd.scan->end_state);
+static void jlink_execute_scan(jtag_command_t *cmd)
+{
+	int scan_size;
+	enum scan_type type;
+	u8 *buffer;
 
-				if (cmd->cmd.scan->end_state != TAP_INVALID)
-				{
-					jlink_end_state(cmd->cmd.scan->end_state);
-				}
+	DEBUG_JTAG_IO("scan end in %i", cmd->cmd.scan->end_state);
 
-				scan_size = jtag_build_buffer(cmd->cmd.scan, &buffer);
-				DEBUG_JTAG_IO("scan input, length = %d", scan_size);
+	if (cmd->cmd.scan->end_state != TAP_INVALID)
+		jlink_end_state(cmd->cmd.scan->end_state);
 
+	scan_size = jtag_build_buffer(cmd->cmd.scan, &buffer);
+	DEBUG_JTAG_IO("scan input, length = %d", scan_size);
+
 #ifdef _DEBUG_USB_COMMS_
-				jlink_debug_buffer(buffer, (scan_size + 7) / 8);
+	jlink_debug_buffer(buffer, (scan_size + 7) / 8);
 #endif
-				type = jtag_scan_type(cmd->cmd.scan);
-				jlink_scan(cmd->cmd.scan->ir_scan, type, buffer, scan_size, cmd->cmd.scan);
-				break;
+	type = jtag_scan_type(cmd->cmd.scan);
+	jlink_scan(cmd->cmd.scan->ir_scan,
+			type, buffer, scan_size, cmd->cmd.scan);
+}
 
-			case JTAG_RESET:
-				DEBUG_JTAG_IO("reset trst: %i srst %i", cmd->cmd.reset->trst, cmd->cmd.reset->srst);
+static void jlink_execute_reset(jtag_command_t *cmd)
+{
+	DEBUG_JTAG_IO("reset trst: %i srst %i",
+			cmd->cmd.reset->trst, cmd->cmd.reset->srst);
 
-				jlink_tap_execute();
+	jlink_tap_execute();
 
-				if (cmd->cmd.reset->trst == 1)
-				{
-					tap_set_state(TAP_RESET);
-				}
-				jlink_reset(cmd->cmd.reset->trst, cmd->cmd.reset->srst);
-				break;
+	if (cmd->cmd.reset->trst == 1)
+		tap_set_state(TAP_RESET);
 
-			case JTAG_SLEEP:
-				DEBUG_JTAG_IO("sleep %i", cmd->cmd.sleep->us);
-				jlink_tap_execute();
-				jtag_sleep(cmd->cmd.sleep->us);
-				break;
+	jlink_reset(cmd->cmd.reset->trst, cmd->cmd.reset->srst);
+}
 
-			default:
-				LOG_ERROR("BUG: unknown JTAG command type encountered");
-				exit(-1);
-		}
+static void jlink_execute_sleep(jtag_command_t *cmd)
+{
+	DEBUG_JTAG_IO("sleep %i", cmd->cmd.sleep->us);
+	jlink_tap_execute();
+	jtag_sleep(cmd->cmd.sleep->us);
+}
+
+static void jlink_execute_command(jtag_command_t *cmd)
+{
+	switch (cmd->type)
+	{
+	case JTAG_END_STATE: jlink_execute_end_state(cmd); break;
+	case JTAG_RUNTEST:   jlink_execute_runtest(cmd); break;
+	case JTAG_STATEMOVE: jlink_execute_statemove(cmd); break;
+	case JTAG_PATHMOVE:  jlink_execute_pathmove(cmd); break;
+	case JTAG_SCAN:      jlink_execute_scan(cmd); break;
+	case JTAG_RESET:     jlink_execute_reset(cmd); break;
+	case JTAG_SLEEP:     jlink_execute_sleep(cmd); break;
+	default:
+		LOG_ERROR("BUG: unknown JTAG command type encountered");
+		exit(-1);
+	}
+}
+
+static int jlink_execute_queue(void)
+{
+	jtag_command_t *cmd = jtag_command_queue;
+
+	while (cmd != NULL)
+	{
+		jlink_execute_command(cmd);
 		cmd = cmd->next;
 	}
 



From kc8apf at mail.berlios.de  Wed Apr 22 08:57:02 2009
From: kc8apf at mail.berlios.de (kc8apf at mail.berlios.de)
Date: Wed, 22 Apr 2009 08:57:02 +0200
Subject: [Openocd-svn] r1501 - trunk/src/jtag
Message-ID: <200904220657.n3M6v2dM011000@sheep.berlios.de>

Author: kc8apf
Date: 2009-04-22 08:56:59 +0200 (Wed, 22 Apr 2009)
New Revision: 1501

Modified:
   trunk/src/jtag/jtag.c
Log:
fix jtag run/idle state name courtesy of Jeff Williams <jeffw at gadgetworks.com> and Zach Welch <zw at superlucidity.net>

Modified: trunk/src/jtag/jtag.c
===================================================================
--- trunk/src/jtag/jtag.c	2009-04-22 06:55:34 UTC (rev 1500)
+++ trunk/src/jtag/jtag.c	2009-04-22 06:56:59 UTC (rev 1501)
@@ -3248,7 +3248,7 @@
 	switch( state )
 	{
 	case TAP_RESET:		ret = "RESET";			break;
-	case TAP_IDLE:		ret = "IDLE";			break;
+	case TAP_IDLE:		ret = "RUN/IDLE";			break;
 	case TAP_DRSELECT:	ret = "DRSELECT";		break;
 	case TAP_DRCAPTURE: ret = "DRCAPTURE";		break;
 	case TAP_DRSHIFT:	ret = "DRSHIFT";			break;



From kc8apf at mail.berlios.de  Wed Apr 22 09:31:20 2009
From: kc8apf at mail.berlios.de (kc8apf at mail.berlios.de)
Date: Wed, 22 Apr 2009 09:31:20 +0200
Subject: [Openocd-svn] r1502 - trunk/src/target
Message-ID: <200904220731.n3M7VKpG016559@sheep.berlios.de>

Author: kc8apf
Date: 2009-04-22 09:31:16 +0200 (Wed, 22 Apr 2009)
New Revision: 1502

Modified:
   trunk/src/target/target.c
Log:
Fix use of wrong format conversion for size_t (%zu instead of %u)

Modified: trunk/src/target/target.c
===================================================================
--- trunk/src/target/target.c	2009-04-22 06:56:59 UTC (rev 1501)
+++ trunk/src/target/target.c	2009-04-22 07:31:16 UTC (rev 1502)
@@ -2495,7 +2495,7 @@
 {
 	size_t written = fwrite(data, len, 1, f);
 	if (written != len)
-		LOG_ERROR("failed to write %u bytes: %s", len, strerror(errno));
+		LOG_ERROR("failed to write %zu bytes: %s", len, strerror(errno));
 }
 
 static void writeLong(FILE *f, int l)



From kc8apf at mail.berlios.de  Wed Apr 22 09:32:12 2009
From: kc8apf at mail.berlios.de (kc8apf at mail.berlios.de)
Date: Wed, 22 Apr 2009 09:32:12 +0200
Subject: [Openocd-svn] r1503 - trunk
Message-ID: <200904220732.n3M7WCMG016630@sheep.berlios.de>

Author: kc8apf
Date: 2009-04-22 09:32:09 +0200 (Wed, 22 Apr 2009)
New Revision: 1503

Modified:
   trunk/configure.in
Log:
Add D2XX support for OS X courtesy of Piotr Esden-Tempski <piotr at esden.net>

Modified: trunk/configure.in
===================================================================
--- trunk/configure.in	2009-04-22 07:31:16 UTC (rev 1502)
+++ trunk/configure.in	2009-04-22 07:32:09 UTC (rev 1503)
@@ -28,6 +28,7 @@
 is_cygwin=no
 is_mingw=no
 is_win32=no
+is_darwin=no
 build_release=yes
 
 AC_ARG_ENABLE(release,
@@ -110,10 +111,11 @@
 )
 
 #========================================
-# FTD2XXX support comes in 3 forms.
+# FTD2XXX support comes in 4 forms.
 #    (1) win32 - via a zip file
 #    (2) linux - via a tar file
 #    (3) linux/cygwin/mingw - via libftdi
+#    (4) darwin - installed under /usr/local
 #
 # In case (1) and (2) we need to know where the package was unpacked.
 
@@ -350,6 +352,7 @@
 	fi
 	
     AC_DEFINE(IS_WIN32, 1, [1 if building for Win32.])
+    AC_DEFINE(IS_DARWIN, 0, [0 if not building for Darwin.])
     ;; 
   *-mingw*) 
     is_mingw=yes
@@ -359,11 +362,22 @@
 
     AC_DEFINE(IS_MINGW, 1, [1 if building for MinGW.])
     AC_DEFINE(IS_WIN32, 1, [1 if building for Win32.])
+    AC_DEFINE(IS_DARWIN, 0, [0 if not building for Darwin.])
     ;; 
+  *darwin*)
+    is_darwin=yes
+
+    parport_use_giveio=no
+
+    AC_DEFINE(IS_CYGWIN, 0, [0 if not building for Cygwin.])
+    AC_DEFINE(IS_WIN32, 0, [0 if not building for Win32.])
+    AC_DEFINE(IS_DARWIN, 1, [1 if building for Darwin.])
+    ;;
   *) 
 	parport_use_giveio=no
     AC_DEFINE(IS_CYGWIN, 0, [0 if not building for Cygwin.])
     AC_DEFINE(IS_WIN32, 0, [0 if not building for Win32.])
+    AC_DEFINE(IS_DARWIN, 0, [0 if not building for Darwin.])
     ;;
 esac
 
@@ -559,16 +573,39 @@
 fi
 fi
 
-if test $is_win32 = no; then
+if test $is_darwin = yes ; then
+if test "${with_ftd2xx_win32_zipdir+set}" = set
+then
+   AC_MSG_ERROR([The option: --with-ftd2xx-win32-zipdir is for win32 only])
+fi
+if test "${with_ftd2xx_linux_tardir+set}" = set
+then
+   AC_MSG_ERROR([The option: with_ftd2xx_linux_tardir is for LINUX only.])
+fi
 
+if test $build_ft2232_ftd2xx = yes ; then
+   AC_MSG_CHECKING([for libftd2xx.a (darwin)])
+
+   if test ! -f /usr/local/include/ftd2xx.h ; then
+      AC_MSG_ERROR([ftd2xx library from FTDICHIP.com seems to be missing, cannot find: /usr/local/include/ftd2xx.h])
+   fi
+
+   CFLAGS="$CFLAGS -I/usr/local/include"
+   LDFLAGS="$LDFLAGS -L/usr/local/lib"
+   LIBS="$LIBS -lftd2xx"
+   AC_MSG_RESULT([-L/usr/local/lib -lftd2xx])
+fi
+fi
+
+if test $is_win32 = no && test $is_darwin = no ; then
+
 if test "${with_ftd2xx_win32_zipdir+set}" = set
 then
    AC_MSG_ERROR([The option: --with-ftd2xx-win32-zipdir is for win32 only])
 fi
 
 if test $build_ft2232_ftd2xx = yes ; then
-   # Must be linux -
-   # Cause FTDICHIP does not supply a MAC-OS version
+   # Must be linux
    if test $host_os != linux-gnu && test $host_os != linux ; then
       AC_MSG_ERROR([The (linux) ftd2xx library from FTDICHIP.com is linux only. Try --enable-ft2232-libftdi instead])
    fi
@@ -728,6 +765,7 @@
 AM_CONDITIONAL(IS_CYGWIN, test $is_cygwin = yes)
 AM_CONDITIONAL(IS_MINGW, test $is_mingw = yes)
 AM_CONDITIONAL(IS_WIN32, test $is_win32 = yes)
+AM_CONDITIONAL(IS_DARWIN, test $is_darwin = yes)
 AM_CONDITIONAL(BITQ, test $build_bitq = yes)
 
 AC_LANG_C



From kc8apf at mail.berlios.de  Wed Apr 22 09:34:53 2009
From: kc8apf at mail.berlios.de (kc8apf at mail.berlios.de)
Date: Wed, 22 Apr 2009 09:34:53 +0200
Subject: [Openocd-svn] r1504 - trunk/src/jtag
Message-ID: <200904220734.n3M7Yr6N016923@sheep.berlios.de>

Author: kc8apf
Date: 2009-04-22 09:34:47 +0200 (Wed, 22 Apr 2009)
New Revision: 1504

Modified:
   trunk/src/jtag/jlink.c
Log:
Shrink JLink buffer sizes to specified 2KB courtesy of Jeff Williams <jeffw at gadgetworks.com> and Zach Welch <zw at superlucidity.net>

Modified: trunk/src/jtag/jlink.c
===================================================================
--- trunk/src/jtag/jlink.c	2009-04-22 07:32:09 UTC (rev 1503)
+++ trunk/src/jtag/jlink.c	2009-04-22 07:34:47 UTC (rev 1504)
@@ -42,8 +42,9 @@
 
 #define JLINK_USB_TIMEOUT		1000
 
-#define JLINK_IN_BUFFER_SIZE			8192
-#define JLINK_OUT_BUFFER_SIZE			8192
+// See Section 1.3.2 of the Segger JLink USB protocol manual
+#define JLINK_IN_BUFFER_SIZE			2048
+#define JLINK_OUT_BUFFER_SIZE			2048
 #define JLINK_EMU_RESULT_BUFFER_SIZE	64
 
 /* Global USB buffers */



From mlu at mail.berlios.de  Wed Apr 22 12:09:29 2009
From: mlu at mail.berlios.de (mlu at mail.berlios.de)
Date: Wed, 22 Apr 2009 12:09:29 +0200
Subject: [Openocd-svn] r1505 - trunk/src/helper
Message-ID: <200904221009.n3MA9TDQ006281@sheep.berlios.de>

Author: mlu
Date: 2009-04-22 12:09:15 +0200 (Wed, 22 Apr 2009)
New Revision: 1505

Modified:
   trunk/src/helper/binarybuffer.c
Log:
Fix str_to_buf problem, thanks Andy Chenee

Modified: trunk/src/helper/binarybuffer.c
===================================================================
--- trunk/src/helper/binarybuffer.c	2009-04-22 07:34:47 UTC (rev 1504)
+++ trunk/src/helper/binarybuffer.c	2009-04-22 10:09:15 UTC (rev 1505)
@@ -244,7 +244,7 @@
 int str_to_buf(const char *str, int str_len, u8 *buf, int buf_len, int radix)
 {
 	char *charbuf;
-	char tmp;
+	u32 tmp;
 	float factor;
 	u8 *b256_buf;
 	int b256_len;
@@ -303,7 +303,7 @@
 			tmp = (tmp - 'A' + 10);
 		else continue;	/* skip characters other than [0-9,a-f,A-F] */
 
-		if (tmp >= radix)
+		if (tmp >= (u32)radix)
 			continue;	/* skip digits invalid for the current radix */
 
 		for (j = 0; j < b256_len; j++)



From oharboe at mail.berlios.de  Wed Apr 22 12:46:38 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Wed, 22 Apr 2009 12:46:38 +0200
Subject: [Openocd-svn] r1506 - trunk/src/jtag
Message-ID: <200904221046.n3MAkc3I022188@sheep.berlios.de>

Author: oharboe
Date: 2009-04-22 12:46:37 +0200 (Wed, 22 Apr 2009)
New Revision: 1506

Modified:
   trunk/src/jtag/jtag.h
Log:
Zach Welch <zw at superlucidity.net> reorder enum tap_state

Modified: trunk/src/jtag/jtag.h
===================================================================
--- trunk/src/jtag/jtag.h	2009-04-22 10:09:15 UTC (rev 1505)
+++ trunk/src/jtag/jtag.h	2009-04-22 10:46:37 UTC (rev 1506)
@@ -41,20 +41,37 @@
 #endif
 
 
-/* 16 Tap States, from page 21 of ASSET InterTech, Inc.'s svf.pdf
+/*
+ * Tap states from ARM7TDMI-S Technical reference manual.
+ * Also, validated against several other ARM core technical manuals.
+ *
+ * N.B. tap_get_tms_path() was changed to reflect this corrected
+ * numbering and ordering of the TAP states.
  */
-enum tap_state {
-	TAP_RESET    = 0, TAP_IDLE = 8,
-	TAP_DRSELECT = 1, TAP_DRCAPTURE = 2, TAP_DRSHIFT = 3, TAP_DREXIT1 = 4,
-	TAP_DRPAUSE  = 5, TAP_DREXIT2 = 6, TAP_DRUPDATE = 7,
-	TAP_IRSELECT = 9, TAP_IRCAPTURE = 10, TAP_IRSHIFT = 11, TAP_IREXIT1 = 12,
-	TAP_IRPAUSE  = 13, TAP_IREXIT2 = 14, TAP_IRUPDATE = 15,
+typedef enum tap_state
+{
+	TAP_DREXIT2 = 0x0,
+	TAP_DREXIT1 = 0x1,
+	TAP_DRSHIFT = 0x2,
+	TAP_DRPAUSE = 0x3,
+	TAP_IRSELECT = 0x4,
+	TAP_DRUPDATE = 0x5,
+	TAP_DRCAPTURE = 0x6,
+	TAP_DRSELECT = 0x7,
+	TAP_IREXIT2 = 0x8,
+	TAP_IREXIT1 = 0x9,
+	TAP_IRSHIFT = 0xa,
+	TAP_IRPAUSE = 0xb,
+	TAP_IDLE = 0xc,
+	TAP_IRUPDATE = 0xd,
+	TAP_IRCAPTURE = 0xe,
+	TAP_RESET = 0x0f,
 
-	TAP_NUM_STATES = 16, TAP_INVALID = -1,
-};
+	TAP_NUM_STATES = 0x10,
 
-typedef enum tap_state tap_state_t;
-
+	TAP_INVALID = -1,
+} tap_state_t;
+ 
 typedef struct tap_transition_s
 {
 	tap_state_t high;



From oharboe at mail.berlios.de  Wed Apr 22 12:59:32 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Wed, 22 Apr 2009 12:59:32 +0200
Subject: [Openocd-svn] r1507 - trunk/src/jtag
Message-ID: <200904221059.n3MAxWap002328@sheep.berlios.de>

Author: oharboe
Date: 2009-04-22 12:59:23 +0200 (Wed, 22 Apr 2009)
New Revision: 1507

Modified:
   trunk/src/jtag/jlink.c
Log:
Zach Welch <zw at superlucidity.net>  fix jlink reset

Modified: trunk/src/jtag/jlink.c
===================================================================
--- trunk/src/jtag/jlink.c	2009-04-22 10:46:37 UTC (rev 1506)
+++ trunk/src/jtag/jlink.c	2009-04-22 10:59:23 UTC (rev 1507)
@@ -463,6 +463,8 @@
 	if (srst == 0)
 	{
 		jlink_simple_command(EMU_CMD_HW_RESET1);
+		jlink_end_state(TAP_RESET);
+		jlink_state_move();
 	}
 	else if (srst == 1)
 	{
@@ -472,6 +474,8 @@
 	if (trst == 0)
 	{
 		jlink_simple_command(EMU_CMD_HW_TRST1);
+		jlink_end_state(TAP_RESET);
+		jlink_state_move();
 	}
 	else if (trst == 1)
 	{



From oharboe at mail.berlios.de  Wed Apr 22 13:37:28 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Wed, 22 Apr 2009 13:37:28 +0200
Subject: [Openocd-svn] r1508 - trunk/src/jtag
Message-ID: <200904221137.n3MBbSL5010240@sheep.berlios.de>

Author: oharboe
Date: 2009-04-22 13:37:27 +0200 (Wed, 22 Apr 2009)
New Revision: 1508

Modified:
   trunk/src/jtag/jlink.c
Log:
Zach Welch <zw at superlucidity.net> set speed in init

Modified: trunk/src/jtag/jlink.c
===================================================================
--- trunk/src/jtag/jlink.c	2009-04-22 10:59:23 UTC (rev 1507)
+++ trunk/src/jtag/jlink.c	2009-04-22 11:37:27 UTC (rev 1508)
@@ -329,6 +329,7 @@
 
 	jlink_reset(0, 0);
 	jlink_tap_init();
+	jlink_speed(jtag_speed);
 
 	return ERROR_OK;
 }



From oharboe at mail.berlios.de  Wed Apr 22 15:54:04 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Wed, 22 Apr 2009 15:54:04 +0200
Subject: [Openocd-svn] r1509 - trunk/src/jtag
Message-ID: <200904221354.n3MDs4JY009876@sheep.berlios.de>

Author: oharboe
Date: 2009-04-22 15:54:04 +0200 (Wed, 22 Apr 2009)
New Revision: 1509

Modified:
   trunk/src/jtag/jlink.c
Log:
Zach Welch <zw at superlucidity.net> do not pad TMS

Modified: trunk/src/jtag/jlink.c
===================================================================
--- trunk/src/jtag/jlink.c	2009-04-22 11:37:27 UTC (rev 1508)
+++ trunk/src/jtag/jlink.c	2009-04-22 13:54:04 UTC (rev 1509)
@@ -623,6 +623,10 @@
 	int bit_index = tap_length % 8;
 	u8 bit = 1 << bit_index;
 
+	// we do not pad TMS, so be sure to initialize all bits
+	if (0 == bit_index)
+		tms_buffer[index] = tdi_buffer[index] = 0;
+
 	if (tms)
 		tms_buffer[index] |= bit;
 	else
@@ -669,16 +673,9 @@
 	if (!tap_length)
 		return ERROR_OK;
 
-	/* Pad last byte so that tap_length is divisible by 8 */
-	while (tap_length % 8 != 0)
-	{
-		/* More of the last TMS value keeps us in the same state,
-		 * analogous to free-running JTAG interfaces. */
-		jlink_tap_append_step(last_tms, 0);
-	}
+	// number of full bytes (plus one if some would be left over)
+	byte_length = tap_length / 8 + !!(tap_length % 8);
 
-	byte_length = tap_length / 8;
-
 	usb_out_buffer[0] = EMU_CMD_HW_JTAG3;
 	usb_out_buffer[1] = 0;
 	usb_out_buffer[2] = (tap_length >> 0) & 0xff;



From oharboe at mail.berlios.de  Wed Apr 22 19:10:16 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Wed, 22 Apr 2009 19:10:16 +0200
Subject: [Openocd-svn] r1510 - trunk
Message-ID: <200904221710.n3MHAGmY002130@sheep.berlios.de>

Author: oharboe
Date: 2009-04-22 19:10:12 +0200 (Wed, 22 Apr 2009)
New Revision: 1510

Modified:
   trunk/configure.in
Log:
Michael Bruck spotted a typo in help messages

Modified: trunk/configure.in
===================================================================
--- trunk/configure.in	2009-04-22 13:54:04 UTC (rev 1509)
+++ trunk/configure.in	2009-04-22 17:10:12 UTC (rev 1510)
@@ -218,7 +218,7 @@
   		[Enable verbose USB communication messages (for debugging)]), 
 	[debug_usb_comms=$enableval], [])
 
-AC_MSG_CHECKING([whether to enable verbose JTAB I/O messages]);
+AC_MSG_CHECKING([whether to enable verbose JTAG I/O messages]);
 AC_MSG_RESULT($debug_jtag_io)
 if test $debug_jtag_io = yes; then
   AC_DEFINE([_DEBUG_JTAG_IO_],[1], [Print verbose JTAG I/O messages])



From oharboe at mail.berlios.de  Wed Apr 22 19:36:03 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Wed, 22 Apr 2009 19:36:03 +0200
Subject: [Openocd-svn] r1511 - trunk/src/server
Message-ID: <200904221736.n3MHa3eF000843@sheep.berlios.de>

Author: oharboe
Date: 2009-04-22 19:36:00 +0200 (Wed, 22 Apr 2009)
New Revision: 1511

Modified:
   trunk/src/server/server.c
Log:
Michael Bruck <mbruck at digenius.de> signed/unsigned incompatibility warning

Modified: trunk/src/server/server.c
===================================================================
--- trunk/src/server/server.c	2009-04-22 17:10:12 UTC (rev 1510)
+++ trunk/src/server/server.c	2009-04-22 17:36:00 UTC (rev 1511)
@@ -58,7 +58,7 @@
 
 int add_connection(service_t *service, command_context_t *cmd_ctx)
 {
-	unsigned int address_size;
+	socklen_t address_size;
 	connection_t *c, **p;
 	int retval;
 	int flag=1;
@@ -422,7 +422,7 @@
 					if (service->type != CONNECTION_PIPE)
 					{
 						struct sockaddr_in sin;
-						unsigned int address_size = sizeof(sin);
+						socklen_t address_size = sizeof(sin);
 						int tmp_fd;
 						tmp_fd = accept(service->fd, (struct sockaddr *)&service->sin, &address_size);
 						close_socket(tmp_fd);



From oharboe at mail.berlios.de  Wed Apr 22 20:40:02 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Wed, 22 Apr 2009 20:40:02 +0200
Subject: [Openocd-svn] r1512 - trunk/src/target
Message-ID: <200904221840.n3MIe24q023930@sheep.berlios.de>

Author: oharboe
Date: 2009-04-22 20:39:59 +0200 (Wed, 22 Apr 2009)
New Revision: 1512

Modified:
   trunk/src/target/arm11.c
   trunk/src/target/arm11.h
   trunk/src/target/arm11_dbgtap.c
Log:
Michael Bruck <mbruck at digenius.de> ARM11 various updates + fix formatting.

Modified: trunk/src/target/arm11.c
===================================================================
--- trunk/src/target/arm11.c	2009-04-22 17:36:00 UTC (rev 1511)
+++ trunk/src/target/arm11.c	2009-04-22 18:39:59 UTC (rev 1512)
@@ -50,9 +50,11 @@
 
 static void arm11_on_enter_debug_state(arm11_common_t * arm11);
 
-bool	arm11_config_memwrite_burst		= true;
-bool	arm11_config_memwrite_error_fatal	= true;
-u32	arm11_vcr				= 0;
+bool	arm11_config_memwrite_burst				= true;
+bool	arm11_config_memwrite_error_fatal		= true;
+u32		arm11_vcr								= 0;
+bool	arm11_config_memrw_no_increment			= false;
+bool	arm11_config_step_irq_enable			= false;
 
 #define ARM11_HANDLER(x)	\
 	.x				= arm11_##x
@@ -131,9 +133,9 @@
 
 typedef struct arm11_reg_defs_s
 {
-	char *			name;
-	u32				num;
-	int				gdb_num;
+	char *					name;
+	u32						num;
+	int						gdb_num;
 	enum arm11_regtype		type;
 } arm11_reg_defs_t;
 
@@ -308,8 +310,8 @@
  *
  * \param arm11		Target state variable.
  * \param dscr		If the current DSCR content is
- *				available a pointer to a word holding the
- *				DSCR can be passed. Otherwise use NULL.
+ *					available a pointer to a word holding the
+ *					DSCR can be passed. Otherwise use NULL.
  */
 void arm11_check_init(arm11_common_t * arm11, u32 * dscr)
 {
@@ -319,37 +321,37 @@
 
 	if (!dscr)
 	{
-	dscr = &dscr_local_tmp_copy;
-	*dscr = arm11_read_DSCR(arm11);
+		dscr = &dscr_local_tmp_copy;
+		*dscr = arm11_read_DSCR(arm11);
 	}
 
 	if (!(*dscr & ARM11_DSCR_MODE_SELECT))
 	{
-	LOG_DEBUG("Bringing target into debug mode");
+		LOG_DEBUG("Bringing target into debug mode");
 
-	*dscr |= ARM11_DSCR_MODE_SELECT;		/* Halt debug-mode */
-	arm11_write_DSCR(arm11, *dscr);
+		*dscr |= ARM11_DSCR_MODE_SELECT;		/* Halt debug-mode */
+		arm11_write_DSCR(arm11, *dscr);
 
-	/* add further reset initialization here */
+		/* add further reset initialization here */
 
-	arm11->simulate_reset_on_next_halt = true;
+		arm11->simulate_reset_on_next_halt = true;
 
-	if (*dscr & ARM11_DSCR_CORE_HALTED)
-	{
-		/** \todo TODO: this needs further scrutiny because
-		  * arm11_on_enter_debug_state() never gets properly called
-		  */
+		if (*dscr & ARM11_DSCR_CORE_HALTED)
+		{
+			/** \todo TODO: this needs further scrutiny because
+			  * arm11_on_enter_debug_state() never gets properly called
+			  */
 
-		arm11->target->state	= TARGET_HALTED;
-		arm11->target->debug_reason	= arm11_get_DSCR_debug_reason(*dscr);
-	}
-	else
-	{
-		arm11->target->state	= TARGET_RUNNING;
-		arm11->target->debug_reason	= DBG_REASON_NOTHALTED;
-	}
+			arm11->target->state	= TARGET_HALTED;
+			arm11->target->debug_reason	= arm11_get_DSCR_debug_reason(*dscr);
+		}
+		else
+		{
+			arm11->target->state	= TARGET_RUNNING;
+			arm11->target->debug_reason	= DBG_REASON_NOTHALTED;
+		}
 
-	arm11_sc7_clear_vbw(arm11);
+		arm11_sc7_clear_vbw(arm11);
 	}
 }
 
@@ -371,8 +373,8 @@
 	{size_t i;
 	for(i = 0; i < asizeof(arm11->reg_values); i++)
 	{
-	arm11->reg_list[i].valid	= 1;
-	arm11->reg_list[i].dirty	= 0;
+		arm11->reg_list[i].valid	= 1;
+		arm11->reg_list[i].dirty	= 0;
 	}}
 
 	/* Save DSCR */
@@ -383,21 +385,21 @@
 
 	if (R(DSCR) & ARM11_DSCR_WDTR_FULL)
 	{
-	arm11_add_debug_SCAN_N(arm11, 0x05, TAP_INVALID);
+		arm11_add_debug_SCAN_N(arm11, 0x05, ARM11_TAP_DEFAULT);
 
-	arm11_add_IR(arm11, ARM11_INTEST, TAP_INVALID);
+		arm11_add_IR(arm11, ARM11_INTEST, ARM11_TAP_DEFAULT);
 
-	scan_field_t	chain5_fields[3];
+		scan_field_t	chain5_fields[3];
 
-	arm11_setup_field(arm11, 32, NULL, &R(WDTR),	chain5_fields + 0);
-	arm11_setup_field(arm11,  1, NULL, NULL,	chain5_fields + 1);
-	arm11_setup_field(arm11,  1, NULL, NULL,	chain5_fields + 2);
+		arm11_setup_field(arm11, 32, NULL, &R(WDTR),	chain5_fields + 0);
+		arm11_setup_field(arm11,  1, NULL, NULL,	chain5_fields + 1);
+		arm11_setup_field(arm11,  1, NULL, NULL,	chain5_fields + 2);
 
-	arm11_add_dr_scan_vc(asizeof(chain5_fields), chain5_fields, TAP_DRPAUSE);
+		arm11_add_dr_scan_vc(asizeof(chain5_fields), chain5_fields, TAP_DRPAUSE);
 	}
 	else
 	{
-	arm11->reg_list[ARM11_RC_WDTR].valid	= 0;
+		arm11->reg_list[ARM11_RC_WDTR].valid	= 0;
 	}
 
 
@@ -413,35 +415,35 @@
 
 
 	/* From the spec:
-	Before executing any instruction in debug state you have to drain the write buffer.
-		This ensures that no imprecise Data Aborts can return at a later point:*/
+	   Before executing any instruction in debug state you have to drain the write buffer.
+	   This ensures that no imprecise Data Aborts can return at a later point:*/
 
 	/** \todo TODO: Test drain write buffer. */
 
 #if 0
 	while (1)
 	{
-	/* MRC p14,0,R0,c5,c10,0 */
-//	arm11_run_instr_no_data1(arm11, /*0xee150e1a*/0xe320f000);
+		/* MRC p14,0,R0,c5,c10,0 */
+		//	arm11_run_instr_no_data1(arm11, /*0xee150e1a*/0xe320f000);
 
-	/* mcr	   15, 0, r0, cr7, cr10, {4} */
-	arm11_run_instr_no_data1(arm11, 0xee070f9a);
+		/* mcr	   15, 0, r0, cr7, cr10, {4} */
+		arm11_run_instr_no_data1(arm11, 0xee070f9a);
 
-	u32 dscr = arm11_read_DSCR(arm11);
+		u32 dscr = arm11_read_DSCR(arm11);
 
-	LOG_DEBUG("DRAIN, DSCR %08x", dscr);
+		LOG_DEBUG("DRAIN, DSCR %08x", dscr);
 
-	if (dscr & ARM11_DSCR_STICKY_IMPRECISE_DATA_ABORT)
-	{
-		arm11_run_instr_no_data1(arm11, 0xe320f000);
+		if (dscr & ARM11_DSCR_STICKY_IMPRECISE_DATA_ABORT)
+		{
+			arm11_run_instr_no_data1(arm11, 0xe320f000);
 
-		dscr = arm11_read_DSCR(arm11);
+			dscr = arm11_read_DSCR(arm11);
 
-		LOG_DEBUG("DRAIN, DSCR %08x (DONE)", dscr);
+			LOG_DEBUG("DRAIN, DSCR %08x (DONE)", dscr);
 
-		break;
+			break;
+		}
 	}
-	}
 #endif
 
 	arm11_run_instr_data_prepare(arm11);
@@ -453,8 +455,8 @@
 	{size_t i;
 	for (i = 0; i < 15; i++)
 	{
-	/* MCR p14,0,R?,c0,c5,0 */
-	arm11_run_instr_data_from_core(arm11, 0xEE000E15 | (i << 12), &R(RX + i), 1);
+		/* MCR p14,0,R?,c0,c5,0 */
+		arm11_run_instr_data_from_core(arm11, 0xEE000E15 | (i << 12), &R(RX + i), 1);
 	}}
 
 	/* save rDTR */
@@ -463,12 +465,12 @@
 
 	if (R(DSCR) & ARM11_DSCR_RDTR_FULL)
 	{
-	/* MRC p14,0,R0,c0,c5,0 (move rDTR -> r0 (-> wDTR -> local var)) */
-	arm11_run_instr_data_from_core_via_r0(arm11, 0xEE100E15, &R(RDTR));
+		/* MRC p14,0,R0,c0,c5,0 (move rDTR -> r0 (-> wDTR -> local var)) */
+		arm11_run_instr_data_from_core_via_r0(arm11, 0xEE100E15, &R(RDTR));
 	}
 	else
 	{
-	arm11->reg_list[ARM11_RC_RDTR].valid	= 0;
+		arm11->reg_list[ARM11_RC_RDTR].valid	= 0;
 	}
 
 	/* save CPSR */
@@ -485,27 +487,27 @@
 
 	if (R(CPSR) & ARM11_CPSR_J)	/* Java state */
 	{
-	arm11->reg_values[ARM11_RC_PC] -= 0;
+		arm11->reg_values[ARM11_RC_PC] -= 0;
 	}
 	else if (R(CPSR) & ARM11_CPSR_T)	/* Thumb state */
 	{
-	arm11->reg_values[ARM11_RC_PC] -= 4;
+		arm11->reg_values[ARM11_RC_PC] -= 4;
 	}
 	else					/* ARM state */
 	{
-	arm11->reg_values[ARM11_RC_PC] -= 8;
+		arm11->reg_values[ARM11_RC_PC] -= 8;
 	}
 
 	if (arm11->simulate_reset_on_next_halt)
 	{
-	arm11->simulate_reset_on_next_halt = false;
+		arm11->simulate_reset_on_next_halt = false;
 
-	LOG_DEBUG("Reset c1 Control Register");
+		LOG_DEBUG("Reset c1 Control Register");
 
-	/* Write 0 (reset value) to Control register 0 to disable MMU/Cache etc. */
+		/* Write 0 (reset value) to Control register 0 to disable MMU/Cache etc. */
 
-	/* MCR p15,0,R0,c1,c0,0 */
-	arm11_run_instr_data_to_core_via_r0(arm11, 0xee010f10, 0);
+		/* MCR p15,0,R0,c1,c0,0 */
+		arm11_run_instr_data_to_core_via_r0(arm11, 0xee010f10, 0);
 
 	}
 
@@ -519,23 +521,23 @@
 	{size_t i;
 	for(i = 0; i < ARM11_REGCACHE_COUNT; i++)
 	{
-	if (!arm11->reg_list[i].valid)
-	{
-		if (arm11->reg_history[i].valid)
-		LOG_INFO("%8s INVALID	 (%08x)", arm11_reg_defs[i].name, arm11->reg_history[i].value);
-	}
-	else
-	{
-		if (arm11->reg_history[i].valid)
+		if (!arm11->reg_list[i].valid)
 		{
-		if (arm11->reg_history[i].value != arm11->reg_values[i])
-			LOG_INFO("%8s %08x (%08x)", arm11_reg_defs[i].name, arm11->reg_values[i], arm11->reg_history[i].value);
+			if (arm11->reg_history[i].valid)
+				LOG_INFO("%8s INVALID	 (%08x)", arm11_reg_defs[i].name, arm11->reg_history[i].value);
 		}
 		else
 		{
-		LOG_INFO("%8s %08x (INVALID)", arm11_reg_defs[i].name, arm11->reg_values[i]);
+			if (arm11->reg_history[i].valid)
+			{
+				if (arm11->reg_history[i].value != arm11->reg_values[i])
+					LOG_INFO("%8s %08x (%08x)", arm11_reg_defs[i].name, arm11->reg_values[i], arm11->reg_history[i].value);
+			}
+			else
+			{
+				LOG_INFO("%8s %08x (INVALID)", arm11_reg_defs[i].name, arm11->reg_values[i]);
+			}
 		}
-	}
 	}}
 }
 
@@ -556,28 +558,27 @@
 	{size_t i;
 	for (i = 1; i < 15; i++)
 	{
-	if (!arm11->reg_list[ARM11_RC_RX + i].dirty)
-		continue;
+		if (!arm11->reg_list[ARM11_RC_RX + i].dirty)
+			continue;
 
-	/* MRC p14,0,r?,c0,c5,0 */
-	arm11_run_instr_data_to_core1(arm11, 0xee100e15 | (i << 12), R(RX + i));
+		/* MRC p14,0,r?,c0,c5,0 */
+		arm11_run_instr_data_to_core1(arm11, 0xee100e15 | (i << 12), R(RX + i));
 
-//	LOG_DEBUG("RESTORE R" ZU " %08x", i, R(RX + i));
+		//	LOG_DEBUG("RESTORE R" ZU " %08x", i, R(RX + i));
 	}}
 
 	arm11_run_instr_data_finish(arm11);
 
 	/* spec says clear wDTR and rDTR; we assume they are clear as
 	   otherwise our programming would be sloppy */
-
 	{
-	u32 DSCR = arm11_read_DSCR(arm11);
+		u32 DSCR = arm11_read_DSCR(arm11);
 
-	if (DSCR & (ARM11_DSCR_RDTR_FULL | ARM11_DSCR_WDTR_FULL))
-	{
-		LOG_ERROR("wDTR/rDTR inconsistent (DSCR %08x)", DSCR);
+		if (DSCR & (ARM11_DSCR_RDTR_FULL | ARM11_DSCR_WDTR_FULL))
+		{
+			LOG_ERROR("wDTR/rDTR inconsistent (DSCR %08x)", DSCR);
+		}
 	}
-	}
 
 	arm11_run_instr_data_prepare(arm11);
 
@@ -585,8 +586,8 @@
 
 	if ((R(DSCR) & ARM11_DSCR_WDTR_FULL) || arm11->reg_list[ARM11_RC_WDTR].dirty)
 	{
-	/* MCR p14,0,R0,c0,c5,0 */
-	arm11_run_instr_data_to_core_via_r0(arm11, 0xee000e15, R(WDTR));
+		/* MCR p14,0,R0,c0,c5,0 */
+		arm11_run_instr_data_to_core_via_r0(arm11, 0xee000e15, R(WDTR));
 	}
 
 	/* restore CPSR */
@@ -614,20 +615,20 @@
 
 	if (R(DSCR) & ARM11_DSCR_RDTR_FULL || arm11->reg_list[ARM11_RC_RDTR].dirty)
 	{
-	arm11_add_debug_SCAN_N(arm11, 0x05, TAP_INVALID);
+		arm11_add_debug_SCAN_N(arm11, 0x05, ARM11_TAP_DEFAULT);
 
-	arm11_add_IR(arm11, ARM11_EXTEST, TAP_INVALID);
+		arm11_add_IR(arm11, ARM11_EXTEST, ARM11_TAP_DEFAULT);
 
-	scan_field_t	chain5_fields[3];
+		scan_field_t	chain5_fields[3];
 
-	u8			Ready		= 0;	/* ignored */
-	u8			Valid		= 0;	/* ignored */
+		u8			Ready		= 0;	/* ignored */
+		u8			Valid		= 0;	/* ignored */
 
-	arm11_setup_field(arm11, 32, &R(RDTR),	NULL, chain5_fields + 0);
-	arm11_setup_field(arm11,  1, &Ready,	NULL, chain5_fields + 1);
-	arm11_setup_field(arm11,  1, &Valid,	NULL, chain5_fields + 2);
+		arm11_setup_field(arm11, 32, &R(RDTR),	NULL, chain5_fields + 0);
+		arm11_setup_field(arm11,  1, &Ready,	NULL, chain5_fields + 1);
+		arm11_setup_field(arm11,  1, &Valid,	NULL, chain5_fields + 2);
 
-	arm11_add_dr_scan_vc(asizeof(chain5_fields), chain5_fields, TAP_DRPAUSE);
+		arm11_add_dr_scan_vc(asizeof(chain5_fields), chain5_fields, TAP_DRPAUSE);
 	}
 
 	arm11_record_register_history(arm11);
@@ -638,11 +639,11 @@
 	{size_t i;
 	for(i = 0; i < ARM11_REGCACHE_COUNT; i++)
 	{
-	arm11->reg_history[i].value	= arm11->reg_values[i];
-	arm11->reg_history[i].valid	= arm11->reg_list[i].valid;
+		arm11->reg_history[i].value	= arm11->reg_values[i];
+		arm11->reg_history[i].valid	= arm11->reg_list[i].valid;
 
-	arm11->reg_list[i].valid	= 0;
-	arm11->reg_list[i].dirty	= 0;
+		arm11->reg_list[i].valid	= 0;
+		arm11->reg_list[i].dirty	= 0;
 	}}
 }
 
@@ -655,7 +656,7 @@
 	arm11_common_t * arm11 = target->arch_info;
 
 	if (arm11->trst_active)
-	return ERROR_OK;
+		return ERROR_OK;
 
 	u32	dscr = arm11_read_DSCR(arm11);
 
@@ -665,28 +666,28 @@
 
 	if (dscr & ARM11_DSCR_CORE_HALTED)
 	{
-	if (target->state != TARGET_HALTED)
-	{
-		enum target_state old_state = target->state;
+		if (target->state != TARGET_HALTED)
+		{
+			enum target_state old_state = target->state;
 
-		LOG_DEBUG("enter TARGET_HALTED");
-		target->state		= TARGET_HALTED;
-		target->debug_reason	= arm11_get_DSCR_debug_reason(dscr);
-		arm11_on_enter_debug_state(arm11);
+			LOG_DEBUG("enter TARGET_HALTED");
+			target->state		= TARGET_HALTED;
+			target->debug_reason	= arm11_get_DSCR_debug_reason(dscr);
+			arm11_on_enter_debug_state(arm11);
 
-		target_call_event_callbacks(target,
-		old_state == TARGET_DEBUG_RUNNING ? TARGET_EVENT_DEBUG_HALTED : TARGET_EVENT_HALTED);
+			target_call_event_callbacks(target,
+				old_state == TARGET_DEBUG_RUNNING ? TARGET_EVENT_DEBUG_HALTED : TARGET_EVENT_HALTED);
+		}
 	}
-	}
 	else
 	{
-	if (target->state != TARGET_RUNNING && target->state != TARGET_DEBUG_RUNNING)
-	{
-		LOG_DEBUG("enter TARGET_RUNNING");
-		target->state		= TARGET_RUNNING;
-		target->debug_reason	= DBG_REASON_NOTHALTED;
+		if (target->state != TARGET_RUNNING && target->state != TARGET_DEBUG_RUNNING)
+		{
+			LOG_DEBUG("enter TARGET_RUNNING");
+			target->state		= TARGET_RUNNING;
+			target->debug_reason	= DBG_REASON_NOTHALTED;
+		}
 	}
-	}
 
 	return ERROR_OK;
 }
@@ -716,11 +717,11 @@
 	arm11_common_t * arm11 = target->arch_info;
 
 	LOG_DEBUG("target->state: %s",
-		  Jim_Nvp_value2name_simple( nvp_target_state, target->state )->name );
+		Jim_Nvp_value2name_simple( nvp_target_state, target->state )->name );
 
 	if (target->state == TARGET_UNKNOWN)
 	{
-	arm11->simulate_reset_on_next_halt = true;
+		arm11->simulate_reset_on_next_halt = true;
 	}
 
 	if (target->state == TARGET_HALTED)
@@ -731,8 +732,8 @@
 
 	if (arm11->trst_active)
 	{
-	arm11->halt_requested = true;
-	return ERROR_OK;
+		arm11->halt_requested = true;
+		return ERROR_OK;
 	}
 
 	arm11_add_IR(arm11, ARM11_HALT, TAP_IDLE);
@@ -746,10 +747,10 @@
 
 	while (1)
 	{
-	dscr = arm11_read_DSCR(arm11);
+		dscr = arm11_read_DSCR(arm11);
 
-	if (dscr & ARM11_DSCR_CORE_HALTED)
-		break;
+		if (dscr & ARM11_DSCR_CORE_HALTED)
+			break;
 	}
 
 	arm11_on_enter_debug_state(arm11);
@@ -760,7 +761,7 @@
 	target->debug_reason	= arm11_get_DSCR_debug_reason(dscr);
 
 	if((retval = target_call_event_callbacks(target,
-			old_state == TARGET_DEBUG_RUNNING ? TARGET_EVENT_DEBUG_HALTED : TARGET_EVENT_HALTED)) != ERROR_OK)
+		old_state == TARGET_DEBUG_RUNNING ? TARGET_EVENT_DEBUG_HALTED : TARGET_EVENT_HALTED)) != ERROR_OK)
 	{
 		return retval;
 	}
@@ -773,14 +774,14 @@
 	int retval = ERROR_OK;
 
 	FNC_INFO;
+	
+	//	  LOG_DEBUG("current %d  address %08x  handle_breakpoints %d  debug_execution %d",
+	//	current, address, handle_breakpoints, debug_execution);
 
-//	  LOG_DEBUG("current %d  address %08x  handle_breakpoints %d  debug_execution %d",
-//	current, address, handle_breakpoints, debug_execution);
-
 	arm11_common_t * arm11 = target->arch_info;
 
 	LOG_DEBUG("target->state: %s",
-		  Jim_Nvp_value2name_simple( nvp_target_state, target->state )->name );
+		Jim_Nvp_value2name_simple( nvp_target_state, target->state )->name );
 
 
 	if (target->state != TARGET_HALTED)
@@ -790,7 +791,7 @@
 	}
 
 	if (!current)
-	R(PC) = address;
+		R(PC) = address;
 
 	LOG_INFO("RESUME PC %08x%s", R(PC), !current ? "!" : "");
 
@@ -800,43 +801,43 @@
 	/* Set up breakpoints */
 	if (!debug_execution)
 	{
-	/* check if one matches PC and step over it if necessary */
+		/* check if one matches PC and step over it if necessary */
 
-	breakpoint_t *	bp;
+		breakpoint_t *	bp;
 
-	for (bp = target->breakpoints; bp; bp = bp->next)
-	{
-		if (bp->address == R(PC))
+		for (bp = target->breakpoints; bp; bp = bp->next)
 		{
-		LOG_DEBUG("must step over %08x", bp->address);
-		arm11_step(target, 1, 0, 0);
-		break;
+			if (bp->address == R(PC))
+			{
+				LOG_DEBUG("must step over %08x", bp->address);
+				arm11_step(target, 1, 0, 0);
+				break;
+			}
 		}
-	}
 
-	/* set all breakpoints */
+		/* set all breakpoints */
 
-	size_t		brp_num = 0;
+		size_t		brp_num = 0;
 
-	for (bp = target->breakpoints; bp; bp = bp->next)
-	{
-		arm11_sc7_action_t	brp[2];
+		for (bp = target->breakpoints; bp; bp = bp->next)
+		{
+			arm11_sc7_action_t	brp[2];
 
-		brp[0].write	= 1;
-		brp[0].address	= ARM11_SC7_BVR0 + brp_num;
-		brp[0].value	= bp->address;
-		brp[1].write	= 1;
-		brp[1].address	= ARM11_SC7_BCR0 + brp_num;
-		brp[1].value	= 0x1 | (3 << 1) | (0x0F << 5) | (0 << 14) | (0 << 16) | (0 << 20) | (0 << 21);
+			brp[0].write	= 1;
+			brp[0].address	= ARM11_SC7_BVR0 + brp_num;
+			brp[0].value	= bp->address;
+			brp[1].write	= 1;
+			brp[1].address	= ARM11_SC7_BCR0 + brp_num;
+			brp[1].value	= 0x1 | (3 << 1) | (0x0F << 5) | (0 << 14) | (0 << 16) | (0 << 20) | (0 << 21);
 
-		arm11_sc7_run(arm11, brp, asizeof(brp));
+			arm11_sc7_run(arm11, brp, asizeof(brp));
 
-		LOG_DEBUG("Add BP " ZU " at %08x", brp_num, bp->address);
+			LOG_DEBUG("Add BP " ZU " at %08x", brp_num, bp->address);
 
-		brp_num++;
-	}
+			brp_num++;
+		}
 
-	arm11_sc7_set_vcr(arm11, arm11_vcr);
+		arm11_sc7_set_vcr(arm11, arm11_vcr);
 	}
 
 	arm11_leave_debug_state(arm11);
@@ -850,18 +851,19 @@
 
 	while (1)
 	{
-	u32 dscr = arm11_read_DSCR(arm11);
+		u32 dscr = arm11_read_DSCR(arm11);
 
-	LOG_DEBUG("DSCR %08x", dscr);
+		LOG_DEBUG("DSCR %08x", dscr);
 
-	if (dscr & ARM11_DSCR_CORE_RESTARTED)
-		break;
+		if (dscr & ARM11_DSCR_CORE_RESTARTED)
+			break;
 	}
 
 	if (!debug_execution)
 	{
-		target->state		= TARGET_RUNNING;
+		target->state			= TARGET_RUNNING;
 		target->debug_reason	= DBG_REASON_NOTHALTED;
+
 		if((retval = target_call_event_callbacks(target, TARGET_EVENT_RESUMED)) != ERROR_OK)
 		{
 			return retval;
@@ -869,7 +871,7 @@
 	}
 	else
 	{
-		target->state		= TARGET_DEBUG_RUNNING;
+		target->state			= TARGET_DEBUG_RUNNING;
 		target->debug_reason	= DBG_REASON_NOTHALTED;
 		if((retval = target_call_event_callbacks(target, TARGET_EVENT_RESUMED)) != ERROR_OK)
 		{
@@ -887,18 +889,18 @@
 	FNC_INFO;
 
 	LOG_DEBUG("target->state: %s",
-		  Jim_Nvp_value2name_simple( nvp_target_state, target->state )->name );
+		Jim_Nvp_value2name_simple( nvp_target_state, target->state )->name );
 
 	if (target->state != TARGET_HALTED)
 	{
-	LOG_WARNING("target was not halted");
-	return ERROR_TARGET_NOT_HALTED;
+		LOG_WARNING("target was not halted");
+		return ERROR_TARGET_NOT_HALTED;
 	}
 
 	arm11_common_t * arm11 = target->arch_info;
 
 	if (!current)
-	R(PC) = address;
+		R(PC) = address;
 
 	LOG_INFO("STEP PC %08x%s", R(PC), !current ? "!" : "");
 
@@ -911,81 +913,92 @@
 	/* skip over BKPT */
 	if ((next_instruction & 0xFFF00070) == 0xe1200070)
 	{
-	R(PC) += 4;
-	arm11->reg_list[ARM11_RC_PC].valid = 1;
-	arm11->reg_list[ARM11_RC_PC].dirty = 0;
-	LOG_INFO("Skipping BKPT");
+		R(PC) += 4;
+		arm11->reg_list[ARM11_RC_PC].valid = 1;
+		arm11->reg_list[ARM11_RC_PC].dirty = 0;
+		LOG_INFO("Skipping BKPT");
 	}
 	/* skip over Wait for interrupt / Standby */
 	/* mcr	15, 0, r?, cr7, cr0, {4} */
 	else if ((next_instruction & 0xFFFF0FFF) == 0xee070f90)
 	{
-	R(PC) += 4;
-	arm11->reg_list[ARM11_RC_PC].valid = 1;
-	arm11->reg_list[ARM11_RC_PC].dirty = 0;
-	LOG_INFO("Skipping WFI");
+		R(PC) += 4;
+		arm11->reg_list[ARM11_RC_PC].valid = 1;
+		arm11->reg_list[ARM11_RC_PC].dirty = 0;
+		LOG_INFO("Skipping WFI");
 	}
 	/* ignore B to self */
 	else if ((next_instruction & 0xFEFFFFFF) == 0xeafffffe)
 	{
-	LOG_INFO("Not stepping jump to self");
+		LOG_INFO("Not stepping jump to self");
 	}
 	else
 	{
-	/** \todo TODO: check if break-/watchpoints make any sense at all in combination
-	  * with this. */
+		/** \todo TODO: check if break-/watchpoints make any sense at all in combination
+		* with this. */
 
-	/** \todo TODO: check if disabling IRQs might be a good idea here. Alternatively
-	  * the VCR might be something worth looking into. */
+		/** \todo TODO: check if disabling IRQs might be a good idea here. Alternatively
+		* the VCR might be something worth looking into. */
 
 
-	/* Set up breakpoint for stepping */
+		/* Set up breakpoint for stepping */
 
-	arm11_sc7_action_t	brp[2];
+		arm11_sc7_action_t	brp[2];
 
-	brp[0].write	= 1;
-	brp[0].address	= ARM11_SC7_BVR0;
-	brp[0].value	= R(PC);
-	brp[1].write	= 1;
-	brp[1].address	= ARM11_SC7_BCR0;
-	brp[1].value	= 0x1 | (3 << 1) | (0x0F << 5) | (0 << 14) | (0 << 16) | (0 << 20) | (2 << 21);
+		brp[0].write	= 1;
+		brp[0].address	= ARM11_SC7_BVR0;
+		brp[0].value	= R(PC);
+		brp[1].write	= 1;
+		brp[1].address	= ARM11_SC7_BCR0;
+		brp[1].value	= 0x1 | (3 << 1) | (0x0F << 5) | (0 << 14) | (0 << 16) | (0 << 20) | (2 << 21);
 
-	arm11_sc7_run(arm11, brp, asizeof(brp));
+		arm11_sc7_run(arm11, brp, asizeof(brp));
 
-	/* resume */
+		/* resume */
 
-	arm11_leave_debug_state(arm11);
 
-	arm11_add_IR(arm11, ARM11_RESTART, TAP_IDLE);
+		if (arm11_config_step_irq_enable)
+			R(DSCR) &= ~ARM11_DSCR_INTERRUPTS_DISABLE;		/* should be redundant */
+		else
+			R(DSCR) |= ARM11_DSCR_INTERRUPTS_DISABLE;
+			
 
-	if((retval = jtag_execute_queue()) != ERROR_OK)
-	{
-		return retval;
-	}
+		arm11_leave_debug_state(arm11);
 
-	/** \todo TODO: add a timeout */
+		arm11_add_IR(arm11, ARM11_RESTART, TAP_IDLE);
 
-	/* wait for halt */
+		if((retval = jtag_execute_queue()) != ERROR_OK)
+		{
+			return retval;
+		}
 
-	while (1)
-	{
-		u32 dscr = arm11_read_DSCR(arm11);
+		/** \todo TODO: add a timeout */
 
-		LOG_DEBUG("DSCR %08x", dscr);
+		/* wait for halt */
 
-		if ((dscr & (ARM11_DSCR_CORE_RESTARTED | ARM11_DSCR_CORE_HALTED)) ==
-		(ARM11_DSCR_CORE_RESTARTED | ARM11_DSCR_CORE_HALTED))
-		break;
-	}
+		while (1)
+		{
+			u32 dscr = arm11_read_DSCR(arm11);
 
-	/* clear breakpoint */
-	arm11_sc7_clear_vbw(arm11);
+			LOG_DEBUG("DSCR %08x", dscr);
 
-	/* save state */
-	arm11_on_enter_debug_state(arm11);
+			if ((dscr & (ARM11_DSCR_CORE_RESTARTED | ARM11_DSCR_CORE_HALTED)) ==
+				(ARM11_DSCR_CORE_RESTARTED | ARM11_DSCR_CORE_HALTED))
+				break;
+		}
+
+		/* clear breakpoint */
+		arm11_sc7_clear_vbw(arm11);
+
+		/* save state */
+		arm11_on_enter_debug_state(arm11);
+
+	    /* restore default state */
+		R(DSCR) &= ~ARM11_DSCR_INTERRUPTS_DISABLE;
+
 	}
 
-//	  target->state		= TARGET_HALTED;
+	//	  target->state		= TARGET_HALTED;
 	target->debug_reason	= DBG_REASON_SINGLESTEP;
 
 	if((retval = target_call_event_callbacks(target, TARGET_EVENT_HALTED)) != ERROR_OK)
@@ -1028,7 +1041,7 @@
 
 #if 0
 	LOG_DEBUG("target->state: %s",
-		  Jim_Nvp_value2name_simple( nvp_target_state, target->state )->name );
+		Jim_Nvp_value2name_simple( nvp_target_state, target->state )->name );
 
 
 	/* deassert reset lines */
@@ -1038,7 +1051,7 @@
 	arm11->trst_active = false;
 
 	if (arm11->halt_requested)
-	return arm11_halt(target);
+		return arm11_halt(target);
 #endif
 
 	return ERROR_OK;
@@ -1064,7 +1077,7 @@
 	{size_t i;
 	for (i = 16; i < 24; i++)
 	{
-	(*reg_list)[i] = &arm11_gdb_dummy_fp_reg;
+		(*reg_list)[i] = &arm11_gdb_dummy_fp_reg;
 	}}
 
 	(*reg_list)[24] = &arm11_gdb_dummy_fps_reg;
@@ -1072,19 +1085,19 @@
 	{size_t i;
 	for (i = 0; i < ARM11_REGCACHE_COUNT; i++)
 	{
-	if (arm11_reg_defs[i].gdb_num == -1)
-		continue;
+		if (arm11_reg_defs[i].gdb_num == -1)
+			continue;
 
-	(*reg_list)[arm11_reg_defs[i].gdb_num] = arm11->reg_list + i;
+		(*reg_list)[arm11_reg_defs[i].gdb_num] = arm11->reg_list + i;
 	}}
 
 	return ERROR_OK;
 }
 
 /* target memory access
-* size: 1 = byte (8bit), 2 = half-word (16bit), 4 = word (32bit)
-* count: number of items of <size>
-*/
+ * size: 1 = byte (8bit), 2 = half-word (16bit), 4 = word (32bit)
+ * count: number of items of <size>
+ */
 int arm11_read_memory(struct target_s *target, u32 address, u32 size, u32 count, u8 *buffer)
 {
 	/** \todo TODO: check if buffer cast to u32* and u16* might cause alignment problems */
@@ -1093,8 +1106,8 @@
 
 	if (target->state != TARGET_HALTED)
 	{
-	LOG_WARNING("target was not halted");
-	return ERROR_TARGET_NOT_HALTED;
+		LOG_WARNING("target was not halted");
+		return ERROR_TARGET_NOT_HALTED;
 	}
 
 	LOG_DEBUG("ADDR %08x  SIZE %08x  COUNT %08x", address, size, count);
@@ -1109,52 +1122,58 @@
 	switch (size)
 	{
 	case 1:
-	/** \todo TODO: check if dirty is the right choice to force a rewrite on arm11_resume() */
-	arm11->reg_list[ARM11_RC_R1].dirty = 1;
+		/** \todo TODO: check if dirty is the right choice to force a rewrite on arm11_resume() */
+		arm11->reg_list[ARM11_RC_R1].dirty = 1;
 
-	{size_t i;
-	for (i = 0; i < count; i++)
-	{
-		/* ldrb    r1, [r0], #1 */
-		arm11_run_instr_no_data1(arm11, 0xe4d01001);
+		{size_t i;
+		for (i = 0; i < count; i++)
+		{
+			/* ldrb    r1, [r0], #1 */
+			/* ldrb    r1, [r0] */
+			arm11_run_instr_no_data1(arm11,
+					!arm11_config_memrw_no_increment ? 0xe4d01001 : 0xe5d01000);
 
-		u32 res;
-		/* MCR p14,0,R1,c0,c5,0 */
-		arm11_run_instr_data_from_core(arm11, 0xEE001E15, &res, 1);
+			u32 res;
+			/* MCR p14,0,R1,c0,c5,0 */
+			arm11_run_instr_data_from_core(arm11, 0xEE001E15, &res, 1);
 
-		*buffer++ = res;
-	}}
+			*buffer++ = res;
+		}}
 
-	break;
+		break;
 
 	case 2:
-	{
-	arm11->reg_list[ARM11_RC_R1].dirty = 1;
+		{
+			arm11->reg_list[ARM11_RC_R1].dirty = 1;
 
-	u16 * buf16 = (u16*)buffer;
+			u16 * buf16 = (u16*)buffer;
 
-	{size_t i;
-	for (i = 0; i < count; i++)
-	{
-		/* ldrh    r1, [r0], #2 */
-		arm11_run_instr_no_data1(arm11, 0xe0d010b2);
+			{size_t i;
+			for (i = 0; i < count; i++)
+			{
+				/* ldrh    r1, [r0], #2 */
+				arm11_run_instr_no_data1(arm11,
+					!arm11_config_memrw_no_increment ? 0xe0d010b2 : 0xe1d010b0);
 
-		u32 res;
+				u32 res;
 
-		/* MCR p14,0,R1,c0,c5,0 */
-		arm11_run_instr_data_from_core(arm11, 0xEE001E15, &res, 1);
+				/* MCR p14,0,R1,c0,c5,0 */
+				arm11_run_instr_data_from_core(arm11, 0xEE001E15, &res, 1);
 
-		*buf16++ = res;
-	}}
+				*buf16++ = res;
+			}}
 
-	break;
-	}
+			break;
+		}
 
 	case 4:
 
-	/* LDC p14,c5,[R0],#4 */
-	arm11_run_instr_data_from_core(arm11, 0xecb05e01, (u32 *)buffer, count);
-	break;
+		/* LDC p14,c5,[R0],#4 */
+		/* LDC p14,c5,[R0] */
+		arm11_run_instr_data_from_core(arm11,
+			(!arm11_config_memrw_no_increment ? 0xecb05e01 : 0xed905e00),
+			(u32 *)buffer, count);
+		break;
 	}
 
 	arm11_run_instr_data_finish(arm11);
@@ -1168,8 +1187,8 @@
 
 	if (target->state != TARGET_HALTED)
 	{
-	LOG_WARNING("target was not halted");
-	return ERROR_TARGET_NOT_HALTED;
+		LOG_WARNING("target was not halted");
+		return ERROR_TARGET_NOT_HALTED;
 	}
 
 	LOG_DEBUG("ADDR %08x  SIZE %08x  COUNT %08x", address, size, count);
@@ -1184,77 +1203,88 @@
 	switch (size)
 	{
 	case 1:
-	{
-	arm11->reg_list[ARM11_RC_R1].dirty = 1;
+		{
+			arm11->reg_list[ARM11_RC_R1].dirty = 1;
 
-	{size_t i;
-	for (i = 0; i < count; i++)
-	{
-		/* MRC p14,0,r1,c0,c5,0 */
-		arm11_run_instr_data_to_core1(arm11, 0xee101e15, *buffer++);
+			{size_t i;
+			for (i = 0; i < count; i++)
+			{
+				/* MRC p14,0,r1,c0,c5,0 */
+				arm11_run_instr_data_to_core1(arm11, 0xee101e15, *buffer++);
 
-		/* strb    r1, [r0], #1 */
-		arm11_run_instr_no_data1(arm11, 0xe4c01001);
-	}}
+				/* strb    r1, [r0], #1 */
+				/* strb    r1, [r0] */
+				arm11_run_instr_no_data1(arm11,
+					!arm11_config_memrw_no_increment ? 0xe4c01001 : 0xe5c01000);
+			}}
 
-	break;
-	}
+			break;
+		}
 
 	case 2:
-	{
-	arm11->reg_list[ARM11_RC_R1].dirty = 1;
+		{
+			arm11->reg_list[ARM11_RC_R1].dirty = 1;
 
-	u16 * buf16 = (u16*)buffer;
+			u16 * buf16 = (u16*)buffer;
 
-	{size_t i;
-	for (i = 0; i < count; i++)
-	{
-		/* MRC p14,0,r1,c0,c5,0 */
-		arm11_run_instr_data_to_core1(arm11, 0xee101e15, *buf16++);
+			{size_t i;
+			for (i = 0; i < count; i++)
+			{
+				/* MRC p14,0,r1,c0,c5,0 */
+				arm11_run_instr_data_to_core1(arm11, 0xee101e15, *buf16++);
 
-		/* strh    r1, [r0], #2 */
-		arm11_run_instr_no_data1(arm11, 0xe0c010b2);
-	}}
+				/* strh    r1, [r0], #2 */
+				/* strh    r1, [r0] */
+				arm11_run_instr_no_data1(arm11,
+					!arm11_config_memrw_no_increment ? 0xe0c010b2 : 0xe1c010b0);
+			}}
 
-	break;
-	}
+			break;
+		}
 
 	case 4:
-	/** \todo TODO: check if buffer cast to u32* might cause alignment problems */
+		/** \todo TODO: check if buffer cast to u32* might cause alignment problems */
 
-	if (!arm11_config_memwrite_burst)
-	{
-		/* STC p14,c5,[R0],#4 */
-		arm11_run_instr_data_to_core(arm11, 0xeca05e01, (u32 *)buffer, count);
-	}
-	else
-	{
-		/* STC p14,c5,[R0],#4 */
-		arm11_run_instr_data_to_core_noack(arm11, 0xeca05e01, (u32 *)buffer, count);
-	}
+		if (!arm11_config_memwrite_burst)
+		{
+			/* STC p14,c5,[R0],#4 */
+			/* STC p14,c5,[R0]*/
+			arm11_run_instr_data_to_core(arm11,
+				(!arm11_config_memrw_no_increment ? 0xeca05e01 : 0xed805e00),
+				(u32 *)buffer, count);
+		}
+		else
+		{
+			/* STC p14,c5,[R0],#4 */
+			/* STC p14,c5,[R0]*/
+			arm11_run_instr_data_to_core_noack(arm11,
+				(!arm11_config_memrw_no_increment ? 0xeca05e01 : 0xed805e00),
+				(u32 *)buffer, count);
+		}
 
-	break;
+		break;
 	}
 
 #if 1
 	/* r0 verification */
+	if (!arm11_config_memrw_no_increment)
 	{
-	u32 r0;
+		u32 r0;
 
-	/* MCR p14,0,R0,c0,c5,0 */
-	arm11_run_instr_data_from_core(arm11, 0xEE000E15, &r0, 1);
+		/* MCR p14,0,R0,c0,c5,0 */
+		arm11_run_instr_data_from_core(arm11, 0xEE000E15, &r0, 1);
 
-	if (address + size * count != r0)
-	{
-		LOG_ERROR("Data transfer failed. (%d)", (r0 - address) - size * count);
+		if (address + size * count != r0)
+		{
+			LOG_ERROR("Data transfer failed. (%d)", (r0 - address) - size * count);
 
-		if (arm11_config_memwrite_burst)
-		LOG_ERROR("use 'arm11 memwrite burst disable' to disable fast burst mode");
+			if (arm11_config_memwrite_burst)
+				LOG_ERROR("use 'arm11 memwrite burst disable' to disable fast burst mode");
 
-		if (arm11_config_memwrite_error_fatal)
-			return ERROR_FAIL;
+			if (arm11_config_memwrite_error_fatal)
+				return ERROR_FAIL;
+		}
 	}
-	}
 #endif
 
 	arm11_run_instr_data_finish(arm11);
@@ -1270,8 +1300,8 @@
 
 	if (target->state != TARGET_HALTED)
 	{
-	LOG_WARNING("target was not halted");
-	return ERROR_TARGET_NOT_HALTED;
+		LOG_WARNING("target was not halted");
+		return ERROR_TARGET_NOT_HALTED;
 	}
 
 	return arm11_write_memory(target, address, 4, count, buffer);
@@ -1296,21 +1326,21 @@
 #if 0
 	if (breakpoint->type == BKPT_SOFT)
 	{
-	LOG_INFO("sw breakpoint requested, but software breakpoints not enabled");
-	return ERROR_TARGET_RESOURCE_NOT_AVAILABLE;
+		LOG_INFO("sw breakpoint requested, but software breakpoints not enabled");
+		return ERROR_TARGET_RESOURCE_NOT_AVAILABLE;
 	}
 #endif
 
 	if (!arm11->free_brps)
 	{
-	LOG_INFO("no breakpoint unit available for hardware breakpoint");
-	return ERROR_TARGET_RESOURCE_NOT_AVAILABLE;
+		LOG_INFO("no breakpoint unit available for hardware breakpoint");
+		return ERROR_TARGET_RESOURCE_NOT_AVAILABLE;
 	}
 
 	if (breakpoint->length != 4)
 	{
-	LOG_INFO("only breakpoints of four bytes length supported");
-	return ERROR_TARGET_RESOURCE_NOT_AVAILABLE;
+		LOG_INFO("only breakpoints of four bytes length supported");
+		return ERROR_TARGET_RESOURCE_NOT_AVAILABLE;
 	}
 
 	arm11->free_brps--;
@@ -1552,7 +1582,6 @@
 {
 	/* Initialize anything we can set up without talking to the target */
 	return arm11_build_reg_cache(target);
-
 }
 
 /* talk to the target and set things up */
@@ -1565,7 +1594,7 @@
 
 	/* check IDCODE */
 
-	arm11_add_IR(arm11, ARM11_IDCODE, TAP_INVALID);
+	arm11_add_IR(arm11, ARM11_IDCODE, ARM11_TAP_DEFAULT);
 
 	scan_field_t		idcode_field;
 
@@ -1575,9 +1604,9 @@
 
 	/* check DIDR */
 
-	arm11_add_debug_SCAN_N(arm11, 0x00, TAP_INVALID);
+	arm11_add_debug_SCAN_N(arm11, 0x00, ARM11_TAP_DEFAULT);
 
-	arm11_add_IR(arm11, ARM11_INTEST, TAP_INVALID);
+	arm11_add_IR(arm11, ARM11_INTEST, ARM11_TAP_DEFAULT);
 
 	scan_field_t		chain0_fields[2];
 
@@ -1605,13 +1634,12 @@
 	arm11->debug_version = (arm11->didr >> 16) & 0x0F;
 
 	if (arm11->debug_version != ARM11_DEBUG_V6 &&
-	arm11->debug_version != ARM11_DEBUG_V61)
+		arm11->debug_version != ARM11_DEBUG_V61)
 	{
-	LOG_ERROR("Only ARMv6 v6 and v6.1 architectures supported.");
-	return ERROR_FAIL;
+		LOG_ERROR("Only ARMv6 v6 and v6.1 architectures supported.");
+		return ERROR_FAIL;
 	}
 
-
 	arm11->brp	= ((arm11->didr >> 24) & 0x0F) + 1;
 	arm11->wrp	= ((arm11->didr >> 28) & 0x0F) + 1;
 
@@ -1620,9 +1648,9 @@
 	arm11->free_wrps = arm11->wrp;
 
 	LOG_DEBUG("IDCODE %08x IMPLEMENTOR %02x DIDR %08x",
-	arm11->device_id,
-	arm11->implementor,
-	arm11->didr);
+		arm11->device_id,
+		arm11->implementor,
+		arm11->didr);
 
 	/* as a side-effect this reads DSCR and thus
 	 * clears the ARM11_DSCR_STICKY_PRECISE_DATA_ABORT / Sticky Precise Data Abort Flag
@@ -1652,8 +1680,8 @@
 
 	if (target->state != TARGET_HALTED)
 	{
-	LOG_WARNING("target was not halted");
-	return ERROR_TARGET_NOT_HALTED;
+		LOG_WARNING("target was not halted");
+		return ERROR_TARGET_NOT_HALTED;
 	}
 
 	/** \todo TODO: Check this. We assume that all registers are fetched at debug entry. */
@@ -1686,8 +1714,8 @@
 {
 	arm11_common_t *arm11 = target->arch_info;
 
-	NEW(reg_cache_t,		cache,			1);
-	NEW(reg_t,			reg_list,		ARM11_REGCACHE_COUNT);
+	NEW(reg_cache_t,		cache,				1);
+	NEW(reg_t,				reg_list,			ARM11_REGCACHE_COUNT);
 	NEW(arm11_reg_state_t,	arm11_reg_states,	ARM11_REGCACHE_COUNT);
 
 	if (arm11_regs_arch_type == -1)
@@ -1714,32 +1742,33 @@
 
 	/* Not very elegant assertion */
 	if (ARM11_REGCACHE_COUNT != asizeof(arm11->reg_values) ||
-	ARM11_REGCACHE_COUNT != asizeof(arm11_reg_defs) ||
-	ARM11_REGCACHE_COUNT != ARM11_RC_MAX)
+		ARM11_REGCACHE_COUNT != asizeof(arm11_reg_defs) ||
+		ARM11_REGCACHE_COUNT != ARM11_RC_MAX)
 	{
-	LOG_ERROR("BUG: arm11->reg_values inconsistent (%d " ZU " " ZU " %d)", ARM11_REGCACHE_COUNT, asizeof(arm11->reg_values), asizeof(arm11_reg_defs), ARM11_RC_MAX);
-	exit(-1);
+		LOG_ERROR("BUG: arm11->reg_values inconsistent (%d " ZU " " ZU " %d)", ARM11_REGCACHE_COUNT, asizeof(arm11->reg_values), asizeof(arm11_reg_defs), ARM11_RC_MAX);
+		exit(-1);
 	}
 
 	for (i = 0; i < ARM11_REGCACHE_COUNT; i++)
 	{
-	reg_t *				r	= reg_list		+ i;
-	const arm11_reg_defs_t *	rd	= arm11_reg_defs	+ i;
-	arm11_reg_state_t *		rs	= arm11_reg_states	+ i;
+		reg_t *						r	= reg_list			+ i;
+		const arm11_reg_defs_t *	rd	= arm11_reg_defs	+ i;
+		arm11_reg_state_t *			rs	= arm11_reg_states	+ i;
 
-	r->name			= rd->name;
-	r->size			= 32;
-	r->value		= (u8 *)(arm11->reg_values + i);
-	r->dirty		= 0;
-	r->valid		= 0;
-	r->bitfield_desc	= NULL;
-	r->num_bitfields	= 0;
-	r->arch_type		= arm11_regs_arch_type;
-	r->arch_info		= rs;
+		r->name				= rd->name;
+		r->size				= 32;
+		r->value			= (u8 *)(arm11->reg_values + i);
+		r->dirty			= 0;
+		r->valid			= 0;
+		r->bitfield_desc	= NULL;
+		r->num_bitfields	= 0;
+		r->arch_type		= arm11_regs_arch_type;
+		r->arch_info		= rs;
 
-	rs->def_index		= i;
-	rs->target		= target;
+		rs->def_index		= i;
+		rs->target			= target;
 	}
+
 	return ERROR_OK;
 }
 
@@ -1747,12 +1776,12 @@
 {
 	if (argc == 0)
 	{
-	LOG_INFO("%s is %s.", name, *var ? "enabled" : "disabled");
-	return ERROR_OK;
+		LOG_INFO("%s is %s.", name, *var ? "enabled" : "disabled");
+		return ERROR_OK;
 	}
 
 	if (argc != 1)
-	return ERROR_COMMAND_SYNTAX_ERROR;
+		return ERROR_COMMAND_SYNTAX_ERROR;
 
 	switch (args[0][0])
 	{
@@ -1761,16 +1790,16 @@
 	case 'F':
 	case 'd':	/* disable */
 	case 'D':
-	*var = false;
-	break;
+		*var = false;
+		break;
 
 	case '1':	/* 1 */
 	case 't':	/* true */
 	case 'T':
 	case 'e':	/* enable */
 	case 'E':
-	*var = true;
-	break;
+		*var = true;
+		break;
 	}
 
 	LOG_INFO("%s %s.", *var ? "Enabled" : "Disabled", name);
@@ -1797,18 +1826,20 @@
 #define RC_FINAL_BOOL(name, descr, var)  \
 	register_command(cmd_ctx, top_cmd, name, arm11_handle_bool_##var, COMMAND_ANY, descr);
 
-BOOL_WRAPPER(memwrite_burst,		"memory write burst mode")
-BOOL_WRAPPER(memwrite_error_fatal,	"fatal error mode for memory writes")
+BOOL_WRAPPER(memwrite_burst,			"memory write burst mode")
+BOOL_WRAPPER(memwrite_error_fatal,		"fatal error mode for memory writes")
+BOOL_WRAPPER(memrw_no_increment,		"\"no increment\" mode for memory transfers")
+BOOL_WRAPPER(step_irq_enable,			"IRQs while stepping")
 
 int arm11_handle_vcr(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc == 1)
 	{
-	arm11_vcr = strtoul(args[0], NULL, 0);
+		arm11_vcr = strtoul(args[0], NULL, 0);
 	}
 	else if (argc != 0)
 	{
-	return ERROR_COMMAND_SYNTAX_ERROR;
+		return ERROR_COMMAND_SYNTAX_ERROR;
 	}
 
 	LOG_INFO("VCR 0x%08X", arm11_vcr);
@@ -1817,11 +1848,11 @@
 
 const u32 arm11_coproc_instruction_limits[] =
 {
-	15,			/* coprocessor */
-	7,			/* opcode 1 */
-	15,			/* CRn */
-	15,			/* CRm */
-	7,			/* opcode 2 */
+	15,				/* coprocessor */
+	7,				/* opcode 1 */
+	15,				/* CRn */
+	15,				/* CRm */
+	7,				/* opcode 2 */
 	0xFFFFFFFF,		/* value */
 };
 
@@ -1830,22 +1861,24 @@
 
 arm11_common_t * arm11_find_target(const char * arg)
 {
-	jtag_tap_t *tap;
-	target_t * t;
+	jtag_tap_t *	tap;
+	target_t *		t;
 
-	tap = jtag_TapByString( arg );
-	if( !tap ){
-		return NULL;
+	tap = jtag_TapByString(arg);
+
+	if (!tap)
+		return 0;
+
+	for (t = all_targets; t; t = t->next)
+	{
+		if (t->tap != tap)
+			continue;
+
+		/* if (t->type == arm11_target) */
+		if (0 == strcmp(t->type->name, "arm11"))
+			return t->arch_info;
 	}
 
-	for (t = all_targets; t; t = t->next){
-		if( t->tap == tap ){
-			if( 0 == strcmp(t->type->name,"arm11")){
-				arm11_common_t * arm11 = t->arch_info;
-				return arm11;
-			}
-		}
-	}
 	return 0;
 }
 
@@ -1853,25 +1886,24 @@
 {
 	if (argc != (read ? 6 : 7))
 	{
-	LOG_ERROR("Invalid number of arguments. %s", read ? arm11_mrc_syntax : arm11_mcr_syntax);
-	return -1;
+		LOG_ERROR("Invalid number of arguments. %s", read ? arm11_mrc_syntax : arm11_mcr_syntax);
+		return -1;
 	}
 
 	arm11_common_t * arm11 = arm11_find_target(args[0]);
 
 	if (!arm11)
 	{
-	LOG_ERROR("Parameter 1 is not a the JTAG chain position of an ARM11 device. %s",
-		read ? arm11_mrc_syntax : arm11_mcr_syntax);
+		LOG_ERROR("Parameter 1 is not a the JTAG chain position of an ARM11 device. %s",
+			read ? arm11_mrc_syntax : arm11_mcr_syntax);
 
-	return -1;
-
+		return -1;
 	}
 
 	if (arm11->target->state != TARGET_HALTED)
 	{
-	LOG_WARNING("target was not halted");
-	return ERROR_TARGET_NOT_HALTED;
+		LOG_WARNING("target was not halted");
+		return ERROR_TARGET_NOT_HALTED;
 	}
 
 	u32	values[6];
@@ -1879,45 +1911,45 @@
 	{size_t i;
 	for (i = 0; i < (read ? 5 : 6); i++)
 	{
-	values[i] = strtoul(args[i + 1], NULL, 0);
+		values[i] = strtoul(args[i + 1], NULL, 0);
 
-	if (values[i] > arm11_coproc_instruction_limits[i])
-	{
-		LOG_ERROR("Parameter %ld out of bounds (%d max). %s",
-			  (long)(i + 2), arm11_coproc_instruction_limits[i],
-		read ? arm11_mrc_syntax : arm11_mcr_syntax);
-		return -1;
-	}
+		if (values[i] > arm11_coproc_instruction_limits[i])
+		{
+			LOG_ERROR("Parameter %ld out of bounds (%d max). %s",
+				(long)(i + 2), arm11_coproc_instruction_limits[i],
+				read ? arm11_mrc_syntax : arm11_mcr_syntax);
+			return -1;
+		}
 	}}
 
 	u32 instr = 0xEE000010	|
-	(values[0] <<  8) |
-	(values[1] << 21) |
-	(values[2] << 16) |
-	(values[3] <<  0) |
-	(values[4] <<  5);
+		(values[0] <<  8) |
+		(values[1] << 21) |
+		(values[2] << 16) |
+		(values[3] <<  0) |
+		(values[4] <<  5);
 
 	if (read)
-	instr |= 0x00100000;
+		instr |= 0x00100000;
 
 	arm11_run_instr_data_prepare(arm11);
 
 	if (read)
 	{
-	u32 result;
-	arm11_run_instr_data_from_core_via_r0(arm11, instr, &result);
+		u32 result;
+		arm11_run_instr_data_from_core_via_r0(arm11, instr, &result);
 
-	LOG_INFO("MRC p%d, %d, R0, c%d, c%d, %d = 0x%08x (%d)",
-		values[0], values[1], values[2], values[3], values[4], result, result);
+		LOG_INFO("MRC p%d, %d, R0, c%d, c%d, %d = 0x%08x (%d)",
+			values[0], values[1], values[2], values[3], values[4], result, result);
 	}
 	else
 	{
-	arm11_run_instr_data_to_core_via_r0(arm11, instr, values[5]);
+		arm11_run_instr_data_to_core_via_r0(arm11, instr, values[5]);
 
-	LOG_INFO("MRC p%d, %d, R0 (#0x%08x), c%d, c%d, %d",
-		values[0], values[1],
-		values[5],
-		values[2], values[3], values[4]);
+		LOG_INFO("MRC p%d, %d, R0 (#0x%08x), c%d, c%d, %d",
+			values[0], values[1],
+			values[5],
+			values[2], values[3], values[4]);
 	}
 
 	arm11_run_instr_data_finish(arm11);
@@ -1942,25 +1974,30 @@
 
 	command_t * top_cmd = NULL;
 
-	RC_TOP(			"arm11",	"arm11 specific commands",
+	RC_TOP(				"arm11",				"arm11 specific commands",
 
-	RC_TOP(			"memwrite",	"Control memory write transfer mode",
+	RC_TOP(				"memwrite",				"Control memory write transfer mode",
 
-		RC_FINAL_BOOL(	"burst",	"Enable/Disable non-standard but fast burst mode (default: enabled)",
+		RC_FINAL_BOOL(	"burst",				"Enable/Disable non-standard but fast burst mode (default: enabled)",
 						memwrite_burst)
 
-		RC_FINAL_BOOL(	"error_fatal",
-						"Terminate program if transfer error was found (default: enabled)",
+		RC_FINAL_BOOL(	"error_fatal",			"Terminate program if transfer error was found (default: enabled)",
 						memwrite_error_fatal)
 	)
 
-	RC_FINAL(		"vcr",		"Control (Interrupt) Vector Catch Register",
+	RC_FINAL_BOOL(		"no_increment",			"Don't increment address on multi-read/-write (default: disabled)",
+						memrw_no_increment)
+						
+	RC_FINAL_BOOL(		"step_irq_enable",		"Enable interrupts while stepping (default: disabled)",
+						step_irq_enable)
+
+	RC_FINAL(			"vcr",					"Control (Interrupt) Vector Catch Register",
 						arm11_handle_vcr)
 
-	RC_FINAL(		"mrc",		"Read Coprocessor register",
+	RC_FINAL(			"mrc",					"Read Coprocessor register",
 						arm11_handle_mrc)
 
-	RC_FINAL(		"mcr",		"Write Coprocessor register",
+	RC_FINAL(			"mcr",					"Write Coprocessor register",
 						arm11_handle_mcr)
 	)
 

Modified: trunk/src/target/arm11.h
===================================================================
--- trunk/src/target/arm11.h	2009-04-22 17:36:00 UTC (rev 1511)
+++ trunk/src/target/arm11.h	2009-04-22 18:39:59 UTC (rev 1512)
@@ -45,9 +45,12 @@
 #define ARM11_REGCACHE_FREGS		0
 
 #define ARM11_REGCACHE_COUNT		(20 +					\
-					 23 * ARM11_REGCACHE_MODEREGS +		\
+					 23 * ARM11_REGCACHE_MODEREGS +			\
 					  9 * ARM11_REGCACHE_FREGS)
 
+#define ARM11_TAP_DEFAULT			TAP_INVALID
+
+
 typedef struct arm11_register_history_s
 {
 	u32		value;
@@ -56,17 +59,17 @@
 
 enum arm11_debug_version
 {
-	ARM11_DEBUG_V6	= 0x01,
-	ARM11_DEBUG_V61	= 0x02,
-	ARM11_DEBUG_V7	= 0x03,
-	ARM11_DEBUG_V7_CP14	= 0x04,
+	ARM11_DEBUG_V6			= 0x01,
+	ARM11_DEBUG_V61			= 0x02,
+	ARM11_DEBUG_V7			= 0x03,
+	ARM11_DEBUG_V7_CP14		= 0x04,
 };
 
 typedef struct arm11_common_s
 {
-	target_t *	target;
+	target_t *	target;		/**< Reference back to the owner */
 
-	arm_jtag_t	jtag_info;
+	arm_jtag_t	jtag_info;	/**< Handler to access assigned JTAG device */
 
 	/** \name Processor type detection */
 	/*@{*/
@@ -83,11 +86,13 @@
 	/*@}*/
 
 	u32		last_dscr;		/**< Last retrieved DSCR value;
-							 * Can be used to detect changes		*/
+							     Use only for debug message generation		*/
 
 	bool	trst_active;
-	bool	halt_requested;
-	bool	simulate_reset_on_next_halt;
+	bool	halt_requested;					/**< Keep track if arm11_halt() calls occured
+												 during reset. Otherwise do it ASAP. */
+												 
+	bool	simulate_reset_on_next_halt;	/**< Perform cleanups of the ARM state on next halt */
 
 	/** \name Shadow registers to save processor state */
 	/*@{*/
@@ -127,23 +132,24 @@
 
 enum arm11_dscr
 {
-	ARM11_DSCR_CORE_HALTED				= 1 << 0,
-	ARM11_DSCR_CORE_RESTARTED				= 1 << 1,
+	ARM11_DSCR_CORE_HALTED									= 1 << 0,
+	ARM11_DSCR_CORE_RESTARTED								= 1 << 1,
 
-	ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_MASK		= 0x0F << 2,
-	ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_HALT		= 0x00 << 2,
-	ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_BREAKPOINT		= 0x01 << 2,
-	ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_WATCHPOINT		= 0x02 << 2,
-	ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_BKPT_INSTRUCTION	= 0x03 << 2,
-	ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_EDBGRQ		= 0x04 << 2,
-	ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_VECTOR_CATCH	= 0x05 << 2,
+	ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_MASK					= 0x0F << 2,
+	ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_HALT					= 0x00 << 2,
+	ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_BREAKPOINT				= 0x01 << 2,
+	ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_WATCHPOINT				= 0x02 << 2,
+	ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_BKPT_INSTRUCTION		= 0x03 << 2,
+	ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_EDBGRQ					= 0x04 << 2,
+	ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_VECTOR_CATCH			= 0x05 << 2,
 
-	ARM11_DSCR_STICKY_PRECISE_DATA_ABORT		= 1 << 6,
-	ARM11_DSCR_STICKY_IMPRECISE_DATA_ABORT		= 1 << 7,
-	ARM11_DSCR_EXECUTE_ARM_INSTRUCTION_ENABLE		= 1 << 13,
-	ARM11_DSCR_MODE_SELECT				= 1 << 14,
-	ARM11_DSCR_WDTR_FULL				= 1 << 29,
-	ARM11_DSCR_RDTR_FULL				= 1 << 30,
+	ARM11_DSCR_STICKY_PRECISE_DATA_ABORT					= 1 << 6,
+	ARM11_DSCR_STICKY_IMPRECISE_DATA_ABORT					= 1 << 7,
+	ARM11_DSCR_INTERRUPTS_DISABLE							= 1 << 11,
+	ARM11_DSCR_EXECUTE_ARM_INSTRUCTION_ENABLE				= 1 << 13,
+	ARM11_DSCR_MODE_SELECT									= 1 << 14,
+	ARM11_DSCR_WDTR_FULL									= 1 << 29,
+	ARM11_DSCR_RDTR_FULL									= 1 << 30,
 };
 
 enum arm11_cpsr
@@ -229,23 +235,23 @@
 
 /* internals */
 
-void arm11_setup_field		(arm11_common_t * arm11, int num_bits, void * in_data, void * out_data, scan_field_t * field);
-void arm11_add_IR		(arm11_common_t * arm11, u8 instr, tap_state_t state);
-void arm11_add_debug_SCAN_N	(arm11_common_t * arm11, u8 chain, tap_state_t state);
-void arm11_add_debug_INST	(arm11_common_t * arm11, u32 inst, u8 * flag, tap_state_t state);
-u32  arm11_read_DSCR		(arm11_common_t * arm11);
-void arm11_write_DSCR		(arm11_common_t * arm11, u32 dscr);
+void arm11_setup_field			(arm11_common_t * arm11, int num_bits, void * in_data, void * out_data, scan_field_t * field);
+void arm11_add_IR				(arm11_common_t * arm11, u8 instr, tap_state_t state);
+void arm11_add_debug_SCAN_N		(arm11_common_t * arm11, u8 chain, tap_state_t state);
+void arm11_add_debug_INST		(arm11_common_t * arm11, u32 inst, u8 * flag, tap_state_t state);
+u32  arm11_read_DSCR			(arm11_common_t * arm11);
+void arm11_write_DSCR			(arm11_common_t * arm11, u32 dscr);
 
 enum target_debug_reason arm11_get_DSCR_debug_reason(u32 dscr);
 
-void arm11_run_instr_data_prepare		(arm11_common_t * arm11);
-void arm11_run_instr_data_finish		(arm11_common_t * arm11);
-void arm11_run_instr_no_data			(arm11_common_t * arm11, u32 * opcode, size_t count);
-void arm11_run_instr_no_data1			(arm11_common_t * arm11, u32 opcode);
-void arm11_run_instr_data_to_core		(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count);
+void arm11_run_instr_data_prepare			(arm11_common_t * arm11);
+void arm11_run_instr_data_finish			(arm11_common_t * arm11);
+void arm11_run_instr_no_data				(arm11_common_t * arm11, u32 * opcode, size_t count);
+void arm11_run_instr_no_data1				(arm11_common_t * arm11, u32 opcode);
+void arm11_run_instr_data_to_core			(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count);
 void arm11_run_instr_data_to_core_noack		(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count);
-void arm11_run_instr_data_to_core1		(arm11_common_t * arm11, u32 opcode, u32 data);
-void arm11_run_instr_data_from_core		(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count);
+void arm11_run_instr_data_to_core1			(arm11_common_t * arm11, u32 opcode, u32 data);
+void arm11_run_instr_data_from_core			(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count);
 void arm11_run_instr_data_from_core_via_r0	(arm11_common_t * arm11, u32 opcode, u32 * data);
 void arm11_run_instr_data_to_core_via_r0	(arm11_common_t * arm11, u32 opcode, u32 data);
 
@@ -259,10 +265,10 @@
 typedef struct arm11_sc7_action_s
 {
 	bool	write;				/**< Access mode: true for write, false for read.	*/
-	u8		address;				/**< Register address mode. Use enum #arm11_sc7		*/
+	u8		address;			/**< Register address mode. Use enum #arm11_sc7		*/
 	u32		value;				/**< If write then set this to value to be written.
-								In read mode this receives the read value when the
-								function returns.					*/
+									 In read mode this receives the read value when the
+									 function returns.					*/
 } arm11_sc7_action_t;
 
 void arm11_sc7_run(arm11_common_t * arm11, arm11_sc7_action_t * actions, size_t count);

Modified: trunk/src/target/arm11_dbgtap.c
===================================================================
--- trunk/src/target/arm11_dbgtap.c	2009-04-22 17:36:00 UTC (rev 1511)
+++ trunk/src/target/arm11_dbgtap.c	2009-04-22 18:39:59 UTC (rev 1512)
@@ -44,83 +44,79 @@
 
 int arm11_add_ir_scan_vc(int num_fields, scan_field_t *fields, tap_state_t state)
 {
-    if (cmd_queue_cur_state == TAP_IRPAUSE)
-	jtag_add_pathmove(asizeof(arm11_move_pi_to_si_via_ci), arm11_move_pi_to_si_via_ci);
+	if (cmd_queue_cur_state == TAP_IRPAUSE)
+		jtag_add_pathmove(asizeof(arm11_move_pi_to_si_via_ci), arm11_move_pi_to_si_via_ci);
 
-    jtag_add_ir_scan(num_fields, fields, state);
-    return ERROR_OK;
+	jtag_add_ir_scan(num_fields, fields, state);
+	return ERROR_OK;
 }
 
 tap_state_t arm11_move_pd_to_sd_via_cd[] =
 {
-    TAP_DREXIT2, TAP_DRUPDATE, TAP_DRSELECT, TAP_DRCAPTURE, TAP_DRSHIFT
+	TAP_DREXIT2, TAP_DRUPDATE, TAP_DRSELECT, TAP_DRCAPTURE, TAP_DRSHIFT
 };
 
 int arm11_add_dr_scan_vc(int num_fields, scan_field_t *fields, tap_state_t state)
 {
-    if (cmd_queue_cur_state == TAP_DRPAUSE)
-	jtag_add_pathmove(asizeof(arm11_move_pd_to_sd_via_cd), arm11_move_pd_to_sd_via_cd);
+	if (cmd_queue_cur_state == TAP_DRPAUSE)
+		jtag_add_pathmove(asizeof(arm11_move_pd_to_sd_via_cd), arm11_move_pd_to_sd_via_cd);
 
-    jtag_add_dr_scan(num_fields, fields, state);
-    return ERROR_OK;
+	jtag_add_dr_scan(num_fields, fields, state);
+	return ERROR_OK;
 }
 
 
 /** Code de-clutter: Construct scan_field_t to write out a value
  *
- * \param arm11		Target state variable.
- * \param num_bits	Length of the data field
- * \param out_data	pointer to the data that will be sent out
- *			<em>(data is read when it is added to the JTAG queue)</em>
- * \param in_data	pointer to the memory that will receive data that was clocked in
- *			<em>(data is written when the JTAG queue is executed)</em>
- * \param field target data structure that will be initialized
+ * \param arm11			Target state variable.
+ * \param num_bits		Length of the data field
+ * \param out_data		pointer to the data that will be sent out
+ *						<em>(data is read when it is added to the JTAG queue)</em>
+ * \param in_data		pointer to the memory that will receive data that was clocked in
+ *						<em>(data is written when the JTAG queue is executed)</em>
+ * \param field			target data structure that will be initialized
  */
 void arm11_setup_field(arm11_common_t * arm11, int num_bits, void * out_data, void * in_data, scan_field_t * field)
 {
-    field->tap   		= arm11->jtag_info.tap;
-    field->num_bits		= num_bits;
-    field->out_mask		= NULL;
-    field->in_check_mask	= NULL;
-    field->in_check_value	= NULL;
-    field->in_handler		= NULL;
-    field->in_handler_priv	= NULL;
+	field->tap   			= arm11->jtag_info.tap;
+	field->num_bits			= num_bits;
+	field->out_mask			= NULL;
+	field->in_check_mask	= NULL;
+	field->in_check_value	= NULL;
+	field->in_handler		= NULL;
+	field->in_handler_priv	= NULL;
 
-    field->out_value		= out_data;
-    field->in_value		= in_data;
+	field->out_value		= out_data;
+	field->in_value			= in_data;
 }
 
 
 /** Write JTAG instruction register
  *
- * \param arm11 Target state variable.
- * \param instr An ARM11 DBGTAP instruction. Use enum #arm11_instructions.
- * \param state Pass the final TAP state or TAP_INVALID for the default value (Pause-IR).
+ * \param arm11		Target state variable.
+ * \param instr		An ARM11 DBGTAP instruction. Use enum #arm11_instructions.
+ * \param state		Pass the final TAP state or ARM11_TAP_DEFAULT for the default value (Pause-IR).
  *
- * \remarks This adds to the JTAG command queue but does \em not execute it.
+ * \remarks			This adds to the JTAG command queue but does \em not execute it.
  */
 void arm11_add_IR(arm11_common_t * arm11, u8 instr, tap_state_t state)
 {
 	jtag_tap_t *tap;
 	tap = arm11->jtag_info.tap;
-	if(  tap == NULL ){
-	/* FIX!!!! error is logged, but not propagated back up the call stack... */
-		LOG_ERROR( "tap is null here! This is bad!");
-		return;
-    }
 
-    if (buf_get_u32(tap->cur_instr, 0, 5) == instr){
+	if (buf_get_u32(tap->cur_instr, 0, 5) == instr)
+	{
 		JTAG_DEBUG("IR <= 0x%02x SKIPPED", instr);
 		return;
-    }
+	}
 
-    JTAG_DEBUG("IR <= 0x%02x", instr);
+	JTAG_DEBUG("IR <= 0x%02x", instr);
 
-    scan_field_t field;
+	scan_field_t field;
 
-    arm11_setup_field(arm11, 5, &instr, NULL, &field);
+	arm11_setup_field(arm11, 5, &instr, NULL, &field);
 
-    arm11_add_ir_scan_vc(1, &field, state == TAP_INVALID ? TAP_IRPAUSE : state);
+	arm11_add_ir_scan_vc(1, &field, state == ARM11_TAP_DEFAULT ? TAP_IRPAUSE : state);
 }
 
 /** Verify shifted out data from Scan Chain Register (SCREG)
@@ -130,17 +126,17 @@
  */
 static int arm11_in_handler_SCAN_N(u8 *in_value, void *priv, struct scan_field_s *field)
 {
-    /** \todo TODO: clarify why this isnt properly masked in jtag.c jtag_read_buffer() */
-    u8 v = *in_value & 0x1F;
+	/** \todo TODO: clarify why this isnt properly masked in jtag.c jtag_read_buffer() */
+	u8 v = *in_value & 0x1F;
 
-    if (v != 0x10)
-    {
-	LOG_ERROR("'arm11 target' JTAG communication error SCREG SCAN OUT 0x%02x (expected 0x10)", v);
-	return ERROR_FAIL;
-    }
+	if (v != 0x10)
+	{
+		LOG_ERROR("'arm11 target' JTAG communication error SCREG SCAN OUT 0x%02x (expected 0x10)", v);
+		return ERROR_FAIL;
+	}
 
-    JTAG_DEBUG("SCREG SCAN OUT 0x%02x", v);
-    return ERROR_OK;
+	JTAG_DEBUG("SCREG SCAN OUT 0x%02x", v);
+	return ERROR_OK;
 }
 
 /** Select and write to Scan Chain Register (SCREG)
@@ -152,165 +148,165 @@
  *
  * \param arm11	    Target state variable.
  * \param chain	    Scan chain that will be selected.
- * \param state	    Pass the final TAP state or TAP_INVALID for the default
- *		    value (Pause-DR).
+ * \param state	    Pass the final TAP state or ARM11_TAP_DEFAULT for the default
+ *					value (Pause-DR).
  *
  * The chain takes effect when Update-DR is passed (usually when subsequently
  * the INTEXT/EXTEST instructions are written).
  *
- * \warning (Obsolete) Using this twice in a row will \em fail. The first call will end
- *          in Pause-DR. The second call, due to the IR caching, will not
- *	    go through Capture-DR when shifting in the new scan chain number.
- *	    As a result the verification in arm11_in_handler_SCAN_N() must
- *	    fail.
+ * \warning			(Obsolete) Using this twice in a row will \em fail. The first
+ *					call will end in Pause-DR. The second call, due to the IR
+ *					caching, will not go through Capture-DR when shifting in the
+ *					new scan chain number. As a result the verification in
+ *					arm11_in_handler_SCAN_N() must fail.
  *
- * \remarks This adds to the JTAG command queue but does \em not execute it.
+ * \remarks			This adds to the JTAG command queue but does \em not execute it.
  */
 
 void arm11_add_debug_SCAN_N(arm11_common_t * arm11, u8 chain, tap_state_t state)
 {
-    JTAG_DEBUG("SCREG <= 0x%02x", chain);
+	JTAG_DEBUG("SCREG <= 0x%02x", chain);
 
-    arm11_add_IR(arm11, ARM11_SCAN_N, TAP_INVALID);
+	arm11_add_IR(arm11, ARM11_SCAN_N, ARM11_TAP_DEFAULT);
 
-    scan_field_t		field;
+	scan_field_t		field;
 
-    arm11_setup_field(arm11, 5, &chain, NULL, &field);
+	arm11_setup_field(arm11, 5, &chain, NULL, &field);
 
-    field.in_handler = arm11_in_handler_SCAN_N;
+	field.in_handler = arm11_in_handler_SCAN_N;
 
-    arm11_add_dr_scan_vc(1, &field, state == TAP_INVALID ? TAP_DRPAUSE : state);
+	arm11_add_dr_scan_vc(1, &field, state == ARM11_TAP_DEFAULT ? TAP_DRPAUSE : state);
 }
 
 /** Write an instruction into the ITR register
  *
- * \param arm11	Target state variable.
- * \param inst	An ARM11 processor instruction/opcode.
- * \param flag	Optional parameter to retrieve the InstCompl flag
- *		(this will be written when the JTAG chain is executed).
- * \param state	Pass the final TAP state or TAP_INVALID for the default
- *		value (Run-Test/Idle).
+ * \param arm11		Target state variable.
+ * \param inst		An ARM11 processor instruction/opcode.
+ * \param flag		Optional parameter to retrieve the InstCompl flag
+ *					(this will be written when the JTAG chain is executed).
+ * \param state		Pass the final TAP state or ARM11_TAP_DEFAULT for the default
+ *					value (Run-Test/Idle).
  *
- * \remarks By default this ends with Run-Test/Idle state
- * and causes the instruction to be executed. If
- * a subsequent write to DTR is needed before
- * executing the instruction then TAP_DRPAUSE should be
- * passed to \p state.
+ * \remarks			By default this ends with Run-Test/Idle state
+ *					and causes the instruction to be executed. If
+ *					a subsequent write to DTR is needed before
+ *					executing the instruction then TAP_DRPAUSE should be
+ *					passed to \p state.
  *
- * \remarks This adds to the JTAG command queue but does \em not execute it.
+ * \remarks			This adds to the JTAG command queue but does \em not execute it.
  */
 void arm11_add_debug_INST(arm11_common_t * arm11, u32 inst, u8 * flag, tap_state_t state)
 {
-    JTAG_DEBUG("INST <= 0x%08x", inst);
+	JTAG_DEBUG("INST <= 0x%08x", inst);
 
-    scan_field_t		itr[2];
+	scan_field_t		itr[2];
 
-    arm11_setup_field(arm11, 32,    &inst,	NULL, itr + 0);
-    arm11_setup_field(arm11, 1,	    NULL,	flag, itr + 1);
+	arm11_setup_field(arm11, 32,    &inst,	NULL, itr + 0);
+	arm11_setup_field(arm11, 1,	    NULL,	flag, itr + 1);
 
-    arm11_add_dr_scan_vc(asizeof(itr), itr, state == TAP_INVALID ? TAP_IDLE : state);
+	arm11_add_dr_scan_vc(asizeof(itr), itr, state == ARM11_TAP_DEFAULT ? TAP_IDLE : state);
 }
 
 /** Read the Debug Status and Control Register (DSCR)
  *
  * same as CP14 c1
  *
- * \param arm11 Target state variable.
- * \return DSCR content
+ * \param arm11		Target state variable.
+ * \return			DSCR content
  *
- * \remarks This is a stand-alone function that executes the JTAG command queue.
+ * \remarks			This is a stand-alone function that executes the JTAG command queue.
  */
 u32 arm11_read_DSCR(arm11_common_t * arm11)
 {
-    arm11_add_debug_SCAN_N(arm11, 0x01, TAP_INVALID);
+	arm11_add_debug_SCAN_N(arm11, 0x01, ARM11_TAP_DEFAULT);
 
-    arm11_add_IR(arm11, ARM11_INTEST, TAP_INVALID);
+	arm11_add_IR(arm11, ARM11_INTEST, ARM11_TAP_DEFAULT);
 
-    u32			dscr;
-    scan_field_t	chain1_field;
+	u32				dscr;
+	scan_field_t	chain1_field;
 
-    arm11_setup_field(arm11, 32, NULL, &dscr, &chain1_field);
+	arm11_setup_field(arm11, 32, NULL, &dscr, &chain1_field);
 
-    arm11_add_dr_scan_vc(1, &chain1_field, TAP_DRPAUSE);
+	arm11_add_dr_scan_vc(1, &chain1_field, TAP_DRPAUSE);
 
-    jtag_execute_queue();
+	jtag_execute_queue();
 
-    if (arm11->last_dscr != dscr)
-	JTAG_DEBUG("DSCR  = %08x (OLD %08x)", dscr, arm11->last_dscr);
+	if (arm11->last_dscr != dscr)
+		JTAG_DEBUG("DSCR  = %08x (OLD %08x)", dscr, arm11->last_dscr);
 
-    arm11->last_dscr = dscr;
+	arm11->last_dscr = dscr;
 
-    return dscr;
+	return dscr;
 }
 
 /** Write the Debug Status and Control Register (DSCR)
  *
  * same as CP14 c1
  *
- * \param arm11 Target state variable.
- * \param dscr DSCR content
+ * \param arm11		Target state variable.
+ * \param dscr		DSCR content
  *
- * \remarks This is a stand-alone function that executes the JTAG command queue.
+ * \remarks			This is a stand-alone function that executes the JTAG command queue.
  */
 void arm11_write_DSCR(arm11_common_t * arm11, u32 dscr)
 {
-    arm11_add_debug_SCAN_N(arm11, 0x01, TAP_INVALID);
+	arm11_add_debug_SCAN_N(arm11, 0x01, ARM11_TAP_DEFAULT);
 
-    arm11_add_IR(arm11, ARM11_EXTEST, TAP_INVALID);
+	arm11_add_IR(arm11, ARM11_EXTEST, ARM11_TAP_DEFAULT);
 
-    scan_field_t		    chain1_field;
+	scan_field_t		    chain1_field;
 
-    arm11_setup_field(arm11, 32, &dscr, NULL, &chain1_field);
+	arm11_setup_field(arm11, 32, &dscr, NULL, &chain1_field);
 
-    arm11_add_dr_scan_vc(1, &chain1_field, TAP_DRPAUSE);
+	arm11_add_dr_scan_vc(1, &chain1_field, TAP_DRPAUSE);
 
-    jtag_execute_queue();
+	jtag_execute_queue();
 
-    JTAG_DEBUG("DSCR <= %08x (OLD %08x)", dscr, arm11->last_dscr);
+	JTAG_DEBUG("DSCR <= %08x (OLD %08x)", dscr, arm11->last_dscr);
 
-    arm11->last_dscr = dscr;
+	arm11->last_dscr = dscr;
 }
 
 
 
 /** Get the debug reason from Debug Status and Control Register (DSCR)
  *
- * \param dscr DSCR value to analyze
- * \return Debug reason
+ * \param dscr		DSCR value to analyze
+ * \return			Debug reason
  *
  */
 enum target_debug_reason arm11_get_DSCR_debug_reason(u32 dscr)
 {
-    switch (dscr & ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_MASK)
-    {
-    case ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_HALT:
-	LOG_INFO("Debug entry: JTAG HALT");
-	return DBG_REASON_DBGRQ;
+	switch (dscr & ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_MASK)
+	{
+	case ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_HALT:
+		LOG_INFO("Debug entry: JTAG HALT");
+		return DBG_REASON_DBGRQ;
 
-    case ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_BREAKPOINT:
-	LOG_INFO("Debug entry: breakpoint");
-	return DBG_REASON_BREAKPOINT;
+	case ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_BREAKPOINT:
+		LOG_INFO("Debug entry: breakpoint");
+		return DBG_REASON_BREAKPOINT;
 
-    case ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_WATCHPOINT:
-	LOG_INFO("Debug entry: watchpoint");
-	return DBG_REASON_WATCHPOINT;
+	case ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_WATCHPOINT:
+		LOG_INFO("Debug entry: watchpoint");
+		return DBG_REASON_WATCHPOINT;
 
-    case ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_BKPT_INSTRUCTION:
-	LOG_INFO("Debug entry: BKPT instruction");
-	return DBG_REASON_BREAKPOINT;
+	case ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_BKPT_INSTRUCTION:
+		LOG_INFO("Debug entry: BKPT instruction");
+		return DBG_REASON_BREAKPOINT;
 
-    case ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_EDBGRQ:
-	LOG_INFO("Debug entry: EDBGRQ signal");
-	return DBG_REASON_DBGRQ;
+	case ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_EDBGRQ:
+		LOG_INFO("Debug entry: EDBGRQ signal");
+		return DBG_REASON_DBGRQ;
 
-    case ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_VECTOR_CATCH:
-	LOG_INFO("Debug entry: VCR vector catch");
-	return DBG_REASON_BREAKPOINT;
+	case ARM11_DSCR_METHOD_OF_DEBUG_ENTRY_VECTOR_CATCH:
+		LOG_INFO("Debug entry: VCR vector catch");
+		return DBG_REASON_BREAKPOINT;
 
-    default:
-	LOG_INFO("Debug entry: unknown");
-	return DBG_REASON_DBGRQ;
-    }
+	default:
+		LOG_INFO("Debug entry: unknown");
+		return DBG_REASON_DBGRQ;
+	}
 };
 
 
@@ -326,12 +322,12 @@
  * shortcut is used instead of actually changing the Scan_N
  * register.
  *
- * \param arm11 Target state variable.
+ * \param arm11		Target state variable.
  *
  */
 void arm11_run_instr_data_prepare(arm11_common_t * arm11)
 {
-    arm11_add_debug_SCAN_N(arm11, 0x05, TAP_INVALID);
+	arm11_add_debug_SCAN_N(arm11, 0x05, ARM11_TAP_DEFAULT);
 }
 
 /** Cleanup after ITR/DTR operations
@@ -345,12 +341,12 @@
  * INTEST or EXTEST. So we must disable that before
  * any following activities lead to an IDLE.
  *
- * \param arm11 Target state variable.
+ * \param arm11		Target state variable.
  *
  */
 void arm11_run_instr_data_finish(arm11_common_t * arm11)
 {
-    arm11_add_debug_SCAN_N(arm11, 0x00, TAP_INVALID);
+	arm11_add_debug_SCAN_N(arm11, 0x00, ARM11_TAP_DEFAULT);
 }
 
 
@@ -365,24 +361,24 @@
  */
 void arm11_run_instr_no_data(arm11_common_t * arm11, u32 * opcode, size_t count)
 {
-    arm11_add_IR(arm11, ARM11_ITRSEL, TAP_INVALID);
+	arm11_add_IR(arm11, ARM11_ITRSEL, ARM11_TAP_DEFAULT);
 
-    while (count--)
-    {
-	arm11_add_debug_INST(arm11, *opcode++, NULL, TAP_IDLE);
-
-	while (1)
+	while (count--)
 	{
-	    u8 flag;
+		arm11_add_debug_INST(arm11, *opcode++, NULL, TAP_IDLE);
 
-	    arm11_add_debug_INST(arm11, 0, &flag, count ? TAP_IDLE : TAP_DRPAUSE);
+		while (1)
+		{
+			u8 flag;
 
-	    jtag_execute_queue();
+			arm11_add_debug_INST(arm11, 0, &flag, count ? TAP_IDLE : TAP_DRPAUSE);
 
-	    if (flag)
-		break;
+			jtag_execute_queue();
+
+			if (flag)
+				break;
+		}
 	}
-    }
 }
 
 /** Execute one instruction via ITR
@@ -395,7 +391,7 @@
  */
 void arm11_run_instr_no_data1(arm11_common_t * arm11, u32 opcode)
 {
-    arm11_run_instr_no_data(arm11, &opcode, 1);
+	arm11_run_instr_no_data(arm11, &opcode, 1);
 }
 
 
@@ -414,50 +410,50 @@
  */
 void arm11_run_instr_data_to_core(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count)
 {
-    arm11_add_IR(arm11, ARM11_ITRSEL, TAP_INVALID);
+	arm11_add_IR(arm11, ARM11_ITRSEL, ARM11_TAP_DEFAULT);
 
-    arm11_add_debug_INST(arm11, opcode, NULL, TAP_DRPAUSE);
+	arm11_add_debug_INST(arm11, opcode, NULL, TAP_DRPAUSE);
 
-    arm11_add_IR(arm11, ARM11_EXTEST, TAP_INVALID);
+	arm11_add_IR(arm11, ARM11_EXTEST, ARM11_TAP_DEFAULT);
 
-    scan_field_t	chain5_fields[3];
+	scan_field_t	chain5_fields[3];
 
-    u32			Data;
-    u8			Ready;
-    u8			nRetry;
+	u32				Data;
+	u8				Ready;
+	u8				nRetry;
 
-    arm11_setup_field(arm11, 32,    &Data,  NULL,	chain5_fields + 0);
-    arm11_setup_field(arm11,  1,    NULL,   &Ready,	chain5_fields + 1);
-    arm11_setup_field(arm11,  1,    NULL,   &nRetry,	chain5_fields + 2);
+	arm11_setup_field(arm11, 32,    &Data,  NULL,		chain5_fields + 0);
+	arm11_setup_field(arm11,  1,    NULL,   &Ready,		chain5_fields + 1);
+	arm11_setup_field(arm11,  1,    NULL,   &nRetry,	chain5_fields + 2);
 
-    while (count--)
-    {
-	do
+	while (count--)
 	{
-	    Data	    = *data;
+		do
+		{
+			Data	    = *data;
 
-	    arm11_add_dr_scan_vc(asizeof(chain5_fields), chain5_fields, TAP_IDLE);
-	    jtag_execute_queue();
+			arm11_add_dr_scan_vc(asizeof(chain5_fields), chain5_fields, TAP_IDLE);
+			jtag_execute_queue();
 
-	    JTAG_DEBUG("DTR  Ready %d  nRetry %d", Ready, nRetry);
+			JTAG_DEBUG("DTR  Ready %d  nRetry %d", Ready, nRetry);
+		}
+		while (!Ready);
+
+		data++;
 	}
-	while (!Ready);
 
-	data++;
-    }
+	arm11_add_IR(arm11, ARM11_INTEST, ARM11_TAP_DEFAULT);
 
-    arm11_add_IR(arm11, ARM11_INTEST, TAP_INVALID);
+	do
+	{
+		Data	    = 0;
 
-    do
-    {
-	Data	    = 0;
+		arm11_add_dr_scan_vc(asizeof(chain5_fields), chain5_fields, TAP_DRPAUSE);
+		jtag_execute_queue();
 
-	arm11_add_dr_scan_vc(asizeof(chain5_fields), chain5_fields, TAP_DRPAUSE);
-	jtag_execute_queue();
-
-	JTAG_DEBUG("DTR  Data %08x  Ready %d  nRetry %d", Data, Ready, nRetry);
-    }
-    while (!Ready);
+		JTAG_DEBUG("DTR  Data %08x  Ready %d  nRetry %d", Data, Ready, nRetry);
+	}
+	while (!Ready);
 }
 
 /** JTAG path for arm11_run_instr_data_to_core_noack
@@ -473,7 +469,7 @@
  */
 tap_state_t arm11_MOVE_DRPAUSE_IDLE_DRPAUSE_with_delay[] =
 {
-    TAP_DREXIT2, TAP_DRUPDATE, TAP_IDLE, TAP_IDLE, TAP_IDLE, TAP_DRSELECT, TAP_DRCAPTURE, TAP_DRSHIFT
+	TAP_DREXIT2, TAP_DRUPDATE, TAP_IDLE, TAP_IDLE, TAP_IDLE, TAP_DRSELECT, TAP_DRCAPTURE, TAP_DRSHIFT
 };
 
 
@@ -495,60 +491,60 @@
  */
 void arm11_run_instr_data_to_core_noack(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count)
 {
-    arm11_add_IR(arm11, ARM11_ITRSEL, TAP_INVALID);
+	arm11_add_IR(arm11, ARM11_ITRSEL, ARM11_TAP_DEFAULT);
 
-    arm11_add_debug_INST(arm11, opcode, NULL, TAP_DRPAUSE);
+	arm11_add_debug_INST(arm11, opcode, NULL, TAP_DRPAUSE);
 
-    arm11_add_IR(arm11, ARM11_EXTEST, TAP_INVALID);
+	arm11_add_IR(arm11, ARM11_EXTEST, ARM11_TAP_DEFAULT);
 
-    scan_field_t	chain5_fields[3];
+	scan_field_t	chain5_fields[3];
 
-    arm11_setup_field(arm11, 32,    NULL/*&Data*/,  NULL,	chain5_fields + 0);
-    arm11_setup_field(arm11,  1,    NULL,   NULL /*&Ready*/,	chain5_fields + 1);
-    arm11_setup_field(arm11,  1,    NULL,   NULL,	chain5_fields + 2);
+	arm11_setup_field(arm11, 32,    NULL/*&Data*/,  NULL,				chain5_fields + 0);
+	arm11_setup_field(arm11,  1,    NULL,			NULL /*&Ready*/,	chain5_fields + 1);
+	arm11_setup_field(arm11,  1,    NULL,			NULL,				chain5_fields + 2);
 
-    u8			Readies[count + 1];
-    u8	*		ReadyPos	    = Readies;
+	u8			Readies[count + 1];
+	u8	*		ReadyPos			= Readies;
 
-    while (count--)
-    {
-	chain5_fields[0].out_value	= (void *)(data++);
-	chain5_fields[1].in_value	= ReadyPos++;
-
-	if (count)
+	while (count--)
 	{
-	    jtag_add_dr_scan(asizeof(chain5_fields), chain5_fields, TAP_DRPAUSE);
-	    jtag_add_pathmove(asizeof(arm11_MOVE_DRPAUSE_IDLE_DRPAUSE_with_delay),
-		arm11_MOVE_DRPAUSE_IDLE_DRPAUSE_with_delay);
+		chain5_fields[0].out_value	= (void *)(data++);
+		chain5_fields[1].in_value	= ReadyPos++;
+
+		if (count)
+		{
+			jtag_add_dr_scan(asizeof(chain5_fields), chain5_fields, TAP_DRPAUSE);
+			jtag_add_pathmove(asizeof(arm11_MOVE_DRPAUSE_IDLE_DRPAUSE_with_delay),
+				arm11_MOVE_DRPAUSE_IDLE_DRPAUSE_with_delay);
+		}
+		else
+		{
+			jtag_add_dr_scan(asizeof(chain5_fields), chain5_fields, TAP_IDLE);
+		}
 	}
-	else
-	{
-	    jtag_add_dr_scan(asizeof(chain5_fields), chain5_fields, TAP_IDLE);
-	}
-    }
 
-    arm11_add_IR(arm11, ARM11_INTEST, TAP_INVALID);
+	arm11_add_IR(arm11, ARM11_INTEST, ARM11_TAP_DEFAULT);
 
-    chain5_fields[0].out_value	= 0;
-    chain5_fields[1].in_value   = ReadyPos++;
+	chain5_fields[0].out_value	= 0;
+	chain5_fields[1].in_value   = ReadyPos++;
 
-    arm11_add_dr_scan_vc(asizeof(chain5_fields), chain5_fields, TAP_DRPAUSE);
+	arm11_add_dr_scan_vc(asizeof(chain5_fields), chain5_fields, TAP_DRPAUSE);
 
-    jtag_execute_queue();
+	jtag_execute_queue();
 
-    size_t error_count = 0;
+	size_t error_count = 0;
 
-    {size_t i;
-    for (i = 0; i < asizeof(Readies); i++)
-    {
-	if (Readies[i] != 1)
+	{size_t i;
+	for (i = 0; i < asizeof(Readies); i++)
 	{
-	    error_count++;
-	}
-    }}
+		if (Readies[i] != 1)
+		{
+			error_count++;
+		}
+	}}
 
-    if (error_count)
-	LOG_ERROR("Transfer errors " ZU, error_count);
+	if (error_count)
+		LOG_ERROR("Transfer errors " ZU, error_count);
 }
 
 
@@ -565,7 +561,7 @@
  */
 void arm11_run_instr_data_to_core1(arm11_common_t * arm11, u32 opcode, u32 data)
 {
-    arm11_run_instr_data_to_core(arm11, opcode, &data, 1);
+	arm11_run_instr_data_to_core(arm11, opcode, &data, 1);
 }
 
 
@@ -584,35 +580,35 @@
  */
 void arm11_run_instr_data_from_core(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count)
 {
-    arm11_add_IR(arm11, ARM11_ITRSEL, TAP_INVALID);
+	arm11_add_IR(arm11, ARM11_ITRSEL, ARM11_TAP_DEFAULT);
 
-    arm11_add_debug_INST(arm11, opcode, NULL, TAP_IDLE);
+	arm11_add_debug_INST(arm11, opcode, NULL, TAP_IDLE);
 
-    arm11_add_IR(arm11, ARM11_INTEST, TAP_INVALID);
+	arm11_add_IR(arm11, ARM11_INTEST, ARM11_TAP_DEFAULT);
 
-    scan_field_t	chain5_fields[3];
+	scan_field_t	chain5_fields[3];
 
-    u32			Data;
-    u8			Ready;
-    u8			nRetry;
+	u32			Data;
+	u8			Ready;
+	u8			nRetry;
 
-    arm11_setup_field(arm11, 32,    NULL,	&Data,	    chain5_fields + 0);
-    arm11_setup_field(arm11,  1,    NULL,	&Ready,	    chain5_fields + 1);
-    arm11_setup_field(arm11,  1,    NULL,	&nRetry,    chain5_fields + 2);
+	arm11_setup_field(arm11, 32,    NULL,	&Data,	    chain5_fields + 0);
+	arm11_setup_field(arm11,  1,    NULL,	&Ready,	    chain5_fields + 1);
+	arm11_setup_field(arm11,  1,    NULL,	&nRetry,    chain5_fields + 2);
 
-    while (count--)
-    {
-	do
+	while (count--)
 	{
-	    arm11_add_dr_scan_vc(asizeof(chain5_fields), chain5_fields, count ? TAP_IDLE : TAP_DRPAUSE);
-	    jtag_execute_queue();
+		do
+		{
+			arm11_add_dr_scan_vc(asizeof(chain5_fields), chain5_fields, count ? TAP_IDLE : TAP_DRPAUSE);
+			jtag_execute_queue();
 
-	    JTAG_DEBUG("DTR  Data %08x  Ready %d  nRetry %d", Data, Ready, nRetry);
-	}
-	while (!Ready);
+			JTAG_DEBUG("DTR  Data %08x  Ready %d  nRetry %d", Data, Ready, nRetry);
+		}
+		while (!Ready);
 
-	*data++ = Data;
-    }
+		*data++ = Data;
+	}
 }
 
 /** Execute one instruction via ITR
@@ -629,10 +625,10 @@
  */
 void arm11_run_instr_data_from_core_via_r0(arm11_common_t * arm11, u32 opcode, u32 * data)
 {
-    arm11_run_instr_no_data1(arm11, opcode);
+	arm11_run_instr_no_data1(arm11, opcode);
 
-    /* MCR p14,0,R0,c0,c5,0 (move r0 -> wDTR -> local var) */
-    arm11_run_instr_data_from_core(arm11, 0xEE000E15, data, 1);
+	/* MCR p14,0,R0,c0,c5,0 (move r0 -> wDTR -> local var) */
+	arm11_run_instr_data_from_core(arm11, 0xEE000E15, data, 1);
 }
 
 /** Load data into core via DTR then move it to r0 then
@@ -649,10 +645,10 @@
  */
 void arm11_run_instr_data_to_core_via_r0(arm11_common_t * arm11, u32 opcode, u32 data)
 {
-    /* MRC p14,0,r0,c0,c5,0 */
-    arm11_run_instr_data_to_core1(arm11, 0xEE100E15, data);
+	/* MRC p14,0,r0,c0,c5,0 */
+	arm11_run_instr_data_to_core1(arm11, 0xEE100E15, data);
 
-    arm11_run_instr_no_data1(arm11, opcode);
+	arm11_run_instr_no_data1(arm11, opcode);
 }
 
 /** Apply reads and writes to scan chain 7
@@ -666,76 +662,76 @@
  */
 void arm11_sc7_run(arm11_common_t * arm11, arm11_sc7_action_t * actions, size_t count)
 {
-    arm11_add_debug_SCAN_N(arm11, 0x07, TAP_INVALID);
+	arm11_add_debug_SCAN_N(arm11, 0x07, ARM11_TAP_DEFAULT);
 
-    arm11_add_IR(arm11, ARM11_EXTEST, TAP_INVALID);
+	arm11_add_IR(arm11, ARM11_EXTEST, ARM11_TAP_DEFAULT);
 
-    scan_field_t	chain7_fields[3];
+	scan_field_t	chain7_fields[3];
 
-    u8		nRW;
-    u32		DataOut;
-    u8		AddressOut;
-    u8		Ready;
-    u32		DataIn;
-    u8		AddressIn;
+	u8				nRW;
+	u32				DataOut;
+	u8				AddressOut;
+	u8				Ready;
+	u32				DataIn;
+	u8				AddressIn;
 
-    arm11_setup_field(arm11,  1, &nRW,		&Ready,		chain7_fields + 0);
-    arm11_setup_field(arm11, 32, &DataOut,	&DataIn,	chain7_fields + 1);
-    arm11_setup_field(arm11,  7, &AddressOut,	&AddressIn,	chain7_fields + 2);
+	arm11_setup_field(arm11,  1, &nRW,			&Ready,		chain7_fields + 0);
+	arm11_setup_field(arm11, 32, &DataOut,		&DataIn,	chain7_fields + 1);
+	arm11_setup_field(arm11,  7, &AddressOut,	&AddressIn,	chain7_fields + 2);
 
-    {size_t i;
-    for (i = 0; i < count + 1; i++)
-    {
-	if (i < count)
+	{size_t i;
+	for (i = 0; i < count + 1; i++)
 	{
-	    nRW		= actions[i].write ? 1 : 0;
-	    DataOut	= actions[i].value;
-	    AddressOut	= actions[i].address;
-	}
-	else
-	{
-	    nRW		= 0;
-	    DataOut	= 0;
-	    AddressOut	= 0;
-	}
+		if (i < count)
+		{
+			nRW			= actions[i].write ? 1 : 0;
+			DataOut		= actions[i].value;
+			AddressOut	= actions[i].address;
+		}
+		else
+		{
+			nRW			= 0;
+			DataOut		= 0;
+			AddressOut	= 0;
+		}
 
-	do
-	{
-	    JTAG_DEBUG("SC7 <= Address %02x  Data %08x    nRW %d", AddressOut, DataOut, nRW);
+		do
+		{
+			JTAG_DEBUG("SC7 <= Address %02x  Data %08x    nRW %d", AddressOut, DataOut, nRW);
 
-	    arm11_add_dr_scan_vc(asizeof(chain7_fields), chain7_fields, TAP_DRPAUSE);
-	    jtag_execute_queue();
+			arm11_add_dr_scan_vc(asizeof(chain7_fields), chain7_fields, TAP_DRPAUSE);
+			jtag_execute_queue();
 
-	    JTAG_DEBUG("SC7 => Address %02x  Data %08x  Ready %d", AddressIn, DataIn, Ready);
-	}
-	while (!Ready); /* 'nRW' is 'Ready' on read out */
+			JTAG_DEBUG("SC7 => Address %02x  Data %08x  Ready %d", AddressIn, DataIn, Ready);
+		}
+		while (!Ready); /* 'nRW' is 'Ready' on read out */
 
-	if (i > 0)
-	{
-	    if (actions[i - 1].address != AddressIn)
-	    {
-		LOG_WARNING("Scan chain 7 shifted out unexpected address");
-	    }
-
-	    if (!actions[i - 1].write)
-	    {
-		actions[i - 1].value = DataIn;
-	    }
-	    else
-	    {
-		if (actions[i - 1].value != DataIn)
+		if (i > 0)
 		{
-		    LOG_WARNING("Scan chain 7 shifted out unexpected data");
+			if (actions[i - 1].address != AddressIn)
+			{
+				LOG_WARNING("Scan chain 7 shifted out unexpected address");
+			}
+
+			if (!actions[i - 1].write)
+			{
+				actions[i - 1].value = DataIn;
+			}
+			else
+			{
+				if (actions[i - 1].value != DataIn)
+				{
+					LOG_WARNING("Scan chain 7 shifted out unexpected data");
+				}
+			}
 		}
-	    }
-	}
-    }}
+	}}
 
-    {size_t i;
-    for (i = 0; i < count; i++)
-    {
-	JTAG_DEBUG("SC7 %02d: %02x %s %08x", i, actions[i].address, actions[i].write ? "<=" : "=>", actions[i].value);
-    }}
+	{size_t i;
+	for (i = 0; i < count; i++)
+	{
+		JTAG_DEBUG("SC7 %02d: %02x %s %08x", i, actions[i].address, actions[i].write ? "<=" : "=>", actions[i].value);
+	}}
 }
 
 /** Clear VCR and all breakpoints and watchpoints via scan chain 7
@@ -745,29 +741,29 @@
  */
 void arm11_sc7_clear_vbw(arm11_common_t * arm11)
 {
-    arm11_sc7_action_t		clear_bw[arm11->brp + arm11->wrp + 1];
-    arm11_sc7_action_t *	pos = clear_bw;
+	arm11_sc7_action_t		clear_bw[arm11->brp + arm11->wrp + 1];
+	arm11_sc7_action_t *	pos = clear_bw;
 
-    {size_t i;
-    for (i = 0; i < asizeof(clear_bw); i++)
-    {
-	clear_bw[i].write	= true;
-	clear_bw[i].value	= 0;
-    }}
+	{size_t i;
+	for (i = 0; i < asizeof(clear_bw); i++)
+	{
+		clear_bw[i].write	= true;
+		clear_bw[i].value	= 0;
+	}}
 
-    {size_t i;
-    for (i = 0; i < arm11->brp; i++)
-	(pos++)->address = ARM11_SC7_BCR0 + i;
-    }
+	{size_t i;
+	for (i = 0; i < arm11->brp; i++)
+		(pos++)->address = ARM11_SC7_BCR0 + i;
+	}
 
-    {size_t i;
-    for (i = 0; i < arm11->wrp; i++)
-	(pos++)->address = ARM11_SC7_WCR0 + i;
-    }
+	{size_t i;
+	for (i = 0; i < arm11->wrp; i++)
+		(pos++)->address = ARM11_SC7_WCR0 + i;
+	}
 
-    (pos++)->address = ARM11_SC7_VCR;
+	(pos++)->address = ARM11_SC7_VCR;
 
-    arm11_sc7_run(arm11, clear_bw, asizeof(clear_bw));
+	arm11_sc7_run(arm11, clear_bw, asizeof(clear_bw));
 }
 
 /** Write VCR register
@@ -777,14 +773,14 @@
  */
 void arm11_sc7_set_vcr(arm11_common_t * arm11, u32 value)
 {
-    arm11_sc7_action_t		set_vcr;
+	arm11_sc7_action_t		set_vcr;
 
-    set_vcr.write		= true;
-    set_vcr.address		= ARM11_SC7_VCR;
-    set_vcr.value		= value;
+	set_vcr.write		= true;
+	set_vcr.address		= ARM11_SC7_VCR;
+	set_vcr.value		= value;
 
 
-    arm11_sc7_run(arm11, &set_vcr, 1);
+	arm11_sc7_run(arm11, &set_vcr, 1);
 }
 
 
@@ -798,15 +794,15 @@
  */
 void arm11_read_memory_word(arm11_common_t * arm11, u32 address, u32 * result)
 {
-    arm11_run_instr_data_prepare(arm11);
+	arm11_run_instr_data_prepare(arm11);
 
-    /* MRC p14,0,r0,c0,c5,0 (r0 = address) */
-    arm11_run_instr_data_to_core1(arm11, 0xee100e15, address);
+	/* MRC p14,0,r0,c0,c5,0 (r0 = address) */
+	arm11_run_instr_data_to_core1(arm11, 0xee100e15, address);
 
-    /* LDC p14,c5,[R0],#4 (DTR = [r0]) */
-    arm11_run_instr_data_from_core(arm11, 0xecb05e01, result, 1);
+	/* LDC p14,c5,[R0],#4 (DTR = [r0]) */
+	arm11_run_instr_data_from_core(arm11, 0xecb05e01, result, 1);
 
-    arm11_run_instr_data_finish(arm11);
+	arm11_run_instr_data_finish(arm11);
 }
 
 



From ntfreak at mail.berlios.de  Wed Apr 22 21:54:04 2009
From: ntfreak at mail.berlios.de (ntfreak at BerliOS)
Date: Wed, 22 Apr 2009 21:54:04 +0200
Subject: [Openocd-svn] r1513 - trunk/src/helper
Message-ID: <200904221954.n3MJs463002311@sheep.berlios.de>

Author: ntfreak
Date: 2009-04-22 21:54:03 +0200 (Wed, 22 Apr 2009)
New Revision: 1513

Modified:
   trunk/src/helper/replacements.h
Log:
- fix win32 build after svn 1511 changes

Modified: trunk/src/helper/replacements.h
===================================================================
--- trunk/src/helper/replacements.h	2009-04-22 18:39:59 UTC (rev 1512)
+++ trunk/src/helper/replacements.h	2009-04-22 19:54:03 UTC (rev 1513)
@@ -41,6 +41,7 @@
 /* include necessary headers for socket functionality */
 #ifdef _WIN32
 #include <winsock2.h>
+#include <ws2tcpip.h>
 #else
 #include <sys/socket.h>
 #include <sys/poll.h>



From oharboe at mail.berlios.de  Thu Apr 23 14:21:39 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Thu, 23 Apr 2009 14:21:39 +0200
Subject: [Openocd-svn] r1514 - trunk/src/target/target
Message-ID: <200904231221.n3NCLdqs017772@sheep.berlios.de>

Author: oharboe
Date: 2009-04-23 14:21:39 +0200 (Thu, 23 Apr 2009)
New Revision: 1514

Modified:
   trunk/src/target/target/wi-9c.cfg
Log:
Laurentiu Cocanu - fix typo

Modified: trunk/src/target/target/wi-9c.cfg
===================================================================
--- trunk/src/target/target/wi-9c.cfg	2009-04-22 19:54:03 UTC (rev 1513)
+++ trunk/src/target/target/wi-9c.cfg	2009-04-23 12:21:39 UTC (rev 1514)
@@ -31,7 +31,7 @@
 }
 
 set _TARGETNAME [format "%s.cpu" $_CHIPNAME]
-jtag newtap_device $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
 
 jtag_nsrst_delay 200
 jtag_ntrst_delay 0



From oharboe at mail.berlios.de  Thu Apr 23 15:24:57 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Thu, 23 Apr 2009 15:24:57 +0200
Subject: [Openocd-svn] r1515 - trunk/src/jtag zy1000/trunk/build
Message-ID: <200904231324.n3NDOv38023657@sheep.berlios.de>

Author: oharboe
Date: 2009-04-23 15:24:56 +0200 (Thu, 23 Apr 2009)
New Revision: 1515

Modified:
   trunk/src/jtag/jtag.h
   zy1000/trunk/build/buildocd.sh
Log:
unbreak zy1000 

Modified: trunk/src/jtag/jtag.h
===================================================================
--- trunk/src/jtag/jtag.h	2009-04-23 12:21:39 UTC (rev 1514)
+++ trunk/src/jtag/jtag.h	2009-04-23 13:24:56 UTC (rev 1515)
@@ -47,9 +47,24 @@
  *
  * N.B. tap_get_tms_path() was changed to reflect this corrected
  * numbering and ordering of the TAP states.
+ *
+ * DANGER!!!! some interfaces care about the actual numbers used
+ * as they are handed off directly to hardware implementations.
  */
+
 typedef enum tap_state
 {
+#if BUILD_ECOSBOARD
+/* These are the old numbers. Leave as-is for now... */
+	TAP_RESET    = 0, TAP_IDLE = 8,
+	TAP_DRSELECT = 1, TAP_DRCAPTURE = 2, TAP_DRSHIFT = 3, TAP_DREXIT1 = 4,
+	TAP_DRPAUSE  = 5, TAP_DREXIT2 = 6, TAP_DRUPDATE = 7,
+	TAP_IRSELECT = 9, TAP_IRCAPTURE = 10, TAP_IRSHIFT = 11, TAP_IREXIT1 = 12,
+	TAP_IRPAUSE  = 13, TAP_IREXIT2 = 14, TAP_IRUPDATE = 15,
+
+	TAP_NUM_STATES = 16, TAP_INVALID = -1,
+#else
+	/* Proper ARM recommended numbers */
 	TAP_DREXIT2 = 0x0,
 	TAP_DREXIT1 = 0x1,
 	TAP_DRSHIFT = 0x2,
@@ -70,8 +85,9 @@
 	TAP_NUM_STATES = 0x10,
 
 	TAP_INVALID = -1,
+#endif
 } tap_state_t;
- 
+
 typedef struct tap_transition_s
 {
 	tap_state_t high;

Modified: zy1000/trunk/build/buildocd.sh
===================================================================
--- zy1000/trunk/build/buildocd.sh	2009-04-23 12:21:39 UTC (rev 1514)
+++ zy1000/trunk/build/buildocd.sh	2009-04-23 13:24:56 UTC (rev 1515)
@@ -19,7 +19,7 @@
 rm -rf /tmp/ecosboard/build
 mkdir /tmp/ecosboard/build
 cd /tmp/ecosboard/build
-$OPENOCD/../../openocd/configure --enable-ioutil --host=arm-elf --includedir=/tmp/ecosboard/ecos/install/include/ --enable-ecosboard --prefix=/tmp/ecosboard/ocdinstall
+$OPENOCD/../../openocd/configure --disable-werror --enable-ioutil --host=arm-elf --includedir=/tmp/ecosboard/ecos/install/include/ --enable-ecosboard --prefix=/tmp/ecosboard/ocdinstall
 echo >makephi.sh sh $OPENOCD/makephi.sh
 echo >>makephi.sh sh $OPENOCD/makefw.sh
 make



From oharboe at mail.berlios.de  Thu Apr 23 16:03:43 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Thu, 23 Apr 2009 16:03:43 +0200
Subject: [Openocd-svn] r1516 - in trunk: doc src/target/target
Message-ID: <200904231403.n3NE3his026420@sheep.berlios.de>

Author: oharboe
Date: 2009-04-23 16:03:42 +0200 (Thu, 23 Apr 2009)
New Revision: 1516

Modified:
   trunk/doc/openocd.texi
   trunk/src/target/target/stm32.cfg
Log:
stm32.cfg can expect one of 4 id's. 

Modified: trunk/doc/openocd.texi
===================================================================
--- trunk/doc/openocd.texi	2009-04-23 13:24:56 UTC (rev 1515)
+++ trunk/doc/openocd.texi	2009-04-23 14:03:42 UTC (rev 1516)
@@ -1606,7 +1606,9 @@
 @itemize @bullet
 @item @b{-expected-id NUMBER}
 @* By default it is zero. If non-zero represents the
-expected tap ID used when the JTAG chain is examined. See below.
+expected tap ID used when the JTAG chain is examined. Repeat 
+the option as many times as required if multiple id's can be
+expected. See below. 
 @item @b{-disable}
 @item @b{-enable}
 @* By default not specified the tap is enabled. Some chips have a

Modified: trunk/src/target/target/stm32.cfg
===================================================================
--- trunk/src/target/target/stm32.cfg	2009-04-23 13:24:56 UTC (rev 1515)
+++ trunk/src/target/target/stm32.cfg	2009-04-23 14:03:42 UTC (rev 1516)
@@ -37,15 +37,15 @@
   # See STM Document RM0008
   # Section 26.6.2
   # Low density devices, Rev A
-  set _BSTAPID 0x06412041
+  set _BSTAPID1 0x06412041
   # Medium density devices, Rev A
-  set _BSTAPID 0x06410041
+  set _BSTAPID2 0x06410041
   # Medium density devices, Rev B and Rev Z
-  set _BSTAPID 0x16410041
+  set _BSTAPID3 0x16410041
   # High density devices, Rev A
-  set _BSTAPID 0x06414041
+  set _BSTAPID4 0x06414041
 }   
-jtag newtap $_CHIPNAME bs  -irlen 5 -ircapture 0x1 -irmask 0x1 -expected-id $_BSTAPID
+jtag newtap $_CHIPNAME bs  -irlen 5 -ircapture 0x1 -irmask 0x1 -expected-id $_BSTAPID1 -expected-id $_BSTAPID2 -expected-id $_BSTAPID3 -expected-id $_BSTAPID4
 
 set _TARGETNAME [format "%s.cpu" $_CHIPNAME]
 target create $_TARGETNAME cortex_m3 -endian $_ENDIAN -chain-position $_TARGETNAME



From oharboe at mail.berlios.de  Thu Apr 23 20:55:14 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Thu, 23 Apr 2009 20:55:14 +0200
Subject: [Openocd-svn] r1517 - trunk/src/target
Message-ID: <200904231855.n3NItEPb003557@sheep.berlios.de>

Author: oharboe
Date: 2009-04-23 20:55:13 +0200 (Thu, 23 Apr 2009)
New Revision: 1517

Modified:
   trunk/src/target/arm11.h
Log:
Michael Bruck <mbruck at digenius.de> include file fix

Modified: trunk/src/target/arm11.h
===================================================================
--- trunk/src/target/arm11.h	2009-04-23 14:03:42 UTC (rev 1516)
+++ trunk/src/target/arm11.h	2009-04-23 18:55:13 UTC (rev 1517)
@@ -26,7 +26,7 @@
 #include "register.h"
 #include "embeddedice.h"
 #include "arm_jtag.h"
-#include <stdbool.h>
+#include "types.h"
 
 #define asizeof(x)	(sizeof(x) / sizeof((x)[0]))
 



From duane at mail.berlios.de  Fri Apr 24 04:13:04 2009
From: duane at mail.berlios.de (duane at mail.berlios.de)
Date: Fri, 24 Apr 2009 04:13:04 +0200
Subject: [Openocd-svn] r1518 - trunk/src/jtag
Message-ID: <200904240213.n3O2D4LG010179@sheep.berlios.de>

Author: duane
Date: 2009-04-24 04:13:02 +0200 (Fri, 24 Apr 2009)
New Revision: 1518

Modified:
   trunk/src/jtag/gw16012.c
Log:
Remove warning

Modified: trunk/src/jtag/gw16012.c
===================================================================
--- trunk/src/jtag/gw16012.c	2009-04-23 18:55:13 UTC (rev 1517)
+++ trunk/src/jtag/gw16012.c	2009-04-24 02:13:02 UTC (rev 1518)
@@ -436,7 +436,7 @@
 }
 
 #if PARPORT_USE_GIVEIO == 1
-static int gw16012_get_giveio_access()
+static int gw16012_get_giveio_access(void)
 {
 	HANDLE h;
 	OSVERSIONINFO version;



From oharboe at mail.berlios.de  Fri Apr 24 08:02:05 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Fri, 24 Apr 2009 08:02:05 +0200
Subject: [Openocd-svn] r1519 - trunk/src/target/board
Message-ID: <200904240602.n3O625ZE002046@sheep.berlios.de>

Author: oharboe
Date: 2009-04-24 08:02:02 +0200 (Fri, 24 Apr 2009)
New Revision: 1519

Modified:
   trunk/src/target/board/olimex_stm32_h103.cfg
   trunk/src/target/board/stm32f10x_128k_eval.cfg
Log:
Uwe Hermann <uwe at hermann-uwe.de> drop unecessary BSTAPIDs

Modified: trunk/src/target/board/olimex_stm32_h103.cfg
===================================================================
--- trunk/src/target/board/olimex_stm32_h103.cfg	2009-04-24 02:13:02 UTC (rev 1518)
+++ trunk/src/target/board/olimex_stm32_h103.cfg	2009-04-24 06:02:02 UTC (rev 1519)
@@ -4,7 +4,5 @@
 # http://olimex.com/dev/stm32-h103.html
 #
 
-set BSTAPID 0x16410041
-
 source [find target/stm32.cfg]
 

Modified: trunk/src/target/board/stm32f10x_128k_eval.cfg
===================================================================
--- trunk/src/target/board/stm32f10x_128k_eval.cfg	2009-04-24 02:13:02 UTC (rev 1518)
+++ trunk/src/target/board/stm32f10x_128k_eval.cfg	2009-04-24 06:02:02 UTC (rev 1519)
@@ -1,6 +1,4 @@
 # This is an STM32 eval board with a single STM32F103VBT6 chip on it.
 
-# My test board has a "Rev1" tap id.
-set BSTAPID 0x16410041
 source [find target/stm32.cfg]
 



From oharboe at mail.berlios.de  Fri Apr 24 08:04:42 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Fri, 24 Apr 2009 08:04:42 +0200
Subject: [Openocd-svn] r1520 - trunk/src/target/interface
Message-ID: <200904240604.n3O64gfB003732@sheep.berlios.de>

Author: oharboe
Date: 2009-04-24 08:04:40 +0200 (Fri, 24 Apr 2009)
New Revision: 1520

Modified:
   trunk/src/target/interface/sheevaplug.cfg
Log:
Nicolas Pitre <nico at cam.org> update SheevaPlug interface cfg file

Modified: trunk/src/target/interface/sheevaplug.cfg
===================================================================
--- trunk/src/target/interface/sheevaplug.cfg	2009-04-24 06:02:02 UTC (rev 1519)
+++ trunk/src/target/interface/sheevaplug.cfg	2009-04-24 06:04:40 UTC (rev 1520)
@@ -6,7 +6,7 @@
 
 interface ft2232
 ft2232_layout sheevaplug
-ft2232_vid_pid 0x0403 0x6010
-# TODO: Add ft2232_device_desc?
+ft2232_vid_pid 0x9e88 0x9e8f
+ft2232_device_desc "SheevaPlug JTAGKey FT2232D B"
 jtag_khz 3000
 



From oharboe at mail.berlios.de  Fri Apr 24 13:05:22 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Fri, 24 Apr 2009 13:05:22 +0200
Subject: [Openocd-svn] r1521 - trunk/src/jtag
Message-ID: <200904241105.n3OB5Mfa006029@sheep.berlios.de>

Author: oharboe
Date: 2009-04-24 13:05:21 +0200 (Fri, 24 Apr 2009)
New Revision: 1521

Modified:
   trunk/src/jtag/jlink.c
Log:
Zach Welch <zw at superlucidity.net> use memcpy

Modified: trunk/src/jtag/jlink.c
===================================================================
--- trunk/src/jtag/jlink.c	2009-04-24 06:04:40 UTC (rev 1520)
+++ trunk/src/jtag/jlink.c	2009-04-24 11:05:21 UTC (rev 1521)
@@ -665,8 +665,6 @@
 static int jlink_tap_execute(void)
 {
 	int byte_length;
-	int tms_offset;
-	int tdi_offset;
 	int i;
 	int result;
 
@@ -680,21 +678,10 @@
 	usb_out_buffer[1] = 0;
 	usb_out_buffer[2] = (tap_length >> 0) & 0xff;
 	usb_out_buffer[3] = (tap_length >> 8) & 0xff;
+	memcpy(usb_out_buffer + 4, tms_buffer, byte_length);
+	memcpy(usb_out_buffer + 4 + byte_length, tdi_buffer, byte_length);
 
-	tms_offset = 4;
-	for (i = 0; i < byte_length; i++)
-	{
-		usb_out_buffer[tms_offset + i] = tms_buffer[i];
-	}
-
-	tdi_offset = tms_offset + byte_length;
-	for (i = 0; i < byte_length; i++)
-	{
-		usb_out_buffer[tdi_offset + i] = tdi_buffer[i];
-	}
-
 	result = jlink_usb_message(jlink_jtag_handle, 4 + 2 * byte_length, byte_length);
-
 	if (result != byte_length)
 	{
 		LOG_ERROR("jlink_tap_execute, wrong result %d (expected %d)",
@@ -702,8 +689,7 @@
 		return ERROR_JTAG_QUEUE_FAILED;
 	}
 
-	for (i = 0; i < byte_length; i++)
-		tdo_buffer[i] = usb_in_buffer[i];
+	memcpy(tdo_buffer, usb_in_buffer, byte_length);
 
 	for (i = 0; i < pending_scan_results_length; i++)
 	{



From oharboe at mail.berlios.de  Fri Apr 24 14:12:36 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Fri, 24 Apr 2009 14:12:36 +0200
Subject: [Openocd-svn] r1522 - trunk/contrib
Message-ID: <200904241212.n3OCCaCl028407@sheep.berlios.de>

Author: oharboe
Date: 2009-04-24 14:12:36 +0200 (Fri, 24 Apr 2009)
New Revision: 1522

Modified:
   trunk/contrib/openocd.udev
Log:
Uwe Hermann <uwe at hermann-uwe.de> Update udev file

Modified: trunk/contrib/openocd.udev
===================================================================
--- trunk/contrib/openocd.udev	2009-04-24 11:05:21 UTC (rev 1521)
+++ trunk/contrib/openocd.udev	2009-04-24 12:12:36 UTC (rev 1522)
@@ -1,28 +1,56 @@
-BUS!="usb", ACTION!="add", SUBSYSTEM!=="usb_device", GOTO="openocd_rules_end"
-
-# Olimex ARM-USB-OCD
-SYSFS{idVendor}=="15ba", SYSFS{idProduct}=="0003", MODE="664", GROUP="plugdev"
-
-# Olimex ARM-USB-OCD-TINY
-SYSFS{idVendor}=="15ba", SYSFS{idProduct}=="0004", MODE="664", GROUP="plugdev"
-
-# USBprog with OpenOCD firmware
-SYSFS{idVendor}=="1781", SYSFS{idProduct}=="0c63", MODE="664", GROUP="plugdev"
-
-# Amontec JTAGkey
-SYSFS{idVendor}=="0403", SYSFS{idProduct}=="cff8", MODE="664", GROUP="plugdev"
-
-# Amontec JTAGkey-HiSpeed
-SYSFS{idVendor}=="0fbb", SYSFS{idProduct}=="1000", MODE="664", GROUP="plugdev"
-
-# IAR J-Link USB
-SYSFS{idVendor}=="1366", SYSFS{idProduct}=="0101", MODE="664", GROUP="plugdev"
-
-# Raisonance RLink
-SYSFS{idVendor}=="138e", SYSFS{idProduct}=="9000", MODE="664", GROUP="plugdev"
-
-# Olimex ARM-JTAG-EW
-SYSFS{idVendor}=="15ba", SYSFS{idProduct}=="001e", MODE="664", GROUP="plugdev"
-
-LABEL="openocd_rules_end"
-
+BUS!="usb", ACTION!="add", SUBSYSTEM!=="usb_device", GOTO="openocd_rules_end"
+
+# Olimex ARM-USB-OCD
+SYSFS{idVendor}=="15ba", SYSFS{idProduct}=="0003", MODE="664", GROUP="plugdev"
+
+# Olimex ARM-USB-OCD-TINY
+SYSFS{idVendor}=="15ba", SYSFS{idProduct}=="0004", MODE="664", GROUP="plugdev"
+
+# Olimex ARM-JTAG-EW
+SYSFS{idVendor}=="15ba", SYSFS{idProduct}=="001e", MODE="664", GROUP="plugdev"
+
+# USBprog with OpenOCD firmware
+SYSFS{idVendor}=="1781", SYSFS{idProduct}=="0c63", MODE="664", GROUP="plugdev"
+
+# Amontec JTAGkey and JTAGkey-tiny
+SYSFS{idVendor}=="0403", SYSFS{idProduct}=="cff8", MODE="664", GROUP="plugdev"
+
+# Amontec JTAGkey-HiSpeed
+SYSFS{idVendor}=="0fbb", SYSFS{idProduct}=="1000", MODE="664", GROUP="plugdev"
+
+# Axiom AXM-0432 Link (Symphony SoundBite?)
+# Calao Systems USB-A9260-C01
+# TinCanTools Flyswatter
+# OOCD-Link
+# Marvell Sheevaplug (early development versions)
+SYSFS{idVendor}=="0403", SYSFS{idProduct}=="6010", MODE="664", GROUP="plugdev"
+
+# Calao Systems USB-A9260-C02
+SYSFS{idVendor}=="0403", SYSFS{idProduct}=="6001", MODE="664", GROUP="plugdev"
+
+# IAR J-Link USB
+SYSFS{idVendor}=="1366", SYSFS{idProduct}=="0101", MODE="664", GROUP="plugdev"
+
+# Raisonance RLink
+SYSFS{idVendor}=="138e", SYSFS{idProduct}=="9000", MODE="664", GROUP="plugdev"
+
+# Hitex STR9-comStick
+SYSFS{idVendor}=="0640", SYSFS{idProduct}=="002c", MODE="664", GROUP="plugdev"
+
+# Hitex STM32-PerformanceStick
+SYSFS{idVendor}=="0640", SYSFS{idProduct}=="002d", MODE="664", GROUP="plugdev"
+
+# Luminary Micro Stellaris/LM3S811
+SYSFS{idVendor}=="0403", SYSFS{idProduct}=="bcd9", MODE="664", GROUP="plugdev"
+
+# Xverve Signalyzer Tool (DT-USB-ST)
+SYSFS{idVendor}=="0403", SYSFS{idProduct}=="bca0", MODE="664", GROUP="plugdev"
+
+# egnite Turtelizer 2
+SYSFS{idVendor}=="0403", SYSFS{idProduct}=="bdc8", MODE="664", GROUP="plugdev"
+
+# Marvell Sheevaplug
+SYSFS{idVendor}=="9e88", SYSFS{idProduct}=="9e8f", MODE="664", GROUP="plugdev"
+
+LABEL="openocd_rules_end"
+



From oharboe at mail.berlios.de  Fri Apr 24 18:14:25 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Fri, 24 Apr 2009 18:14:25 +0200
Subject: [Openocd-svn] r1523 - trunk
Message-ID: <200904241614.n3OGEPlL032308@sheep.berlios.de>

Author: oharboe
Date: 2009-04-24 18:14:21 +0200 (Fri, 24 Apr 2009)
New Revision: 1523

Modified:
   trunk/bootstrap
Log:
Zach Welch <zw at superlucidity.net> add --enable-maintainer-mode reminder

Modified: trunk/bootstrap
===================================================================
--- trunk/bootstrap	2009-04-24 12:12:36 UTC (rev 1522)
+++ trunk/bootstrap	2009-04-24 16:14:21 UTC (rev 1523)
@@ -2,3 +2,7 @@
 && autoheader \
 && automake --foreign --add-missing --copy \
 && autoconf
+
+# AM_MAINTAINER_MODE requires SVN users provide --enable-maintainer-mode
+# otherwise the documentation will fail to build due to missing version.texi
+echo "Bootstrap complete; you can './configure --enable-maintainer-mode ....'"



From oharboe at mail.berlios.de  Fri Apr 24 18:24:58 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Fri, 24 Apr 2009 18:24:58 +0200
Subject: [Openocd-svn] r1524 - trunk/src/jtag
Message-ID: <200904241624.n3OGOwCH003406@sheep.berlios.de>

Author: oharboe
Date: 2009-04-24 18:24:55 +0200 (Fri, 24 Apr 2009)
New Revision: 1524

Modified:
   trunk/src/jtag/jlink.c
   trunk/src/jtag/jtag.h
Log:
Zach Welch <zw at superlucidity.net> add TAP_SCAN_BYTES macro (1 of 2)

Modified: trunk/src/jtag/jlink.c
===================================================================
--- trunk/src/jtag/jlink.c	2009-04-24 16:14:21 UTC (rev 1523)
+++ trunk/src/jtag/jlink.c	2009-04-24 16:24:55 UTC (rev 1524)
@@ -672,7 +672,7 @@
 		return ERROR_OK;
 
 	// number of full bytes (plus one if some would be left over)
-	byte_length = tap_length / 8 + !!(tap_length % 8);
+	byte_length = TAP_SCAN_BYTES(tap_length);
 
 	usb_out_buffer[0] = EMU_CMD_HW_JTAG3;
 	usb_out_buffer[1] = 0;

Modified: trunk/src/jtag/jtag.h
===================================================================
--- trunk/src/jtag/jtag.h	2009-04-24 16:14:21 UTC (rev 1523)
+++ trunk/src/jtag/jtag.h	2009-04-24 16:24:55 UTC (rev 1524)
@@ -217,6 +217,9 @@
 struct scan_field_s;
 typedef int (*in_handler_t)(u8* in_value, void* priv, struct scan_field_s* field);
 
+/// @brief calculates number of bytes required to hold @a n TAP scan bits
+#define TAP_SCAN_BYTES(n)		(((n) / 8) + !!((n) % 8))
+
 typedef struct scan_field_s
 {
 	jtag_tap_t* tap;                /* tap pointer this instruction refers to */



From oharboe at mail.berlios.de  Fri Apr 24 20:10:07 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Fri, 24 Apr 2009 20:10:07 +0200
Subject: [Openocd-svn] r1525 - trunk/src/jtag
Message-ID: <200904241810.n3OIA7WK022395@sheep.berlios.de>

Author: oharboe
Date: 2009-04-24 20:10:04 +0200 (Fri, 24 Apr 2009)
New Revision: 1525

Modified:
   trunk/src/jtag/jlink.c
   trunk/src/jtag/jtag.c
   trunk/src/jtag/jtag.h
Log:
add jtag_debug_state_machine

Modified: trunk/src/jtag/jlink.c
===================================================================
--- trunk/src/jtag/jlink.c	2009-04-24 16:24:55 UTC (rev 1524)
+++ trunk/src/jtag/jlink.c	2009-04-24 18:10:04 UTC (rev 1525)
@@ -114,6 +114,8 @@
 static void jlink_debug_buffer(u8 *buffer, int length);
 #endif
 
+static enum tap_state jlink_last_state = TAP_RESET;
+
 static jlink_jtag_t* jlink_jtag_handle;
 
 /***************************************************************************/
@@ -681,6 +683,9 @@
 	memcpy(usb_out_buffer + 4, tms_buffer, byte_length);
 	memcpy(usb_out_buffer + 4 + byte_length, tdi_buffer, byte_length);
 
+	jlink_last_state = jtag_debug_state_machine(tms_buffer, tdi_buffer,
+			tap_length, jlink_last_state);
+
 	result = jlink_usb_message(jlink_jtag_handle, 4 + 2 * byte_length, byte_length);
 	if (result != byte_length)
 	{

Modified: trunk/src/jtag/jtag.c
===================================================================
--- trunk/src/jtag/jtag.c	2009-04-24 16:24:55 UTC (rev 1524)
+++ trunk/src/jtag/jtag.c	2009-04-24 18:10:04 UTC (rev 1525)
@@ -3283,4 +3283,89 @@
 	return TAP_INVALID;
 }
 
+#ifdef _DEBUG_JTAG_IO_
+
+#define JTAG_DEBUG_STATE_APPEND(buf, len, bit) \
+		do { buf[len] = bit ? '1' : '0'; } while(0)
+#define JTAG_DEBUG_STATE_PRINT(a, b, astr, bstr) \
+		DEBUG_JTAG_IO("TAP/SM: %9s -> %5s\tTMS: %s\tTDI: %s", \
+			tap_state_name(a), tap_state_name(b), astr, bstr)
+
+tap_state_t jtag_debug_state_machine(const void *tms_buf, const void *tdi_buf,
+		unsigned tap_bits, tap_state_t next_state)
+{
+	const u8 *tms_buffer;
+	const u8 *tdi_buffer;
+	unsigned tap_bytes;
+	unsigned cur_byte;
+	unsigned cur_bit;
+
+	unsigned tap_out_bits;
+	char tms_str[33];
+	char tdi_str[33];
+
+	tap_state_t last_state;
+
+	// set startstate (and possibly last, if tap_bits == 0) 
+	last_state = next_state;
+	DEBUG_JTAG_IO("TAP/SM: START state: %s", tap_state_name(next_state));
+
+	tms_buffer = (const u8 *)tms_buf;
+	tdi_buffer = (const u8 *)tdi_buf;
+
+	tap_bytes = TAP_SCAN_BYTES(tap_bits);
+	DEBUG_JTAG_IO("TAP/SM: TMS bits: %u (bytes: %u)", tap_bits, tap_bytes);
+
+	tap_out_bits = 0;
+	for(cur_byte = 0; cur_byte < tap_bytes; cur_byte++)
+	{
+		for(cur_bit = 0; cur_bit < 8; cur_bit++)
+		{
+			// make sure we do not run off the end of the buffers
+			unsigned tap_bit = cur_byte * 8 + cur_bit;
+			if (tap_bit == tap_bits)
+				break;
+
+			// check and save TMS bit
+			tap_bit = !!(tms_buffer[cur_byte] & (1 << cur_bit));
+			JTAG_DEBUG_STATE_APPEND(tms_str, tap_out_bits, tap_bit);
+
+			// use TMS bit to find the next TAP state
+			next_state = tap_state_transition(last_state, tap_bit);
+
+			// check and store TDI bit
+			tap_bit = !!(tdi_buffer[cur_byte] & (1 << cur_bit));
+			JTAG_DEBUG_STATE_APPEND(tdi_str, tap_out_bits, tap_bit);
+
+			// increment TAP bits
+			tap_out_bits++;
+
+			// Only show TDO bits on state transitions, or
+			// after some number of bits in the same state.
+			if ((next_state == last_state) && (tap_out_bits < 32))
+				continue;
+
+			// terminate strings and display state transition
+			tms_str[tap_out_bits] = tdi_str[tap_out_bits] = 0;
+			JTAG_DEBUG_STATE_PRINT(last_state, next_state, tms_str, tdi_str);
+
+			// reset state
+			last_state = next_state;
+			tap_out_bits = 0;
+		}
+	}
+
+	if (tap_out_bits)
+	{
+		// terminate strings and display state transition
+		tms_str[tap_out_bits] = tdi_str[tap_out_bits] = 0;
+		JTAG_DEBUG_STATE_PRINT(last_state, next_state, tms_str, tdi_str);
+	}
+
+	DEBUG_JTAG_IO("TAP/SM: FINAL state: %s", tap_state_name(next_state));
+
+	return next_state;
+}
+#endif // _DEBUG_JTAG_IO_
+
 /*-----</Cable Helper API>--------------------------------------*/

Modified: trunk/src/jtag/jtag.h
===================================================================
--- trunk/src/jtag/jtag.h	2009-04-24 16:24:55 UTC (rev 1524)
+++ trunk/src/jtag/jtag.h	2009-04-24 18:10:04 UTC (rev 1525)
@@ -206,6 +206,25 @@
  */
 const char* tap_state_name(tap_state_t state);
 
+#ifdef _DEBUG_JTAG_IO_
+/**
+ * @brief Prints verbose TAP state transitions for the given TMS/TDI buffers.
+ * @param tms_buf must points to a buffer containing the TMS bitstream.
+ * @param tdi_buf must points to a buffer containing the TDI bitstream.
+ * @param tap_len must specify the length of the TMS/TDI bitstreams.
+ * @param start_tap_state must specify the current TAP state.
+ * @returns the final TAP state; pass as @a start_tap_state in following call.
+ */
+tap_state_t jtag_debug_state_machine(const void *tms_buf, const void *tdi_buf,
+		unsigned tap_len, tap_state_t start_tap_state);
+#else
+static inline tap_state_t jtag_debug_state_machine(const void *tms_buf,
+		const void *tdi_buf, unsigned tap_len, tap_state_t start_tap_state)
+{
+	return start_tap_state;
+}
+#endif // _DEBUG_JTAG_IO_
+
 /*-----</Cable Helper API>------------------------------------------*/
 
 



From mlu at mail.berlios.de  Sat Apr 25 02:54:26 2009
From: mlu at mail.berlios.de (mlu at mail.berlios.de)
Date: Sat, 25 Apr 2009 02:54:26 +0200
Subject: [Openocd-svn] r1526 - trunk/src/jtag
Message-ID: <200904250054.n3P0sQPs010465@sheep.berlios.de>

Author: mlu
Date: 2009-04-25 02:54:21 +0200 (Sat, 25 Apr 2009)
New Revision: 1526

Modified:
   trunk/src/jtag/ft2232.c
Log:
Break ft2232_execute_quie into smaller functions, follows restructure of jlink.c

Modified: trunk/src/jtag/ft2232.c
===================================================================
--- trunk/src/jtag/ft2232.c	2009-04-24 18:10:04 UTC (rev 1525)
+++ trunk/src/jtag/ft2232.c	2009-04-25 00:54:21 UTC (rev 1526)
@@ -423,8 +423,8 @@
 	int             scan_size;
 	enum scan_type  type;
 	int             retval;
-	u32             bytes_written;
-	u32             bytes_read;
+	u32             bytes_written=0;
+	u32             bytes_read=0;
 
 #ifdef _DEBUG_USB_IO_
 	struct timeval  start, inter, inter2, end;
@@ -1267,246 +1267,328 @@
 	LOG_DEBUG("trst: %i, srst: %i, high_output: 0x%2.2x, high_direction: 0x%2.2x", trst, srst, high_output, high_direction);
 }
 
-static int ft2232_execute_queue()
+static int ft2232_execute_end_state(jtag_command_t *cmd)
 {
-	jtag_command_t* cmd = jtag_command_queue;   /* currently processed command */
-	u8*             buffer;
-	int             scan_size;                  /* size of IR or DR scan */
-	enum scan_type  type;
-	int             i;
-	int             predicted_size = 0;
-	int             retval;
+	int  retval;
+	retval = ERROR_OK;
 
-	first_unsent = cmd;         /* next command that has to be sent */
-	require_send = 0;
+	DEBUG_JTAG_IO("end_state: %i", cmd->cmd.end_state->end_state);
 
-	/* return ERROR_OK, unless ft2232_send_and_recv reports a failed check
-	 * that wasn't handled by a caller-provided error handler
-	 */
-	retval = ERROR_OK;
+	if (cmd->cmd.end_state->end_state != TAP_INVALID)
+		ft2232_end_state(cmd->cmd.end_state->end_state);
 
-	ft2232_buffer_size = 0;
-	ft2232_expect_read = 0;
+	return retval;
+}
 
-	/* blink, if the current layout has that feature */
-	if (layout->blink)
-		layout->blink();
 
-	while (cmd)
+static int ft2232_execute_runtest(jtag_command_t *cmd)
+{
+	int  retval;
+	int             i;
+	int predicted_size = 0;
+	retval = ERROR_OK;
+
+	DEBUG_JTAG_IO("runtest %i cycles, end in %i",
+			cmd->cmd.runtest->num_cycles,
+			cmd->cmd.runtest->end_state);
+	/* only send the maximum buffer size that FT2232C can handle */
+	predicted_size = 0;
+	if (tap_get_state() != TAP_IDLE)
+		predicted_size += 3;
+	predicted_size += 3 * CEIL(cmd->cmd.runtest->num_cycles, 7);
+	if ( (cmd->cmd.runtest->end_state != TAP_INVALID) && (cmd->cmd.runtest->end_state != TAP_IDLE) )
+		predicted_size += 3;
+	if ( (cmd->cmd.runtest->end_state == TAP_INVALID) && (tap_get_end_state() != TAP_IDLE) )
+		predicted_size += 3;
+	if (ft2232_buffer_size + predicted_size + 1 > FT2232_BUFFER_SIZE)
 	{
-		switch (cmd->type)
-		{
-		case JTAG_END_STATE:
-			if (cmd->cmd.end_state->end_state != TAP_INVALID)
-				ft2232_end_state(cmd->cmd.end_state->end_state);
-			break;
+		if (ft2232_send_and_recv(first_unsent, cmd) != ERROR_OK)
+			retval = ERROR_JTAG_QUEUE_FAILED;
+		require_send = 0;
+		first_unsent = cmd;
+	}
+	if (tap_get_state() != TAP_IDLE)
+	{
+		/* command "Clock Data to TMS/CS Pin (no Read)" */
+		BUFFER_ADD = 0x4b;
+		BUFFER_ADD = 0x6;    /* scan 7 bits */
 
-		case JTAG_RESET:
-			/* only send the maximum buffer size that FT2232C can handle */
-			predicted_size = 3;
-			if (ft2232_buffer_size + predicted_size + 1 > FT2232_BUFFER_SIZE)
-			{
-				if (ft2232_send_and_recv(first_unsent, cmd) != ERROR_OK)
-					retval = ERROR_JTAG_QUEUE_FAILED;
-				require_send = 0;
-				first_unsent = cmd;
-			}
+		/* TMS data bits */
+		BUFFER_ADD = tap_get_tms_path(tap_get_state(), TAP_IDLE);
+		tap_set_state(TAP_IDLE);
+		require_send = 1;
+	}
+	i = cmd->cmd.runtest->num_cycles;
+	while (i > 0)
+	{
+		/* command "Clock Data to TMS/CS Pin (no Read)" */
+		BUFFER_ADD = 0x4b;
 
-			if ( (cmd->cmd.reset->trst == 1) || ( cmd->cmd.reset->srst && (jtag_reset_config & RESET_SRST_PULLS_TRST) ) )
-			{
-				tap_set_state(TAP_RESET);
-			}
-			layout->reset(cmd->cmd.reset->trst, cmd->cmd.reset->srst);
-			require_send = 1;
+		/* scan 7 bits */
+		BUFFER_ADD = (i > 7) ? 6 : (i - 1);
 
+		/* TMS data bits */
+		BUFFER_ADD = 0x0;
+		tap_set_state(TAP_IDLE);
+		i -= (i > 7) ? 7 : i;
+		/* LOG_DEBUG("added TMS scan (no read)"); */
+	}
+
+	if (cmd->cmd.runtest->end_state != TAP_INVALID)
+		ft2232_end_state(cmd->cmd.runtest->end_state);
+
+	if ( tap_get_state() != tap_get_end_state() )
+	{
+		/* command "Clock Data to TMS/CS Pin (no Read)" */
+		BUFFER_ADD = 0x4b;
+		/* scan 7 bit */
+		BUFFER_ADD = 0x6;
+		/* TMS data bits */
+		BUFFER_ADD = tap_get_tms_path( tap_get_state(), tap_get_end_state() );
+		tap_set_state( tap_get_end_state() );
+		/* LOG_DEBUG("added TMS scan (no read)"); */
+	}
+	require_send = 1;
 #ifdef _DEBUG_JTAG_IO_
-			LOG_DEBUG("trst: %i, srst: %i", cmd->cmd.reset->trst, cmd->cmd.reset->srst);
+	LOG_DEBUG( "runtest: %i, end in %s", cmd->cmd.runtest->num_cycles, tap_state_name( tap_get_end_state() ) );
 #endif
-			break;
 
-		case JTAG_RUNTEST:
-			/* only send the maximum buffer size that FT2232C can handle */
-			predicted_size = 0;
-			if (tap_get_state() != TAP_IDLE)
-				predicted_size += 3;
-			predicted_size += 3 * CEIL(cmd->cmd.runtest->num_cycles, 7);
-			if ( (cmd->cmd.runtest->end_state != TAP_INVALID) && (cmd->cmd.runtest->end_state != TAP_IDLE) )
-				predicted_size += 3;
-			if ( (cmd->cmd.runtest->end_state == TAP_INVALID) && (tap_get_end_state() != TAP_IDLE) )
-				predicted_size += 3;
-			if (ft2232_buffer_size + predicted_size + 1 > FT2232_BUFFER_SIZE)
-			{
-				if (ft2232_send_and_recv(first_unsent, cmd) != ERROR_OK)
-					retval = ERROR_JTAG_QUEUE_FAILED;
-				require_send = 0;
-				first_unsent = cmd;
-			}
-			if (tap_get_state() != TAP_IDLE)
-			{
-				/* command "Clock Data to TMS/CS Pin (no Read)" */
-				BUFFER_ADD = 0x4b;
-				BUFFER_ADD = 0x6;    /* scan 7 bits */
+	return retval;
+}
 
-				/* TMS data bits */
-				BUFFER_ADD = tap_get_tms_path(tap_get_state(), TAP_IDLE);
-				tap_set_state(TAP_IDLE);
-				require_send = 1;
-			}
-			i = cmd->cmd.runtest->num_cycles;
-			while (i > 0)
-			{
-				/* command "Clock Data to TMS/CS Pin (no Read)" */
-				BUFFER_ADD = 0x4b;
+static int ft2232_execute_statemove(jtag_command_t *cmd)
+{
+	int  retval;
+	int predicted_size = 0;
+	retval = ERROR_OK;
 
-				/* scan 7 bits */
-				BUFFER_ADD = (i > 7) ? 6 : (i - 1);
+	DEBUG_JTAG_IO("statemove end in %i", cmd->cmd.statemove->end_state);
 
-				/* TMS data bits */
-				BUFFER_ADD = 0x0;
-				tap_set_state(TAP_IDLE);
-				i -= (i > 7) ? 7 : i;
-				/* LOG_DEBUG("added TMS scan (no read)"); */
-			}
+	/* only send the maximum buffer size that FT2232C can handle */
+	predicted_size = 3;
+	if (ft2232_buffer_size + predicted_size + 1 > FT2232_BUFFER_SIZE)
+	{
+		if (ft2232_send_and_recv(first_unsent, cmd) != ERROR_OK)
+			retval = ERROR_JTAG_QUEUE_FAILED;
+		require_send = 0;
+		first_unsent = cmd;
+	}
+	if (cmd->cmd.statemove->end_state != TAP_INVALID)
+		ft2232_end_state(cmd->cmd.statemove->end_state);
 
-			if (cmd->cmd.runtest->end_state != TAP_INVALID)
-				ft2232_end_state(cmd->cmd.runtest->end_state);
+	/* command "Clock Data to TMS/CS Pin (no Read)" */
+	BUFFER_ADD = 0x4b;
 
-			if ( tap_get_state() != tap_get_end_state() )
-			{
-				/* command "Clock Data to TMS/CS Pin (no Read)" */
-				BUFFER_ADD = 0x4b;
-				/* scan 7 bit */
-				BUFFER_ADD = 0x6;
-				/* TMS data bits */
-				BUFFER_ADD = tap_get_tms_path( tap_get_state(), tap_get_end_state() );
-				tap_set_state( tap_get_end_state() );
-				/* LOG_DEBUG("added TMS scan (no read)"); */
-			}
-			require_send = 1;
+	BUFFER_ADD = 0x6;       /* scan 7 bits */
+
+			/* TMS data bits */
+	BUFFER_ADD = tap_get_tms_path( tap_get_state(), tap_get_end_state() );
+	/* LOG_DEBUG("added TMS scan (no read)"); */
+	tap_set_state( tap_get_end_state() );
+	require_send = 1;
 #ifdef _DEBUG_JTAG_IO_
-			LOG_DEBUG( "runtest: %i, end in %s", cmd->cmd.runtest->num_cycles, tap_state_name( tap_get_end_state() ) );
+	LOG_DEBUG( "statemove: %s", tap_state_name( tap_get_end_state() ) );
 #endif
-			break;
+	
+	return retval;
+}
 
-		case JTAG_STATEMOVE:
-			/* only send the maximum buffer size that FT2232C can handle */
-			predicted_size = 3;
-			if (ft2232_buffer_size + predicted_size + 1 > FT2232_BUFFER_SIZE)
-			{
-				if (ft2232_send_and_recv(first_unsent, cmd) != ERROR_OK)
-					retval = ERROR_JTAG_QUEUE_FAILED;
-				require_send = 0;
-				first_unsent = cmd;
-			}
-			if (cmd->cmd.statemove->end_state != TAP_INVALID)
-				ft2232_end_state(cmd->cmd.statemove->end_state);
+static int ft2232_execute_pathmove(jtag_command_t *cmd)
+{
+	int  retval;
+	int predicted_size = 0;
+	retval = ERROR_OK;
 
-			/* command "Clock Data to TMS/CS Pin (no Read)" */
-			BUFFER_ADD = 0x4b;
-
-			BUFFER_ADD = 0x6;       /* scan 7 bits */
-
-			/* TMS data bits */
-			BUFFER_ADD = tap_get_tms_path( tap_get_state(), tap_get_end_state() );
-			/* LOG_DEBUG("added TMS scan (no read)"); */
-			tap_set_state( tap_get_end_state() );
-			require_send = 1;
+	DEBUG_JTAG_IO("pathmove: %i states, end in %i",
+		cmd->cmd.pathmove->num_states,
+		cmd->cmd.pathmove->path[cmd->cmd.pathmove->num_states - 1]);
+	/* only send the maximum buffer size that FT2232C can handle */
+	predicted_size = 3 * CEIL(cmd->cmd.pathmove->num_states, 7);
+	if (ft2232_buffer_size + predicted_size + 1 > FT2232_BUFFER_SIZE)
+	{
+		if (ft2232_send_and_recv(first_unsent, cmd) != ERROR_OK)
+		retval = ERROR_JTAG_QUEUE_FAILED;
+		require_send = 0;
+		first_unsent = cmd;
+	}
+	ft2232_add_pathmove(cmd->cmd.pathmove);
+	require_send = 1;
 #ifdef _DEBUG_JTAG_IO_
-			LOG_DEBUG( "statemove: %s", tap_state_name( tap_get_end_state() ) );
+	LOG_DEBUG( "pathmove: %i states, end in %s", cmd->cmd.pathmove->num_states,
+		tap_state_name(cmd->cmd.pathmove->path[cmd->cmd.pathmove->num_states - 1]) );
 #endif
-			break;
+	return retval;
+}
 
-		case JTAG_PATHMOVE:
-			/* only send the maximum buffer size that FT2232C can handle */
-			predicted_size = 3 * CEIL(cmd->cmd.pathmove->num_states, 7);
-			if (ft2232_buffer_size + predicted_size + 1 > FT2232_BUFFER_SIZE)
-			{
-				if (ft2232_send_and_recv(first_unsent, cmd) != ERROR_OK)
-					retval = ERROR_JTAG_QUEUE_FAILED;
-				require_send = 0;
-				first_unsent = cmd;
-			}
-			ft2232_add_pathmove(cmd->cmd.pathmove);
-			require_send = 1;
+static int ft2232_execute_scan(jtag_command_t *cmd)
+{
+	int             retval;
+	u8*             buffer;
+	int             scan_size;                  /* size of IR or DR scan */
+	enum scan_type  type;
+	int             predicted_size = 0;
+	retval = ERROR_OK;
+
+	scan_size = jtag_build_buffer(cmd->cmd.scan, &buffer);
+	type = jtag_scan_type(cmd->cmd.scan);
+	predicted_size = ft2232_predict_scan_out(scan_size, type);
+	if ( (predicted_size + 1) > FT2232_BUFFER_SIZE )
+	{
+		LOG_DEBUG("oversized ft2232 scan (predicted_size > FT2232_BUFFER_SIZE)");
+		/* unsent commands before this */
+		if (first_unsent != cmd)
+			if (ft2232_send_and_recv(first_unsent, cmd) != ERROR_OK)
+				retval = ERROR_JTAG_QUEUE_FAILED;
+
+		/* current command */
+		if (cmd->cmd.scan->end_state != TAP_INVALID)
+			ft2232_end_state(cmd->cmd.scan->end_state);
+		ft2232_large_scan(cmd->cmd.scan, type, buffer, scan_size);
+		require_send = 0;
+		first_unsent = cmd->next;
+		if (buffer)
+			free(buffer);
+		return retval;
+	}
+	else if (ft2232_buffer_size + predicted_size + 1 > FT2232_BUFFER_SIZE)
+	{
+		LOG_DEBUG("ft2232 buffer size reached, sending queued commands (first_unsent: %p, cmd: %p)",
+				first_unsent,
+				cmd);
+		if (ft2232_send_and_recv(first_unsent, cmd) != ERROR_OK)
+			retval = ERROR_JTAG_QUEUE_FAILED;
+		require_send = 0;
+		first_unsent = cmd;
+	}
+	ft2232_expect_read += ft2232_predict_scan_in(scan_size, type);
+	/* LOG_DEBUG("new read size: %i", ft2232_expect_read); */
+	if (cmd->cmd.scan->end_state != TAP_INVALID)
+		ft2232_end_state(cmd->cmd.scan->end_state);
+	ft2232_add_scan(cmd->cmd.scan->ir_scan, type, buffer, scan_size);
+	require_send = 1;
+	if (buffer)
+		free(buffer);
 #ifdef _DEBUG_JTAG_IO_
-			LOG_DEBUG( "pathmove: %i states, end in %s", cmd->cmd.pathmove->num_states,
-					tap_state_name(cmd->cmd.pathmove->path[cmd->cmd.pathmove->num_states - 1]) );
+	LOG_DEBUG( "%s scan, %i bits, end in %s", (cmd->cmd.scan->ir_scan) ? "IR" : "DR", scan_size,
+			tap_state_name( tap_get_end_state() ) );
 #endif
-			break;
+	return retval;
 
-		case JTAG_SCAN:
-			scan_size = jtag_build_buffer(cmd->cmd.scan, &buffer);
-			type = jtag_scan_type(cmd->cmd.scan);
-			predicted_size = ft2232_predict_scan_out(scan_size, type);
-			if ( (predicted_size + 1) > FT2232_BUFFER_SIZE )
-			{
-				LOG_DEBUG("oversized ft2232 scan (predicted_size > FT2232_BUFFER_SIZE)");
-				/* unsent commands before this */
-				if (first_unsent != cmd)
-					if (ft2232_send_and_recv(first_unsent, cmd) != ERROR_OK)
-						retval = ERROR_JTAG_QUEUE_FAILED;
+}
 
-				/* current command */
-				if (cmd->cmd.scan->end_state != TAP_INVALID)
-					ft2232_end_state(cmd->cmd.scan->end_state);
-				ft2232_large_scan(cmd->cmd.scan, type, buffer, scan_size);
-				require_send = 0;
-				first_unsent = cmd->next;
-				if (buffer)
-					free(buffer);
-				break;
-			}
-			else if (ft2232_buffer_size + predicted_size + 1 > FT2232_BUFFER_SIZE)
-			{
-				LOG_DEBUG("ft2232 buffer size reached, sending queued commands (first_unsent: %p, cmd: %p)",
-						first_unsent,
-						cmd);
-				if (ft2232_send_and_recv(first_unsent, cmd) != ERROR_OK)
-					retval = ERROR_JTAG_QUEUE_FAILED;
-				require_send = 0;
-				first_unsent = cmd;
-			}
-			ft2232_expect_read += ft2232_predict_scan_in(scan_size, type);
-			/* LOG_DEBUG("new read size: %i", ft2232_expect_read); */
-			if (cmd->cmd.scan->end_state != TAP_INVALID)
-				ft2232_end_state(cmd->cmd.scan->end_state);
-			ft2232_add_scan(cmd->cmd.scan->ir_scan, type, buffer, scan_size);
-			require_send = 1;
-			if (buffer)
-				free(buffer);
+static int ft2232_execute_reset(jtag_command_t *cmd)
+{
+	int             retval;
+	int             predicted_size = 0;
+	retval = ERROR_OK;
+
+	DEBUG_JTAG_IO("reset trst: %i srst %i",
+			cmd->cmd.reset->trst, cmd->cmd.reset->srst);
+
+	/* only send the maximum buffer size that FT2232C can handle */
+	predicted_size = 3;
+	if (ft2232_buffer_size + predicted_size + 1 > FT2232_BUFFER_SIZE)
+	{
+		if (ft2232_send_and_recv(first_unsent, cmd) != ERROR_OK)
+			retval = ERROR_JTAG_QUEUE_FAILED;
+		require_send = 0;
+		first_unsent = cmd;
+	}
+
+	if ( (cmd->cmd.reset->trst == 1) || ( cmd->cmd.reset->srst && (jtag_reset_config & RESET_SRST_PULLS_TRST) ) )
+	{
+		tap_set_state(TAP_RESET);
+	}
+	layout->reset(cmd->cmd.reset->trst, cmd->cmd.reset->srst);
+	require_send = 1;
+
 #ifdef _DEBUG_JTAG_IO_
-			LOG_DEBUG( "%s scan, %i bits, end in %s", (cmd->cmd.scan->ir_scan) ? "IR" : "DR", scan_size,
-					tap_state_name( tap_get_end_state() ) );
+	LOG_DEBUG("trst: %i, srst: %i", cmd->cmd.reset->trst, cmd->cmd.reset->srst);
 #endif
-			break;
+	return retval;
+}
 
-		case JTAG_SLEEP:
-			if (ft2232_send_and_recv(first_unsent, cmd) != ERROR_OK)
+static int ft2232_execute_sleep(jtag_command_t *cmd)
+{
+	int             retval;
+	retval = ERROR_OK;
+
+	DEBUG_JTAG_IO("sleep %i", cmd->cmd.sleep->us);
+
+	if (ft2232_send_and_recv(first_unsent, cmd) != ERROR_OK)
 				retval = ERROR_JTAG_QUEUE_FAILED;
-			first_unsent = cmd->next;
-			jtag_sleep(cmd->cmd.sleep->us);
+	first_unsent = cmd->next;
+	jtag_sleep(cmd->cmd.sleep->us);
 #ifdef _DEBUG_JTAG_IO_
 			LOG_DEBUG( "sleep %i usec while in %s", cmd->cmd.sleep->us, tap_state_name( tap_get_state() ) );
 #endif
-			break;
 
-		case JTAG_STABLECLOCKS:
+	return retval;
+}
 
-			/* this is only allowed while in a stable state.  A check for a stable
-			 * state was done in jtag_add_clocks()
-			 */
-			if (ft2232_stableclocks(cmd->cmd.stableclocks->num_cycles, cmd) != ERROR_OK)
-				retval = ERROR_JTAG_QUEUE_FAILED;
+static int ft2232_execute_stableclocks(jtag_command_t *cmd)
+{
+	int             retval;
+	retval = ERROR_OK;
+
+	/* this is only allowed while in a stable state.  A check for a stable
+	 * state was done in jtag_add_clocks()
+	 */
+	if (ft2232_stableclocks(cmd->cmd.stableclocks->num_cycles, cmd) != ERROR_OK)
+		retval = ERROR_JTAG_QUEUE_FAILED;
 #ifdef _DEBUG_JTAG_IO_
-			LOG_DEBUG( "clocks %i while in %s", cmd->cmd.stableclocks->num_cycles, tap_state_name( tap_get_state() ) );
+	LOG_DEBUG( "clocks %i while in %s", cmd->cmd.stableclocks->num_cycles, tap_state_name( tap_get_state() ) );
 #endif
-			break;
 
+	return retval;
+}
+
+static int ft2232_execute_command(jtag_command_t *cmd)
+{
+	int             retval;
+	retval = ERROR_OK;
+
+	switch (cmd->type)
+	{
+		case JTAG_END_STATE: retval = ft2232_execute_end_state(cmd); break;
+		case JTAG_RESET:	 retval = ft2232_execute_reset(cmd); break;
+		case JTAG_RUNTEST:   retval = ft2232_execute_runtest(cmd); break;
+		case JTAG_STATEMOVE: retval = ft2232_execute_statemove(cmd); break;
+		case JTAG_PATHMOVE:  retval = ft2232_execute_pathmove(cmd); break;
+		case JTAG_SCAN: 	 retval = ft2232_execute_scan(cmd); break;
+		case JTAG_SLEEP:	 retval = ft2232_execute_sleep(cmd); break;
+		case JTAG_STABLECLOCKS: retval = ft2232_execute_stableclocks(cmd); break;
 		default:
 			LOG_ERROR("BUG: unknown JTAG command type encountered");
-			exit(-1);
-		}
+			exit(-1);	
+	}
+	return retval;
+}
 
+static int ft2232_execute_queue()
+{
+	jtag_command_t* cmd = jtag_command_queue;   /* currently processed command */
+	int             retval;
+
+	first_unsent = cmd;         /* next command that has to be sent */
+	require_send = 0;
+
+	/* return ERROR_OK, unless ft2232_send_and_recv reports a failed check
+	 * that wasn't handled by a caller-provided error handler
+	 */
+	retval = ERROR_OK;
+
+	ft2232_buffer_size = 0;
+	ft2232_expect_read = 0;
+
+	/* blink, if the current layout has that feature */
+	if (layout->blink)
+		layout->blink();
+
+	while (cmd)
+	{
+		if (ft2232_execute_command(cmd) != ERROR_OK)
+			retval = ERROR_JTAG_QUEUE_FAILED;
 		cmd = cmd->next;
 	}
 



From mlu at mail.berlios.de  Sat Apr 25 02:58:51 2009
From: mlu at mail.berlios.de (mlu at mail.berlios.de)
Date: Sat, 25 Apr 2009 02:58:51 +0200
Subject: [Openocd-svn] r1527 - trunk/src/jtag
Message-ID: <200904250058.n3P0wpIv010984@sheep.berlios.de>

Author: mlu
Date: 2009-04-25 02:58:49 +0200 (Sat, 25 Apr 2009)
New Revision: 1527

Modified:
   trunk/src/jtag/ft2232.c
Log:
Fix ft2232 TX buffer overflow

Modified: trunk/src/jtag/ft2232.c
===================================================================
--- trunk/src/jtag/ft2232.c	2009-04-25 00:54:21 UTC (rev 1526)
+++ trunk/src/jtag/ft2232.c	2009-04-25 00:58:49 UTC (rev 1527)
@@ -1589,6 +1589,13 @@
 	{
 		if (ft2232_execute_command(cmd) != ERROR_OK)
 			retval = ERROR_JTAG_QUEUE_FAILED;
+		/* Start reading input before FT2232 TX buffer fills up */
+		if (ft2232_expect_read > 280)
+		{
+			if (ft2232_send_and_recv(first_unsent, cmd) != ERROR_OK)
+				retval = ERROR_JTAG_QUEUE_FAILED;
+			first_unsent = cmd;
+		}
 		cmd = cmd->next;
 	}
 



From mlu at mail.berlios.de  Sat Apr 25 04:53:18 2009
From: mlu at mail.berlios.de (mlu at mail.berlios.de)
Date: Sat, 25 Apr 2009 04:53:18 +0200
Subject: [Openocd-svn] r1528 - trunk/src/jtag
Message-ID: <200904250253.n3P2rIXG027519@sheep.berlios.de>

Author: mlu
Date: 2009-04-25 04:53:07 +0200 (Sat, 25 Apr 2009)
New Revision: 1528

Modified:
   trunk/src/jtag/ft2232.c
Log:
Corrected statement order

Modified: trunk/src/jtag/ft2232.c
===================================================================
--- trunk/src/jtag/ft2232.c	2009-04-25 00:58:49 UTC (rev 1527)
+++ trunk/src/jtag/ft2232.c	2009-04-25 02:53:07 UTC (rev 1528)
@@ -1590,13 +1590,13 @@
 		if (ft2232_execute_command(cmd) != ERROR_OK)
 			retval = ERROR_JTAG_QUEUE_FAILED;
 		/* Start reading input before FT2232 TX buffer fills up */
-		if (ft2232_expect_read > 280)
+		cmd = cmd->next;
+		if (ft2232_expect_read > 256)
 		{
 			if (ft2232_send_and_recv(first_unsent, cmd) != ERROR_OK)
 				retval = ERROR_JTAG_QUEUE_FAILED;
 			first_unsent = cmd;
 		}
-		cmd = cmd->next;
 	}
 
 	if (require_send > 0)



From oharboe at mail.berlios.de  Sun Apr 26 22:02:17 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Sun, 26 Apr 2009 22:02:17 +0200
Subject: [Openocd-svn] r1529 - trunk/src/jtag
Message-ID: <200904262002.n3QK2HVk008315@sheep.berlios.de>

Author: oharboe
Date: 2009-04-26 22:02:15 +0200 (Sun, 26 Apr 2009)
New Revision: 1529

Modified:
   trunk/src/jtag/jtag.h
Log:
Zach Welch <zw at superlucidity.net> add TAP_SCAN_BYTES macro

Modified: trunk/src/jtag/jtag.h
===================================================================
--- trunk/src/jtag/jtag.h	2009-04-25 02:53:07 UTC (rev 1528)
+++ trunk/src/jtag/jtag.h	2009-04-26 20:02:15 UTC (rev 1529)
@@ -237,7 +237,7 @@
 typedef int (*in_handler_t)(u8* in_value, void* priv, struct scan_field_s* field);
 
 /// @brief calculates number of bytes required to hold @a n TAP scan bits
-#define TAP_SCAN_BYTES(n)		(((n) / 8) + !!((n) % 8))
+#define TAP_SCAN_BYTES(n)		CEIL(n, 8)
 
 typedef struct scan_field_s
 {



From oharboe at mail.berlios.de  Sun Apr 26 22:03:43 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Sun, 26 Apr 2009 22:03:43 +0200
Subject: [Openocd-svn] r1530 - trunk/src/target/target
Message-ID: <200904262003.n3QK3hAT008432@sheep.berlios.de>

Author: oharboe
Date: 2009-04-26 22:03:41 +0200 (Sun, 26 Apr 2009)
New Revision: 1530

Added:
   trunk/src/target/target/at91sam9260_ext_RAM_ext_flash.cfg
Log:
R.Doss <doss at gmx.de> AT91SAM9260

Added: trunk/src/target/target/at91sam9260_ext_RAM_ext_flash.cfg
===================================================================
--- trunk/src/target/target/at91sam9260_ext_RAM_ext_flash.cfg	2009-04-26 20:02:15 UTC (rev 1529)
+++ trunk/src/target/target/at91sam9260_ext_RAM_ext_flash.cfg	2009-04-26 20:03:41 UTC (rev 1530)
@@ -0,0 +1,127 @@
+
+
+
+jtag_khz 4
+
+
+######################################
+# Target:    Atmel AT91SAM9260
+######################################
+
+if { [info exists CHIPNAME] } {	
+   set  _CHIPNAME $CHIPNAME    
+} else {	 
+   set  _CHIPNAME at91sam9260
+}
+
+if { [info exists ENDIAN] } {	
+   set  _ENDIAN $ENDIAN    
+} else {	 
+   set  _ENDIAN little
+}
+
+if { [info exists CPUTAPID ] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+  # force an error till we get a good number
+   set _CPUTAPID 0x0792603f
+}
+
+reset_config trst_and_srst
+
+
+jtag_nsrst_delay 200
+jtag_ntrst_delay 200
+
+
+jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+
+
+######################
+# Target configuration
+######################
+
+set _TARGETNAME [format "%s.cpu" $_CHIPNAME]
+target create $_TARGETNAME arm926ejs -endian $_ENDIAN -chain-position $_TARGETNAME -variant arm926ejs
+
+$_TARGETNAME invoke-event halted
+
+# Internal sram1 memory
+$_TARGETNAME configure -work-area-virt 0 -work-area-phys 0x00300000 -work-area-size 0x1000 -work-area-backup 1
+
+scan_chain
+$_TARGETNAME configure -event reset-deassert-post {at91sam_init}
+
+
+# Flash configuration
+#flash bank cfi <base> <size> <chip width> <bus width> <target#>
+flash bank cfi 0x10000000 0x01000000 2 2 $_TARGETNAME
+
+
+proc at91sam_init { } {
+	
+	# at reset chip runs at 32khz
+	jtag_khz 8
+	halt
+	mww 0xfffffd08 0xa5000501         # RSTC_MR : enable user reset
+	mww 0xfffffd44 0x00008000         # WDT_MR : disable watchdog
+
+	mww 0xfffffc20 0x00004001         # CKGR_MOR : enable the main oscillator
+	sleep 20                          # wait 20 ms
+	mww 0xfffffc30 0x00000001         # PMC_MCKR : switch to main oscillator
+	sleep 10                          # wait 10 ms
+	mww 0xfffffc28 0x2060bf09         # CKGR_PLLAR: Set PLLA Register for 198,656MHz
+	sleep 20                          # wait 20 ms
+	mww 0xfffffc30 0x00000101         # PMC_MCKR : Select prescaler
+	sleep 10                          # wait 10 ms
+	mww 0xfffffc30 0x00000102         # PMC_MCKR : Clock from PLLA is selected
+	sleep 10                          # wait 10 ms
+
+	# Now run at anything fast... ie: 10mhz!
+	jtag_khz 10000                    # Increase JTAG Speed to 6 MHz
+	arm7_9 dcc_downloads enable       # Enable faster DCC downloads
+
+	mww 0xffffec00 0x0a0a0a0a         # SMC_SETUP0 : Setup SMC for Intel NOR Flash JS28F128P30T85 128MBit
+	mww 0xffffec04 0x0b0b0b0b         # SMC_PULSE0
+	mww 0xffffec08 0x00160016         # SMC_CYCLE0
+	mww 0xffffec0c 0x00161003         # SMC_MODE0
+
+	flash probe 0                     # Identify flash bank 0
+
+	mww 0xfffff870 0xffff0000         # PIO_ASR : Select peripheral function for D15..D31
+	mww 0xfffff804 0xffff0000         # PIO_PDR : Disable PIO function for D15..D31
+
+	mww 0xffffef1c 0x2                # EBI_CSA : Assign EBI Chip Select 1 to SDRAM
+
+	mww 0xffffea08 0x85227259         # SDRAMC_CR : Configure SDRAM (2 x Samsung K4S561632H-UC75 : 4M x 16Bit x 4 Banks)
+	#mww 0xffffea08 0x85227254         # SDRAMC_CR : Configure SDRAM (2 x Samsung K4S641632H-UC75 : 1M x 16Bit x 4 Banks)
+
+	mww 0xffffea00 0x1                # SDRAMC_MR : issue a NOP command
+	mww 0x20000000 0
+	mww 0xffffea00 0x2                # SDRAMC_MR : issue an 'All Banks Precharge' command
+	mww 0x20000000 0
+	mww 0xffffea00 0x4                # SDRAMC_MR : issue 8 x 'Auto-Refresh' Command
+	mww 0x20000000 0
+	mww 0xffffea00 0x4
+	mww 0x20000000 0
+	mww 0xffffea00 0x4
+	mww 0x20000000 0
+	mww 0xffffea00 0x4
+	mww 0x20000000 0
+	mww 0xffffea00 0x4
+	mww 0x20000000 0
+	mww 0xffffea00 0x4
+	mww 0x20000000 0
+	mww 0xffffea00 0x4
+	mww 0x20000000 0
+	mww 0xffffea00 0x4
+	mww 0x20000000 0
+	mww 0xffffea00 0x3                # SDRAMC_MR : issue a 'Load Mode Register' command
+	mww 0x20000000 0
+	mww 0xffffea00 0x0                # SDRAMC_MR : normal mode
+	mww 0x20000000 0
+	mww 0xffffea04 0x5d2              # SDRAMC_TR : Set refresh timer count to 15us
+}
+
+
+



From oharboe at mail.berlios.de  Sun Apr 26 22:05:09 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Sun, 26 Apr 2009 22:05:09 +0200
Subject: [Openocd-svn] r1531 - in trunk/src/target: board target
Message-ID: <200904262005.n3QK590E008596@sheep.berlios.de>

Author: oharboe
Date: 2009-04-26 22:05:08 +0200 (Sun, 26 Apr 2009)
New Revision: 1531

Modified:
   trunk/src/target/board/ti_beagleboard.cfg
   trunk/src/target/target/omap3530.cfg
Log:
Zach Welch <zw at superlucidity.net> fix typo

Modified: trunk/src/target/board/ti_beagleboard.cfg
===================================================================
--- trunk/src/target/board/ti_beagleboard.cfg	2009-04-26 20:03:41 UTC (rev 1530)
+++ trunk/src/target/board/ti_beagleboard.cfg	2009-04-26 20:05:08 UTC (rev 1531)
@@ -7,5 +7,5 @@
 runtest 10
 jtag_reset 0 0
 
-endstate IDLE
+endstate RUN/IDLE
 

Modified: trunk/src/target/target/omap3530.cfg
===================================================================
--- trunk/src/target/target/omap3530.cfg	2009-04-26 20:03:41 UTC (rev 1530)
+++ trunk/src/target/target/omap3530.cfg	2009-04-26 20:05:08 UTC (rev 1531)
@@ -32,8 +32,8 @@
 	irscan omap3.jrc 7 -endstate IRPAUSE
 	drscan omap3.jrc 8 0x89 -endstate DRPAUSE
 	irscan omap3.jrc 2 -endstate IRPAUSE
-	drscan omap3.jrc 32 0xa3002108  -endstate IDLE
-	irscan omap3.jrc 0x3F -endstate IDLE
+	drscan omap3.jrc 32 0xa3002108  -endstate RUN/IDLE
+	irscan omap3.jrc 0x3F -endstate RUN/IDLE
 	runtest 10
 	puts "Cortex-A8 @ OMAP3 enabled"
 }



From oharboe at mail.berlios.de  Mon Apr 27 07:29:35 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Mon, 27 Apr 2009 07:29:35 +0200
Subject: [Openocd-svn] r1532 - in trunk/src: helper target
Message-ID: <200904270529.n3R5TZTF011204@sheep.berlios.de>

Author: oharboe
Date: 2009-04-27 07:29:30 +0200 (Mon, 27 Apr 2009)
New Revision: 1532

Modified:
   trunk/src/helper/jim.c
   trunk/src/target/oocd_trace.c
Log:
Zach Welch <zw at superlucidity.net> wrap _GNU_SOURCE defines

Modified: trunk/src/helper/jim.c
===================================================================
--- trunk/src/helper/jim.c	2009-04-26 20:05:08 UTC (rev 1531)
+++ trunk/src/helper/jim.c	2009-04-27 05:29:30 UTC (rev 1532)
@@ -49,7 +49,9 @@
 #define JIM_DYNLIB      /* Dynamic library support for UNIX and WIN32 */
 #endif /* JIM_ANSIC */
 
+#ifndef _GNU_SOURCE
 #define _GNU_SOURCE	/* for vasprintf() */
+#endif
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>

Modified: trunk/src/target/oocd_trace.c
===================================================================
--- trunk/src/target/oocd_trace.c	2009-04-26 20:05:08 UTC (rev 1531)
+++ trunk/src/target/oocd_trace.c	2009-04-27 05:29:30 UTC (rev 1532)
@@ -21,7 +21,9 @@
 #include "config.h"
 #endif
 
+#ifndef _GNU_SOURCE
 #define _GNU_SOURCE
+#endif
 #include <string.h>
 #include <errno.h>
 



From oharboe at mail.berlios.de  Mon Apr 27 07:30:17 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Mon, 27 Apr 2009 07:30:17 +0200
Subject: [Openocd-svn] r1533 - trunk
Message-ID: <200904270530.n3R5UH4k011675@sheep.berlios.de>

Author: oharboe
Date: 2009-04-27 07:30:15 +0200 (Mon, 27 Apr 2009)
New Revision: 1533

Modified:
   trunk/configure.in
Log:
Zach Welch <zw at superlucidity.net> add -Wcast-align and -Wbad-function-cast

Modified: trunk/configure.in
===================================================================
--- trunk/configure.in	2009-04-27 05:29:30 UTC (rev 1532)
+++ trunk/configure.in	2009-04-27 05:30:15 UTC (rev 1533)
@@ -776,6 +776,8 @@
 GCC_WARNINGS="-Wall -Wstrict-prototypes -Wformat-security"
 if test "${gcc_wextra}" = yes; then
 	GCC_WARNINGS="${GCC_WARNINGS} -Wextra -Wno-unused-parameter"
+	GCC_WARNINGS="${GCC_WARNINGS} -Wbad-function-cast"
+	GCC_WARNINGS="${GCC_WARNINGS} -Wcast-align"
 fi
 if test "${gcc_werror}" = yes; then
 	GCC_WARNINGS="${GCC_WARNINGS} -Werror"



From oharboe at mail.berlios.de  Mon Apr 27 07:40:55 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Mon, 27 Apr 2009 07:40:55 +0200
Subject: [Openocd-svn] r1534 - trunk/src/flash
Message-ID: <200904270540.n3R5et0b024009@sheep.berlios.de>

Author: oharboe
Date: 2009-04-27 07:40:52 +0200 (Mon, 27 Apr 2009)
New Revision: 1534

Modified:
   trunk/src/flash/mflash.c
Log:
Philippe Vachon <philippe at cowpig.ca> 64 bit host fixes

Modified: trunk/src/flash/mflash.c
===================================================================
--- trunk/src/flash/mflash.c	2009-04-27 05:30:15 UTC (rev 1533)
+++ trunk/src/flash/mflash.c	2009-04-27 05:40:52 UTC (rev 1534)
@@ -473,14 +473,16 @@
 	residue = sect_cnt % 256;
 
 	for (i = 0; i < quotient; i++) {
-		LOG_DEBUG("sect num : %u buff : 0x%8.8x", sect_num, (u32)buff_ptr);
+		LOG_DEBUG("sect num : %u buff : 0x%0lx", sect_num, 
+			(unsigned long)buff_ptr);
 		mg_mflash_do_read_sects(buff_ptr, sect_num, 256);
 		sect_num += 256;
 		buff_ptr += 256 * MG_MFLASH_SECTOR_SIZE;
 	}
 
 	if (residue) {
-		LOG_DEBUG("sect num : %u buff : %8.8x", sect_num, (u32)buff_ptr);
+		LOG_DEBUG("sect num : %u buff : %0lx", sect_num, 
+			(unsigned long)buff_ptr);
 		mg_mflash_do_read_sects(buff_ptr, sect_num, residue);
 	}
 
@@ -542,14 +544,16 @@
 	residue = sect_cnt % 256;
 
 	for (i = 0; i < quotient; i++) {
-		LOG_DEBUG("sect num : %u buff : %8.8x", sect_num, (u32)buff_ptr);
+		LOG_DEBUG("sect num : %u buff : %0lx", sect_num, 
+			(unsigned long)buff_ptr);
 		mg_mflash_do_write_sects(buff_ptr, sect_num, 256);
 		sect_num += 256;
 		buff_ptr += 256 * MG_MFLASH_SECTOR_SIZE;
 	}
 
 	if (residue) {
-		LOG_DEBUG("sect num : %u buff : %8.8x", sect_num, (u32)buff_ptr);
+		LOG_DEBUG("sect num : %u buff : %0lx", sect_num, 
+			(unsigned long)buff_ptr);
 		mg_mflash_do_write_sects(buff_ptr, sect_num, residue);
 	}
 



From mlu at mail.berlios.de  Mon Apr 27 10:21:37 2009
From: mlu at mail.berlios.de (mlu at mail.berlios.de)
Date: Mon, 27 Apr 2009 10:21:37 +0200
Subject: [Openocd-svn] r1535 - trunk/src/target
Message-ID: <200904270821.n3R8LbJ5003005@sheep.berlios.de>

Author: mlu
Date: 2009-04-27 10:21:35 +0200 (Mon, 27 Apr 2009)
New Revision: 1535

Added:
   trunk/src/target/arm_adi_v5.c
   trunk/src/target/arm_adi_v5.h
Log:
Added arm_adi_v5.c/h, to replace cortex_swjdp.c/h. Better conformance to ARM Debug Interface rev 5 documentation and remoed code specific to the Cortex-M3 targets.

Added: trunk/src/target/arm_adi_v5.c
===================================================================
--- trunk/src/target/arm_adi_v5.c	2009-04-27 05:40:52 UTC (rev 1534)
+++ trunk/src/target/arm_adi_v5.c	2009-04-27 08:21:35 UTC (rev 1535)
@@ -0,0 +1,1121 @@
+/***************************************************************************
+ *   Copyright (C) 2006 by Magnus Lundin                                   *
+ *   lundin at mlu.mine.nu                                                    *
+ *                                                                         *
+ *   Copyright (C) 2008 by Spencer Oliver                                  *
+ *   spen at spen-soft.co.uk                                                  *
+ *                                                                         *
+ *   Copyright (C) 2009 by Oyvind Harboe                                   *
+ *   oyvind.harboe at zylin.com                                               *
+ *																		   *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   This program is distributed in the hope that it will be useful,       *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
+ *   GNU General Public License for more details.                          *
+ *                                                                         *
+ *   You should have received a copy of the GNU General Public License     *
+ *   along with this program; if not, write to the                         *
+ *   Free Software Foundation, Inc.,                                       *
+ *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
+ ***************************************************************************/
+/***************************************************************************
+ *                                                                         *
+ * This file implements support for the ARM Debug Interface v5  (ADI_V5)   *
+ *                                                                         *
+ * ARM(tm) Debug Interface v5 Architecture Specification    ARM IHI 0031A  *
+ *                                                                         *
+ * CoreSight(tm) DAP-Lite TRM, ARM DDI 0316A                               *
+ * Cortex-M3(tm) TRM, ARM DDI 0337C                                        *
+ *                                                                         *
+***************************************************************************/
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include "replacements.h"
+
+#include "arm_adi_v5.h"
+#include "jtag.h"
+#include "log.h"
+#include "time_support.h"
+#include <stdlib.h>
+
+/*
+ * Transaction Mode:
+ * swjdp->trans_mode = TRANS_MODE_COMPOSITE;
+ * Uses Overrun checking mode and does not do actual JTAG send/receive or transaction
+ * result checking until swjdp_end_transaction()
+ * This must be done before using or deallocating any return variables.
+ * swjdp->trans_mode == TRANS_MODE_ATOMIC
+ * All reads and writes to the AHB bus are checked for valid completion, and return values
+ * are immediatley available.
+*/
+
+/***************************************************************************
+ *                                                                         *
+ * DPACC and APACC scanchain access through JTAG-DP                        *
+ *                                                                         *
+***************************************************************************/
+
+/* Scan out and in from target ordered u8 buffers */
+int adi_jtag_dp_scan(arm_jtag_t *jtag_info, u8 instr, u8 reg_addr, u8 RnW, u8 *outvalue, u8 *invalue, u8 *ack)
+{
+	scan_field_t fields[2];
+	u8 out_addr_buf;
+
+	jtag_add_end_state(TAP_IDLE);
+	arm_jtag_set_instr(jtag_info, instr, NULL);
+
+	fields[0].tap = jtag_info->tap;
+	fields[0].num_bits = 3;
+	buf_set_u32(&out_addr_buf, 0, 3, ((reg_addr >> 1) & 0x6) | (RnW & 0x1));
+	fields[0].out_value = &out_addr_buf;
+	fields[0].out_mask = NULL;
+	fields[0].in_value = ack;
+	fields[0].in_check_value = NULL;
+	fields[0].in_check_mask = NULL;
+	fields[0].in_handler = NULL;
+	fields[0].in_handler_priv = NULL;
+
+	fields[1].tap = jtag_info->tap;
+	fields[1].num_bits = 32;
+	fields[1].out_value = outvalue;
+	fields[1].out_mask = NULL;
+	fields[1].in_value = invalue;
+	fields[1].in_handler = NULL;
+	fields[1].in_handler_priv = NULL;
+	fields[1].in_check_value = NULL;
+	fields[1].in_check_mask = NULL;
+
+	jtag_add_dr_scan(2, fields, TAP_INVALID);
+
+	return ERROR_OK;
+}
+
+/* Scan out and in from host ordered u32 variables */
+int adi_jtag_dp_scan_u32(arm_jtag_t *jtag_info, u8 instr, u8 reg_addr, u8 RnW, u32 outvalue, u32 *invalue, u8 *ack)
+{
+	scan_field_t fields[2];
+	u8 out_value_buf[4];
+	u8 out_addr_buf;
+
+	jtag_add_end_state(TAP_IDLE);
+	arm_jtag_set_instr(jtag_info, instr, NULL);
+
+	fields[0].tap = jtag_info->tap;
+	fields[0].num_bits = 3;
+	buf_set_u32(&out_addr_buf, 0, 3, ((reg_addr >> 1) & 0x6) | (RnW & 0x1));
+	fields[0].out_value = &out_addr_buf;
+	fields[0].out_mask = NULL;
+	fields[0].in_value = ack;
+	fields[0].in_check_value = NULL;
+	fields[0].in_check_mask = NULL;
+	fields[0].in_handler = NULL;
+	fields[0].in_handler_priv = NULL;
+
+	fields[1].tap = jtag_info->tap;
+	fields[1].num_bits = 32;
+	buf_set_u32(out_value_buf, 0, 32, outvalue);
+	fields[1].out_value = out_value_buf;
+	fields[1].out_mask = NULL;
+	fields[1].in_value = NULL;
+	if (invalue)
+	{
+		fields[1].in_handler = arm_jtag_buf_to_u32;
+		fields[1].in_handler_priv = invalue;
+	}
+	else
+	{
+		fields[1].in_handler = NULL;
+		fields[1].in_handler_priv = NULL;
+	}
+	fields[1].in_check_value = NULL;
+	fields[1].in_check_mask = NULL;
+
+	jtag_add_dr_scan(2, fields, TAP_INVALID);
+
+	return ERROR_OK;
+}
+
+/* scan_inout_check adds one extra inscan for DPAP_READ commands to read variables */
+int scan_inout_check(swjdp_common_t *swjdp, u8 instr, u8 reg_addr, u8 RnW, u8 *outvalue, u8 *invalue)
+{
+	adi_jtag_dp_scan(swjdp->jtag_info, instr, reg_addr, RnW, outvalue, NULL, NULL);
+	if ((RnW == DPAP_READ) && (invalue != NULL))
+	{
+		adi_jtag_dp_scan(swjdp->jtag_info, SWJDP_IR_DPACC, DP_RDBUFF, DPAP_READ, 0, invalue, &swjdp->ack);
+	}
+
+	/* In TRANS_MODE_ATOMIC all SWJDP_IR_APACC transactions wait for ack=OK/FAULT and the check CTRL_STAT */
+	if ((instr == SWJDP_IR_APACC) && (swjdp->trans_mode == TRANS_MODE_ATOMIC))
+	{
+		return swjdp_transaction_endcheck(swjdp);
+	}
+
+	return ERROR_OK;
+}
+
+int scan_inout_check_u32(swjdp_common_t *swjdp, u8 instr, u8 reg_addr, u8 RnW, u32 outvalue, u32 *invalue)
+{
+	adi_jtag_dp_scan_u32(swjdp->jtag_info, instr, reg_addr, RnW, outvalue, NULL, NULL);
+	if ((RnW==DPAP_READ) && (invalue != NULL))
+	{
+		adi_jtag_dp_scan_u32(swjdp->jtag_info, SWJDP_IR_DPACC, DP_RDBUFF, DPAP_READ, 0, invalue, &swjdp->ack);
+	}
+
+	/* In TRANS_MODE_ATOMIC all SWJDP_IR_APACC transactions wait for ack=OK/FAULT and then check CTRL_STAT */
+	if ((instr == SWJDP_IR_APACC) && (swjdp->trans_mode == TRANS_MODE_ATOMIC))
+	{
+		return swjdp_transaction_endcheck(swjdp);
+	}
+
+	return ERROR_OK;
+}
+
+int swjdp_transaction_endcheck(swjdp_common_t *swjdp)
+{
+	int retval;
+	u32 ctrlstat;
+
+	/* too expensive to call keep_alive() here */
+
+#if 0
+	/* Danger!!!! BROKEN!!!! */
+	scan_inout_check_u32(swjdp, SWJDP_IR_DPACC, DP_CTRL_STAT, DPAP_READ, 0, &ctrlstat);
+	/* Danger!!!! BROKEN!!!! Why will jtag_execute_queue() fail here????
+	R956 introduced the check on return value here and now Michael Schwingen reports
+	that this code no longer works....
+
+	https://lists.berlios.de/pipermail/openocd-development/2008-September/003107.html
+	*/
+	if ((retval=jtag_execute_queue())!=ERROR_OK)
+	{
+		LOG_ERROR("BUG: Why does this fail the first time????");
+	}
+	/* Why??? second time it works??? */
+#endif
+
+	scan_inout_check_u32(swjdp, SWJDP_IR_DPACC, DP_CTRL_STAT, DPAP_READ, 0, &ctrlstat);
+	if ((retval=jtag_execute_queue())!=ERROR_OK)
+		return retval;
+
+	swjdp->ack = swjdp->ack & 0x7;
+
+	if (swjdp->ack != 2)
+	{
+		long long then=timeval_ms();
+		while (swjdp->ack != 2)
+		{
+			if (swjdp->ack == 1)
+			{
+				if ((timeval_ms()-then) > 1000)
+				{
+					LOG_WARNING("Timeout (1000ms) waiting for ACK = OK/FAULT in SWJDP transaction");
+					return ERROR_JTAG_DEVICE_ERROR;
+				}
+			}
+			else
+			{
+				LOG_WARNING("Invalid ACK in SWJDP transaction");
+				return ERROR_JTAG_DEVICE_ERROR;
+			}
+
+			scan_inout_check_u32(swjdp, SWJDP_IR_DPACC, DP_CTRL_STAT, DPAP_READ, 0, &ctrlstat);
+			if ((retval=jtag_execute_queue())!=ERROR_OK)
+				return retval;
+			swjdp->ack = swjdp->ack & 0x7;
+		}
+	} else
+	{
+		/* common code path avoids fn to timeval_ms() */
+	}
+
+	/* Check for STICKYERR and STICKYORUN */
+	if (ctrlstat & (SSTICKYORUN | SSTICKYERR))
+	{
+		LOG_DEBUG("swjdp: CTRL/STAT error 0x%x", ctrlstat);
+		/* Check power to debug regions */
+		if ((ctrlstat & 0xf0000000) != 0xf0000000)
+		{
+			 ahbap_debugport_init(swjdp);
+		}
+		else
+		{
+			u32 mem_ap_csw;
+
+			/* Print information about last AHBAP access */
+			LOG_ERROR("AHBAP Cached values: dp_select 0x%x, ap_csw 0x%x, ap_tar 0x%x", swjdp->dp_select_value, swjdp->ap_csw_value, swjdp->ap_tar_value);
+			if (ctrlstat & SSTICKYORUN)
+				LOG_ERROR("SWJ-DP OVERRUN - check clock or reduce jtag speed");
+
+			if (ctrlstat & SSTICKYERR)
+				LOG_ERROR("SWJ-DP STICKY ERROR");
+
+			/* Clear Sticky Error Bits */
+			scan_inout_check_u32(swjdp, SWJDP_IR_DPACC, DP_CTRL_STAT, DPAP_WRITE, swjdp->dp_ctrl_stat | SSTICKYORUN | SSTICKYERR, NULL);
+			scan_inout_check_u32(swjdp, SWJDP_IR_DPACC, DP_CTRL_STAT, DPAP_READ, 0, &ctrlstat);
+			if ((retval=jtag_execute_queue())!=ERROR_OK)
+				return retval;
+
+			LOG_DEBUG("swjdp: status 0x%x", ctrlstat);
+
+			dap_ap_read_reg_u32(swjdp, AP_REG_CSW, &mem_ap_csw);
+			if ((retval=jtag_execute_queue())!=ERROR_OK)
+				return retval;
+			LOG_ERROR("Read MEM_AP_CSW 0x%x", mem_ap_csw);
+
+		}
+		if ((retval=jtag_execute_queue())!=ERROR_OK)
+			return retval;
+		return ERROR_JTAG_DEVICE_ERROR;
+	}
+
+	return ERROR_OK;
+}
+
+/***************************************************************************
+ *                                                                         *
+ * DP and MEM-AP  register access  through APACC and DPACC                 *
+ *                                                                         *
+***************************************************************************/
+
+int dap_dp_write_reg(swjdp_common_t *swjdp, u32 value, u8 reg_addr)
+{
+	return scan_inout_check_u32(swjdp, SWJDP_IR_DPACC, reg_addr, DPAP_WRITE, value, NULL);
+}
+
+int dap_dp_read_reg(swjdp_common_t *swjdp, u32 *value, u8 reg_addr)
+{
+	return scan_inout_check_u32(swjdp, SWJDP_IR_DPACC, reg_addr, DPAP_READ, 0, value);
+}
+ 
+int dap_ap_select(swjdp_common_t *swjdp,u8 apsel)
+{
+	u32 select;
+	select = (apsel<<24) & 0xFF000000;
+
+	if (select != swjdp->apsel)
+	{
+		swjdp->apsel = select;
+		/* Switchin AP invalidates cached values */
+		swjdp->dp_select_value = -1;
+		swjdp->ap_csw_value = -1;
+		swjdp->ap_tar_value = -1;
+	}
+
+	return ERROR_OK;
+}
+
+int dap_dp_bankselect(swjdp_common_t *swjdp,u32 ap_reg)
+{
+	u32 select;
+	select = (ap_reg & 0x000000F0);
+
+	if (select != swjdp->dp_select_value)
+	{
+		dap_dp_write_reg(swjdp, select | swjdp->apsel, DP_SELECT);
+		swjdp->dp_select_value = select;
+	}
+
+	return ERROR_OK;
+}
+
+int dap_ap_write_reg(swjdp_common_t *swjdp, u32 reg_addr, u8* out_value_buf)
+{
+	dap_dp_bankselect(swjdp, reg_addr);
+	scan_inout_check(swjdp, SWJDP_IR_APACC, reg_addr, DPAP_WRITE, out_value_buf, NULL);
+
+	return ERROR_OK;
+}
+
+int dap_ap_read_reg(swjdp_common_t *swjdp, u32 reg_addr, u8 *in_value_buf)
+{
+	dap_dp_bankselect(swjdp, reg_addr);
+	scan_inout_check(swjdp, SWJDP_IR_APACC, reg_addr, DPAP_READ, 0, in_value_buf);
+
+	return ERROR_OK;
+}
+int dap_ap_write_reg_u32(swjdp_common_t *swjdp, u32 reg_addr, u32 value)
+{
+	u8 out_value_buf[4];
+
+	buf_set_u32(out_value_buf, 0, 32, value);
+	dap_dp_bankselect(swjdp, reg_addr);
+	scan_inout_check(swjdp, SWJDP_IR_APACC, reg_addr, DPAP_WRITE, out_value_buf, NULL);
+
+	return ERROR_OK;
+}
+
+int dap_ap_read_reg_u32(swjdp_common_t *swjdp, u32 reg_addr, u32 *value)
+{
+	dap_dp_bankselect(swjdp, reg_addr);
+	scan_inout_check_u32(swjdp, SWJDP_IR_APACC, reg_addr, DPAP_READ, 0, value);
+
+	return ERROR_OK;
+}
+
+/***************************************************************************
+ *                                                                         *
+ * AHB-AP access to memory and system registers on AHB bus                 *
+ *                                                                         *
+***************************************************************************/
+
+int dap_setup_accessport(swjdp_common_t *swjdp, u32 csw, u32 tar)
+{
+	csw = csw | CSW_DBGSWENABLE | CSW_MASTER_DEBUG | CSW_HPROT;
+	if (csw != swjdp->ap_csw_value)
+	{
+		/* LOG_DEBUG("swjdp : Set CSW %x",csw); */
+		dap_ap_write_reg_u32(swjdp, AP_REG_CSW, csw );
+		swjdp->ap_csw_value = csw;
+	}
+	if (tar != swjdp->ap_tar_value)
+	{
+		/* LOG_DEBUG("swjdp : Set TAR %x",tar); */
+		dap_ap_write_reg_u32(swjdp, AP_REG_TAR, tar );
+		swjdp->ap_tar_value = tar;
+	}
+	if (csw & CSW_ADDRINC_MASK)
+	{
+		/* Do not cache TAR value when autoincrementing */
+		swjdp->ap_tar_value = -1;
+	}
+	return ERROR_OK;
+}
+
+/*****************************************************************************
+*                                                                            *
+* mem_ap_read_u32(swjdp_common_t *swjdp, u32 address, u32 *value)      *
+*                                                                            *
+* Read a u32 value from memory or system register                            *
+* Functionally equivalent to target_read_u32(target, address, u32 *value),   *
+* but with less overhead                                                     *
+*****************************************************************************/
+int mem_ap_read_u32(swjdp_common_t *swjdp, u32 address, u32 *value)
+{
+	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
+
+	dap_setup_accessport(swjdp, CSW_32BIT | CSW_ADDRINC_OFF, address & 0xFFFFFFF0);
+	dap_ap_read_reg_u32(swjdp, AP_REG_BD0 | (address & 0xC), value );
+
+	return ERROR_OK;
+}
+
+int mem_ap_read_atomic_u32(swjdp_common_t *swjdp, u32 address, u32 *value)
+{
+	mem_ap_read_u32(swjdp, address, value);
+
+	return swjdp_transaction_endcheck(swjdp);
+}
+
+/*****************************************************************************
+*                                                                            *
+* mem_ap_write_u32(swjdp_common_t *swjdp, u32 address, u32 value)      *
+*                                                                            *
+* Write a u32 value to memory or memory mapped register                              *
+*                                                                            *
+*****************************************************************************/
+int mem_ap_write_u32(swjdp_common_t *swjdp, u32 address, u32 value)
+{
+	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
+
+	dap_setup_accessport(swjdp, CSW_32BIT | CSW_ADDRINC_OFF, address & 0xFFFFFFF0);
+	dap_ap_write_reg_u32(swjdp, AP_REG_BD0 | (address & 0xC), value );
+
+	return ERROR_OK;
+}
+
+int mem_ap_write_atomic_u32(swjdp_common_t *swjdp, u32 address, u32 value)
+{
+	mem_ap_write_u32(swjdp, address, value);
+
+	return swjdp_transaction_endcheck(swjdp);
+}
+
+/*****************************************************************************
+*                                                                            *
+* mem_ap_write_buf(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address) *
+*                                                                            *
+* Write a buffer in target order (little endian)                             *
+*                                                                            *
+*****************************************************************************/
+int mem_ap_write_buf_u32(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address)
+{
+	u32 outvalue;
+	int wcount, blocksize, writecount, errorcount = 0, retval = ERROR_OK;
+	u32 adr = address;
+	u8* pBuffer = buffer;
+
+	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
+
+	count >>= 2;
+	wcount = count;
+
+	/* if we have an unaligned access - reorder data */
+	if (adr & 0x3u)
+	{
+		for (writecount = 0; writecount < count; writecount++)
+		{
+			int i;
+			outvalue = *((u32*)pBuffer);
+
+			for (i = 0; i < 4; i++ )
+			{
+				*((u8*)pBuffer + (adr & 0x3)) = outvalue;
+				outvalue >>= 8;
+				adr++;
+			}
+			pBuffer += 4;
+		}
+	}
+
+	while (wcount > 0)
+	{
+		/* Adjust to write blocks within 4K aligned boundaries */
+		blocksize = (0x1000 - (0xFFF & address)) >> 2;
+		if (wcount < blocksize)
+			blocksize = wcount;
+
+		/* handle unaligned data at 4k boundary */
+		if (blocksize == 0)
+			blocksize = 1;
+
+		dap_setup_accessport(swjdp, CSW_32BIT | CSW_ADDRINC_SINGLE, address);
+
+		for (writecount = 0; writecount < blocksize; writecount++)
+		{
+			dap_ap_write_reg(swjdp, AP_REG_DRW, buffer + 4 * writecount );
+		}
+
+		if (swjdp_transaction_endcheck(swjdp) == ERROR_OK)
+		{
+			wcount = wcount - blocksize;
+			address = address + 4 * blocksize;
+			buffer = buffer + 4 * blocksize;
+		}
+		else
+		{
+			errorcount++;
+		}
+
+		if (errorcount > 1)
+		{
+			LOG_WARNING("Block write error address 0x%x, wcount 0x%x", address, wcount);
+			return ERROR_JTAG_DEVICE_ERROR;
+		}
+	}
+
+	return retval;
+}
+
+int mem_ap_write_buf_packed_u16(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address)
+{
+	u32 outvalue;
+	int retval = ERROR_OK;
+	int wcount, blocksize, writecount, i;
+
+	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
+
+	wcount = count >> 1;
+
+	while (wcount > 0)
+	{
+		int nbytes;
+
+		/* Adjust to read within 4K block boundaries */
+		blocksize = (0x1000 - (0xFFF & address)) >> 1;
+
+		if (wcount < blocksize)
+			blocksize = wcount;
+
+		/* handle unaligned data at 4k boundary */
+		if (blocksize == 0)
+			blocksize = 1;
+
+		dap_setup_accessport(swjdp, CSW_16BIT | CSW_ADDRINC_PACKED, address);
+		writecount = blocksize;
+
+		do
+		{
+			nbytes = MIN((writecount << 1), 4);
+
+			if (nbytes < 4 )
+			{
+				if (mem_ap_write_buf_u16(swjdp, buffer, nbytes, address) != ERROR_OK)
+				{
+					LOG_WARNING("Block read error address 0x%x, count 0x%x", address, count);
+					return ERROR_JTAG_DEVICE_ERROR;
+				}
+
+				address += nbytes >> 1;
+			}
+			else
+			{
+				outvalue = *((u32*)buffer);
+
+				for (i = 0; i < nbytes; i++ )
+				{
+					*((u8*)buffer + (address & 0x3)) = outvalue;
+					outvalue >>= 8;
+					address++;
+				}
+
+				outvalue = *((u32*)buffer);
+				dap_ap_write_reg_u32(swjdp, AP_REG_DRW, outvalue);
+				if (swjdp_transaction_endcheck(swjdp) != ERROR_OK)
+				{
+					LOG_WARNING("Block read error address 0x%x, count 0x%x", address, count);
+					return ERROR_JTAG_DEVICE_ERROR;
+				}
+			}
+
+			buffer += nbytes >> 1;
+			writecount -= nbytes >> 1;
+
+		} while (writecount);
+		wcount -= blocksize;
+	}
+
+	return retval;
+}
+
+int mem_ap_write_buf_u16(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address)
+{
+	u32 outvalue;
+	int retval = ERROR_OK;
+
+	if (count >= 4)
+		return mem_ap_write_buf_packed_u16(swjdp, buffer, count, address);
+
+	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
+
+	while (count > 0)
+	{
+		dap_setup_accessport(swjdp, CSW_16BIT | CSW_ADDRINC_SINGLE, address);
+		outvalue = *((u16*)buffer) << 8 * (address & 0x3);
+		dap_ap_write_reg_u32(swjdp, AP_REG_DRW, outvalue );
+		retval = swjdp_transaction_endcheck(swjdp);
+		count -= 2;
+		address += 2;
+		buffer += 2;
+	}
+
+	return retval;
+}
+
+int mem_ap_write_buf_packed_u8(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address)
+{
+	u32 outvalue;
+	int retval = ERROR_OK;
+	int wcount, blocksize, writecount, i;
+
+	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
+
+	wcount = count;
+
+	while (wcount > 0)
+	{
+		int nbytes;
+
+		/* Adjust to read within 4K block boundaries */
+		blocksize = (0x1000 - (0xFFF & address));
+
+		if (wcount < blocksize)
+			blocksize = wcount;
+
+		dap_setup_accessport(swjdp, CSW_8BIT | CSW_ADDRINC_PACKED, address);
+		writecount = blocksize;
+
+		do
+		{
+			nbytes = MIN(writecount, 4);
+
+			if (nbytes < 4 )
+			{
+				if (mem_ap_write_buf_u8(swjdp, buffer, nbytes, address) != ERROR_OK)
+				{
+					LOG_WARNING("Block read error address 0x%x, count 0x%x", address, count);
+					return ERROR_JTAG_DEVICE_ERROR;
+				}
+
+				address += nbytes;
+			}
+			else
+			{
+				outvalue = *((u32*)buffer);
+
+				for (i = 0; i < nbytes; i++ )
+				{
+					*((u8*)buffer + (address & 0x3)) = outvalue;
+					outvalue >>= 8;
+					address++;
+				}
+
+				outvalue = *((u32*)buffer);
+				dap_ap_write_reg_u32(swjdp, AP_REG_DRW, outvalue);
+				if (swjdp_transaction_endcheck(swjdp) != ERROR_OK)
+				{
+					LOG_WARNING("Block read error address 0x%x, count 0x%x", address, count);
+					return ERROR_JTAG_DEVICE_ERROR;
+				}
+			}
+
+			buffer += nbytes;
+			writecount -= nbytes;
+
+		} while (writecount);
+		wcount -= blocksize;
+	}
+
+	return retval;
+}
+
+int mem_ap_write_buf_u8(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address)
+{
+	u32 outvalue;
+	int retval = ERROR_OK;
+
+	if (count >= 4)
+		return mem_ap_write_buf_packed_u8(swjdp, buffer, count, address);
+
+	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
+
+	while (count > 0)
+	{
+		dap_setup_accessport(swjdp, CSW_8BIT | CSW_ADDRINC_SINGLE, address);
+		outvalue = *((u8*)buffer) << 8 * (address & 0x3);
+		dap_ap_write_reg_u32(swjdp, AP_REG_DRW, outvalue );
+		retval = swjdp_transaction_endcheck(swjdp);
+		count--;
+		address++;
+		buffer++;
+	}
+
+	return retval;
+}
+
+/*********************************************************************************
+*                                                                                *
+* mem_ap_read_buf_u32(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address)  *
+*                                                                                *
+* Read block fast in target order (little endian) into a buffer                  *
+*                                                                                *
+**********************************************************************************/
+int mem_ap_read_buf_u32(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address)
+{
+	int wcount, blocksize, readcount, errorcount = 0, retval = ERROR_OK;
+	u32 adr = address;
+	u8* pBuffer = buffer;
+
+	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
+
+	count >>= 2;
+	wcount = count;
+
+	while (wcount > 0)
+	{
+		/* Adjust to read within 4K block boundaries */
+		blocksize = (0x1000 - (0xFFF & address)) >> 2;
+		if (wcount < blocksize)
+			blocksize = wcount;
+
+		/* handle unaligned data at 4k boundary */
+		if (blocksize == 0)
+			blocksize = 1;
+
+		dap_setup_accessport(swjdp, CSW_32BIT | CSW_ADDRINC_SINGLE, address);
+
+		/* Scan out first read */
+		adi_jtag_dp_scan(swjdp->jtag_info, SWJDP_IR_APACC, AP_REG_DRW, DPAP_READ, 0, NULL, NULL);
+		for (readcount = 0; readcount < blocksize - 1; readcount++)
+		{
+			/* Scan out read instruction and scan in previous value */
+			adi_jtag_dp_scan(swjdp->jtag_info, SWJDP_IR_APACC, AP_REG_DRW, DPAP_READ, 0, buffer + 4 * readcount, &swjdp->ack);
+		}
+
+		/* Scan in last value */
+		adi_jtag_dp_scan(swjdp->jtag_info, SWJDP_IR_DPACC, DP_RDBUFF, DPAP_READ, 0, buffer + 4 * readcount, &swjdp->ack);
+		if (swjdp_transaction_endcheck(swjdp) == ERROR_OK)
+		{
+			wcount = wcount - blocksize;
+			address += 4 * blocksize;
+			buffer += 4 * blocksize;
+		}
+		else
+		{
+			errorcount++;
+		}
+
+		if (errorcount > 1)
+		{
+			LOG_WARNING("Block read error address 0x%x, count 0x%x", address, count);
+			return ERROR_JTAG_DEVICE_ERROR;
+		}
+	}
+
+	/* if we have an unaligned access - reorder data */
+	if (adr & 0x3u)
+	{
+		for (readcount = 0; readcount < count; readcount++)
+		{
+			int i;
+			u32 data = *((u32*)pBuffer);
+
+			for (i = 0; i < 4; i++ )
+			{
+				*((u8*)pBuffer) = (data >> 8 * (adr & 0x3));
+				pBuffer++;
+				adr++;
+			}
+		}
+	}
+
+	return retval;
+}
+
+int mem_ap_read_buf_packed_u16(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address)
+{
+	u32 invalue;
+	int retval = ERROR_OK;
+	int wcount, blocksize, readcount, i;
+
+	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
+
+	wcount = count >> 1;
+
+	while (wcount > 0)
+	{
+		int nbytes;
+
+		/* Adjust to read within 4K block boundaries */
+		blocksize = (0x1000 - (0xFFF & address)) >> 1;
+		if (wcount < blocksize)
+			blocksize = wcount;
+
+		dap_setup_accessport(swjdp, CSW_16BIT | CSW_ADDRINC_PACKED, address);
+
+		/* handle unaligned data at 4k boundary */
+		if (blocksize == 0)
+			blocksize = 1;
+		readcount = blocksize;
+
+		do
+		{
+			dap_ap_read_reg_u32(swjdp, AP_REG_DRW, &invalue );
+			if (swjdp_transaction_endcheck(swjdp) != ERROR_OK)
+			{
+				LOG_WARNING("Block read error address 0x%x, count 0x%x", address, count);
+				return ERROR_JTAG_DEVICE_ERROR;
+			}
+
+			nbytes = MIN((readcount << 1), 4);
+
+			for (i = 0; i < nbytes; i++ )
+			{
+				*((u8*)buffer) = (invalue >> 8 * (address & 0x3));
+				buffer++;
+				address++;
+			}
+
+			readcount -= (nbytes >> 1);
+		} while (readcount);
+		wcount -= blocksize;
+	}
+
+	return retval;
+}
+
+int mem_ap_read_buf_u16(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address)
+{
+	u32 invalue, i;
+	int retval = ERROR_OK;
+
+	if (count >= 4)
+		return mem_ap_read_buf_packed_u16(swjdp, buffer, count, address);
+
+	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
+
+	while (count > 0)
+	{
+		dap_setup_accessport(swjdp, CSW_16BIT | CSW_ADDRINC_SINGLE, address);
+		dap_ap_read_reg_u32(swjdp, AP_REG_DRW, &invalue );
+		retval = swjdp_transaction_endcheck(swjdp);
+		if (address & 0x1)
+		{
+			for (i = 0; i < 2; i++ )
+			{
+				*((u8*)buffer) = (invalue >> 8 * (address & 0x3));
+				buffer++;
+				address++;
+			}
+		}
+		else
+		{
+			*((u16*)buffer) = (invalue >> 8 * (address & 0x3));
+			address += 2;
+			buffer += 2;
+		}
+		count -= 2;
+	}
+
+	return retval;
+}
+
+int mem_ap_read_buf_packed_u8(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address)
+{
+	u32 invalue;
+	int retval = ERROR_OK;
+	int wcount, blocksize, readcount, i;
+
+	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
+
+	wcount = count;
+
+	while (wcount > 0)
+	{
+		int nbytes;
+
+		/* Adjust to read within 4K block boundaries */
+		blocksize = (0x1000 - (0xFFF & address));
+
+		if (wcount < blocksize)
+			blocksize = wcount;
+
+		dap_setup_accessport(swjdp, CSW_8BIT | CSW_ADDRINC_PACKED, address);
+		readcount = blocksize;
+
+		do
+		{
+			dap_ap_read_reg_u32(swjdp, AP_REG_DRW, &invalue );
+			if (swjdp_transaction_endcheck(swjdp) != ERROR_OK)
+			{
+				LOG_WARNING("Block read error address 0x%x, count 0x%x", address, count);
+				return ERROR_JTAG_DEVICE_ERROR;
+			}
+
+			nbytes = MIN(readcount, 4);
+
+			for (i = 0; i < nbytes; i++ )
+			{
+				*((u8*)buffer) = (invalue >> 8 * (address & 0x3));
+				buffer++;
+				address++;
+			}
+
+			readcount -= nbytes;
+		} while (readcount);
+		wcount -= blocksize;
+	}
+
+	return retval;
+}
+
+int mem_ap_read_buf_u8(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address)
+{
+	u32 invalue;
+	int retval = ERROR_OK;
+
+	if (count >= 4)
+		return mem_ap_read_buf_packed_u8(swjdp, buffer, count, address);
+
+	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
+
+	while (count > 0)
+	{
+		dap_setup_accessport(swjdp, CSW_8BIT | CSW_ADDRINC_SINGLE, address);
+		dap_ap_read_reg_u32(swjdp, AP_REG_DRW, &invalue );
+		retval = swjdp_transaction_endcheck(swjdp);
+		*((u8*)buffer) = (invalue >> 8 * (address & 0x3));
+		count--;
+		address++;
+		buffer++;
+	}
+
+	return retval;
+}
+
+int ahbap_debugport_init(swjdp_common_t *swjdp)
+{
+	u32 idreg, romaddr, dummy;
+	u32 ctrlstat;
+	int cnt = 0;
+	int retval;
+
+	LOG_DEBUG(" ");
+
+	swjdp->apsel = 0;
+	swjdp->ap_csw_value = -1;
+	swjdp->ap_tar_value = -1;
+	swjdp->trans_mode = TRANS_MODE_ATOMIC;
+	dap_dp_read_reg(swjdp, &dummy, DP_CTRL_STAT);
+	dap_dp_write_reg(swjdp, SSTICKYERR, DP_CTRL_STAT);
+	dap_dp_read_reg(swjdp, &dummy, DP_CTRL_STAT);
+
+	swjdp->dp_ctrl_stat = CDBGPWRUPREQ | CSYSPWRUPREQ;
+
+	dap_dp_write_reg(swjdp, swjdp->dp_ctrl_stat, DP_CTRL_STAT);
+	dap_dp_read_reg(swjdp, &ctrlstat, DP_CTRL_STAT);
+	if ((retval=jtag_execute_queue())!=ERROR_OK)
+		return retval;
+
+	/* Check that we have debug power domains activated */
+	while (!(ctrlstat & CDBGPWRUPACK) && (cnt++ < 10))
+	{
+		LOG_DEBUG("swjdp: wait CDBGPWRUPACK");
+		dap_dp_read_reg(swjdp, &ctrlstat, DP_CTRL_STAT);
+		if ((retval=jtag_execute_queue())!=ERROR_OK)
+			return retval;
+		alive_sleep(10);
+	}
+
+	while (!(ctrlstat & CSYSPWRUPACK) && (cnt++ < 10))
+	{
+		LOG_DEBUG("swjdp: wait CSYSPWRUPACK");
+		dap_dp_read_reg(swjdp, &ctrlstat, DP_CTRL_STAT);
+		if ((retval=jtag_execute_queue())!=ERROR_OK)
+			return retval;
+		alive_sleep(10);
+	}
+
+	dap_dp_read_reg(swjdp, &dummy, DP_CTRL_STAT);
+	/* With debug power on we can activate OVERRUN checking */
+	swjdp->dp_ctrl_stat = CDBGPWRUPREQ | CSYSPWRUPREQ | CORUNDETECT;
+	dap_dp_write_reg(swjdp, swjdp->dp_ctrl_stat, DP_CTRL_STAT);
+	dap_dp_read_reg(swjdp, &dummy, DP_CTRL_STAT);
+
+	dap_ap_read_reg_u32(swjdp, 0xFC, &idreg);
+	dap_ap_read_reg_u32(swjdp, 0xF8, &romaddr);
+
+	LOG_DEBUG("AHB-AP ID Register 0x%x, Debug ROM Address 0x%x", idreg, romaddr);
+
+	return ERROR_OK;
+}
+
+
+char * class_description[16] ={
+	"Reserved",
+	"ROM table","Reserved","Reserved","Reserved","Reserved","Reserved","Reserved","Reserved",
+	"CoreSight component","Reserved","Peripheral Test Block","Reserved","DESS","Generic IP component","Non standard layout"};
+
+int dap_info_command(struct command_context_s *cmd_ctx, swjdp_common_t *swjdp, int apsel)
+{
+
+	u32 dbgbase,apid;
+	int romtable_present = 0;
+	u8 mem_ap; 
+	u32 apselold;
+
+	apselold = swjdp->apsel;
+	dap_ap_select(swjdp, apsel);
+	dap_ap_read_reg_u32(swjdp, 0xF8, &dbgbase);
+	dap_ap_read_reg_u32(swjdp, 0xFC, &apid);
+	swjdp_transaction_endcheck(swjdp);
+	/* Now we read ROM table ID registers, ref. ARM IHI 0029B sec  */
+	mem_ap = ((apid&0x10000)&&((apid&0x0F)!=0));
+	command_print(cmd_ctx, "ap identification register 0x%8.8x", apid);
+	if (apid)
+	{
+		switch (apid&0x0F)
+		{
+			case 0:
+				command_print(cmd_ctx, "\tType is jtag-ap");		
+				break;
+			case 1:
+				command_print(cmd_ctx, "\tType is mem-ap AHB");		
+				break;
+			case 2:
+				command_print(cmd_ctx, "\tType is mem-ap APB");				
+				break;
+			default:
+				command_print(cmd_ctx, "\tUnknown AP-type");	
+			break;
+		}
+		command_print(cmd_ctx, "ap debugbase 0x%8.8x", dbgbase);
+	}
+	else
+	{
+		command_print(cmd_ctx, "No AP found at this apsel 0x%x", apsel);	
+	}
+
+	romtable_present = ((mem_ap)&&(dbgbase != 0xFFFFFFFF));
+	if (romtable_present)
+	{
+		u32 cid0,cid1,cid2,cid3,memtype,romentry;
+		u16 entry_offset;
+		/* bit 16 of apid indicates a memory access port */
+		if (dbgbase&0x02)
+		{
+			command_print(cmd_ctx, "\tValid ROM table present");
+		}
+		else
+		{
+			command_print(cmd_ctx, "\tROM table in legacy format" );
+		}
+		/* Now we read ROM table ID registers, ref. ARM IHI 0029B sec  */
+		mem_ap_read_u32(swjdp, (dbgbase&0xFFFFF000)|0xFF0, &cid0);		
+		mem_ap_read_u32(swjdp, (dbgbase&0xFFFFF000)|0xFF4, &cid1);		
+		mem_ap_read_u32(swjdp, (dbgbase&0xFFFFF000)|0xFF8, &cid2);		
+		mem_ap_read_u32(swjdp, (dbgbase&0xFFFFF000)|0xFFC, &cid3);		
+		mem_ap_read_u32(swjdp, (dbgbase&0xFFFFF000)|0xFCC, &memtype);		
+		swjdp_transaction_endcheck(swjdp);
+		command_print(cmd_ctx, "\tCID3 0x%x, CID2 0x%x, CID1 0x%x, CID0, 0x%x",cid3,cid2,cid1,cid0);
+		if (memtype&0x01)
+		{
+			command_print(cmd_ctx, "\tMEMTYPE system memory present on bus");
+		}
+		else
+		{
+			command_print(cmd_ctx, "\tMEMTYPE system memory not present. Dedicated debug bus" );
+		}
+		
+		/* Now we read ROM table entries from dbgbase&0xFFFFF000)|0x000 until we get 0x00000000 */
+		entry_offset = 0;
+		do 
+		{
+			mem_ap_read_atomic_u32(swjdp, (dbgbase&0xFFFFF000)|entry_offset, &romentry);
+			command_print(cmd_ctx, "\tROMTABLE[0x%x] = 0x%x",entry_offset,romentry);
+			if (romentry&0x01)
+			{
+				u32 c_cid0,c_cid1,c_cid2,c_cid3,c_pid0,c_pid1,c_pid2,c_pid3,c_pid4,component_start;
+				u32 component_base = (u32)((dbgbase&0xFFFFF000)+(int)(romentry&0xFFFFF000));
+				mem_ap_read_atomic_u32(swjdp, (component_base&0xFFFFF000)|0xFE0, &c_pid0);
+				mem_ap_read_atomic_u32(swjdp, (component_base&0xFFFFF000)|0xFE4, &c_pid1);
+				mem_ap_read_atomic_u32(swjdp, (component_base&0xFFFFF000)|0xFE8, &c_pid2);
+				mem_ap_read_atomic_u32(swjdp, (component_base&0xFFFFF000)|0xFEC, &c_pid3);
+				mem_ap_read_atomic_u32(swjdp, (component_base&0xFFFFF000)|0xFD0, &c_pid4);
+				mem_ap_read_atomic_u32(swjdp, (component_base&0xFFFFF000)|0xFF0, &c_cid0);
+				mem_ap_read_atomic_u32(swjdp, (component_base&0xFFFFF000)|0xFF4, &c_cid1);
+				mem_ap_read_atomic_u32(swjdp, (component_base&0xFFFFF000)|0xFF8, &c_cid2);
+				mem_ap_read_atomic_u32(swjdp, (component_base&0xFFFFF000)|0xFFC, &c_cid3);
+				component_start = component_base - 0x1000*(c_pid4>>4);
+				command_print(cmd_ctx, "\t\tComponent base address 0x%x, pid4 0x%x, start address 0x%x",component_base,c_pid4,component_start);
+				command_print(cmd_ctx, "\t\tComponent cid1 0x%x, class is %s",c_cid1,class_description[(c_cid1>>4)&0xF]); /* Se ARM DDI 0314 C Table 2.2 */
+				command_print(cmd_ctx, "\t\tCID3 0x%x, CID2 0x%x, CID1 0x%x, CID0, 0x%x",c_cid3,c_cid2,c_cid1,c_cid0);
+				command_print(cmd_ctx, "\t\tPID3 0x%x, PID2 0x%x, PID1 0x%x, PID0, 0x%x",c_pid3,c_pid2,c_pid1,c_pid0);
+				/* For CoreSight components,  (c_cid1>>4)&0xF==9 , we also read 0xFC8 DevId and 0xFCC DevType */
+			}
+			else
+			{
+				if (romentry)
+					command_print(cmd_ctx, "\t\tComponent not present");		
+				else
+					command_print(cmd_ctx, "\t\tEnd of ROM table");							
+			}
+			entry_offset += 4;
+		} while (romentry>0);
+	}
+	else
+	{
+		command_print(cmd_ctx, "\tNo ROM table present");		
+	}
+	dap_ap_select(swjdp, apselold);
+
+	return ERROR_OK;
+}
+

Added: trunk/src/target/arm_adi_v5.h
===================================================================
--- trunk/src/target/arm_adi_v5.h	2009-04-27 05:40:52 UTC (rev 1534)
+++ trunk/src/target/arm_adi_v5.h	2009-04-27 08:21:35 UTC (rev 1535)
@@ -0,0 +1,142 @@
+/***************************************************************************
+ *   Copyright (C) 2006 by Magnus Lundin                                   *
+ *   lundin at mlu.mine.nu                                                    *
+ *                                                                         *
+ *   Copyright (C) 2008 by Spencer Oliver                                  *
+ *   spen at spen-soft.co.uk                                                  *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   This program is distributed in the hope that it will be useful,       *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
+ *   GNU General Public License for more details.                          *
+ *                                                                         *
+ *   You should have received a copy of the GNU General Public License     *
+ *   along with this program; if not, write to the                         *
+ *   Free Software Foundation, Inc.,                                       *
+ *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
+ ***************************************************************************/
+#ifndef ARM_ADI_V5_H
+#define ARM_ADI_V5_H
+
+#include "target.h"
+#include "register.h"
+#include "arm_jtag.h"
+
+#define SWJDP_IR_DPACC	0xA
+#define SWJDP_IR_APACC	0xB
+
+#define DPAP_WRITE		0
+#define DPAP_READ		1
+#define DP_ZERO			0
+#define DP_CTRL_STAT	0x4
+#define DP_SELECT		0x8
+#define DP_RDBUFF		0xC
+
+#define CORUNDETECT		(1<<0)
+#define SSTICKYORUN		(1<<1)
+#define SSTICKYERR		(1<<5)
+#define CDBGRSTREQ		(1<<26)
+#define CDBGRSTACK		(1<<27)
+#define CDBGPWRUPREQ	(1<<28)
+#define CDBGPWRUPACK	(1<<29)
+#define CSYSPWRUPREQ	(1<<30)
+#define CSYSPWRUPACK	(1<<31)
+
+#define	AP_REG_CSW		0x00
+#define AP_REG_TAR		0x04
+#define AP_REG_DRW		0x0C
+#define AP_REG_BD0		0x10
+#define AP_REG_BD1		0x14
+#define AP_REG_BD2		0x18
+#define AP_REG_BD3		0x1C
+#define AP_REG_DBGROMA	0xF8
+#define AP_REG_IDR		0xFC
+
+#define CSW_8BIT		0
+#define CSW_16BIT		1
+#define CSW_32BIT		2
+
+#define CSW_ADDRINC_MASK	(3<<4)
+#define CSW_ADDRINC_OFF		0
+#define CSW_ADDRINC_SINGLE	(1<<4)
+#define CSW_ADDRINC_PACKED	(2<<4)
+#define CSW_HPROT			(1<<25)
+#define CSW_MASTER_DEBUG	(1<<29)
+#define CSW_DBGSWENABLE		(1<<31)
+
+/* transaction mode */
+#define TRANS_MODE_NONE			0
+/* Transaction waits for previous to complete */
+#define TRANS_MODE_ATOMIC		1
+/* Freerunning transactions with delays and overrun checking */
+#define TRANS_MODE_COMPOSITE	2
+
+typedef struct swjdp_reg_s
+{
+	int addr;
+	arm_jtag_t *jtag_info;
+} swjdp_reg_t;
+
+typedef struct swjdp_common_s
+{
+	arm_jtag_t *jtag_info;
+	/* Control config */
+	u32 dp_ctrl_stat;
+	/* Support for several AP's in one DAP */
+	u32 apsel;
+	/* Register select cache */
+	u32 dp_select_value;
+	u32 ap_csw_value;
+	u32 ap_tar_value;
+	/* information about current pending SWjDP-AHBAP transaction */
+	u8  trans_mode;
+	u8  trans_rw;
+	u8  ack;
+} swjdp_common_t;
+
+/* Internal functions used in the module, partial transactions, use with caution */
+extern int dap_dp_write_reg(swjdp_common_t *swjdp, u32 value, u8 reg_addr);
+/* extern int swjdp_write_apacc(swjdp_common_t *swjdp, u32 value, u8 reg_addr); */
+extern int dap_dp_read_reg(swjdp_common_t *swjdp, u32 *value, u8 reg_addr);
+/* extern int swjdp_read_apacc(swjdp_common_t *swjdp, u32 *value, u8 reg_addr); */
+extern int dap_setup_accessport(swjdp_common_t *swjdp, u32 csw, u32 tar);
+extern int dap_ap_select(swjdp_common_t *swjdp,u8 apsel);
+
+extern int dap_ap_write_reg(swjdp_common_t *swjdp, u32 reg_addr, u8* out_value_buf);
+extern int dap_ap_write_reg_u32(swjdp_common_t *swjdp, u32 reg_addr, u32 value);
+extern int dap_ap_read_reg(swjdp_common_t *swjdp, u32 reg_addr, u8 *in_value_buf);
+extern int dap_ap_read_reg_u32(swjdp_common_t *swjdp, u32 reg_addr, u32 *value);
+
+/* External interface, partial operations must be completed with swjdp_transaction_endcheck() */
+extern int swjdp_transaction_endcheck(swjdp_common_t *swjdp);
+
+/* MEM-AP memory mapped bus single u32 register transfers, without endcheck */
+extern int mem_ap_read_u32(swjdp_common_t *swjdp, u32 address, u32 *value);
+extern int mem_ap_write_u32(swjdp_common_t *swjdp, u32 address, u32 value);
+
+/* MEM-AP memory mapped bus transfers, single registers, complete transactions */
+extern int mem_ap_read_atomic_u32(swjdp_common_t *swjdp, u32 address, u32 *value);
+extern int mem_ap_write_atomic_u32(swjdp_common_t *swjdp, u32 address, u32 value);
+
+/* MEM-AP memory mapped bus block transfers */
+extern int mem_ap_read_buf_u8(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address);
+extern int mem_ap_read_buf_u16(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address);
+extern int mem_ap_read_buf_u32(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address);
+extern int mem_ap_write_buf_u8(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address);
+extern int mem_ap_write_buf_u16(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address);
+extern int mem_ap_write_buf_u32(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address);
+
+/* Initialisation of the debug system, power domains and registers */
+extern int ahbap_debugport_init(swjdp_common_t *swjdp);
+
+extern int dap_info_command(struct command_context_s *cmd_ctx, swjdp_common_t *swjdp, int apsel);
+/* Commands for user dap access */
+extern int handle_dap_info_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+extern int handle_dap_apsel_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+
+#endif



From mlu at mail.berlios.de  Mon Apr 27 10:29:30 2009
From: mlu at mail.berlios.de (mlu at mail.berlios.de)
Date: Mon, 27 Apr 2009 10:29:30 +0200
Subject: [Openocd-svn] r1536 - trunk/src/target
Message-ID: <200904270829.n3R8TU7d003650@sheep.berlios.de>

Author: mlu
Date: 2009-04-27 10:29:28 +0200 (Mon, 27 Apr 2009)
New Revision: 1536

Modified:
   trunk/src/target/Makefile.am
   trunk/src/target/armv7m.c
   trunk/src/target/armv7m.h
   trunk/src/target/cortex_m3.c
   trunk/src/target/cortex_m3.h
Log:
Changed armv7m and cortexm3 to use nev arm_adi_v5 instead of cortex_swjdp.
Added support for accessport ROM table identification, dap command. 

Modified: trunk/src/target/Makefile.am
===================================================================
--- trunk/src/target/Makefile.am	2009-04-27 08:21:35 UTC (rev 1535)
+++ trunk/src/target/Makefile.am	2009-04-27 08:29:28 UTC (rev 1536)
@@ -11,12 +11,12 @@
 noinst_LIBRARIES = libtarget.a
 libtarget_a_SOURCES = target.c register.c breakpoints.c armv4_5.c embeddedice.c etm.c arm7tdmi.c arm9tdmi.c \
 	arm_jtag.c arm7_9_common.c algorithm.c arm920t.c arm720t.c armv4_5_mmu.c armv4_5_cache.c arm_disassembler.c \
-	arm966e.c arm926ejs.c feroceon.c etb.c xscale.c arm_simulator.c image.c armv7m.c cortex_m3.c cortex_swjdp.c \
+	arm966e.c arm926ejs.c feroceon.c etb.c xscale.c arm_simulator.c image.c armv7m.c cortex_m3.c arm_adi_v5.c \
 	etm_dummy.c $(OOCD_TRACE_FILES) target_request.c trace.c arm11.c arm11_dbgtap.c mips32.c mips_m4k.c \
 	mips32_pracc.c mips32_dmaacc.c mips_ejtag.c
 noinst_HEADERS = target.h trace.h register.h armv4_5.h embeddedice.h etm.h arm7tdmi.h arm9tdmi.h \
 	arm_jtag.h arm7_9_common.h arm920t.h arm720t.h armv4_5_mmu.h armv4_5_cache.h breakpoints.h algorithm.h \
-	arm_disassembler.h arm966e.h arm926ejs.h etb.h xscale.h arm_simulator.h image.h armv7m.h cortex_m3.h cortex_swjdp.h \
+	arm_disassembler.h arm966e.h arm926ejs.h etb.h xscale.h arm_simulator.h image.h armv7m.h cortex_m3.h arm_adi_v5.h \
 	etm_dummy.h oocd_trace.h target_request.h trace.h arm11.h mips32.h mips_m4k.h mips_ejtag.h mips32_pracc.h mips32_dmaacc.h
 
 nobase_dist_pkglib_DATA =

Modified: trunk/src/target/armv7m.c
===================================================================
--- trunk/src/target/armv7m.c	2009-04-27 08:21:35 UTC (rev 1535)
+++ trunk/src/target/armv7m.c	2009-04-27 08:29:28 UTC (rev 1536)
@@ -550,6 +550,12 @@
 
 int armv7m_register_commands(struct command_context_s *cmd_ctx)
 {
+	command_t *arm_adi_v5_dap_cmd;
+
+	arm_adi_v5_dap_cmd = register_command(cmd_ctx, NULL, "dap", NULL, COMMAND_ANY, "cortex dap specific commands");		
+	register_command(cmd_ctx, arm_adi_v5_dap_cmd, "info", handle_dap_info_command, COMMAND_EXEC, "dap info for ap [num] (default 0)");
+	register_command(cmd_ctx, arm_adi_v5_dap_cmd, "apsel", handle_dap_apsel_command, COMMAND_EXEC, "select a different AP [num] (default 0)");
+
 	return ERROR_OK;
 }
 
@@ -695,3 +701,45 @@
 
 	return ERROR_OK;
 }
+
+int handle_dap_apsel_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+{
+	target_t *target = get_current_target(cmd_ctx);
+	armv7m_common_t *armv7m = target->arch_info;
+	swjdp_common_t *swjdp = &armv7m->swjdp_info;
+	u32 apsel, apid;
+	int retval;
+
+	apsel = 0;
+	if (argc > 0)
+	{	
+		apsel = strtoul(args[0], NULL, 0);
+	}
+
+	dap_ap_select(swjdp, apsel);
+	dap_ap_read_reg_u32(swjdp, 0xFC, &apid);
+	retval = swjdp_transaction_endcheck(swjdp);
+	command_print(cmd_ctx, "ap %i selected, identification register 0x%8.8x", apsel, apid);
+
+	return retval;
+}
+
+int handle_dap_info_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+{
+	target_t *target = get_current_target(cmd_ctx);
+	armv7m_common_t *armv7m = target->arch_info;
+	swjdp_common_t *swjdp = &armv7m->swjdp_info;
+	int retval;
+	u32 apsel;
+
+	apsel = 0;
+	if (argc > 0)
+	{	
+		apsel = strtoul(args[0], NULL, 0);
+	}
+	
+	retval = dap_info_command(cmd_ctx, swjdp, apsel);
+
+	return retval;
+}
+

Modified: trunk/src/target/armv7m.h
===================================================================
--- trunk/src/target/armv7m.h	2009-04-27 08:21:35 UTC (rev 1535)
+++ trunk/src/target/armv7m.h	2009-04-27 08:29:28 UTC (rev 1536)
@@ -29,6 +29,7 @@
 #include "register.h"
 #include "target.h"
 #include "arm_jtag.h"
+#include "arm_adi_v5.h"
 
 /* define for enabling armv7 gdb workarounds */
 #if 1
@@ -78,6 +79,8 @@
 	reg_cache_t *core_cache;
 	enum armv7m_mode core_mode;
 	int exception_number;
+	swjdp_common_t swjdp_info;
+
 	
 	/* Direct processor core register read and writes */
 	int (*load_core_reg_u32)(struct target_s *target, enum armv7m_regtype type, u32 num, u32 *value);

Modified: trunk/src/target/cortex_m3.c
===================================================================
--- trunk/src/target/cortex_m3.c	2009-04-27 08:21:35 UTC (rev 1535)
+++ trunk/src/target/cortex_m3.c	2009-04-27 08:29:28 UTC (rev 1536)
@@ -22,6 +22,10 @@
  *   along with this program; if not, write to the                         *
  *   Free Software Foundation, Inc.,                                       *
  *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
+ *                                                                         *
+ *                                                                         *
+ *   Cortex-M3(tm) TRM, ARM DDI 0337C                                      *
+ *                                                                         *
  ***************************************************************************/
 #ifdef HAVE_CONFIG_H
 #include "config.h"
@@ -101,19 +105,70 @@
 	.quit = cortex_m3_quit
 };
 
+int cortexm3_dap_read_coreregister_u32(swjdp_common_t *swjdp, u32 *value, int regnum)
+{
+	int retval;
+	u32 dcrdr;
+
+	/* because the DCB_DCRDR is used for the emulated dcc channel
+	 * we gave to save/restore the DCB_DCRDR when used */
+
+	mem_ap_read_u32(swjdp, DCB_DCRDR, &dcrdr);
+
+	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
+
+	/* mem_ap_write_u32(swjdp, DCB_DCRSR, regnum); */
+	dap_setup_accessport(swjdp, CSW_32BIT | CSW_ADDRINC_OFF, DCB_DCRSR & 0xFFFFFFF0);
+	dap_ap_write_reg_u32(swjdp, AP_REG_BD0 | (DCB_DCRSR & 0xC), regnum );
+
+	/* mem_ap_read_u32(swjdp, DCB_DCRDR, value); */
+	dap_setup_accessport(swjdp, CSW_32BIT | CSW_ADDRINC_OFF, DCB_DCRDR & 0xFFFFFFF0);
+	dap_ap_read_reg_u32(swjdp, AP_REG_BD0 | (DCB_DCRDR & 0xC), value );
+
+	mem_ap_write_u32(swjdp, DCB_DCRDR, dcrdr);
+	retval = swjdp_transaction_endcheck(swjdp);
+	return retval;
+}
+
+int cortexm3_dap_write_coreregister_u32(swjdp_common_t *swjdp, u32 value, int regnum)
+{
+	int retval;
+	u32 dcrdr;
+
+	/* because the DCB_DCRDR is used for the emulated dcc channel
+	 * we gave to save/restore the DCB_DCRDR when used */
+
+	mem_ap_read_u32(swjdp, DCB_DCRDR, &dcrdr);
+
+	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
+
+	/* mem_ap_write_u32(swjdp, DCB_DCRDR, core_regs[i]); */
+	dap_setup_accessport(swjdp, CSW_32BIT | CSW_ADDRINC_OFF, DCB_DCRDR & 0xFFFFFFF0);
+	dap_ap_write_reg_u32(swjdp, AP_REG_BD0 | (DCB_DCRDR & 0xC), value );
+
+	/* mem_ap_write_u32(swjdp, DCB_DCRSR, i | DCRSR_WnR	); */
+	dap_setup_accessport(swjdp, CSW_32BIT | CSW_ADDRINC_OFF, DCB_DCRSR & 0xFFFFFFF0);
+	dap_ap_write_reg_u32(swjdp, AP_REG_BD0 | (DCB_DCRSR & 0xC), regnum | DCRSR_WnR );
+
+	mem_ap_write_u32(swjdp, DCB_DCRDR, dcrdr);
+	retval = swjdp_transaction_endcheck(swjdp);
+	return retval;
+}
+
+
 int cortex_m3_write_debug_halt_mask(target_t *target, u32 mask_on, u32 mask_off)
 {
 	/* get pointers to arch-specific information */
 	armv7m_common_t *armv7m = target->arch_info;
 	cortex_m3_common_t *cortex_m3 = armv7m->arch_info;
-	swjdp_common_t *swjdp = &cortex_m3->swjdp_info;
+	swjdp_common_t *swjdp = &armv7m->swjdp_info;
 	
 	/* mask off status bits */
 	cortex_m3->dcb_dhcsr &= ~((0xFFFF << 16) | mask_off);
 	/* create new register mask */
 	cortex_m3->dcb_dhcsr |= DBGKEY | C_DEBUGEN | mask_on;
 	
-	return ahbap_write_system_atomic_u32(swjdp, DCB_DHCSR, cortex_m3->dcb_dhcsr);
+	return mem_ap_write_atomic_u32(swjdp, DCB_DHCSR, cortex_m3->dcb_dhcsr);
 }
 
 int cortex_m3_clear_halt(target_t *target)
@@ -121,15 +176,15 @@
 	/* get pointers to arch-specific information */
 	armv7m_common_t *armv7m = target->arch_info;
 	cortex_m3_common_t *cortex_m3 = armv7m->arch_info;
-	swjdp_common_t *swjdp = &cortex_m3->swjdp_info;
+	swjdp_common_t *swjdp = &armv7m->swjdp_info;
 	
 	/* clear step if any */
 	cortex_m3_write_debug_halt_mask(target, C_HALT, C_STEP);
 	
 	/* Read Debug Fault Status Register */
-	ahbap_read_system_atomic_u32(swjdp, NVIC_DFSR, &cortex_m3->nvic_dfsr);
+	mem_ap_read_atomic_u32(swjdp, NVIC_DFSR, &cortex_m3->nvic_dfsr);
 	/* Write Debug Fault Status Register to enable processing to resume ?? Try with and without this !! */
-	ahbap_write_system_atomic_u32(swjdp, NVIC_DFSR, cortex_m3->nvic_dfsr);
+	mem_ap_write_atomic_u32(swjdp, NVIC_DFSR, cortex_m3->nvic_dfsr);
 	LOG_DEBUG(" NVIC_DFSR 0x%x", cortex_m3->nvic_dfsr);
 
 	return ERROR_OK;
@@ -140,7 +195,7 @@
 	/* get pointers to arch-specific information */
 	armv7m_common_t *armv7m = target->arch_info;
 	cortex_m3_common_t *cortex_m3 = armv7m->arch_info;
-	swjdp_common_t *swjdp = &cortex_m3->swjdp_info;
+	swjdp_common_t *swjdp = &armv7m->swjdp_info;
 	u32 dhcsr_save;
 	
 	/* backup dhcsr reg */
@@ -148,8 +203,8 @@
 	
 	/* mask interrupts if not done already */
 	if (!(cortex_m3->dcb_dhcsr & C_MASKINTS))
-		ahbap_write_system_atomic_u32(swjdp, DCB_DHCSR, DBGKEY | C_MASKINTS | C_HALT | C_DEBUGEN);
-	ahbap_write_system_atomic_u32(swjdp, DCB_DHCSR, DBGKEY | C_MASKINTS | C_STEP | C_DEBUGEN);
+		mem_ap_write_atomic_u32(swjdp, DCB_DHCSR, DBGKEY | C_MASKINTS | C_HALT | C_DEBUGEN);
+	mem_ap_write_atomic_u32(swjdp, DCB_DHCSR, DBGKEY | C_MASKINTS | C_STEP | C_DEBUGEN);
 	LOG_DEBUG(" ");
 	
 	/* restore dhcsr reg */
@@ -163,17 +218,16 @@
 {
 	/* get pointers to arch-specific information */
 	armv7m_common_t *armv7m = target->arch_info;
-	cortex_m3_common_t *cortex_m3 = armv7m->arch_info;
-	swjdp_common_t *swjdp = &cortex_m3->swjdp_info;
+	swjdp_common_t *swjdp = &armv7m->swjdp_info;
 	u32 savedram;
 	int retvalue;
 	
-	ahbap_read_system_u32(swjdp, 0x20000000, &savedram);
-	ahbap_write_system_u32(swjdp, 0x20000000, opcode);
-	ahbap_write_coreregister_u32(swjdp, 0x20000000, 15);
+	mem_ap_read_u32(swjdp, 0x20000000, &savedram);
+	mem_ap_write_u32(swjdp, 0x20000000, opcode);
+	cortexm3_dap_write_coreregister_u32(swjdp, 0x20000000, 15);
 	cortex_m3_single_step_core(target);
 	armv7m->core_cache->reg_list[15].dirty = armv7m->core_cache->reg_list[15].valid;
-	retvalue = ahbap_write_system_atomic_u32(swjdp, 0x20000000, savedram);
+	retvalue = mem_ap_write_atomic_u32(swjdp, 0x20000000, savedram);
 	
 	return retvalue;
 }
@@ -200,28 +254,28 @@
 	/* get pointers to arch-specific information */
 	armv7m_common_t *armv7m = target->arch_info;
 	cortex_m3_common_t *cortex_m3 = armv7m->arch_info;
-	swjdp_common_t *swjdp = &cortex_m3->swjdp_info;
+	swjdp_common_t *swjdp = &armv7m->swjdp_info;
 	cortex_m3_fp_comparator_t *fp_list = cortex_m3->fp_comparator_list; 
 	cortex_m3_dwt_comparator_t *dwt_list = cortex_m3->dwt_comparator_list;
 
-	ahbap_read_system_atomic_u32(swjdp, DCB_DEMCR, &dcb_demcr);
+	mem_ap_read_atomic_u32(swjdp, DCB_DEMCR, &dcb_demcr);
 	LOG_DEBUG("DCB_DEMCR = 0x%8.8x",dcb_demcr);
 	
 	/* this regsiter is used for emulated dcc channel */
-	ahbap_write_system_u32(swjdp, DCB_DCRDR, 0);
+	mem_ap_write_u32(swjdp, DCB_DCRDR, 0);
 	
 	/* Enable debug requests */
-	ahbap_read_system_atomic_u32(swjdp, DCB_DHCSR, &cortex_m3->dcb_dhcsr);
+	mem_ap_read_atomic_u32(swjdp, DCB_DHCSR, &cortex_m3->dcb_dhcsr);
 	if (!(cortex_m3->dcb_dhcsr & C_DEBUGEN))
-		ahbap_write_system_u32(swjdp, DCB_DHCSR, DBGKEY | C_DEBUGEN);
+		mem_ap_write_u32(swjdp, DCB_DHCSR, DBGKEY | C_DEBUGEN);
 	
 	/* clear any interrupt masking */
 	cortex_m3_write_debug_halt_mask(target, 0, C_MASKINTS);
 	
 	/* Enable trace and dwt */
-	ahbap_write_system_u32(swjdp, DCB_DEMCR, TRCENA | VC_HARDERR | VC_BUSERR);
+	mem_ap_write_u32(swjdp, DCB_DEMCR, TRCENA | VC_HARDERR | VC_BUSERR);
 	/* Monitor bus faults */
-	ahbap_write_system_u32(swjdp, NVIC_SHCSR, SHCSR_BUSFAULTENA);
+	mem_ap_write_u32(swjdp, NVIC_SHCSR, SHCSR_BUSFAULTENA);
 
 	/* Enable FPB */
 	target_write_u32(target, FP_CTRL, 3);
@@ -245,7 +299,7 @@
 	armv7m_invalidate_core_regs(target);
 	
 	/* make sure we have latest dhcsr flags */
-	ahbap_read_system_atomic_u32(swjdp, DCB_DHCSR, &cortex_m3->dcb_dhcsr);
+	mem_ap_read_atomic_u32(swjdp, DCB_DHCSR, &cortex_m3->dcb_dhcsr);
 	
 	return ERROR_OK;
 }
@@ -283,36 +337,35 @@
 
 	/* get pointers to arch-specific information */
 	armv7m_common_t *armv7m = target->arch_info;
-	cortex_m3_common_t *cortex_m3 = armv7m->arch_info;
-	swjdp_common_t *swjdp = &cortex_m3->swjdp_info;
+	swjdp_common_t *swjdp = &armv7m->swjdp_info;
 
-	ahbap_read_system_u32(swjdp, NVIC_SHCSR, &shcsr);
+	mem_ap_read_u32(swjdp, NVIC_SHCSR, &shcsr);
 	switch (armv7m->exception_number)
 	{
 		case 2:	/* NMI */
 			break;
 		case 3:	/* Hard Fault */
-			ahbap_read_system_atomic_u32(swjdp, NVIC_HFSR, &except_sr);
+			mem_ap_read_atomic_u32(swjdp, NVIC_HFSR, &except_sr);
 			if (except_sr & 0x40000000)
 			{
-				ahbap_read_system_u32(swjdp, NVIC_CFSR, &cfsr);
+				mem_ap_read_u32(swjdp, NVIC_CFSR, &cfsr);
 			}
 			break;
 		case 4:	/* Memory Management */
-			ahbap_read_system_u32(swjdp, NVIC_CFSR, &except_sr);
-			ahbap_read_system_u32(swjdp, NVIC_MMFAR, &except_ar);		
+			mem_ap_read_u32(swjdp, NVIC_CFSR, &except_sr);
+			mem_ap_read_u32(swjdp, NVIC_MMFAR, &except_ar);		
 			break;
 		case 5:	/* Bus Fault */
-			ahbap_read_system_u32(swjdp, NVIC_CFSR, &except_sr);
-			ahbap_read_system_u32(swjdp, NVIC_BFAR, &except_ar);				
+			mem_ap_read_u32(swjdp, NVIC_CFSR, &except_sr);
+			mem_ap_read_u32(swjdp, NVIC_BFAR, &except_ar);				
 			break;
 		case 6:	/* Usage Fault */
-			ahbap_read_system_u32(swjdp, NVIC_CFSR, &except_sr);
+			mem_ap_read_u32(swjdp, NVIC_CFSR, &except_sr);
 			break;
 		case 11:	/* SVCall */
 			break;
 		case 12:	/* Debug Monitor */
-			ahbap_read_system_u32(swjdp, NVIC_DFSR, &except_sr);
+			mem_ap_read_u32(swjdp, NVIC_DFSR, &except_sr);
 			break;
 		case 14:	/* PendSV */
 			break;
@@ -337,14 +390,14 @@
 	/* get pointers to arch-specific information */
 	armv7m_common_t *armv7m = target->arch_info;
 	cortex_m3_common_t *cortex_m3 = armv7m->arch_info;
-	swjdp_common_t *swjdp = &cortex_m3->swjdp_info;
+	swjdp_common_t *swjdp = &armv7m->swjdp_info;
 
 	LOG_DEBUG(" ");
 	if (armv7m->pre_debug_entry)
 		armv7m->pre_debug_entry(target);
 
 	cortex_m3_clear_halt(target);
-	ahbap_read_system_atomic_u32(swjdp, DCB_DHCSR, &cortex_m3->dcb_dhcsr);
+	mem_ap_read_atomic_u32(swjdp, DCB_DHCSR, &cortex_m3->dcb_dhcsr);
 
 	if ((retval = armv7m->examine_debug_reason(target)) != ERROR_OK)
 		return retval;
@@ -417,10 +470,10 @@
 	/* get pointers to arch-specific information */
 	armv7m_common_t *armv7m = target->arch_info;
 	cortex_m3_common_t *cortex_m3 = armv7m->arch_info;
-	swjdp_common_t *swjdp = &cortex_m3->swjdp_info;
+	swjdp_common_t *swjdp = &armv7m->swjdp_info;
 
 	/* Read from Debug Halting Control and Status Register */
-	retval = ahbap_read_system_atomic_u32(swjdp, DCB_DHCSR, &cortex_m3->dcb_dhcsr);
+	retval = mem_ap_read_atomic_u32(swjdp, DCB_DHCSR, &cortex_m3->dcb_dhcsr);
 	if (retval != ERROR_OK)
 	{
 		target->state = TARGET_UNKNOWN;
@@ -430,7 +483,7 @@
 	if (cortex_m3->dcb_dhcsr & S_RESET_ST)
 	{
 		/* check if still in reset */
-		ahbap_read_system_atomic_u32(swjdp, DCB_DHCSR, &cortex_m3->dcb_dhcsr);
+		mem_ap_read_atomic_u32(swjdp, DCB_DHCSR, &cortex_m3->dcb_dhcsr);
 		
 		if (cortex_m3->dcb_dhcsr & S_RESET_ST)
 		{
@@ -476,7 +529,7 @@
 
 #if 0
 	/* Read Debug Fault Status Register, added to figure out the lockup when running flashtest.script  */
-	ahbap_read_system_atomic_u32(swjdp, NVIC_DFSR, &cortex_m3->nvic_dfsr);
+	mem_ap_read_atomic_u32(swjdp, NVIC_DFSR, &cortex_m3->nvic_dfsr);
 	LOG_DEBUG("dcb_dhcsr 0x%x, nvic_dfsr 0x%x, target->state: %s", cortex_m3->dcb_dhcsr, cortex_m3->nvic_dfsr, Jim_Nvp_value2name_simple( nvp_target_state, target->state )->name );
 #endif
 	
@@ -530,15 +583,15 @@
 	/* get pointers to arch-specific information */
 	armv7m_common_t *armv7m = target->arch_info;
 	cortex_m3_common_t *cortex_m3 = armv7m->arch_info;
-	swjdp_common_t *swjdp = &cortex_m3->swjdp_info;
+	swjdp_common_t *swjdp = &armv7m->swjdp_info;
 	u32 dcb_dhcsr = 0;
 	int retval, timeout = 0;
 
 	/* Enter debug state on reset, cf. end_reset_event() */
-	ahbap_write_system_u32(swjdp, DCB_DEMCR, TRCENA | VC_HARDERR | VC_BUSERR | VC_CORERESET);
+	mem_ap_write_u32(swjdp, DCB_DEMCR, TRCENA | VC_HARDERR | VC_BUSERR | VC_CORERESET);
 	
 	/* Request a reset */ 
-	ahbap_write_system_atomic_u32(swjdp, NVIC_AIRCR, AIRCR_VECTKEY | AIRCR_VECTRESET);
+	mem_ap_write_atomic_u32(swjdp, NVIC_AIRCR, AIRCR_VECTKEY | AIRCR_VECTRESET);
 	target->state = TARGET_RESET;
 
 	/* registers are now invalid */
@@ -546,10 +599,10 @@
 
 	while (timeout < 100)
 	{
-		retval = ahbap_read_system_atomic_u32(swjdp, DCB_DHCSR, &dcb_dhcsr);
+		retval = mem_ap_read_atomic_u32(swjdp, DCB_DHCSR, &dcb_dhcsr);
 		if (retval == ERROR_OK)
 		{
-			ahbap_read_system_atomic_u32(swjdp, NVIC_DFSR, &cortex_m3->nvic_dfsr);
+			mem_ap_read_atomic_u32(swjdp, NVIC_DFSR, &cortex_m3->nvic_dfsr);
 			if ((dcb_dhcsr & S_HALT) && (cortex_m3->nvic_dfsr & DFSR_VCATCH))
 			{
 				LOG_DEBUG("system reset-halted, dcb_dhcsr 0x%x, nvic_dfsr 0x%x", dcb_dhcsr, cortex_m3->nvic_dfsr);
@@ -657,7 +710,7 @@
 	/* get pointers to arch-specific information */
 	armv7m_common_t *armv7m = target->arch_info;
 	cortex_m3_common_t *cortex_m3 = armv7m->arch_info;
-	swjdp_common_t *swjdp = &cortex_m3->swjdp_info;
+	swjdp_common_t *swjdp = &armv7m->swjdp_info;
 	breakpoint_t *breakpoint = NULL;
 
 	if (target->state != TARGET_HALTED)
@@ -683,7 +736,7 @@
 	
 	/* set step and clear halt */
 	cortex_m3_write_debug_halt_mask(target, C_STEP, C_HALT);
-	ahbap_read_system_atomic_u32(swjdp, DCB_DHCSR, &cortex_m3->dcb_dhcsr);
+	mem_ap_read_atomic_u32(swjdp, DCB_DHCSR, &cortex_m3->dcb_dhcsr);
 
 	/* registers are now invalid */
 	armv7m_invalidate_core_regs(target);
@@ -704,7 +757,7 @@
 {
 	armv7m_common_t *armv7m = target->arch_info;
 	cortex_m3_common_t *cortex_m3 = armv7m->arch_info;
-	swjdp_common_t *swjdp = &cortex_m3->swjdp_info;
+	swjdp_common_t *swjdp = &armv7m->swjdp_info;
 	int assert_srst = 1;
 	
 	LOG_DEBUG("target->state: %s", 
@@ -717,17 +770,17 @@
 	}
 	
 	/* Enable debug requests */
-	ahbap_read_system_atomic_u32(swjdp, DCB_DHCSR, &cortex_m3->dcb_dhcsr);
+	mem_ap_read_atomic_u32(swjdp, DCB_DHCSR, &cortex_m3->dcb_dhcsr);
 	if (!(cortex_m3->dcb_dhcsr & C_DEBUGEN))
-		ahbap_write_system_u32(swjdp, DCB_DHCSR, DBGKEY | C_DEBUGEN);
+		mem_ap_write_u32(swjdp, DCB_DHCSR, DBGKEY | C_DEBUGEN);
 		
-	ahbap_write_system_u32(swjdp, DCB_DCRDR, 0 );
+	mem_ap_write_u32(swjdp, DCB_DCRDR, 0 );
 	
 	if (!target->reset_halt)
 	{
 		/* Set/Clear C_MASKINTS in a separate operation */
 		if (cortex_m3->dcb_dhcsr & C_MASKINTS)
-			ahbap_write_system_atomic_u32(swjdp, DCB_DHCSR, DBGKEY | C_DEBUGEN | C_HALT);
+			mem_ap_write_atomic_u32(swjdp, DCB_DHCSR, DBGKEY | C_DEBUGEN | C_HALT);
 
 		/* clear any debug flags before resuming */
 		cortex_m3_clear_halt(target);
@@ -736,12 +789,12 @@
 		cortex_m3_write_debug_halt_mask(target, 0, C_HALT);
 							
 		/* Enter debug state on reset, cf. end_reset_event() */	
-		ahbap_write_system_u32(swjdp, DCB_DEMCR, TRCENA | VC_HARDERR | VC_BUSERR);
+		mem_ap_write_u32(swjdp, DCB_DEMCR, TRCENA | VC_HARDERR | VC_BUSERR);
 	}
 	else
 	{
 		/* Enter debug state on reset, cf. end_reset_event() */
-		ahbap_write_system_atomic_u32(swjdp, DCB_DEMCR, TRCENA | VC_HARDERR | VC_BUSERR | VC_CORERESET);
+		mem_ap_write_atomic_u32(swjdp, DCB_DEMCR, TRCENA | VC_HARDERR | VC_BUSERR | VC_CORERESET);
 	}
 	
 	/* following hack is to handle luminary reset
@@ -789,14 +842,14 @@
 	else
 	{
 		/* this causes the luminary device to reset using the watchdog */
-		ahbap_write_system_atomic_u32(swjdp, NVIC_AIRCR, AIRCR_VECTKEY | AIRCR_SYSRESETREQ);
+		mem_ap_write_atomic_u32(swjdp, NVIC_AIRCR, AIRCR_VECTKEY | AIRCR_SYSRESETREQ);
 		LOG_DEBUG("Using Luminary Reset: SYSRESETREQ");
 
 		{
 			/* I do not know why this is necessary, but it fixes strange effects
 			 * (step/resume cause a NMI after reset) on LM3S6918 -- Michael Schwingen */
 			u32 tmp;
-			ahbap_read_system_atomic_u32(swjdp, NVIC_AIRCR, &tmp);
+			mem_ap_read_atomic_u32(swjdp, NVIC_AIRCR, &tmp);
 		}
 	}
 	
@@ -1179,13 +1232,12 @@
 	int retval;
 	/* get pointers to arch-specific information */
 	armv7m_common_t *armv7m = target->arch_info;
-	cortex_m3_common_t *cortex_m3 = armv7m->arch_info;
-	swjdp_common_t *swjdp = &cortex_m3->swjdp_info;
+	swjdp_common_t *swjdp = &armv7m->swjdp_info;
 		
 	if ((type == ARMV7M_REGISTER_CORE_GP) && (num <= ARMV7M_PSP))
 	{
 		/* read a normal core register */
-		retval = ahbap_read_coreregister_u32(swjdp, value, num);
+		retval = cortexm3_dap_read_coreregister_u32(swjdp, value, num);
 		
 		if (retval != ERROR_OK)
 		{
@@ -1197,7 +1249,7 @@
 	else if (type == ARMV7M_REGISTER_CORE_SP) /* Special purpose core register */
 	{
 		/* read other registers */
-		ahbap_read_coreregister_u32(swjdp, value, 20);
+		cortexm3_dap_read_coreregister_u32(swjdp, value, 20);
 		
 		switch (num)
 		{
@@ -1235,8 +1287,7 @@
 	
 	/* get pointers to arch-specific information */
 	armv7m_common_t *armv7m = target->arch_info;
-	cortex_m3_common_t *cortex_m3 = armv7m->arch_info;
-	swjdp_common_t *swjdp = &cortex_m3->swjdp_info;
+	swjdp_common_t *swjdp = &armv7m->swjdp_info;
 
 #ifdef ARMV7_GDB_HACKS
 	/* If the LR register is being modified, make sure it will put us
@@ -1251,7 +1302,7 @@
 	 
 	if ((type == ARMV7M_REGISTER_CORE_GP) && (num <= ARMV7M_PSP))
 	{
-		retval = ahbap_write_coreregister_u32(swjdp, value, num);
+		retval = cortexm3_dap_write_coreregister_u32(swjdp, value, num);
 		if (retval != ERROR_OK)
 		{
 			LOG_ERROR("JTAG failure %i", retval);
@@ -1264,7 +1315,7 @@
 	{
 		/* write other registers */
 		
-		ahbap_read_coreregister_u32(swjdp, &reg, 20);
+		cortexm3_dap_read_coreregister_u32(swjdp, &reg, 20);
 		
 		switch (num)
 		{
@@ -1285,7 +1336,7 @@
 				break;
 		}
 		
-		ahbap_write_coreregister_u32(swjdp, reg, 20);
+		cortexm3_dap_write_coreregister_u32(swjdp, reg, 20);
 		
 		LOG_DEBUG("write special reg %i value 0x%x ", num, value);
 	}
@@ -1301,8 +1352,7 @@
 {
 	/* get pointers to arch-specific information */
 	armv7m_common_t *armv7m = target->arch_info;
-	cortex_m3_common_t *cortex_m3 = armv7m->arch_info;
-	swjdp_common_t *swjdp = &cortex_m3->swjdp_info;
+	swjdp_common_t *swjdp = &armv7m->swjdp_info;
 	int retval;
 	
 	/* sanitize arguments */
@@ -1314,13 +1364,13 @@
 	switch (size)
 	{
 		case 4:
-			retval = ahbap_read_buf_u32(swjdp, buffer, 4 * count, address);
+			retval = mem_ap_read_buf_u32(swjdp, buffer, 4 * count, address);
 			break;
 		case 2:
-			retval = ahbap_read_buf_u16(swjdp, buffer, 2 * count, address);
+			retval = mem_ap_read_buf_u16(swjdp, buffer, 2 * count, address);
 			break;
 		case 1:
-			retval = ahbap_read_buf_u8(swjdp, buffer, count, address);
+			retval = mem_ap_read_buf_u8(swjdp, buffer, count, address);
 			break;
 		default:
 			LOG_ERROR("BUG: we shouldn't get here");
@@ -1334,8 +1384,7 @@
 {
 	/* get pointers to arch-specific information */
 	armv7m_common_t *armv7m = target->arch_info;
-	cortex_m3_common_t *cortex_m3 = armv7m->arch_info;
-	swjdp_common_t *swjdp = &cortex_m3->swjdp_info;
+	swjdp_common_t *swjdp = &armv7m->swjdp_info;
 	int retval;
 	
 	/* sanitize arguments */
@@ -1345,13 +1394,13 @@
 	switch (size)
 	{
 		case 4:
-			retval = ahbap_write_buf_u32(swjdp, buffer, 4 * count, address);
+			retval = mem_ap_write_buf_u32(swjdp, buffer, 4 * count, address);
 			break;
 		case 2:
-			retval = ahbap_write_buf_u16(swjdp, buffer, 2 * count, address);
+			retval = mem_ap_write_buf_u16(swjdp, buffer, 2 * count, address);
 			break;
 		case 1:
-			retval = ahbap_write_buf_u8(swjdp, buffer, count, address);	
+			retval = mem_ap_write_buf_u8(swjdp, buffer, count, address);	
 			break;
 		default:
 			LOG_ERROR("BUG: we shouldn't get here");
@@ -1386,7 +1435,7 @@
 	/* get pointers to arch-specific information */
 	armv7m_common_t *armv7m = target->arch_info;
 	cortex_m3_common_t *cortex_m3 = armv7m->arch_info;
-	swjdp_common_t *swjdp = &cortex_m3->swjdp_info;
+	swjdp_common_t *swjdp = &armv7m->swjdp_info;
 	
 	if ((retval = ahbap_debugport_init(swjdp)) != ERROR_OK)
 		return retval;
@@ -1451,7 +1500,7 @@
 {
 	u16 dcrdr;
 	
-	ahbap_read_buf_u16( swjdp, (u8*)&dcrdr, 1, DCB_DCRDR);
+	mem_ap_read_buf_u16( swjdp, (u8*)&dcrdr, 1, DCB_DCRDR);
 	*ctrl = (u8)dcrdr;
 	*value = (u8)(dcrdr >> 8);
 	
@@ -1462,7 +1511,7 @@
 	if (dcrdr & (1 << 0))
 	{
 		dcrdr = 0;
-		ahbap_write_buf_u16( swjdp, (u8*)&dcrdr, 1, DCB_DCRDR);
+		mem_ap_write_buf_u16( swjdp, (u8*)&dcrdr, 1, DCB_DCRDR);
 	}
 	
 	return ERROR_OK;
@@ -1471,8 +1520,7 @@
 int cortex_m3_target_request_data(target_t *target, u32 size, u8 *buffer)
 {
 	armv7m_common_t *armv7m = target->arch_info;
-	cortex_m3_common_t *cortex_m3 = armv7m->arch_info;
-	swjdp_common_t *swjdp = &cortex_m3->swjdp_info;
+	swjdp_common_t *swjdp = &armv7m->swjdp_info;
 	u8 data;
 	u8 ctrl;
 	u32 i;
@@ -1492,8 +1540,7 @@
 	if (!target->type->examined)
 		return ERROR_OK;
 	armv7m_common_t *armv7m = target->arch_info;
-	cortex_m3_common_t *cortex_m3 = armv7m->arch_info;
-	swjdp_common_t *swjdp = &cortex_m3->swjdp_info;
+	swjdp_common_t *swjdp = &armv7m->swjdp_info;
 	
 	if (!target->dbg_msg_enabled)
 		return ERROR_OK;
@@ -1534,10 +1581,10 @@
 	cortex_m3->jtag_info.tap = tap;
 	cortex_m3->jtag_info.scann_size = 4;
 	
-	cortex_m3->swjdp_info.dp_select_value = -1;
-	cortex_m3->swjdp_info.ap_csw_value = -1;
-	cortex_m3->swjdp_info.ap_tar_value = -1;
-	cortex_m3->swjdp_info.jtag_info = &cortex_m3->jtag_info;
+	armv7m->swjdp_info.dp_select_value = -1;
+	armv7m->swjdp_info.ap_csw_value = -1;
+	armv7m->swjdp_info.ap_tar_value = -1;
+	armv7m->swjdp_info.jtag_info = &cortex_m3->jtag_info;
 
 	/* initialize arch-specific breakpoint handling */
 	

Modified: trunk/src/target/cortex_m3.h
===================================================================
--- trunk/src/target/cortex_m3.h	2009-04-27 08:21:35 UTC (rev 1535)
+++ trunk/src/target/cortex_m3.h	2009-04-27 08:29:28 UTC (rev 1536)
@@ -29,7 +29,7 @@
 #include "register.h"
 #include "target.h"
 #include "armv7m.h"
-#include "cortex_swjdp.h"
+//#include "arm_adi_v5.h"
 
 extern char* cortex_m3_state_strings[];
 
@@ -162,7 +162,7 @@
 	u32 *intsetenable;
 	
 	armv7m_common_t armv7m;
-	swjdp_common_t swjdp_info;
+//	swjdp_common_t swjdp_info;
 	void *arch_info;
 } cortex_m3_common_t;
 
@@ -188,7 +188,7 @@
 int cortex_m3_add_watchpoint(struct target_s *target, watchpoint_t *watchpoint);
 int cortex_m3_remove_watchpoint(struct target_s *target, watchpoint_t *watchpoint);
 
-extern int cortex_m3_register_commands(struct command_context_s *cmd_ctx);
+//extern int cortex_m3_register_commands(struct command_context_s *cmd_ctx);
 extern int cortex_m3_init_arch_info(target_t *target, cortex_m3_common_t *cortex_m3, jtag_tap_t *tap);
 
 #endif /* CORTEX_M3_H */



From oharboe at mail.berlios.de  Mon Apr 27 11:12:18 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Mon, 27 Apr 2009 11:12:18 +0200
Subject: [Openocd-svn] r1537 - trunk/src/jtag
Message-ID: <200904270912.n3R9CI3G008032@sheep.berlios.de>

Author: oharboe
Date: 2009-04-27 11:12:18 +0200 (Mon, 27 Apr 2009)
New Revision: 1537

Modified:
   trunk/src/jtag/jtag.c
Log:
Some devices such as AVR will return 0xffffffff instead of the TDI
data at the end of the chain. Added kludge to handle this. 

Modified: trunk/src/jtag/jtag.c
===================================================================
--- trunk/src/jtag/jtag.c	2009-04-27 08:29:28 UTC (rev 1536)
+++ trunk/src/jtag/jtag.c	2009-04-27 09:12:18 UTC (rev 1537)
@@ -1531,7 +1531,9 @@
 			u32 part;
 			u32 version;
 
-			if (idcode == 0x000000FF)
+			/* some devices, such as AVR will output all 1's instead of TDI
+			input value at end of chain. */
+			if ((idcode == 0x000000FF)||(idcode == 0xFFFFFFFF))
 			{
 				int unexpected=0;
 				/* End of chain (invalid manufacturer ID)
@@ -1548,7 +1550,7 @@
 				for (bit_count += 32; bit_count < (JTAG_MAX_CHAIN_SIZE * 32) - 31;bit_count += 32)
 				{
 					idcode = buf_get_u32(idcode_buffer, bit_count, 32);
-					if (unexpected||(idcode != 0x000000FF))
+					if (unexpected||((idcode != 0x000000FF)&&(idcode != 0xFFFFFFFF)))
 					{
 						LOG_WARNING("Unexpected idcode after end of chain! %d 0x%08x", bit_count, idcode);
 						unexpected = 1;
@@ -3306,7 +3308,7 @@
 
 	tap_state_t last_state;
 
-	// set startstate (and possibly last, if tap_bits == 0) 
+	// set startstate (and possibly last, if tap_bits == 0)
 	last_state = next_state;
 	DEBUG_JTAG_IO("TAP/SM: START state: %s", tap_state_name(next_state));
 



From mlu at mail.berlios.de  Mon Apr 27 12:05:16 2009
From: mlu at mail.berlios.de (mlu at mail.berlios.de)
Date: Mon, 27 Apr 2009 12:05:16 +0200
Subject: [Openocd-svn] r1538 - trunk/src/target
Message-ID: <200904271005.n3RA5GUJ011938@sheep.berlios.de>

Author: mlu
Date: 2009-04-27 12:05:15 +0200 (Mon, 27 Apr 2009)
New Revision: 1538

Removed:
   trunk/src/target/cortex_swjdp.c
   trunk/src/target/cortex_swjdp.h
Log:
Deleted depreciated files ( new versions are arm_adi_v5.c/h )

Deleted: trunk/src/target/cortex_swjdp.c
===================================================================
--- trunk/src/target/cortex_swjdp.c	2009-04-27 09:12:18 UTC (rev 1537)
+++ trunk/src/target/cortex_swjdp.c	2009-04-27 10:05:15 UTC (rev 1538)
@@ -1,1029 +0,0 @@
-/***************************************************************************
- *   Copyright (C) 2006 by Magnus Lundin                                   *
- *   lundin at mlu.mine.nu                                                    *
- *                                                                         *
- *   Copyright (C) 2008 by Spencer Oliver                                  *
- *   spen at spen-soft.co.uk                                                  *
- *                                                                         *
- *   Copyright (C) 2009 by Oyvind Harboe                                   *
- *   oyvind.harboe at zylin.com                                               *
- *																		   *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- *                                                                         *
- *   This program is distributed in the hope that it will be useful,       *
- *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
- *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
- *   GNU General Public License for more details.                          *
- *                                                                         *
- *   You should have received a copy of the GNU General Public License     *
- *   along with this program; if not, write to the                         *
- *   Free Software Foundation, Inc.,                                       *
- *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
- ***************************************************************************/
-/***************************************************************************
- *                                                                         *
- * CoreSight (Light?) SerialWireJtagDebugPort                              *
- *                                                                         *
- * CoreSight(tm) DAP-Lite TRM, ARM DDI 0316A                                *
- * Cortex-M3(tm) TRM, ARM DDI 0337C                                         *
- *                                                                         *
-***************************************************************************/
-#ifdef HAVE_CONFIG_H
-#include "config.h"
-#endif
-
-#include "replacements.h"
-
-#include "cortex_m3.h"
-#include "cortex_swjdp.h"
-#include "jtag.h"
-#include "log.h"
-#include "time_support.h"
-#include <stdlib.h>
-
-/*
- * Transaction Mode:
- * swjdp->trans_mode = TRANS_MODE_COMPOSITE;
- * Uses Overrun checking mode and does not do actual JTAG send/receive or transaction
- * result checking until swjdp_end_transaction()
- * This must be done before using or deallocating any return variables.
- * swjdp->trans_mode == TRANS_MODE_ATOMIC
- * All reads and writes to the AHB bus are checked for valid completion, and return values
- * are immediatley available.
-*/
-
-/***************************************************************************
- *                                                                         *
- * DPACC and APACC scanchain access through JTAG-DR                        *
- *                                                                         *
-***************************************************************************/
-
-/* Scan out and in from target ordered u8 buffers */
-int swjdp_scan(arm_jtag_t *jtag_info, u8 instr, u8 reg_addr, u8 RnW, u8 *outvalue, u8 *invalue, u8 *ack)
-{
-	scan_field_t fields[2];
-	u8 out_addr_buf;
-
-	jtag_add_end_state(TAP_IDLE);
-	arm_jtag_set_instr(jtag_info, instr, NULL);
-
-	fields[0].tap = jtag_info->tap;
-	fields[0].num_bits = 3;
-	buf_set_u32(&out_addr_buf, 0, 3, ((reg_addr >> 1) & 0x6) | (RnW & 0x1));
-	fields[0].out_value = &out_addr_buf;
-	fields[0].out_mask = NULL;
-	fields[0].in_value = ack;
-	fields[0].in_check_value = NULL;
-	fields[0].in_check_mask = NULL;
-	fields[0].in_handler = NULL;
-	fields[0].in_handler_priv = NULL;
-
-	fields[1].tap = jtag_info->tap;
-	fields[1].num_bits = 32;
-	fields[1].out_value = outvalue;
-	fields[1].out_mask = NULL;
-	fields[1].in_value = invalue;
-	fields[1].in_handler = NULL;
-	fields[1].in_handler_priv = NULL;
-	fields[1].in_check_value = NULL;
-	fields[1].in_check_mask = NULL;
-
-	jtag_add_dr_scan(2, fields, TAP_INVALID);
-
-	return ERROR_OK;
-}
-
-/* Scan out and in from host ordered u32 variables */
-int swjdp_scan_u32(arm_jtag_t *jtag_info, u8 instr, u8 reg_addr, u8 RnW, u32 outvalue, u32 *invalue, u8 *ack)
-{
-	scan_field_t fields[2];
-	u8 out_value_buf[4];
-	u8 out_addr_buf;
-
-	jtag_add_end_state(TAP_IDLE);
-	arm_jtag_set_instr(jtag_info, instr, NULL);
-
-	fields[0].tap = jtag_info->tap;
-	fields[0].num_bits = 3;
-	buf_set_u32(&out_addr_buf, 0, 3, ((reg_addr >> 1) & 0x6) | (RnW & 0x1));
-	fields[0].out_value = &out_addr_buf;
-	fields[0].out_mask = NULL;
-	fields[0].in_value = ack;
-	fields[0].in_check_value = NULL;
-	fields[0].in_check_mask = NULL;
-	fields[0].in_handler = NULL;
-	fields[0].in_handler_priv = NULL;
-
-	fields[1].tap = jtag_info->tap;
-	fields[1].num_bits = 32;
-	buf_set_u32(out_value_buf, 0, 32, outvalue);
-	fields[1].out_value = out_value_buf;
-	fields[1].out_mask = NULL;
-	fields[1].in_value = NULL;
-	if (invalue)
-	{
-		fields[1].in_handler = arm_jtag_buf_to_u32;
-		fields[1].in_handler_priv = invalue;
-	}
-	else
-	{
-		fields[1].in_handler = NULL;
-		fields[1].in_handler_priv = NULL;
-	}
-	fields[1].in_check_value = NULL;
-	fields[1].in_check_mask = NULL;
-
-	jtag_add_dr_scan(2, fields, TAP_INVALID);
-
-	return ERROR_OK;
-}
-
-/* scan_inout_check adds one extra inscan for DPAP_READ commands to read variables */
-int scan_inout_check(swjdp_common_t *swjdp, u8 instr, u8 reg_addr, u8 RnW, u8 *outvalue, u8 *invalue)
-{
-	swjdp_scan(swjdp->jtag_info, instr, reg_addr, RnW, outvalue, NULL, NULL);
-	if ((RnW == DPAP_READ) && (invalue != NULL))
-	{
-		swjdp_scan(swjdp->jtag_info, SWJDP_IR_DPACC, DP_RDBUFF, DPAP_READ, 0, invalue, &swjdp->ack);
-	}
-
-	/* In TRANS_MODE_ATOMIC all SWJDP_IR_APACC transactions wait for ack=OK/FAULT and the check CTRL_STAT */
-	if ((instr == SWJDP_IR_APACC) && (swjdp->trans_mode == TRANS_MODE_ATOMIC))
-	{
-		return swjdp_transaction_endcheck(swjdp);
-	}
-
-	return ERROR_OK;
-}
-
-int scan_inout_check_u32(swjdp_common_t *swjdp, u8 instr, u8 reg_addr, u8 RnW, u32 outvalue, u32 *invalue)
-{
-	swjdp_scan_u32(swjdp->jtag_info, instr, reg_addr, RnW, outvalue, NULL, NULL);
-	if ((RnW==DPAP_READ) && (invalue != NULL))
-	{
-		swjdp_scan_u32(swjdp->jtag_info, SWJDP_IR_DPACC, DP_RDBUFF, DPAP_READ, 0, invalue, &swjdp->ack);
-	}
-
-	/* In TRANS_MODE_ATOMIC all SWJDP_IR_APACC transactions wait for ack=OK/FAULT and then check CTRL_STAT */
-	if ((instr == SWJDP_IR_APACC) && (swjdp->trans_mode == TRANS_MODE_ATOMIC))
-	{
-		return swjdp_transaction_endcheck(swjdp);
-	}
-
-	return ERROR_OK;
-}
-
-int swjdp_transaction_endcheck(swjdp_common_t *swjdp)
-{
-	int retval;
-	u32 ctrlstat;
-
-	/* too expensive to call keep_alive() here */
-
-#if 0
-	/* Danger!!!! BROKEN!!!! */
-	scan_inout_check_u32(swjdp, SWJDP_IR_DPACC, DP_CTRL_STAT, DPAP_READ, 0, &ctrlstat);
-	/* Danger!!!! BROKEN!!!! Why will jtag_execute_queue() fail here????
-	R956 introduced the check on return value here and now Michael Schwingen reports
-	that this code no longer works....
-
-	https://lists.berlios.de/pipermail/openocd-development/2008-September/003107.html
-	*/
-	if ((retval=jtag_execute_queue())!=ERROR_OK)
-	{
-		LOG_ERROR("BUG: Why does this fail the first time????");
-	}
-	/* Why??? second time it works??? */
-#endif
-
-	scan_inout_check_u32(swjdp, SWJDP_IR_DPACC, DP_CTRL_STAT, DPAP_READ, 0, &ctrlstat);
-	if ((retval=jtag_execute_queue())!=ERROR_OK)
-		return retval;
-
-	swjdp->ack = swjdp->ack & 0x7;
-
-	if (swjdp->ack != 2)
-	{
-		long long then=timeval_ms();
-		while (swjdp->ack != 2)
-		{
-			if (swjdp->ack == 1)
-			{
-				if ((timeval_ms()-then) > 1000)
-				{
-					LOG_WARNING("Timeout (1000ms) waiting for ACK = OK/FAULT in SWJDP transaction");
-					return ERROR_JTAG_DEVICE_ERROR;
-				}
-			}
-			else
-			{
-				LOG_WARNING("Invalid ACK in SWJDP transaction");
-				return ERROR_JTAG_DEVICE_ERROR;
-			}
-
-			scan_inout_check_u32(swjdp, SWJDP_IR_DPACC, DP_CTRL_STAT, DPAP_READ, 0, &ctrlstat);
-			if ((retval=jtag_execute_queue())!=ERROR_OK)
-				return retval;
-			swjdp->ack = swjdp->ack & 0x7;
-		}
-	} else
-	{
-		/* common code path avoids fn to timeval_ms() */
-	}
-
-	/* Check for STICKYERR and STICKYORUN */
-	if (ctrlstat & (SSTICKYORUN | SSTICKYERR))
-	{
-		LOG_DEBUG("swjdp: CTRL/STAT error 0x%x", ctrlstat);
-		/* Check power to debug regions */
-		if ((ctrlstat & 0xf0000000) != 0xf0000000)
-		{
-			 ahbap_debugport_init(swjdp);
-		}
-		else
-		{
-			u32 dcb_dhcsr,nvic_shcsr, nvic_bfar, nvic_cfsr;
-
-			/* Print information about last AHBAP access */
-			LOG_ERROR("AHBAP: dp_select 0x%x, ap_csw 0x%x, ap_tar 0x%x", swjdp->dp_select_value, swjdp->ap_csw_value, swjdp->ap_tar_value);
-			if (ctrlstat & SSTICKYORUN)
-				LOG_ERROR("SWJ-DP OVERRUN - check clock or reduce jtag speed");
-
-			if (ctrlstat & SSTICKYERR)
-				LOG_ERROR("SWJ-DP STICKY ERROR");
-
-			/* Clear Sticky Error Bits */
-			scan_inout_check_u32(swjdp, SWJDP_IR_DPACC, DP_CTRL_STAT, DPAP_WRITE, swjdp->dp_ctrl_stat | SSTICKYORUN | SSTICKYERR, NULL);
-			scan_inout_check_u32(swjdp, SWJDP_IR_DPACC, DP_CTRL_STAT, DPAP_READ, 0, &ctrlstat);
-			if ((retval=jtag_execute_queue())!=ERROR_OK)
-				return retval;
-
-			LOG_DEBUG("swjdp: status 0x%x", ctrlstat);
-
-			/* Can we find out the reason for the error ?? */
-			ahbap_read_system_atomic_u32(swjdp, DCB_DHCSR, &dcb_dhcsr);
-			ahbap_read_system_atomic_u32(swjdp, NVIC_SHCSR, &nvic_shcsr);
-			ahbap_read_system_atomic_u32(swjdp, NVIC_CFSR, &nvic_cfsr);
-			ahbap_read_system_atomic_u32(swjdp, NVIC_BFAR, &nvic_bfar);
-			LOG_ERROR("dcb_dhcsr 0x%x, nvic_shcsr 0x%x, nvic_cfsr 0x%x, nvic_bfar 0x%x", dcb_dhcsr, nvic_shcsr, nvic_cfsr, nvic_bfar);
-		}
-		if ((retval=jtag_execute_queue())!=ERROR_OK)
-			return retval;
-		return ERROR_JTAG_DEVICE_ERROR;
-	}
-
-	return ERROR_OK;
-}
-
-/***************************************************************************
- *                                                                         *
- * DP and AHB-AP  register access  through APACC and DPACC                 *
- *                                                                         *
-***************************************************************************/
-
-int swjdp_write_dpacc(swjdp_common_t *swjdp, u32 value, u8 reg_addr)
-{
-	return scan_inout_check_u32(swjdp, SWJDP_IR_DPACC, reg_addr, DPAP_WRITE, value, NULL);
-}
-
-int swjdp_read_dpacc(swjdp_common_t *swjdp, u32 *value, u8 reg_addr)
-{
-	return scan_inout_check_u32(swjdp, SWJDP_IR_DPACC, reg_addr, DPAP_READ, 0, value);
-}
-
-int swjdp_bankselect_apacc(swjdp_common_t *swjdp,u32 reg_addr)
-{
-	u32 select;
-	select = (reg_addr & 0xFF0000F0);
-
-	if (select != swjdp->dp_select_value)
-	{
-		swjdp_write_dpacc(swjdp, select, DP_SELECT);
-		swjdp->dp_select_value = select;
-	}
-
-	return ERROR_OK;
-}
-
-int ahbap_write_reg(swjdp_common_t *swjdp, u32 reg_addr, u8* out_value_buf)
-{
-	swjdp_bankselect_apacc(swjdp, reg_addr);
-	scan_inout_check(swjdp, SWJDP_IR_APACC, reg_addr, DPAP_WRITE, out_value_buf, NULL);
-
-	return ERROR_OK;
-}
-
-int ahbap_read_reg(swjdp_common_t *swjdp, u32 reg_addr, u8 *in_value_buf)
-{
-	swjdp_bankselect_apacc(swjdp, reg_addr);
-	scan_inout_check(swjdp, SWJDP_IR_APACC, reg_addr, DPAP_READ, 0, in_value_buf);
-
-	return ERROR_OK;
-}
-int ahbap_write_reg_u32(swjdp_common_t *swjdp, u32 reg_addr, u32 value)
-{
-	u8 out_value_buf[4];
-
-	buf_set_u32(out_value_buf, 0, 32, value);
-	swjdp_bankselect_apacc(swjdp, reg_addr);
-	scan_inout_check(swjdp, SWJDP_IR_APACC, reg_addr, DPAP_WRITE, out_value_buf, NULL);
-
-	return ERROR_OK;
-}
-
-int ahbap_read_reg_u32(swjdp_common_t *swjdp, u32 reg_addr, u32 *value)
-{
-	swjdp_bankselect_apacc(swjdp, reg_addr);
-	scan_inout_check_u32(swjdp, SWJDP_IR_APACC, reg_addr, DPAP_READ, 0, value);
-
-	return ERROR_OK;
-}
-
-/***************************************************************************
- *                                                                         *
- * AHB-AP access to memory and system registers on AHB bus                 *
- *                                                                         *
-***************************************************************************/
-
-int ahbap_setup_accessport(swjdp_common_t *swjdp, u32 csw, u32 tar)
-{
-	csw = csw | CSW_DBGSWENABLE | CSW_MASTER_DEBUG | CSW_HPROT;
-	if (csw != swjdp->ap_csw_value)
-	{
-		/* LOG_DEBUG("swjdp : Set CSW %x",csw); */
-		ahbap_write_reg_u32(swjdp, AHBAP_CSW, csw );
-		swjdp->ap_csw_value = csw;
-	}
-	if (tar != swjdp->ap_tar_value)
-	{
-		/* LOG_DEBUG("swjdp : Set TAR %x",tar); */
-		ahbap_write_reg_u32(swjdp, AHBAP_TAR, tar );
-		swjdp->ap_tar_value = tar;
-	}
-	if (csw & CSW_ADDRINC_MASK)
-	{
-		/* Do not cache TAR value when autoincrementing */
-		swjdp->ap_tar_value = -1;
-	}
-	return ERROR_OK;
-}
-
-/*****************************************************************************
-*                                                                            *
-* ahbap_read_system_u32(swjdp_common_t *swjdp, u32 address, u32 *value)      *
-*                                                                            *
-* Read a u32 value from memory or system register                            *
-* Functionally equivalent to target_read_u32(target, address, u32 *value),   *
-* but with less overhead                                                     *
-*****************************************************************************/
-int ahbap_read_system_u32(swjdp_common_t *swjdp, u32 address, u32 *value)
-{
-	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
-
-	ahbap_setup_accessport(swjdp, CSW_32BIT | CSW_ADDRINC_OFF, address & 0xFFFFFFF0);
-	ahbap_read_reg_u32(swjdp, AHBAP_BD0 | (address & 0xC), value );
-
-	return ERROR_OK;
-}
-
-int ahbap_read_system_atomic_u32(swjdp_common_t *swjdp, u32 address, u32 *value)
-{
-	ahbap_read_system_u32(swjdp, address, value);
-
-	return swjdp_transaction_endcheck(swjdp);
-}
-
-/*****************************************************************************
-*                                                                            *
-* ahbap_write_system_u32(swjdp_common_t *swjdp, u32 address, u32 value)      *
-*                                                                            *
-* Write a u32 value to memory or system register                             *
-*                                                                            *
-*****************************************************************************/
-int ahbap_write_system_u32(swjdp_common_t *swjdp, u32 address, u32 value)
-{
-	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
-
-	ahbap_setup_accessport(swjdp, CSW_32BIT | CSW_ADDRINC_OFF, address & 0xFFFFFFF0);
-	ahbap_write_reg_u32(swjdp, AHBAP_BD0 | (address & 0xC), value );
-
-	return ERROR_OK;
-}
-
-int ahbap_write_system_atomic_u32(swjdp_common_t *swjdp, u32 address, u32 value)
-{
-	ahbap_write_system_u32(swjdp, address, value);
-
-	return swjdp_transaction_endcheck(swjdp);
-}
-
-/*****************************************************************************
-*                                                                            *
-* ahbap_write_buf(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address) *
-*                                                                            *
-* Write a buffer in target order (little endian)                             *
-*                                                                            *
-*****************************************************************************/
-int ahbap_write_buf_u32(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address)
-{
-	u32 outvalue;
-	int wcount, blocksize, writecount, errorcount = 0, retval = ERROR_OK;
-	u32 adr = address;
-	u8* pBuffer = buffer;
-
-	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
-
-	count >>= 2;
-	wcount = count;
-
-	/* if we have an unaligned access - reorder data */
-	if (adr & 0x3u)
-	{
-		for (writecount = 0; writecount < count; writecount++)
-		{
-			int i;
-			outvalue = *((u32*)pBuffer);
-
-			for (i = 0; i < 4; i++ )
-			{
-				*((u8*)pBuffer + (adr & 0x3)) = outvalue;
-				outvalue >>= 8;
-				adr++;
-			}
-			pBuffer += 4;
-		}
-	}
-
-	while (wcount > 0)
-	{
-		/* Adjust to write blocks within 4K aligned boundaries */
-		blocksize = (0x1000 - (0xFFF & address)) >> 2;
-		if (wcount < blocksize)
-			blocksize = wcount;
-
-		/* handle unaligned data at 4k boundary */
-		if (blocksize == 0)
-			blocksize = 1;
-
-		ahbap_setup_accessport(swjdp, CSW_32BIT | CSW_ADDRINC_SINGLE, address);
-
-		for (writecount = 0; writecount < blocksize; writecount++)
-		{
-			ahbap_write_reg(swjdp, AHBAP_DRW, buffer + 4 * writecount );
-		}
-
-		if (swjdp_transaction_endcheck(swjdp) == ERROR_OK)
-		{
-			wcount = wcount - blocksize;
-			address = address + 4 * blocksize;
-			buffer = buffer + 4 * blocksize;
-		}
-		else
-		{
-			errorcount++;
-		}
-
-		if (errorcount > 1)
-		{
-			LOG_WARNING("Block write error address 0x%x, wcount 0x%x", address, wcount);
-			return ERROR_JTAG_DEVICE_ERROR;
-		}
-	}
-
-	return retval;
-}
-
-int ahbap_write_buf_packed_u16(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address)
-{
-	u32 outvalue;
-	int retval = ERROR_OK;
-	int wcount, blocksize, writecount, i;
-
-	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
-
-	wcount = count >> 1;
-
-	while (wcount > 0)
-	{
-		int nbytes;
-
-		/* Adjust to read within 4K block boundaries */
-		blocksize = (0x1000 - (0xFFF & address)) >> 1;
-
-		if (wcount < blocksize)
-			blocksize = wcount;
-
-		/* handle unaligned data at 4k boundary */
-		if (blocksize == 0)
-			blocksize = 1;
-
-		ahbap_setup_accessport(swjdp, CSW_16BIT | CSW_ADDRINC_PACKED, address);
-		writecount = blocksize;
-
-		do
-		{
-			nbytes = MIN((writecount << 1), 4);
-
-			if (nbytes < 4 )
-			{
-				if (ahbap_write_buf_u16(swjdp, buffer, nbytes, address) != ERROR_OK)
-				{
-					LOG_WARNING("Block read error address 0x%x, count 0x%x", address, count);
-					return ERROR_JTAG_DEVICE_ERROR;
-				}
-
-				address += nbytes >> 1;
-			}
-			else
-			{
-				outvalue = *((u32*)buffer);
-
-				for (i = 0; i < nbytes; i++ )
-				{
-					*((u8*)buffer + (address & 0x3)) = outvalue;
-					outvalue >>= 8;
-					address++;
-				}
-
-				outvalue = *((u32*)buffer);
-				ahbap_write_reg_u32(swjdp, AHBAP_DRW, outvalue);
-				if (swjdp_transaction_endcheck(swjdp) != ERROR_OK)
-				{
-					LOG_WARNING("Block read error address 0x%x, count 0x%x", address, count);
-					return ERROR_JTAG_DEVICE_ERROR;
-				}
-			}
-
-			buffer += nbytes >> 1;
-			writecount -= nbytes >> 1;
-
-		} while (writecount);
-		wcount -= blocksize;
-	}
-
-	return retval;
-}
-
-int ahbap_write_buf_u16(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address)
-{
-	u32 outvalue;
-	int retval = ERROR_OK;
-
-	if (count >= 4)
-		return ahbap_write_buf_packed_u16(swjdp, buffer, count, address);
-
-	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
-
-	while (count > 0)
-	{
-		ahbap_setup_accessport(swjdp, CSW_16BIT | CSW_ADDRINC_SINGLE, address);
-		outvalue = *((u16*)buffer) << 8 * (address & 0x3);
-		ahbap_write_reg_u32(swjdp, AHBAP_DRW, outvalue );
-		retval = swjdp_transaction_endcheck(swjdp);
-		count -= 2;
-		address += 2;
-		buffer += 2;
-	}
-
-	return retval;
-}
-
-int ahbap_write_buf_packed_u8(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address)
-{
-	u32 outvalue;
-	int retval = ERROR_OK;
-	int wcount, blocksize, writecount, i;
-
-	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
-
-	wcount = count;
-
-	while (wcount > 0)
-	{
-		int nbytes;
-
-		/* Adjust to read within 4K block boundaries */
-		blocksize = (0x1000 - (0xFFF & address));
-
-		if (wcount < blocksize)
-			blocksize = wcount;
-
-		ahbap_setup_accessport(swjdp, CSW_8BIT | CSW_ADDRINC_PACKED, address);
-		writecount = blocksize;
-
-		do
-		{
-			nbytes = MIN(writecount, 4);
-
-			if (nbytes < 4 )
-			{
-				if (ahbap_write_buf_u8(swjdp, buffer, nbytes, address) != ERROR_OK)
-				{
-					LOG_WARNING("Block read error address 0x%x, count 0x%x", address, count);
-					return ERROR_JTAG_DEVICE_ERROR;
-				}
-
-				address += nbytes;
-			}
-			else
-			{
-				outvalue = *((u32*)buffer);
-
-				for (i = 0; i < nbytes; i++ )
-				{
-					*((u8*)buffer + (address & 0x3)) = outvalue;
-					outvalue >>= 8;
-					address++;
-				}
-
-				outvalue = *((u32*)buffer);
-				ahbap_write_reg_u32(swjdp, AHBAP_DRW, outvalue);
-				if (swjdp_transaction_endcheck(swjdp) != ERROR_OK)
-				{
-					LOG_WARNING("Block read error address 0x%x, count 0x%x", address, count);
-					return ERROR_JTAG_DEVICE_ERROR;
-				}
-			}
-
-			buffer += nbytes;
-			writecount -= nbytes;
-
-		} while (writecount);
-		wcount -= blocksize;
-	}
-
-	return retval;
-}
-
-int ahbap_write_buf_u8(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address)
-{
-	u32 outvalue;
-	int retval = ERROR_OK;
-
-	if (count >= 4)
-		return ahbap_write_buf_packed_u8(swjdp, buffer, count, address);
-
-	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
-
-	while (count > 0)
-	{
-		ahbap_setup_accessport(swjdp, CSW_8BIT | CSW_ADDRINC_SINGLE, address);
-		outvalue = *((u8*)buffer) << 8 * (address & 0x3);
-		ahbap_write_reg_u32(swjdp, AHBAP_DRW, outvalue );
-		retval = swjdp_transaction_endcheck(swjdp);
-		count--;
-		address++;
-		buffer++;
-	}
-
-	return retval;
-}
-
-/*********************************************************************************
-*                                                                                *
-* ahbap_read_buf_u32(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address)  *
-*                                                                                *
-* Read block fast in target order (little endian) into a buffer                  *
-*                                                                                *
-**********************************************************************************/
-int ahbap_read_buf_u32(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address)
-{
-	int wcount, blocksize, readcount, errorcount = 0, retval = ERROR_OK;
-	u32 adr = address;
-	u8* pBuffer = buffer;
-
-	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
-
-	count >>= 2;
-	wcount = count;
-
-	while (wcount > 0)
-	{
-		/* Adjust to read within 4K block boundaries */
-		blocksize = (0x1000 - (0xFFF & address)) >> 2;
-		if (wcount < blocksize)
-			blocksize = wcount;
-
-		/* handle unaligned data at 4k boundary */
-		if (blocksize == 0)
-			blocksize = 1;
-
-		ahbap_setup_accessport(swjdp, CSW_32BIT | CSW_ADDRINC_SINGLE, address);
-
-		/* Scan out first read */
-		swjdp_scan(swjdp->jtag_info, SWJDP_IR_APACC, AHBAP_DRW, DPAP_READ, 0, NULL, NULL);
-		for (readcount = 0; readcount < blocksize - 1; readcount++)
-		{
-			/* Scan out read instruction and scan in previous value */
-			swjdp_scan(swjdp->jtag_info, SWJDP_IR_APACC, AHBAP_DRW, DPAP_READ, 0, buffer + 4 * readcount, &swjdp->ack);
-		}
-
-		/* Scan in last value */
-		swjdp_scan(swjdp->jtag_info, SWJDP_IR_DPACC, DP_RDBUFF, DPAP_READ, 0, buffer + 4 * readcount, &swjdp->ack);
-		if (swjdp_transaction_endcheck(swjdp) == ERROR_OK)
-		{
-			wcount = wcount - blocksize;
-			address += 4 * blocksize;
-			buffer += 4 * blocksize;
-		}
-		else
-		{
-			errorcount++;
-		}
-
-		if (errorcount > 1)
-		{
-			LOG_WARNING("Block read error address 0x%x, count 0x%x", address, count);
-			return ERROR_JTAG_DEVICE_ERROR;
-		}
-	}
-
-	/* if we have an unaligned access - reorder data */
-	if (adr & 0x3u)
-	{
-		for (readcount = 0; readcount < count; readcount++)
-		{
-			int i;
-			u32 data = *((u32*)pBuffer);
-
-			for (i = 0; i < 4; i++ )
-			{
-				*((u8*)pBuffer) = (data >> 8 * (adr & 0x3));
-				pBuffer++;
-				adr++;
-			}
-		}
-	}
-
-	return retval;
-}
-
-int ahbap_read_buf_packed_u16(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address)
-{
-	u32 invalue;
-	int retval = ERROR_OK;
-	int wcount, blocksize, readcount, i;
-
-	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
-
-	wcount = count >> 1;
-
-	while (wcount > 0)
-	{
-		int nbytes;
-
-		/* Adjust to read within 4K block boundaries */
-		blocksize = (0x1000 - (0xFFF & address)) >> 1;
-		if (wcount < blocksize)
-			blocksize = wcount;
-
-		ahbap_setup_accessport(swjdp, CSW_16BIT | CSW_ADDRINC_PACKED, address);
-
-		/* handle unaligned data at 4k boundary */
-		if (blocksize == 0)
-			blocksize = 1;
-		readcount = blocksize;
-
-		do
-		{
-			ahbap_read_reg_u32(swjdp, AHBAP_DRW, &invalue );
-			if (swjdp_transaction_endcheck(swjdp) != ERROR_OK)
-			{
-				LOG_WARNING("Block read error address 0x%x, count 0x%x", address, count);
-				return ERROR_JTAG_DEVICE_ERROR;
-			}
-
-			nbytes = MIN((readcount << 1), 4);
-
-			for (i = 0; i < nbytes; i++ )
-			{
-				*((u8*)buffer) = (invalue >> 8 * (address & 0x3));
-				buffer++;
-				address++;
-			}
-
-			readcount -= (nbytes >> 1);
-		} while (readcount);
-		wcount -= blocksize;
-	}
-
-	return retval;
-}
-
-int ahbap_read_buf_u16(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address)
-{
-	u32 invalue, i;
-	int retval = ERROR_OK;
-
-	if (count >= 4)
-		return ahbap_read_buf_packed_u16(swjdp, buffer, count, address);
-
-	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
-
-	while (count > 0)
-	{
-		ahbap_setup_accessport(swjdp, CSW_16BIT | CSW_ADDRINC_SINGLE, address);
-		ahbap_read_reg_u32(swjdp, AHBAP_DRW, &invalue );
-		retval = swjdp_transaction_endcheck(swjdp);
-		if (address & 0x1)
-		{
-			for (i = 0; i < 2; i++ )
-			{
-				*((u8*)buffer) = (invalue >> 8 * (address & 0x3));
-				buffer++;
-				address++;
-			}
-		}
-		else
-		{
-			*((u16*)buffer) = (invalue >> 8 * (address & 0x3));
-			address += 2;
-			buffer += 2;
-		}
-		count -= 2;
-	}
-
-	return retval;
-}
-
-int ahbap_read_buf_packed_u8(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address)
-{
-	u32 invalue;
-	int retval = ERROR_OK;
-	int wcount, blocksize, readcount, i;
-
-	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
-
-	wcount = count;
-
-	while (wcount > 0)
-	{
-		int nbytes;
-
-		/* Adjust to read within 4K block boundaries */
-		blocksize = (0x1000 - (0xFFF & address));
-
-		if (wcount < blocksize)
-			blocksize = wcount;
-
-		ahbap_setup_accessport(swjdp, CSW_8BIT | CSW_ADDRINC_PACKED, address);
-		readcount = blocksize;
-
-		do
-		{
-			ahbap_read_reg_u32(swjdp, AHBAP_DRW, &invalue );
-			if (swjdp_transaction_endcheck(swjdp) != ERROR_OK)
-			{
-				LOG_WARNING("Block read error address 0x%x, count 0x%x", address, count);
-				return ERROR_JTAG_DEVICE_ERROR;
-			}
-
-			nbytes = MIN(readcount, 4);
-
-			for (i = 0; i < nbytes; i++ )
-			{
-				*((u8*)buffer) = (invalue >> 8 * (address & 0x3));
-				buffer++;
-				address++;
-			}
-
-			readcount -= nbytes;
-		} while (readcount);
-		wcount -= blocksize;
-	}
-
-	return retval;
-}
-
-int ahbap_read_buf_u8(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address)
-{
-	u32 invalue;
-	int retval = ERROR_OK;
-
-	if (count >= 4)
-		return ahbap_read_buf_packed_u8(swjdp, buffer, count, address);
-
-	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
-
-	while (count > 0)
-	{
-		ahbap_setup_accessport(swjdp, CSW_8BIT | CSW_ADDRINC_SINGLE, address);
-		ahbap_read_reg_u32(swjdp, AHBAP_DRW, &invalue );
-		retval = swjdp_transaction_endcheck(swjdp);
-		*((u8*)buffer) = (invalue >> 8 * (address & 0x3));
-		count--;
-		address++;
-		buffer++;
-	}
-
-	return retval;
-}
-
-int ahbap_read_coreregister_u32(swjdp_common_t *swjdp, u32 *value, int regnum)
-{
-	int retval;
-	u32 dcrdr;
-
-	/* because the DCB_DCRDR is used for the emulated dcc channel
-	 * we gave to save/restore the DCB_DCRDR when used */
-
-	ahbap_read_system_u32(swjdp, DCB_DCRDR, &dcrdr);
-
-	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
-
-	/* ahbap_write_system_u32(swjdp, DCB_DCRSR, regnum); */
-	ahbap_setup_accessport(swjdp, CSW_32BIT | CSW_ADDRINC_OFF, DCB_DCRSR & 0xFFFFFFF0);
-	ahbap_write_reg_u32(swjdp, AHBAP_BD0 | (DCB_DCRSR & 0xC), regnum );
-
-	/* ahbap_read_system_u32(swjdp, DCB_DCRDR, value); */
-	ahbap_setup_accessport(swjdp, CSW_32BIT | CSW_ADDRINC_OFF, DCB_DCRDR & 0xFFFFFFF0);
-	ahbap_read_reg_u32(swjdp, AHBAP_BD0 | (DCB_DCRDR & 0xC), value );
-
-	ahbap_write_system_u32(swjdp, DCB_DCRDR, dcrdr);
-	retval = swjdp_transaction_endcheck(swjdp);
-	return retval;
-}
-
-int ahbap_write_coreregister_u32(swjdp_common_t *swjdp, u32 value, int regnum)
-{
-	int retval;
-	u32 dcrdr;
-
-	/* because the DCB_DCRDR is used for the emulated dcc channel
-	 * we gave to save/restore the DCB_DCRDR when used */
-
-	ahbap_read_system_u32(swjdp, DCB_DCRDR, &dcrdr);
-
-	swjdp->trans_mode = TRANS_MODE_COMPOSITE;
-
-	/* ahbap_write_system_u32(swjdp, DCB_DCRDR, core_regs[i]); */
-	ahbap_setup_accessport(swjdp, CSW_32BIT | CSW_ADDRINC_OFF, DCB_DCRDR & 0xFFFFFFF0);
-	ahbap_write_reg_u32(swjdp, AHBAP_BD0 | (DCB_DCRDR & 0xC), value );
-
-	/* ahbap_write_system_u32(swjdp, DCB_DCRSR, i | DCRSR_WnR	); */
-	ahbap_setup_accessport(swjdp, CSW_32BIT | CSW_ADDRINC_OFF, DCB_DCRSR & 0xFFFFFFF0);
-	ahbap_write_reg_u32(swjdp, AHBAP_BD0 | (DCB_DCRSR & 0xC), regnum | DCRSR_WnR );
-
-	ahbap_write_system_u32(swjdp, DCB_DCRDR, dcrdr);
-	retval = swjdp_transaction_endcheck(swjdp);
-	return retval;
-}
-
-int ahbap_debugport_init(swjdp_common_t *swjdp)
-{
-	u32 idreg, romaddr, dummy;
-	u32 ctrlstat;
-	int cnt = 0;
-	int retval;
-
-	LOG_DEBUG(" ");
-
-	swjdp->ap_csw_value = -1;
-	swjdp->ap_tar_value = -1;
-	swjdp->trans_mode = TRANS_MODE_ATOMIC;
-	swjdp_read_dpacc(swjdp, &dummy, DP_CTRL_STAT);
-	swjdp_write_dpacc(swjdp, SSTICKYERR, DP_CTRL_STAT);
-	swjdp_read_dpacc(swjdp, &dummy, DP_CTRL_STAT);
-
-	swjdp->dp_ctrl_stat = CDBGPWRUPREQ | CSYSPWRUPREQ;
-
-	swjdp_write_dpacc(swjdp, swjdp->dp_ctrl_stat, DP_CTRL_STAT);
-	swjdp_read_dpacc(swjdp, &ctrlstat, DP_CTRL_STAT);
-	if ((retval=jtag_execute_queue())!=ERROR_OK)
-		return retval;
-
-	/* Check that we have debug power domains activated */
-	while (!(ctrlstat & CDBGPWRUPACK) && (cnt++ < 10))
-	{
-		LOG_DEBUG("swjdp: wait CDBGPWRUPACK");
-		swjdp_read_dpacc(swjdp, &ctrlstat, DP_CTRL_STAT);
-		if ((retval=jtag_execute_queue())!=ERROR_OK)
-			return retval;
-		alive_sleep(10);
-	}
-
-	while (!(ctrlstat & CSYSPWRUPACK) && (cnt++ < 10))
-	{
-		LOG_DEBUG("swjdp: wait CSYSPWRUPACK");
-		swjdp_read_dpacc(swjdp, &ctrlstat, DP_CTRL_STAT);
-		if ((retval=jtag_execute_queue())!=ERROR_OK)
-			return retval;
-		alive_sleep(10);
-	}
-
-	swjdp_read_dpacc(swjdp, &dummy, DP_CTRL_STAT);
-	/* With debug power on we can activate OVERRUN checking */
-	swjdp->dp_ctrl_stat = CDBGPWRUPREQ | CSYSPWRUPREQ | CORUNDETECT;
-	swjdp_write_dpacc(swjdp, swjdp->dp_ctrl_stat, DP_CTRL_STAT);
-	swjdp_read_dpacc(swjdp, &dummy, DP_CTRL_STAT);
-
-	ahbap_read_reg_u32(swjdp, 0xFC, &idreg);
-	ahbap_read_reg_u32(swjdp, 0xF8, &romaddr);
-
-	LOG_DEBUG("AHB-AP ID Register 0x%x, Debug ROM Address 0x%x", idreg, romaddr);
-
-	return ERROR_OK;
-}

Deleted: trunk/src/target/cortex_swjdp.h
===================================================================
--- trunk/src/target/cortex_swjdp.h	2009-04-27 09:12:18 UTC (rev 1537)
+++ trunk/src/target/cortex_swjdp.h	2009-04-27 10:05:15 UTC (rev 1538)
@@ -1,133 +0,0 @@
-/***************************************************************************
- *   Copyright (C) 2006 by Magnus Lundin                                   *
- *   lundin at mlu.mine.nu                                                    *
- *                                                                         *
- *   Copyright (C) 2008 by Spencer Oliver                                  *
- *   spen at spen-soft.co.uk                                                  *
- *                                                                         *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- *                                                                         *
- *   This program is distributed in the hope that it will be useful,       *
- *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
- *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
- *   GNU General Public License for more details.                          *
- *                                                                         *
- *   You should have received a copy of the GNU General Public License     *
- *   along with this program; if not, write to the                         *
- *   Free Software Foundation, Inc.,                                       *
- *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
- ***************************************************************************/
-#ifndef CORTEX_SWJDP_H
-#define CORTEX_SWJDP_H
-
-#include "target.h"
-#include "register.h"
-#include "arm_jtag.h"
-
-#define SWJDP_IR_DPACC	0xA
-#define SWJDP_IR_APACC	0xB
-
-#define DPAP_WRITE		0
-#define DPAP_READ		1
-#define DP_ZERO			0
-#define DP_CTRL_STAT	0x4
-#define DP_SELECT		0x8
-#define DP_RDBUFF		0xC
-
-#define CORUNDETECT		(1<<0)
-#define SSTICKYORUN		(1<<1)
-#define SSTICKYERR		(1<<5)
-#define CDBGRSTREQ		(1<<26)
-#define CDBGRSTACK		(1<<27)
-#define CDBGPWRUPREQ	(1<<28)
-#define CDBGPWRUPACK	(1<<29)
-#define CSYSPWRUPREQ	(1<<30)
-#define CSYSPWRUPACK	(1<<31)
-
-#define	AHBAP_CSW		0x00
-#define AHBAP_TAR		0x04
-#define AHBAP_DRW		0x0C
-#define AHBAP_BD0		0x10
-#define AHBAP_BD1		0x14
-#define AHBAP_BD2		0x18
-#define AHBAP_BD3		0x1C
-#define AHBAP_DBGROMA	0xF8
-#define AHBAP_IDR		0xFC
-
-#define CSW_8BIT		0
-#define CSW_16BIT		1
-#define CSW_32BIT		2
-
-#define CSW_ADDRINC_MASK	(3<<4)
-#define CSW_ADDRINC_OFF		0
-#define CSW_ADDRINC_SINGLE	(1<<4)
-#define CSW_ADDRINC_PACKED	(2<<4)
-#define CSW_HPROT			(1<<25)
-#define CSW_MASTER_DEBUG	(1<<29)
-#define CSW_DBGSWENABLE		(1<<31)
-
-/* transaction mode */
-#define TRANS_MODE_NONE			0
-/* Transaction waits for previous to complete */
-#define TRANS_MODE_ATOMIC		1
-/* Freerunning transactions with delays and overrun checking */
-#define TRANS_MODE_COMPOSITE	2
-
-typedef struct swjdp_reg_s
-{
-	int addr;
-	arm_jtag_t *jtag_info;
-} swjdp_reg_t;
-
-typedef struct swjdp_common_s
-{
-	arm_jtag_t *jtag_info;
-	/* Control config */
-	u32 dp_ctrl_stat;
-	/* Register select cache */
-	u32 dp_select_value;
-	u32 ap_csw_value;
-	u32 ap_tar_value;
-	/* information about current pending SWjDP-AHBAP transaction */
-	u8  trans_mode;
-	u8  trans_rw;
-	u8  ack;
-} swjdp_common_t;
-
-/* Internal functions used in the module, partial transactions, use with caution */
-extern int swjdp_write_dpacc(swjdp_common_t *swjdp, u32 value, u8 reg_addr);
-/* extern int swjdp_write_apacc(swjdp_common_t *swjdp, u32 value, u8 reg_addr); */
-extern int swjdp_read_dpacc(swjdp_common_t *swjdp, u32 *value, u8 reg_addr);
-/* extern int swjdp_read_apacc(swjdp_common_t *swjdp, u32 *value, u8 reg_addr); */
-extern int ahbap_write_reg(swjdp_common_t *swjdp, u32 reg_addr, u8* out_value_buf);
-extern int ahbap_read_reg(swjdp_common_t *swjdp, u32 reg_addr, u8 *in_value_buf);
-
-/* External interface, partial operations must be completed with swjdp_transaction_endcheck() */
-extern int ahbap_read_system_u32(swjdp_common_t *swjdp, u32 address, u32 *value);
-extern int ahbap_write_system_u32(swjdp_common_t *swjdp, u32 address, u32 value);
-extern int swjdp_transaction_endcheck(swjdp_common_t *swjdp);
-
-/* External interface, complete atomic operations  */
-/* Host endian word transfer of single memory and system registers */
-extern int ahbap_read_system_atomic_u32(swjdp_common_t *swjdp, u32 address, u32 *value);
-extern int ahbap_write_system_atomic_u32(swjdp_common_t *swjdp, u32 address, u32 value);
-
-/* Host endian word transfers of processor core registers */
-extern int ahbap_read_coreregister_u32(swjdp_common_t *swjdp, u32 *value, int regnum);
-extern int ahbap_write_coreregister_u32(swjdp_common_t *swjdp, u32 value, int regnum);
-
-extern int ahbap_read_buf_u8(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address);
-extern int ahbap_read_buf_u16(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address);
-extern int ahbap_read_buf_u32(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address);
-
-extern int ahbap_write_buf_u8(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address);
-extern int ahbap_write_buf_u16(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address);
-extern int ahbap_write_buf_u32(swjdp_common_t *swjdp, u8 *buffer, int count, u32 address);
-
-/* Initialisation of the debug system, power domains and registers */
-extern int ahbap_debugport_init(swjdp_common_t *swjdp);
-
-#endif



From oharboe at mail.berlios.de  Mon Apr 27 12:16:17 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Mon, 27 Apr 2009 12:16:17 +0200
Subject: [Openocd-svn] r1539 - trunk/src/target/target
Message-ID: <200904271016.n3RAGHwx012793@sheep.berlios.de>

Author: oharboe
Date: 2009-04-27 12:16:16 +0200 (Mon, 27 Apr 2009)
New Revision: 1539

Added:
   trunk/src/target/target/mega128.cfg
Log:
SimonQian <simonqian at simonqian.com> AVR support

Added: trunk/src/target/target/mega128.cfg
===================================================================
--- trunk/src/target/target/mega128.cfg	2009-04-27 10:05:15 UTC (rev 1538)
+++ trunk/src/target/target/mega128.cfg	2009-04-27 10:16:16 UTC (rev 1539)
@@ -0,0 +1,42 @@
+# for avr
+
+   set  _CHIPNAME avr
+   set  _ENDIAN little
+
+# jtag speed
+jtag_khz 4500
+
+reset_config  srst_only
+jtag_nsrst_delay 100
+
+#jtag scan chain
+if { [info exists CPUTAPID ] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+   set _CPUTAPID 0x8970203F
+}
+jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+
+set _TARGETNAME [format "%s.cpu" $_CHIPNAME]
+target create $_TARGETNAME avr -endian $_ENDIAN -chain-position $_TARGETNAME
+
+#$_TARGETNAME configure -work-area-virt 0 -work-area-phys 0x20000000 -work-area-size 16384 -work-area-backup 0
+
+flash bank avr 0 0 0 0 0
+
+#to use it, script will be like:
+#init
+#jtag_khz 4500
+#reset init
+#verify_ircapture disable
+#
+#halt
+#wait halt
+#poll
+#avr mass_erase 0
+#flash write_image E:/Versaloon/Software/CAMERAPROTOCOLAGENT.hex
+#reset run
+#shutdown
+#
+# For more information about the configuration files, take a look at:
+# openocd.texi



From oharboe at mail.berlios.de  Mon Apr 27 12:32:15 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Mon, 27 Apr 2009 12:32:15 +0200
Subject: [Openocd-svn] r1540 - in trunk/src: flash target
Message-ID: <200904271032.n3RAWF6Y015676@sheep.berlios.de>

Author: oharboe
Date: 2009-04-27 12:32:13 +0200 (Mon, 27 Apr 2009)
New Revision: 1540

Added:
   trunk/src/flash/avrf.c
   trunk/src/flash/avrf.h
   trunk/src/target/avrt.c
   trunk/src/target/avrt.h
Modified:
   trunk/src/flash/Makefile.am
   trunk/src/flash/flash.c
   trunk/src/target/Makefile.am
   trunk/src/target/target.c
Log:
SimonQian <simonqian at simonqian.com> AVR wip

Modified: trunk/src/flash/Makefile.am
===================================================================
--- trunk/src/flash/Makefile.am	2009-04-27 10:16:16 UTC (rev 1539)
+++ trunk/src/flash/Makefile.am	2009-04-27 10:32:13 UTC (rev 1540)
@@ -7,10 +7,10 @@
 	str7x.c str9x.c aduc702x.c nand.c nand_ecc.c \
 	lpc3180_nand_controller.c stellaris.c str9xpec.c stm32x.c tms470.c \
 	ecos.c orion_nand.c s3c24xx_nand.c s3c2410_nand.c s3c2412_nand.c \
-	s3c2440_nand.c s3c2443_nand.c lpc288x.c ocl.c mflash.c pic32mx.c
+	s3c2440_nand.c s3c2443_nand.c lpc288x.c ocl.c mflash.c pic32mx.c avrf.c
 noinst_HEADERS = \
 	flash.h lpc2000.h cfi.h non_cfi.h at91sam7.h at91sam7_old.h str7x.h \
 	str9x.h nand.h lpc3180_nand_controller.h stellaris.h str9xpec.h \
 	stm32x.h tms470.h s3c24xx_nand.h s3c24xx_regs_nand.h lpc288x.h \
-	mflash.h ocl.h pic32mx.h
+	mflash.h ocl.h pic32mx.h avrf.h
 MAINTAINERCLEANFILES = Makefile.in

Added: trunk/src/flash/avrf.c
===================================================================
--- trunk/src/flash/avrf.c	2009-04-27 10:16:16 UTC (rev 1539)
+++ trunk/src/flash/avrf.c	2009-04-27 10:32:13 UTC (rev 1540)
@@ -0,0 +1,500 @@
+/***************************************************************************
+ *   Copyright (C) 2009 by Simon Qian                                      *
+ *   SimonQian at SimonQian.com                                               *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   This program is distributed in the hope that it will be useful,       *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
+ *   GNU General Public License for more details.                          *
+ *                                                                         *
+ *   You should have received a copy of the GNU General Public License     *
+ *   along with this program; if not, write to the                         *
+ *   Free Software Foundation, Inc.,                                       *
+ *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
+ ***************************************************************************/
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include "replacements.h"
+
+#include "avrf.h"
+#include "avrt.h"
+#include "flash.h"
+#include "target.h"
+#include "log.h"
+#include "algorithm.h"
+#include "binarybuffer.h"
+
+#include <stdlib.h>
+#include <string.h>
+
+/* AVR_JTAG_Instructions */
+#define AVR_JTAG_INS_LEN							4
+// Public Instructions:
+#define AVR_JTAG_INS_EXTEST							0x00
+#define AVR_JTAG_INS_IDCODE							0x01
+#define AVR_JTAG_INS_SAMPLE_PRELOAD					0x02
+#define AVR_JTAG_INS_BYPASS							0x0F
+// AVR Specified Public Instructions:
+#define AVR_JTAG_INS_AVR_RESET						0x0C
+#define AVR_JTAG_INS_PROG_ENABLE					0x04
+#define AVR_JTAG_INS_PROG_COMMANDS					0x05
+#define AVR_JTAG_INS_PROG_PAGELOAD					0x06
+#define AVR_JTAG_INS_PROG_PAGEREAD					0x07
+
+// Data Registers:
+#define AVR_JTAG_REG_Bypass_Len						1
+#define AVR_JTAG_REG_DeviceID_Len					32
+
+#define AVR_JTAG_REG_Reset_Len						1
+#define AVR_JTAG_REG_JTAGID_Len						32
+#define AVR_JTAG_REG_ProgrammingEnable_Len			16
+#define AVR_JTAG_REG_ProgrammingCommand_Len			15
+#define AVR_JTAG_REG_FlashDataByte_Len				16
+
+avrf_type_t avft_chips_info[] = 
+{
+//	 name,			chip_id,	flash_page_size,	flash_page_num,	eeprom_page_size,	eeprom_page_num
+	{"atmega128",	0x9702,		256,				512,			8,					512},
+};
+
+static int avrf_register_commands(struct command_context_s *cmd_ctx);
+static int avrf_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
+static int avrf_erase(struct flash_bank_s *bank, int first, int last);
+static int avrf_protect(struct flash_bank_s *bank, int set, int first, int last);
+static int avrf_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
+static int avrf_probe(struct flash_bank_s *bank);
+static int avrf_auto_probe(struct flash_bank_s *bank);
+//static int avrf_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int avrf_protect_check(struct flash_bank_s *bank);
+static int avrf_info(struct flash_bank_s *bank, char *buf, int buf_size);
+
+static int avrf_handle_mass_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+
+extern int avr_jtag_sendinstr(jtag_tap_t *tap, u8 *ir_in, u8 ir_out);
+extern int avr_jtag_senddat(jtag_tap_t *tap, u32 *dr_in, u32 dr_out, int len);
+
+extern int mcu_write_ir(jtag_tap_t *tap, u8 *ir_in, u8 *ir_out, int ir_len, int rti);
+extern int mcu_write_dr(jtag_tap_t *tap, u8 *ir_in, u8 *ir_out, int dr_len, int rti);
+extern int mcu_write_ir_u8(jtag_tap_t *tap, u8 *ir_in, u8 ir_out, int ir_len, int rti);
+extern int mcu_write_dr_u8(jtag_tap_t *tap, u8 *ir_in, u8 ir_out, int dr_len, int rti);
+extern int mcu_write_ir_u16(jtag_tap_t *tap, u16 *ir_in, u16 ir_out, int ir_len, int rti);
+extern int mcu_write_dr_u16(jtag_tap_t *tap, u16 *ir_in, u16 ir_out, int dr_len, int rti);
+extern int mcu_write_ir_u32(jtag_tap_t *tap, u32 *ir_in, u32 ir_out, int ir_len, int rti);
+extern int mcu_write_dr_u32(jtag_tap_t *tap, u32 *ir_in, u32 ir_out, int dr_len, int rti);
+extern int mcu_execute_queue(void);
+
+flash_driver_t avr_flash =
+{
+	.name = "avr",
+	.register_commands = avrf_register_commands,
+	.flash_bank_command = avrf_flash_bank_command,
+	.erase = avrf_erase,
+	.protect = avrf_protect,
+	.write = avrf_write,
+	.probe = avrf_probe,
+	.auto_probe = avrf_auto_probe,
+	.erase_check = default_flash_mem_blank_check,
+	.protect_check = avrf_protect_check,
+	.info = avrf_info
+};
+
+/* avr program functions */
+static int avr_jtag_reset(avr_common_t *avr, u32 reset)
+{
+	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_AVR_RESET);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, reset ,AVR_JTAG_REG_Reset_Len);
+	
+	return ERROR_OK;
+}
+
+static int avr_jtag_read_jtagid(avr_common_t *avr, u32 *id)
+{
+	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_IDCODE);
+	avr_jtag_senddat(avr->jtag_info.tap, id, 0, AVR_JTAG_REG_JTAGID_Len);
+	
+	return ERROR_OK;
+}
+
+static int avr_jtagprg_enterprogmode(avr_common_t *avr)
+{
+	avr_jtag_reset(avr, 1);
+	
+	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_PROG_ENABLE);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0xA370, AVR_JTAG_REG_ProgrammingEnable_Len);
+	
+	return ERROR_OK;
+}
+
+static int avr_jtagprg_leaveprogmode(avr_common_t *avr)
+{
+	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_PROG_COMMANDS);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x2300, AVR_JTAG_REG_ProgrammingCommand_Len);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3300, AVR_JTAG_REG_ProgrammingCommand_Len);
+
+	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_PROG_ENABLE);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0, AVR_JTAG_REG_ProgrammingEnable_Len);
+
+	avr_jtag_reset(avr, 0);
+	
+	return ERROR_OK;
+}
+
+static int avr_jtagprg_chiperase(avr_common_t *avr)
+{
+	u32 poll_value;
+	
+	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_PROG_COMMANDS);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x2380, AVR_JTAG_REG_ProgrammingCommand_Len);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3180, AVR_JTAG_REG_ProgrammingCommand_Len);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3380, AVR_JTAG_REG_ProgrammingCommand_Len);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3380, AVR_JTAG_REG_ProgrammingCommand_Len);
+	
+	do{
+		poll_value = 0;
+		avr_jtag_senddat(avr->jtag_info.tap, &poll_value, 0x3380, AVR_JTAG_REG_ProgrammingCommand_Len);
+		if (ERROR_OK != mcu_execute_queue())
+		{
+			return ERROR_FAIL;
+		}
+		LOG_DEBUG("poll_value = 0x%04X", poll_value);
+	}while(!(poll_value & 0x0200));
+	
+	return ERROR_OK;
+}
+
+static int avr_jtagprg_writeflashpage(avr_common_t *avr, u8 *page_buf, u32 buf_size, u32 addr, u32 page_size)
+{
+	u32 i, poll_value;
+	
+	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_PROG_COMMANDS);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x2310, AVR_JTAG_REG_ProgrammingCommand_Len);
+	
+	// load addr high byte
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x0700 | ((addr >> 9) & 0xFF), AVR_JTAG_REG_ProgrammingCommand_Len);
+	
+	// load addr low byte
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x0300 | ((addr >> 1) & 0xFF), AVR_JTAG_REG_ProgrammingCommand_Len);
+	
+	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_PROG_PAGELOAD);
+	
+	for (i = 0; i < page_size; i++)
+	{
+		if (i < buf_size)
+		{
+			avr_jtag_senddat(avr->jtag_info.tap, NULL, page_buf[i], 8);
+		}
+		else
+		{
+			avr_jtag_senddat(avr->jtag_info.tap, NULL, 0xFF, 8);
+		}
+	}
+	
+	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_PROG_COMMANDS);
+	
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3700, AVR_JTAG_REG_ProgrammingCommand_Len);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3500, AVR_JTAG_REG_ProgrammingCommand_Len);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3700, AVR_JTAG_REG_ProgrammingCommand_Len);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3700, AVR_JTAG_REG_ProgrammingCommand_Len);
+	
+	do{
+		poll_value = 0;
+		avr_jtag_senddat(avr->jtag_info.tap, &poll_value, 0x3700, AVR_JTAG_REG_ProgrammingCommand_Len);
+		if (ERROR_OK != mcu_execute_queue())
+		{
+			return ERROR_FAIL;
+		}
+		LOG_DEBUG("poll_value = 0x%04X", poll_value);
+	}while(!(poll_value & 0x0200));
+	
+	return ERROR_OK;
+}
+
+/* interface command */
+static int avrf_register_commands(struct command_context_s *cmd_ctx)
+{
+	command_t *avr_cmd = register_command(cmd_ctx, NULL, "avr", NULL, COMMAND_ANY, "avr flash specific commands");
+	
+	register_command(cmd_ctx, avr_cmd, "mass_erase", avrf_handle_mass_erase_command, COMMAND_EXEC,
+					 "mass erase device");
+	
+	return ERROR_OK;
+}
+
+static int avrf_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
+{
+	avrf_flash_bank_t *avrf_info;
+	
+	if (argc < 6)
+	{
+		LOG_WARNING("incomplete flash_bank avr configuration");
+		return ERROR_FLASH_BANK_INVALID;
+	}
+	
+	avrf_info = malloc(sizeof(avrf_flash_bank_t));
+	bank->driver_priv = avrf_info;
+	
+	avrf_info->probed = 0;
+	
+	return ERROR_OK;
+}
+
+static int avrf_erase(struct flash_bank_s *bank, int first, int last)
+{
+	LOG_INFO(__FUNCTION__);
+	return ERROR_OK;
+}
+
+static int avrf_protect(struct flash_bank_s *bank, int set, int first, int last)
+{
+	LOG_INFO(__FUNCTION__);
+	return ERROR_OK;
+}
+
+static int avrf_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
+{
+	target_t *target = bank->target;
+	avr_common_t *avr = target->arch_info;
+	u32 cur_size, cur_buffer_size, page_size;
+	
+	if (bank->target->state != TARGET_HALTED)
+	{
+		LOG_ERROR("Target not halted");
+		return ERROR_TARGET_NOT_HALTED;
+	}
+	
+	page_size = bank->sectors[0].size;
+	if ((offset % page_size) != 0)
+	{
+		LOG_WARNING("offset 0x%x breaks required %d-byte alignment", offset, page_size);
+		return ERROR_FLASH_DST_BREAKS_ALIGNMENT;
+	}
+	
+	LOG_DEBUG("offset is 0x%08X", offset);
+	LOG_DEBUG("count is %d", count);
+	
+	if (ERROR_OK != avr_jtagprg_enterprogmode(avr))
+	{
+		return ERROR_FAIL;
+	}
+	
+	cur_size = 0;
+	while(count > 0)
+	{
+		if (count > page_size)
+		{
+			cur_buffer_size = page_size;
+		}
+		else
+		{
+			cur_buffer_size = count;
+		}
+		avr_jtagprg_writeflashpage(avr, buffer + cur_size, cur_buffer_size, offset + cur_size, page_size);
+		count -= cur_buffer_size;
+		cur_size += cur_buffer_size;
+		
+		keep_alive();
+	}
+	
+	return avr_jtagprg_leaveprogmode(avr);
+}
+
+#define EXTRACT_MFG(X)  (((X) & 0xffe) >> 1)
+#define EXTRACT_PART(X) (((X) & 0xffff000) >> 12)
+#define EXTRACT_VER(X)  (((X) & 0xf0000000) >> 28)
+static int avrf_probe(struct flash_bank_s *bank)
+{
+	target_t *target = bank->target;
+	avrf_flash_bank_t *avrf_info = bank->driver_priv;
+	avr_common_t *avr = target->arch_info;
+	avrf_type_t *avr_info;
+	int i;
+	u32 device_id;
+	
+	if (bank->target->state != TARGET_HALTED)
+	{
+		LOG_ERROR("Target not halted");
+		return ERROR_TARGET_NOT_HALTED;
+	}
+
+	avrf_info->probed = 0;
+	
+	avr_jtag_read_jtagid(avr, &device_id);
+	if (ERROR_OK != mcu_execute_queue())
+	{
+		return ERROR_FAIL;
+	}
+	
+	LOG_INFO( "device id = 0x%08x", device_id );
+	if (EXTRACT_MFG(device_id) != 0x1F)
+	{
+		LOG_ERROR("0x%X is invalid Manufacturer for avr, 0x%X is expected", EXTRACT_MFG(device_id), 0x1F);
+	}
+	
+	for (i = 0; i < (int)(sizeof(avft_chips_info) / sizeof(avft_chips_info[0])); i++)
+	{
+		if (avft_chips_info[i].chip_id == EXTRACT_PART(device_id))
+		{
+			avr_info = &avft_chips_info[i];
+			LOG_INFO("target device is %s", avr_info->name);
+			break;
+		}
+	}
+	
+	if (i < (int)(sizeof(avft_chips_info) / sizeof(avft_chips_info[0])))
+	{
+		// chip found
+		bank->base = 0x00000000;
+		bank->size = (avr_info->flash_page_size * avr_info->flash_page_num);
+		bank->num_sectors = avr_info->flash_page_num;
+		bank->sectors = malloc(sizeof(flash_sector_t) * avr_info->flash_page_num);
+		
+		for (i = 0; i < avr_info->flash_page_num; i++)
+		{
+			bank->sectors[i].offset = i * avr_info->flash_page_size;
+			bank->sectors[i].size = avr_info->flash_page_size;
+			bank->sectors[i].is_erased = -1;
+			bank->sectors[i].is_protected = 1;
+		}
+		
+		avrf_info->probed = 1;
+		return ERROR_OK;
+	}
+	else
+	{
+		// chip not supported
+		LOG_ERROR("0x%X is not support for avr", EXTRACT_PART(device_id));
+		
+		avrf_info->probed = 1;
+		return ERROR_FAIL;
+	}
+}
+
+static int avrf_auto_probe(struct flash_bank_s *bank)
+{
+	avrf_flash_bank_t *avrf_info = bank->driver_priv;
+	if (avrf_info->probed)
+		return ERROR_OK;
+	return avrf_probe(bank);
+}
+
+static int avrf_protect_check(struct flash_bank_s *bank)
+{
+	LOG_INFO(__FUNCTION__);
+	return ERROR_OK;
+}
+
+static int avrf_info(struct flash_bank_s *bank, char *buf, int buf_size)
+{
+	target_t *target = bank->target;
+	avr_common_t *avr = target->arch_info;
+	avrf_type_t *avr_info;
+	int i;
+	u32 device_id;
+	
+	if (bank->target->state != TARGET_HALTED)
+	{
+		LOG_ERROR("Target not halted");
+		return ERROR_TARGET_NOT_HALTED;
+	}
+	
+	avr_jtag_read_jtagid(avr, &device_id);
+	if (ERROR_OK != mcu_execute_queue())
+	{
+		return ERROR_FAIL;
+	}
+	
+	LOG_INFO( "device id = 0x%08x", device_id );
+	if (EXTRACT_MFG(device_id) != 0x1F)
+	{
+		LOG_ERROR("0x%X is invalid Manufacturer for avr, 0x%X is expected", EXTRACT_MFG(device_id), 0x1F);
+	}
+	
+	for (i = 0; i < (int)(sizeof(avft_chips_info) / sizeof(avft_chips_info[0])); i++)
+	{
+		if (avft_chips_info[i].chip_id == EXTRACT_PART(device_id))
+		{
+			avr_info = &avft_chips_info[i];
+			LOG_INFO("target device is %s", avr_info->name);
+			
+			return ERROR_OK;
+		}
+	}
+	
+	if (i < (int)(sizeof(avft_chips_info) / sizeof(avft_chips_info[0])))
+	{
+		// chip found
+		snprintf(buf, buf_size, "%s - Rev: 0x%X", avr_info->name, EXTRACT_VER(device_id));
+		return ERROR_OK;
+	}
+	else
+	{
+		// chip not supported
+		snprintf(buf, buf_size, "Cannot identify target as a avr\n");
+		return ERROR_FLASH_OPERATION_FAILED;
+	}
+}
+
+static int avrf_mass_erase(struct flash_bank_s *bank)
+{
+	target_t *target = bank->target;
+	avr_common_t *avr = target->arch_info;
+	
+	if (target->state != TARGET_HALTED)
+	{
+		LOG_ERROR("Target not halted");
+		return ERROR_TARGET_NOT_HALTED;
+	}
+	
+	if ((ERROR_OK != avr_jtagprg_enterprogmode(avr))
+		|| (ERROR_OK != avr_jtagprg_chiperase(avr))
+		|| (ERROR_OK != avr_jtagprg_leaveprogmode(avr)))
+	{
+		return ERROR_FAIL;
+	}
+	
+	return ERROR_OK;
+}
+
+static int avrf_handle_mass_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+{
+	flash_bank_t *bank;
+	int i;
+	
+	if (argc < 1)
+	{
+		command_print(cmd_ctx, "avr mass_erase <bank>");
+		return ERROR_OK;	
+	}
+	
+	bank = get_flash_bank_by_num(strtoul(args[0], NULL, 0));
+	if (!bank)
+	{
+		command_print(cmd_ctx, "flash bank '#%s' is out of bounds", args[0]);
+		return ERROR_OK;
+	}
+	
+	if (avrf_mass_erase(bank) == ERROR_OK)
+	{
+		/* set all sectors as erased */
+		for (i = 0; i < bank->num_sectors; i++)
+		{
+			bank->sectors[i].is_erased = 1;
+		}
+		
+		command_print(cmd_ctx, "avr mass erase complete");
+	}
+	else
+	{
+		command_print(cmd_ctx, "avr mass erase failed");
+	}
+	
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}

Added: trunk/src/flash/avrf.h
===================================================================
--- trunk/src/flash/avrf.h	2009-04-27 10:16:16 UTC (rev 1539)
+++ trunk/src/flash/avrf.h	2009-04-27 10:32:13 UTC (rev 1540)
@@ -0,0 +1,39 @@
+/***************************************************************************
+ *   Copyright (C) 2009 by Simon Qian                                      *
+ *   SimonQian at SimonQian.com                                               *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   This program is distributed in the hope that it will be useful,       *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
+ *   GNU General Public License for more details.                          *
+ *                                                                         *
+ *   You should have received a copy of the GNU General Public License     *
+ *   along with this program; if not, write to the                         *
+ *   Free Software Foundation, Inc.,                                       *
+ *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
+ ***************************************************************************/
+#ifndef AVRF_H
+#define AVRF_H
+
+typedef struct avrf_type_s
+{
+	char name[15];
+	u16 chip_id;
+	int flash_page_size;
+	int flash_page_num;
+	int eeprom_page_size;
+	int eeprom_page_num;
+} avrf_type_t;
+
+typedef struct avrf_flash_bank_s
+{
+	int ppage_size;
+	int probed;
+} avrf_flash_bank_t;
+
+#endif /* AVRF_H */

Modified: trunk/src/flash/flash.c
===================================================================
--- trunk/src/flash/flash.c	2009-04-27 10:16:16 UTC (rev 1539)
+++ trunk/src/flash/flash.c	2009-04-27 10:32:13 UTC (rev 1540)
@@ -77,6 +77,7 @@
 extern flash_driver_t lpc288x_flash;
 extern flash_driver_t ocl_flash;
 extern flash_driver_t pic32mx_flash;
+extern flash_driver_t avr_flash;
 
 flash_driver_t *flash_drivers[] = {
 	&lpc2000_flash,
@@ -94,6 +95,7 @@
 	&lpc288x_flash,
 	&ocl_flash,
 	&pic32mx_flash,
+	&avr_flash,
 	NULL,
 };
 

Modified: trunk/src/target/Makefile.am
===================================================================
--- trunk/src/target/Makefile.am	2009-04-27 10:16:16 UTC (rev 1539)
+++ trunk/src/target/Makefile.am	2009-04-27 10:32:13 UTC (rev 1540)
@@ -13,11 +13,11 @@
 	arm_jtag.c arm7_9_common.c algorithm.c arm920t.c arm720t.c armv4_5_mmu.c armv4_5_cache.c arm_disassembler.c \
 	arm966e.c arm926ejs.c feroceon.c etb.c xscale.c arm_simulator.c image.c armv7m.c cortex_m3.c arm_adi_v5.c \
 	etm_dummy.c $(OOCD_TRACE_FILES) target_request.c trace.c arm11.c arm11_dbgtap.c mips32.c mips_m4k.c \
-	mips32_pracc.c mips32_dmaacc.c mips_ejtag.c
+	mips32_pracc.c mips32_dmaacc.c mips_ejtag.c avrt.c
 noinst_HEADERS = target.h trace.h register.h armv4_5.h embeddedice.h etm.h arm7tdmi.h arm9tdmi.h \
 	arm_jtag.h arm7_9_common.h arm920t.h arm720t.h armv4_5_mmu.h armv4_5_cache.h breakpoints.h algorithm.h \
 	arm_disassembler.h arm966e.h arm926ejs.h etb.h xscale.h arm_simulator.h image.h armv7m.h cortex_m3.h arm_adi_v5.h \
-	etm_dummy.h oocd_trace.h target_request.h trace.h arm11.h mips32.h mips_m4k.h mips_ejtag.h mips32_pracc.h mips32_dmaacc.h
+	etm_dummy.h oocd_trace.h target_request.h trace.h arm11.h mips32.h mips_m4k.h mips_ejtag.h mips32_pracc.h mips32_dmaacc.h avrt.h
 
 nobase_dist_pkglib_DATA =
 nobase_dist_pkglib_DATA += xscale/debug_handler.bin 

Added: trunk/src/target/avrt.c
===================================================================
--- trunk/src/target/avrt.c	2009-04-27 10:16:16 UTC (rev 1539)
+++ trunk/src/target/avrt.c	2009-04-27 10:32:13 UTC (rev 1540)
@@ -0,0 +1,354 @@
+/***************************************************************************
+ *   Copyright (C) 2009 by Simon Qian                                      *
+ *   SimonQian at SimonQian.com                                               *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   This program is distributed in the hope that it will be useful,       *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
+ *   GNU General Public License for more details.                          *
+ *                                                                         *
+ *   You should have received a copy of the GNU General Public License     *
+ *   along with this program; if not, write to the                         *
+ *   Free Software Foundation, Inc.,                                       *
+ *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
+ ***************************************************************************/
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include "replacements.h"
+
+#include "avrt.h"
+
+#include "register.h"
+#include "target.h"
+#include "log.h"
+#include "jtag.h"
+#include "binarybuffer.h"
+#include "time_support.h"
+#include "breakpoints.h"
+#include "fileio.h"
+
+#include <stdlib.h>
+#include <string.h>
+
+#include <sys/types.h>
+#include <unistd.h>
+#include <errno.h>
+
+#define AVR_JTAG_INS_LEN							4
+
+/* cli handling */
+int avr_register_commands(struct command_context_s *cmd_ctx);
+
+/* forward declarations */
+int avr_target_create(struct target_s *target, Jim_Interp *interp);
+int avr_init_target(struct command_context_s *cmd_ctx, struct target_s *target);
+int avr_quit(void);
+
+int avr_arch_state(struct target_s *target);
+int avr_poll(target_t *target);
+int avr_halt(target_t *target);
+int avr_resume(struct target_s *target, int current, u32 address, int handle_breakpoints, int debug_execution);
+int avr_step(struct target_s *target, int current, u32 address, int handle_breakpoints);
+
+int avr_assert_reset(target_t *target);
+int avr_deassert_reset(target_t *target);
+int avr_soft_reset_halt(struct target_s *target);
+
+/* IR and DR functions */
+int avr_jtag_sendinstr(jtag_tap_t *tap, u8 *ir_in, u8 ir_out);
+int avr_jtag_senddat(jtag_tap_t *tap, u32 *dr_in, u32 dr_out, int len);
+
+int mcu_write_ir(jtag_tap_t *tap, u8 *ir_in, u8 *ir_out, int ir_len, int rti);
+int mcu_write_dr(jtag_tap_t *tap, u8 *dr_in, u8 *dr_out, int dr_len, int rti);
+int mcu_write_ir_u8(jtag_tap_t *tap, u8 *ir_in, u8 ir_out, int ir_len, int rti);
+int mcu_write_dr_u8(jtag_tap_t *tap, u8 *ir_in, u8 ir_out, int dr_len, int rti);
+int mcu_write_ir_u16(jtag_tap_t *tap, u16 *ir_in, u16 ir_out, int ir_len, int rti);
+int mcu_write_dr_u16(jtag_tap_t *tap, u16 *ir_in, u16 ir_out, int dr_len, int rti);
+int mcu_write_ir_u32(jtag_tap_t *tap, u32 *ir_in, u32 ir_out, int ir_len, int rti);
+int mcu_write_dr_u32(jtag_tap_t *tap, u32 *ir_in, u32 ir_out, int dr_len, int rti);
+int mcu_execute_queue(void);
+
+target_type_t avr_target =
+{
+	.name = "avr",
+
+	.poll = avr_poll,
+	.arch_state = avr_arch_state,
+
+	.target_request_data = NULL,
+
+	.halt = avr_halt,
+	.resume = avr_resume,
+	.step = avr_step,
+
+	.assert_reset = avr_assert_reset,
+	.deassert_reset = avr_deassert_reset,
+	.soft_reset_halt = avr_soft_reset_halt,
+/*
+	.get_gdb_reg_list = avr_get_gdb_reg_list,
+
+	.read_memory = avr_read_memory,
+	.write_memory = avr_write_memory,
+	.bulk_write_memory = avr_bulk_write_memory,
+	.checksum_memory = avr_checksum_memory,
+	.blank_check_memory = avr_blank_check_memory,
+
+	.run_algorithm = avr_run_algorithm,
+
+	.add_breakpoint = avr_add_breakpoint,
+	.remove_breakpoint = avr_remove_breakpoint,
+	.add_watchpoint = avr_add_watchpoint,
+	.remove_watchpoint = avr_remove_watchpoint,
+*/
+	.register_commands = avr_register_commands,
+	.target_create = avr_target_create,
+	.init_target = avr_init_target,
+	.quit = avr_quit,
+/*
+	.virt2phys = avr_virt2phys,
+	.mmu = avr_mmu
+*/
+};
+
+int avr_register_commands(struct command_context_s *cmd_ctx)
+{
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}
+
+int avr_target_create(struct target_s *target, Jim_Interp *interp)
+{
+	avr_common_t *avr = calloc(1, sizeof(avr_common_t));
+	
+	avr->jtag_info.tap = target->tap;
+	target->arch_info = avr;
+	
+	return ERROR_OK;
+}
+
+int avr_init_target(struct command_context_s *cmd_ctx, struct target_s *target)
+{
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}
+
+int avr_quit(void)
+{
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}
+
+int avr_arch_state(struct target_s *target)
+{
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}
+
+int avr_poll(target_t *target)
+{
+	if ((target->state == TARGET_RUNNING) || (target->state == TARGET_DEBUG_RUNNING))
+	{
+		target->state = TARGET_HALTED;
+	}
+	
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}
+
+int avr_halt(target_t *target)
+{
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}
+
+int avr_resume(struct target_s *target, int current, u32 address, int handle_breakpoints, int debug_execution)
+{
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}
+
+int avr_step(struct target_s *target, int current, u32 address, int handle_breakpoints)
+{
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}
+
+int avr_assert_reset(target_t *target)
+{
+	target->state = TARGET_RESET;
+	
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}
+
+int avr_deassert_reset(target_t *target)
+{
+	target->state = TARGET_RUNNING;
+	
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}
+
+int avr_soft_reset_halt(struct target_s *target)
+{
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}
+
+int avr_jtag_senddat(jtag_tap_t *tap, u32* dr_in, u32 dr_out, int len)
+{
+	return mcu_write_dr_u32(tap, dr_in, dr_out, len, 1);
+}
+
+int avr_jtag_sendinstr(jtag_tap_t *tap, u8 *ir_in, u8 ir_out)
+{
+	return mcu_write_ir_u8(tap, ir_in, ir_out, AVR_JTAG_INS_LEN, 1);
+}
+
+/* IR and DR functions */
+int mcu_write_ir(jtag_tap_t *tap, u8 *ir_in, u8 *ir_out, int ir_len, int rti)
+{
+	if (NULL == tap)
+	{
+		LOG_ERROR("invalid tap");
+		return ERROR_FAIL;
+	}
+	if (ir_len != tap->ir_length)
+	{
+		LOG_ERROR("invalid ir_len");
+		return ERROR_FAIL;
+	}
+	
+	{
+		scan_field_t field[1];
+		
+		field[0].tap = tap;
+		field[0].num_bits = tap->ir_length;
+		field[0].out_value = ir_out;
+		field[0].out_mask = NULL;
+		field[0].in_value = ir_in;
+		field[0].in_check_value = NULL;
+		field[0].in_check_mask = NULL;
+		field[0].in_handler = NULL;
+		field[0].in_handler_priv = NULL;
+		jtag_add_plain_ir_scan(sizeof(field) / sizeof(field[0]), field, TAP_IDLE);
+	}
+	
+	return ERROR_OK;
+}
+
+int mcu_write_dr(jtag_tap_t *tap, u8 *dr_in, u8 *dr_out, int dr_len, int rti)
+{
+	if (NULL == tap)
+	{
+		LOG_ERROR("invalid tap");
+		return ERROR_FAIL;
+	}
+	
+	{
+		scan_field_t field[1];
+		
+		field[0].tap = tap;
+		field[0].num_bits = dr_len;
+		field[0].out_value = dr_out;
+		field[0].out_mask = NULL;
+		field[0].in_value = dr_in;
+		field[0].in_check_value = NULL;
+		field[0].in_check_mask = NULL;
+		field[0].in_handler = NULL;
+		field[0].in_handler_priv = NULL;
+		jtag_add_plain_dr_scan(sizeof(field) / sizeof(field[0]), field, TAP_IDLE);
+	}
+	
+	return ERROR_OK;
+}
+
+int mcu_write_ir_u8(jtag_tap_t *tap, u8 *ir_in, u8 ir_out, int ir_len, int rti)
+{
+	if (ir_len > 8)
+	{
+		LOG_ERROR("ir_len overflow, maxium is 8");
+		return ERROR_FAIL;
+	}
+	
+	mcu_write_ir(tap, ir_in, &ir_out, ir_len, rti);
+	
+	return ERROR_OK;
+}
+
+int mcu_write_dr_u8(jtag_tap_t *tap, u8 *dr_in, u8 dr_out, int dr_len, int rti)
+{
+	if (dr_len > 8)
+	{
+		LOG_ERROR("dr_len overflow, maxium is 8");
+		return ERROR_FAIL;
+	}
+	
+	mcu_write_dr(tap, dr_in, &dr_out, dr_len, rti);
+	
+	return ERROR_OK;
+}
+
+int mcu_write_ir_u16(jtag_tap_t *tap, u16 *ir_in, u16 ir_out, int ir_len, int rti)
+{
+	if (ir_len > 16)
+	{
+		LOG_ERROR("ir_len overflow, maxium is 16");
+		return ERROR_FAIL;
+	}
+	
+	mcu_write_ir(tap, (u8*)ir_in, (u8*)&ir_out, ir_len, rti);
+	
+	return ERROR_OK;
+}
+
+int mcu_write_dr_u16(jtag_tap_t *tap, u16 *dr_in, u16 dr_out, int dr_len, int rti)
+{
+	if (dr_len > 16)
+	{
+		LOG_ERROR("dr_len overflow, maxium is 16");
+		return ERROR_FAIL;
+	}
+	
+	mcu_write_dr(tap, (u8*)dr_in, (u8*)&dr_out, dr_len, rti);
+	
+	return ERROR_OK;
+}
+
+int mcu_write_ir_u32(jtag_tap_t *tap, u32 *ir_in, u32 ir_out, int ir_len, int rti)
+{
+	if (ir_len > 32)
+	{
+		LOG_ERROR("ir_len overflow, maxium is 32");
+		return ERROR_FAIL;
+	}
+	
+	mcu_write_ir(tap, (u8*)ir_in, (u8*)&ir_out, ir_len, rti);
+	
+	return ERROR_OK;
+}
+
+int mcu_write_dr_u32(jtag_tap_t *tap, u32 *dr_in, u32 dr_out, int dr_len, int rti)
+{
+	if (dr_len > 32)
+	{
+		LOG_ERROR("dr_len overflow, maxium is 32");
+		return ERROR_FAIL;
+	}
+	
+	mcu_write_dr(tap, (u8*)dr_in, (u8*)&dr_out, dr_len, rti);
+	
+	return ERROR_OK;
+}
+
+int mcu_execute_queue(void)
+{
+	return jtag_execute_queue();
+}

Added: trunk/src/target/avrt.h
===================================================================
--- trunk/src/target/avrt.h	2009-04-27 10:16:16 UTC (rev 1539)
+++ trunk/src/target/avrt.h	2009-04-27 10:32:13 UTC (rev 1540)
@@ -0,0 +1,33 @@
+/***************************************************************************
+ *   Copyright (C) 2009 by Simon Qian                                      *
+ *   SimonQian at SimonQian.com                                               *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   This program is distributed in the hope that it will be useful,       *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
+ *   GNU General Public License for more details.                          *
+ *                                                                         *
+ *   You should have received a copy of the GNU General Public License     *
+ *   along with this program; if not, write to the                         *
+ *   Free Software Foundation, Inc.,                                       *
+ *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
+ ***************************************************************************/
+#ifndef AVRT_H
+#define AVRT_H
+
+typedef struct mcu_jtag_s
+{
+	jtag_tap_t *tap;
+} mcu_jtag_t;
+
+typedef struct avr_common_s
+{
+	mcu_jtag_t jtag_info;
+} avr_common_t;
+
+#endif /* AVRT_H */

Modified: trunk/src/target/target.c
===================================================================
--- trunk/src/target/target.c	2009-04-27 10:16:16 UTC (rev 1539)
+++ trunk/src/target/target.c	2009-04-27 10:32:13 UTC (rev 1540)
@@ -105,6 +105,7 @@
 extern target_type_t cortexm3_target;
 extern target_type_t arm11_target;
 extern target_type_t mips_m4k_target;
+extern target_type_t avr_target;
 
 target_type_t *target_types[] =
 {
@@ -119,6 +120,7 @@
 	&cortexm3_target,
 	&arm11_target,
 	&mips_m4k_target,
+	&avr_target,
 	NULL,
 };
 



From oharboe at mail.berlios.de  Mon Apr 27 12:37:08 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Mon, 27 Apr 2009 12:37:08 +0200
Subject: [Openocd-svn] r1541 -
	zy1000/trunk/ecoshal/hal/zylin/phi/current/include/pkgconf
Message-ID: <200904271037.n3RAb8ej019764@sheep.berlios.de>

Author: oharboe
Date: 2009-04-27 12:37:07 +0200 (Mon, 27 Apr 2009)
New Revision: 1541

Modified:
   zy1000/trunk/ecoshal/hal/zylin/phi/current/include/pkgconf/mlt_zylin_phi_dram_fast.ldi
Log:
fix cortex build problems

Modified: zy1000/trunk/ecoshal/hal/zylin/phi/current/include/pkgconf/mlt_zylin_phi_dram_fast.ldi
===================================================================
--- zy1000/trunk/ecoshal/hal/zylin/phi/current/include/pkgconf/mlt_zylin_phi_dram_fast.ldi	2009-04-27 10:32:13 UTC (rev 1540)
+++ zy1000/trunk/ecoshal/hal/zylin/phi/current/include/pkgconf/mlt_zylin_phi_dram_fast.ldi	2009-04-27 10:37:07 UTC (rev 1541)
@@ -181,10 +181,16 @@
 		KEEP (*(.text.*swjdp_scan*))    ;
 		KEEP (*(.text.*ahbap_write_buf_u32*))    ;
 		KEEP (*(.text.*ahbap_write_system_atomic_u32*))    ;
+		
+		KEEP (*(.text.*mem_ap_write_atomic_u32*))    ;
+		KEEP (*(.text.*mem_ap_read_atomic_u32*))    ;
+		
+		
 		KEEP (*(.text.*ahbap_read_system_atomic_u32*))    ;
 		KEEP (*(.text.*swjdp_transaction_endcheck*))    ;
 		KEEP (*(.text.*buf_cmp_mask*))    ;
 		KEEP (*(.text.*buf_cpy*))    ;
+		KEEP (*(.text.*dap_info_command*))    ;
 
 		 
 . = ALIGN (4);



From oharboe at mail.berlios.de  Mon Apr 27 13:24:02 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Mon, 27 Apr 2009 13:24:02 +0200
Subject: [Openocd-svn] r1542 - trunk/src/target
Message-ID: <200904271124.n3RBO2C4007639@sheep.berlios.de>

Author: oharboe
Date: 2009-04-27 13:24:01 +0200 (Mon, 27 Apr 2009)
New Revision: 1542

Modified:
   trunk/src/target/arm11.c
   trunk/src/target/arm11.h
   trunk/src/target/arm11_dbgtap.c
Log:
a little bit more error handling in ARM11

Modified: trunk/src/target/arm11.c
===================================================================
--- trunk/src/target/arm11.c	2009-04-27 10:37:07 UTC (rev 1541)
+++ trunk/src/target/arm11.c	2009-04-27 11:24:01 UTC (rev 1542)
@@ -48,7 +48,7 @@
 #define FNC_INFO_NOTIMPLEMENTED
 #endif
 
-static void arm11_on_enter_debug_state(arm11_common_t * arm11);
+static int arm11_on_enter_debug_state(arm11_common_t * arm11);
 
 bool	arm11_config_memwrite_burst				= true;
 bool	arm11_config_memwrite_error_fatal		= true;
@@ -313,16 +313,18 @@
  *					available a pointer to a word holding the
  *					DSCR can be passed. Otherwise use NULL.
  */
-void arm11_check_init(arm11_common_t * arm11, u32 * dscr)
+int arm11_check_init(arm11_common_t * arm11, u32 * dscr)
 {
 	FNC_INFO;
+	int retval;
 
 	u32			dscr_local_tmp_copy;
 
 	if (!dscr)
 	{
 		dscr = &dscr_local_tmp_copy;
-		*dscr = arm11_read_DSCR(arm11);
+		if ((retval=arm11_read_DSCR(arm11, dscr))!=ERROR_OK)
+			return retval;
 	}
 
 	if (!(*dscr & ARM11_DSCR_MODE_SELECT))
@@ -353,6 +355,8 @@
 
 		arm11_sc7_clear_vbw(arm11);
 	}
+
+	return ERROR_OK;
 }
 
 
@@ -366,7 +370,7 @@
   * or on other occasions that stop the processor.
   *
   */
-static void arm11_on_enter_debug_state(arm11_common_t * arm11)
+static int arm11_on_enter_debug_state(arm11_common_t * arm11)
 {
 	FNC_INFO;
 
@@ -378,9 +382,10 @@
 	}}
 
 	/* Save DSCR */
+	int retval;
+	if ((retval=arm11_read_DSCR(arm11, &R(DSCR)))!=ERROR_OK)
+		return retval;
 
-	R(DSCR) = arm11_read_DSCR(arm11);
-
 	/* Save wDTR */
 
 	if (R(DSCR) & ARM11_DSCR_WDTR_FULL)
@@ -514,6 +519,8 @@
 	arm11_run_instr_data_finish(arm11);
 
 	arm11_dump_reg_changes(arm11);
+
+	return ERROR_OK;
 }
 
 void arm11_dump_reg_changes(arm11_common_t * arm11)
@@ -546,7 +553,7 @@
   * This is called in preparation for the RESTART function.
   *
   */
-void arm11_leave_debug_state(arm11_common_t * arm11)
+int arm11_leave_debug_state(arm11_common_t * arm11)
 {
 	FNC_INFO;
 
@@ -572,7 +579,12 @@
 	/* spec says clear wDTR and rDTR; we assume they are clear as
 	   otherwise our programming would be sloppy */
 	{
-		u32 DSCR = arm11_read_DSCR(arm11);
+		u32 DSCR;
+		int retval;
+		if ((retval=arm11_read_DSCR(arm11, &DSCR))!=ERROR_OK)
+		{
+			return retval;
+		}
 
 		if (DSCR & (ARM11_DSCR_RDTR_FULL | ARM11_DSCR_WDTR_FULL))
 		{
@@ -632,6 +644,8 @@
 	}
 
 	arm11_record_register_history(arm11);
+
+	return ERROR_OK;
 }
 
 void arm11_record_register_history(arm11_common_t * arm11)
@@ -658,11 +672,15 @@
 	if (arm11->trst_active)
 		return ERROR_OK;
 
-	u32	dscr = arm11_read_DSCR(arm11);
+	u32	dscr;
+	int retval;
+	if ((retval=arm11_read_DSCR(arm11, &dscr))!=ERROR_OK)
+		return retval;
 
 	LOG_DEBUG("DSCR %08x", dscr);
 
-	arm11_check_init(arm11, &dscr);
+	if ((retval=arm11_check_init(arm11, &dscr))!=ERROR_OK)
+		return retval;
 
 	if (dscr & ARM11_DSCR_CORE_HALTED)
 	{
@@ -747,7 +765,10 @@
 
 	while (1)
 	{
-		dscr = arm11_read_DSCR(arm11);
+		int retval;
+		retval = arm11_read_DSCR(arm11, &dscr);
+		if (retval!=ERROR_OK)
+			return retval;
 
 		if (dscr & ARM11_DSCR_CORE_HALTED)
 			break;
@@ -774,7 +795,7 @@
 	int retval = ERROR_OK;
 
 	FNC_INFO;
-	
+
 	//	  LOG_DEBUG("current %d  address %08x  handle_breakpoints %d  debug_execution %d",
 	//	current, address, handle_breakpoints, debug_execution);
 
@@ -851,7 +872,10 @@
 
 	while (1)
 	{
-		u32 dscr = arm11_read_DSCR(arm11);
+		u32 dscr;
+		retval = arm11_read_DSCR(arm11, &dscr);
+		if (retval!=ERROR_OK)
+			return retval;
 
 		LOG_DEBUG("DSCR %08x", dscr);
 
@@ -961,8 +985,8 @@
 			R(DSCR) &= ~ARM11_DSCR_INTERRUPTS_DISABLE;		/* should be redundant */
 		else
 			R(DSCR) |= ARM11_DSCR_INTERRUPTS_DISABLE;
-			
 
+
 		arm11_leave_debug_state(arm11);
 
 		arm11_add_IR(arm11, ARM11_RESTART, TAP_IDLE);
@@ -978,7 +1002,10 @@
 
 		while (1)
 		{
-			u32 dscr = arm11_read_DSCR(arm11);
+			u32 dscr;
+			retval = arm11_read_DSCR(arm11, &dscr);
+			if (retval!=ERROR_OK)
+				return retval;
 
 			LOG_DEBUG("DSCR %08x", dscr);
 
@@ -1987,7 +2014,7 @@
 
 	RC_FINAL_BOOL(		"no_increment",			"Don't increment address on multi-read/-write (default: disabled)",
 						memrw_no_increment)
-						
+
 	RC_FINAL_BOOL(		"step_irq_enable",		"Enable interrupts while stepping (default: disabled)",
 						step_irq_enable)
 

Modified: trunk/src/target/arm11.h
===================================================================
--- trunk/src/target/arm11.h	2009-04-27 10:37:07 UTC (rev 1541)
+++ trunk/src/target/arm11.h	2009-04-27 11:24:01 UTC (rev 1542)
@@ -91,7 +91,7 @@
 	bool	trst_active;
 	bool	halt_requested;					/**< Keep track if arm11_halt() calls occured
 												 during reset. Otherwise do it ASAP. */
-												 
+
 	bool	simulate_reset_on_next_halt;	/**< Perform cleanups of the ARM state on next halt */
 
 	/** \name Shadow registers to save processor state */
@@ -239,7 +239,7 @@
 void arm11_add_IR				(arm11_common_t * arm11, u8 instr, tap_state_t state);
 void arm11_add_debug_SCAN_N		(arm11_common_t * arm11, u8 chain, tap_state_t state);
 void arm11_add_debug_INST		(arm11_common_t * arm11, u32 inst, u8 * flag, tap_state_t state);
-u32  arm11_read_DSCR			(arm11_common_t * arm11);
+int arm11_read_DSCR			(arm11_common_t * arm11, u32 *dscr);
 void arm11_write_DSCR			(arm11_common_t * arm11, u32 dscr);
 
 enum target_debug_reason arm11_get_DSCR_debug_reason(u32 dscr);

Modified: trunk/src/target/arm11_dbgtap.c
===================================================================
--- trunk/src/target/arm11_dbgtap.c	2009-04-27 10:37:07 UTC (rev 1541)
+++ trunk/src/target/arm11_dbgtap.c	2009-04-27 11:24:01 UTC (rev 1542)
@@ -216,7 +216,7 @@
  *
  * \remarks			This is a stand-alone function that executes the JTAG command queue.
  */
-u32 arm11_read_DSCR(arm11_common_t * arm11)
+int arm11_read_DSCR(arm11_common_t * arm11, u32 *value)
 {
 	arm11_add_debug_SCAN_N(arm11, 0x01, ARM11_TAP_DEFAULT);
 
@@ -229,14 +229,20 @@
 
 	arm11_add_dr_scan_vc(1, &chain1_field, TAP_DRPAUSE);
 
-	jtag_execute_queue();
+	int retval;
+	if ((retval=jtag_execute_queue())!=ERROR_OK)
+	{
+		return retval;
+	}
 
 	if (arm11->last_dscr != dscr)
 		JTAG_DEBUG("DSCR  = %08x (OLD %08x)", dscr, arm11->last_dscr);
 
 	arm11->last_dscr = dscr;
 
-	return dscr;
+	*value=dscr;
+
+	return retval;
 }
 
 /** Write the Debug Status and Control Register (DSCR)



From oharboe at mail.berlios.de  Mon Apr 27 14:02:07 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Mon, 27 Apr 2009 14:02:07 +0200
Subject: [Openocd-svn] r1543 - trunk/src/target
Message-ID: <200904271202.n3RC27Ld031470@sheep.berlios.de>

Author: oharboe
Date: 2009-04-27 14:02:07 +0200 (Mon, 27 Apr 2009)
New Revision: 1543

Modified:
   trunk/src/target/arm11.c
   trunk/src/target/arm11.h
   trunk/src/target/arm11_dbgtap.c
Log:
more error handling

Modified: trunk/src/target/arm11.c
===================================================================
--- trunk/src/target/arm11.c	2009-04-27 11:24:01 UTC (rev 1542)
+++ trunk/src/target/arm11.c	2009-04-27 12:02:07 UTC (rev 1543)
@@ -932,7 +932,8 @@
 
 	u32	next_instruction;
 
-	arm11_read_memory_word(arm11, R(PC), &next_instruction);
+	if ((arm11_read_memory_word(arm11, R(PC), &next_instruction))!=ERROR_OK)
+		return retval;
 
 	/* skip over BKPT */
 	if ((next_instruction & 0xFFF00070) == 0xe1200070)
@@ -976,7 +977,8 @@
 		brp[1].address	= ARM11_SC7_BCR0;
 		brp[1].value	= 0x1 | (3 << 1) | (0x0F << 5) | (0 << 14) | (0 << 16) | (0 << 20) | (2 << 21);
 
-		arm11_sc7_run(arm11, brp, asizeof(brp));
+		if ((retval=arm11_sc7_run(arm11, brp, asizeof(brp)))!=ERROR_OK)
+			return retval;
 
 		/* resume */
 
@@ -987,7 +989,8 @@
 			R(DSCR) |= ARM11_DSCR_INTERRUPTS_DISABLE;
 
 
-		arm11_leave_debug_state(arm11);
+		if ((retval=arm11_leave_debug_state(arm11))!=ERROR_OK)
+			return retval;
 
 		arm11_add_IR(arm11, ARM11_RESTART, TAP_IDLE);
 
@@ -1018,7 +1021,8 @@
 		arm11_sc7_clear_vbw(arm11);
 
 		/* save state */
-		arm11_on_enter_debug_state(arm11);
+		if((retval = arm11_on_enter_debug_state(arm11))!=ERROR_OK)
+			return retval;
 
 	    /* restore default state */
 		R(DSCR) &= ~ARM11_DSCR_INTERRUPTS_DISABLE;

Modified: trunk/src/target/arm11.h
===================================================================
--- trunk/src/target/arm11.h	2009-04-27 11:24:01 UTC (rev 1542)
+++ trunk/src/target/arm11.h	2009-04-27 12:02:07 UTC (rev 1543)
@@ -240,18 +240,18 @@
 void arm11_add_debug_SCAN_N		(arm11_common_t * arm11, u8 chain, tap_state_t state);
 void arm11_add_debug_INST		(arm11_common_t * arm11, u32 inst, u8 * flag, tap_state_t state);
 int arm11_read_DSCR			(arm11_common_t * arm11, u32 *dscr);
-void arm11_write_DSCR			(arm11_common_t * arm11, u32 dscr);
+int arm11_write_DSCR			(arm11_common_t * arm11, u32 dscr);
 
 enum target_debug_reason arm11_get_DSCR_debug_reason(u32 dscr);
 
 void arm11_run_instr_data_prepare			(arm11_common_t * arm11);
 void arm11_run_instr_data_finish			(arm11_common_t * arm11);
-void arm11_run_instr_no_data				(arm11_common_t * arm11, u32 * opcode, size_t count);
+int arm11_run_instr_no_data				(arm11_common_t * arm11, u32 * opcode, size_t count);
 void arm11_run_instr_no_data1				(arm11_common_t * arm11, u32 opcode);
-void arm11_run_instr_data_to_core			(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count);
-void arm11_run_instr_data_to_core_noack		(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count);
-void arm11_run_instr_data_to_core1			(arm11_common_t * arm11, u32 opcode, u32 data);
-void arm11_run_instr_data_from_core			(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count);
+int arm11_run_instr_data_to_core			(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count);
+int arm11_run_instr_data_to_core_noack		(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count);
+int arm11_run_instr_data_to_core1			(arm11_common_t * arm11, u32 opcode, u32 data);
+int arm11_run_instr_data_from_core			(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count);
 void arm11_run_instr_data_from_core_via_r0	(arm11_common_t * arm11, u32 opcode, u32 * data);
 void arm11_run_instr_data_to_core_via_r0	(arm11_common_t * arm11, u32 opcode, u32 data);
 
@@ -271,12 +271,12 @@
 									 function returns.					*/
 } arm11_sc7_action_t;
 
-void arm11_sc7_run(arm11_common_t * arm11, arm11_sc7_action_t * actions, size_t count);
+int arm11_sc7_run(arm11_common_t * arm11, arm11_sc7_action_t * actions, size_t count);
 
 /* Mid-level helper functions */
 void arm11_sc7_clear_vbw(arm11_common_t * arm11);
 void arm11_sc7_set_vcr(arm11_common_t * arm11, u32 value);
 
-void arm11_read_memory_word(arm11_common_t * arm11, u32 address, u32 * result);
+int arm11_read_memory_word(arm11_common_t * arm11, u32 address, u32 * result);
 
 #endif /* ARM11_H */

Modified: trunk/src/target/arm11_dbgtap.c
===================================================================
--- trunk/src/target/arm11_dbgtap.c	2009-04-27 11:24:01 UTC (rev 1542)
+++ trunk/src/target/arm11_dbgtap.c	2009-04-27 12:02:07 UTC (rev 1543)
@@ -254,7 +254,7 @@
  *
  * \remarks			This is a stand-alone function that executes the JTAG command queue.
  */
-void arm11_write_DSCR(arm11_common_t * arm11, u32 dscr)
+int arm11_write_DSCR(arm11_common_t * arm11, u32 dscr)
 {
 	arm11_add_debug_SCAN_N(arm11, 0x01, ARM11_TAP_DEFAULT);
 
@@ -266,11 +266,15 @@
 
 	arm11_add_dr_scan_vc(1, &chain1_field, TAP_DRPAUSE);
 
-	jtag_execute_queue();
+	int retval;
+	if ((retval=jtag_execute_queue())!=ERROR_OK)
+		return retval;
 
 	JTAG_DEBUG("DSCR <= %08x (OLD %08x)", dscr, arm11->last_dscr);
 
 	arm11->last_dscr = dscr;
+
+	return ERROR_OK;
 }
 
 
@@ -365,7 +369,7 @@
  * \param count		Number of opcodes to execute
  *
  */
-void arm11_run_instr_no_data(arm11_common_t * arm11, u32 * opcode, size_t count)
+int arm11_run_instr_no_data(arm11_common_t * arm11, u32 * opcode, size_t count)
 {
 	arm11_add_IR(arm11, ARM11_ITRSEL, ARM11_TAP_DEFAULT);
 
@@ -379,12 +383,16 @@
 
 			arm11_add_debug_INST(arm11, 0, &flag, count ? TAP_IDLE : TAP_DRPAUSE);
 
-			jtag_execute_queue();
+			int retval;
+			if ((retval=jtag_execute_queue())!=ERROR_OK)
+				return retval;
 
 			if (flag)
 				break;
 		}
 	}
+
+	return ERROR_OK;
 }
 
 /** Execute one instruction via ITR
@@ -414,7 +422,7 @@
  * \param count		Number of data words and instruction repetitions
  *
  */
-void arm11_run_instr_data_to_core(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count)
+int arm11_run_instr_data_to_core(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count)
 {
 	arm11_add_IR(arm11, ARM11_ITRSEL, ARM11_TAP_DEFAULT);
 
@@ -439,7 +447,9 @@
 			Data	    = *data;
 
 			arm11_add_dr_scan_vc(asizeof(chain5_fields), chain5_fields, TAP_IDLE);
-			jtag_execute_queue();
+			int retval;
+			if ((retval=jtag_execute_queue())!=ERROR_OK)
+				return retval;
 
 			JTAG_DEBUG("DTR  Ready %d  nRetry %d", Ready, nRetry);
 		}
@@ -455,11 +465,15 @@
 		Data	    = 0;
 
 		arm11_add_dr_scan_vc(asizeof(chain5_fields), chain5_fields, TAP_DRPAUSE);
-		jtag_execute_queue();
+		int retval;
+		if ((retval=jtag_execute_queue())!=ERROR_OK)
+			return retval;
 
 		JTAG_DEBUG("DTR  Data %08x  Ready %d  nRetry %d", Data, Ready, nRetry);
 	}
 	while (!Ready);
+
+	return ERROR_OK;
 }
 
 /** JTAG path for arm11_run_instr_data_to_core_noack
@@ -495,7 +509,7 @@
  * \param count		Number of data words and instruction repetitions
  *
  */
-void arm11_run_instr_data_to_core_noack(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count)
+int arm11_run_instr_data_to_core_noack(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count)
 {
 	arm11_add_IR(arm11, ARM11_ITRSEL, ARM11_TAP_DEFAULT);
 
@@ -536,7 +550,9 @@
 
 	arm11_add_dr_scan_vc(asizeof(chain5_fields), chain5_fields, TAP_DRPAUSE);
 
-	jtag_execute_queue();
+	int retval;
+	if ((retval=jtag_execute_queue())!=ERROR_OK)
+		return retval;
 
 	size_t error_count = 0;
 
@@ -551,6 +567,8 @@
 
 	if (error_count)
 		LOG_ERROR("Transfer errors " ZU, error_count);
+
+	return ERROR_OK;
 }
 
 
@@ -565,9 +583,9 @@
  * \param data		Data word to be passed to the core via DTR
  *
  */
-void arm11_run_instr_data_to_core1(arm11_common_t * arm11, u32 opcode, u32 data)
+int arm11_run_instr_data_to_core1(arm11_common_t * arm11, u32 opcode, u32 data)
 {
-	arm11_run_instr_data_to_core(arm11, opcode, &data, 1);
+	return arm11_run_instr_data_to_core(arm11, opcode, &data, 1);
 }
 
 
@@ -584,7 +602,7 @@
  * \param count		Number of data words and instruction repetitions
  *
  */
-void arm11_run_instr_data_from_core(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count)
+int arm11_run_instr_data_from_core(arm11_common_t * arm11, u32 opcode, u32 * data, size_t count)
 {
 	arm11_add_IR(arm11, ARM11_ITRSEL, ARM11_TAP_DEFAULT);
 
@@ -607,7 +625,9 @@
 		do
 		{
 			arm11_add_dr_scan_vc(asizeof(chain5_fields), chain5_fields, count ? TAP_IDLE : TAP_DRPAUSE);
-			jtag_execute_queue();
+			int retval;
+			if ((retval=jtag_execute_queue())!=ERROR_OK)
+				return retval;
 
 			JTAG_DEBUG("DTR  Data %08x  Ready %d  nRetry %d", Data, Ready, nRetry);
 		}
@@ -615,6 +635,8 @@
 
 		*data++ = Data;
 	}
+
+	return ERROR_OK;
 }
 
 /** Execute one instruction via ITR
@@ -666,7 +688,7 @@
  * \param count		Number of instructions in the list.
  *
  */
-void arm11_sc7_run(arm11_common_t * arm11, arm11_sc7_action_t * actions, size_t count)
+int arm11_sc7_run(arm11_common_t * arm11, arm11_sc7_action_t * actions, size_t count)
 {
 	arm11_add_debug_SCAN_N(arm11, 0x07, ARM11_TAP_DEFAULT);
 
@@ -706,7 +728,9 @@
 			JTAG_DEBUG("SC7 <= Address %02x  Data %08x    nRW %d", AddressOut, DataOut, nRW);
 
 			arm11_add_dr_scan_vc(asizeof(chain7_fields), chain7_fields, TAP_DRPAUSE);
-			jtag_execute_queue();
+			int retval;
+			if ((retval=jtag_execute_queue())!=ERROR_OK)
+				return retval;
 
 			JTAG_DEBUG("SC7 => Address %02x  Data %08x  Ready %d", AddressIn, DataIn, Ready);
 		}
@@ -738,6 +762,8 @@
 	{
 		JTAG_DEBUG("SC7 %02d: %02x %s %08x", i, actions[i].address, actions[i].write ? "<=" : "=>", actions[i].value);
 	}}
+
+	return ERROR_OK;
 }
 
 /** Clear VCR and all breakpoints and watchpoints via scan chain 7
@@ -798,17 +824,22 @@
  * \param result	Pointer where to store result
  *
  */
-void arm11_read_memory_word(arm11_common_t * arm11, u32 address, u32 * result)
+int arm11_read_memory_word(arm11_common_t * arm11, u32 address, u32 * result)
 {
+	int retval;
 	arm11_run_instr_data_prepare(arm11);
 
 	/* MRC p14,0,r0,c0,c5,0 (r0 = address) */
-	arm11_run_instr_data_to_core1(arm11, 0xee100e15, address);
+	if ((retval=arm11_run_instr_data_to_core1(arm11, 0xee100e15, address))!=ERROR_OK)
+		return retval;
 
 	/* LDC p14,c5,[R0],#4 (DTR = [r0]) */
-	arm11_run_instr_data_from_core(arm11, 0xecb05e01, result, 1);
+	if ((retval=arm11_run_instr_data_from_core(arm11, 0xecb05e01, result, 1))!=ERROR_OK)
+		return retval;
 
 	arm11_run_instr_data_finish(arm11);
+
+	return ERROR_OK;
 }
 
 



From oharboe at mail.berlios.de  Mon Apr 27 14:12:45 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Mon, 27 Apr 2009 14:12:45 +0200
Subject: [Openocd-svn] r1544 - trunk/src/target
Message-ID: <200904271212.n3RCCjkM032654@sheep.berlios.de>

Author: oharboe
Date: 2009-04-27 14:12:44 +0200 (Mon, 27 Apr 2009)
New Revision: 1544

Modified:
   trunk/src/target/arm11.c
Log:
clean up debug/info output to be in line with other targets

Modified: trunk/src/target/arm11.c
===================================================================
--- trunk/src/target/arm11.c	2009-04-27 12:02:07 UTC (rev 1543)
+++ trunk/src/target/arm11.c	2009-04-27 12:12:44 UTC (rev 1544)
@@ -525,24 +525,30 @@
 
 void arm11_dump_reg_changes(arm11_common_t * arm11)
 {
+
+	if (!(debug_level >= LOG_LVL_DEBUG))
+	{
+		return;
+	}
+
 	{size_t i;
 	for(i = 0; i < ARM11_REGCACHE_COUNT; i++)
 	{
 		if (!arm11->reg_list[i].valid)
 		{
 			if (arm11->reg_history[i].valid)
-				LOG_INFO("%8s INVALID	 (%08x)", arm11_reg_defs[i].name, arm11->reg_history[i].value);
+				LOG_DEBUG("%8s INVALID	 (%08x)", arm11_reg_defs[i].name, arm11->reg_history[i].value);
 		}
 		else
 		{
 			if (arm11->reg_history[i].valid)
 			{
 				if (arm11->reg_history[i].value != arm11->reg_values[i])
-					LOG_INFO("%8s %08x (%08x)", arm11_reg_defs[i].name, arm11->reg_values[i], arm11->reg_history[i].value);
+					LOG_DEBUG("%8s %08x (%08x)", arm11_reg_defs[i].name, arm11->reg_values[i], arm11->reg_history[i].value);
 			}
 			else
 			{
-				LOG_INFO("%8s %08x (INVALID)", arm11_reg_defs[i].name, arm11->reg_values[i]);
+				LOG_DEBUG("%8s %08x (INVALID)", arm11_reg_defs[i].name, arm11->reg_values[i]);
 			}
 		}
 	}}
@@ -712,8 +718,13 @@
 /* architecture specific status reply */
 int arm11_arch_state(struct target_s *target)
 {
-	FNC_INFO_NOTIMPLEMENTED;
+	arm11_common_t * arm11 = target->arch_info;
 
+	LOG_USER("target halted due to %s\ncpsr: 0x%8.8x pc: 0x%8.8x",
+			 Jim_Nvp_value2name_simple( nvp_target_debug_reason, target->debug_reason )->name,
+			 R(CPSR),
+			 R(PC));
+
 	return ERROR_OK;
 }
 
@@ -814,7 +825,7 @@
 	if (!current)
 		R(PC) = address;
 
-	LOG_INFO("RESUME PC %08x%s", R(PC), !current ? "!" : "");
+	LOG_DEBUG("RESUME PC %08x%s", R(PC), !current ? "!" : "");
 
 	/* clear breakpoints/watchpoints and VCR*/
 	arm11_sc7_clear_vbw(arm11);



From oharboe at mail.berlios.de  Mon Apr 27 15:00:30 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Mon, 27 Apr 2009 15:00:30 +0200
Subject: [Openocd-svn] r1545 - trunk/src/jtag
Message-ID: <200904271300.n3RD0Ug1006239@sheep.berlios.de>

Author: oharboe
Date: 2009-04-27 15:00:29 +0200 (Mon, 27 Apr 2009)
New Revision: 1545

Modified:
   trunk/src/jtag/vsllink.c
Log:
SimonQian <simonqian at simonqian.com> patch for error compiling vsllink if --enable-verbose-jtag-io is set

Modified: trunk/src/jtag/vsllink.c
===================================================================
--- trunk/src/jtag/vsllink.c	2009-04-27 12:12:44 UTC (rev 1544)
+++ trunk/src/jtag/vsllink.c	2009-04-27 13:00:29 UTC (rev 1545)
@@ -242,7 +242,7 @@
 static int vsllink_usb_write(vsllink_jtag_t *vsllink_jtag, int out_length);
 static int vsllink_usb_read(vsllink_jtag_t *vsllink_jtag);
 
-#ifdef _DEBUG_USB_COMMS_
+#if defined _DEBUG_USB_COMMS_ || defined _DEBUG_JTAG_IO_
 static void vsllink_debug_buffer(u8 *buffer, int length);
 #endif
 
@@ -1243,7 +1243,7 @@
 			// which is merged from the last tms shift command
 			vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = VSLLINK_CMDJTAGSEQ_SCAN | 1;
 			vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = ((tdi_len + 1) >> 0) & 0xff;
-			vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = ((tdi_len + 1)>> 8) & 0xff;
+			vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = ((tdi_len + 1) >> 8) & 0xff;
 			vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = tms_tmp;
 			vsllink_usb_out_buffer[vsllink_usb_out_buffer_idx++] = buffer[0] << (8 - vsllink_tms_data_len);
 			
@@ -1917,7 +1917,7 @@
 
 #define BYTES_PER_LINE  16
 
-#ifdef _DEBUG_USB_COMMS_
+#if defined _DEBUG_USB_COMMS_ || defined _DEBUG_JTAG_IO_
 static void vsllink_debug_buffer(u8 *buffer, int length)
 {
 	char line[81];
@@ -1936,4 +1936,4 @@
 		LOG_DEBUG("%s", line);
 	}
 }
-#endif // _DEBUG_USB_COMMS_
+#endif // _DEBUG_USB_COMMS_ || _DEBUG_JTAG_IO_



From oharboe at mail.berlios.de  Mon Apr 27 18:03:40 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Mon, 27 Apr 2009 18:03:40 +0200
Subject: [Openocd-svn] r1546 - trunk/src/jtag
Message-ID: <200904271603.n3RG3eac022160@sheep.berlios.de>

Author: oharboe
Date: 2009-04-27 18:03:39 +0200 (Mon, 27 Apr 2009)
New Revision: 1546

Modified:
   trunk/src/jtag/jtag.h
Log:
Dick Hollenbeck <dick at softplc.com> Collect some macros, add DIM()

Modified: trunk/src/jtag/jtag.h
===================================================================
--- trunk/src/jtag/jtag.h	2009-04-27 13:00:29 UTC (rev 1545)
+++ trunk/src/jtag/jtag.h	2009-04-27 16:03:39 UTC (rev 1546)
@@ -40,7 +40,18 @@
 #define DEBUG_JTAG_IOZ 64
 #endif
 
+/*-----<Macros>--------------------------------------------------*/
 
+/** When given an array, compute its DIMension, i.e. number of elements in the array */
+#define DIM(x)					(sizeof(x)/sizeof((x)[0]))
+
+/** Calculate the number of bytes required to hold @a n TAP scan bits */
+#define TAP_SCAN_BYTES(n)		CEIL(n, 8)
+
+/*-----</Macros>-------------------------------------------------*/
+
+
+
 /*
  * Tap states from ARM7TDMI-S Technical reference manual.
  * Also, validated against several other ARM core technical manuals.
@@ -236,9 +247,6 @@
 struct scan_field_s;
 typedef int (*in_handler_t)(u8* in_value, void* priv, struct scan_field_s* field);
 
-/// @brief calculates number of bytes required to hold @a n TAP scan bits
-#define TAP_SCAN_BYTES(n)		CEIL(n, 8)
-
 typedef struct scan_field_s
 {
 	jtag_tap_t* tap;                /* tap pointer this instruction refers to */



From mlu at mail.berlios.de  Mon Apr 27 18:08:26 2009
From: mlu at mail.berlios.de (mlu at mail.berlios.de)
Date: Mon, 27 Apr 2009 18:08:26 +0200
Subject: [Openocd-svn] r1547 - trunk/src/target
Message-ID: <200904271608.n3RG8Q5k022463@sheep.berlios.de>

Author: mlu
Date: 2009-04-27 18:08:25 +0200 (Mon, 27 Apr 2009)
New Revision: 1547

Modified:
   trunk/src/target/arm_adi_v5.h
   trunk/src/target/armv7m.c
Log:
Added dap baseaddr and dap apid commands

Modified: trunk/src/target/arm_adi_v5.h
===================================================================
--- trunk/src/target/arm_adi_v5.h	2009-04-27 16:03:39 UTC (rev 1546)
+++ trunk/src/target/arm_adi_v5.h	2009-04-27 16:08:25 UTC (rev 1547)
@@ -136,7 +136,9 @@
 
 extern int dap_info_command(struct command_context_s *cmd_ctx, swjdp_common_t *swjdp, int apsel);
 /* Commands for user dap access */
+/* Currently implemented in armv7m, needs armv7m target structure to find jtag and swjdp structures */
 extern int handle_dap_info_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 extern int handle_dap_apsel_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-
+extern int handle_dap_apid_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+extern int handle_dap_baseaddr_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 #endif

Modified: trunk/src/target/armv7m.c
===================================================================
--- trunk/src/target/armv7m.c	2009-04-27 16:03:39 UTC (rev 1546)
+++ trunk/src/target/armv7m.c	2009-04-27 16:08:25 UTC (rev 1547)
@@ -372,7 +372,7 @@
 	for (i = 0; i < num_reg_params; i++)
 	{
 		reg_t *reg = register_get_by_name(armv7m->core_cache, reg_params[i].reg_name, 0);
-		u32 regvalue;
+//		u32 regvalue;
 
 		if (!reg)
 		{
@@ -386,7 +386,7 @@
 			exit(-1);
 		}
 
-		regvalue = buf_get_u32(reg_params[i].value, 0, 32);
+//		regvalue = buf_get_u32(reg_params[i].value, 0, 32);
 		armv7m_set_core_reg(reg, reg_params[i].value);
 	}
 
@@ -553,8 +553,10 @@
 	command_t *arm_adi_v5_dap_cmd;
 
 	arm_adi_v5_dap_cmd = register_command(cmd_ctx, NULL, "dap", NULL, COMMAND_ANY, "cortex dap specific commands");		
-	register_command(cmd_ctx, arm_adi_v5_dap_cmd, "info", handle_dap_info_command, COMMAND_EXEC, "dap info for ap [num] (default 0)");
+	register_command(cmd_ctx, arm_adi_v5_dap_cmd, "info", handle_dap_info_command, COMMAND_EXEC, "dap info for ap [num], default currently selected AP");
 	register_command(cmd_ctx, arm_adi_v5_dap_cmd, "apsel", handle_dap_apsel_command, COMMAND_EXEC, "select a different AP [num] (default 0)");
+	register_command(cmd_ctx, arm_adi_v5_dap_cmd, "apid", handle_dap_apid_command, COMMAND_EXEC, "return id reg from AP [num], default currently selected AP");
+	register_command(cmd_ctx, arm_adi_v5_dap_cmd, "baseaddr", handle_dap_baseaddr_command, COMMAND_EXEC, "return debug base address from AP [num], default currently selected AP");
 
 	return ERROR_OK;
 }
@@ -702,6 +704,75 @@
 	return ERROR_OK;
 }
 
+/********************************************************************************************************************
+* Return the debug ap baseaddress in hexadecimal, no extra output to simplify script processing
+*********************************************************************************************************************/
+int handle_dap_baseaddr_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+{
+	target_t *target = get_current_target(cmd_ctx);
+	armv7m_common_t *armv7m = target->arch_info;
+	swjdp_common_t *swjdp = &armv7m->swjdp_info;
+	u32 apsel, apselsave, baseaddr;
+	int retval;
+
+	apsel = swjdp->apsel;
+	apselsave = swjdp->apsel;
+	if (argc > 0)
+	{	
+		apsel = strtoul(args[0], NULL, 0);
+	}
+	if (apselsave != apsel)
+	{
+		dap_ap_select(swjdp, apsel);
+	}
+
+	dap_ap_read_reg_u32(swjdp, 0xF8, &baseaddr);
+	retval = swjdp_transaction_endcheck(swjdp);
+	command_print(cmd_ctx, "0x%8.8x", baseaddr);
+
+	if (apselsave != apsel)
+	{
+		dap_ap_select(swjdp, apselsave);
+	}
+
+	return retval;
+}
+
+
+/********************************************************************************************************************
+* Return the debug ap id in hexadecimal, no extra output to simplify script processing
+*********************************************************************************************************************/
+extern int handle_dap_apid_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+{
+	target_t *target = get_current_target(cmd_ctx);
+	armv7m_common_t *armv7m = target->arch_info;
+	swjdp_common_t *swjdp = &armv7m->swjdp_info;
+	u32 apsel, apselsave, apid;
+	int retval;
+
+	apsel = swjdp->apsel;
+	apselsave = swjdp->apsel;
+	if (argc > 0)
+	{	
+		apsel = strtoul(args[0], NULL, 0);
+	}
+
+	if (apselsave != apsel)
+	{
+		dap_ap_select(swjdp, apsel);
+	}
+
+	dap_ap_read_reg_u32(swjdp, 0xFC, &apid);
+	retval = swjdp_transaction_endcheck(swjdp);
+	command_print(cmd_ctx, "0x%8.8x", apid);
+	if (apselsave != apsel)
+	{
+		dap_ap_select(swjdp, apselsave);
+	}
+
+	return retval;
+}
+
 int handle_dap_apsel_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target = get_current_target(cmd_ctx);
@@ -732,7 +803,7 @@
 	int retval;
 	u32 apsel;
 
-	apsel = 0;
+	apsel =  swjdp->apsel;
 	if (argc > 0)
 	{	
 		apsel = strtoul(args[0], NULL, 0);



From oharboe at mail.berlios.de  Mon Apr 27 21:35:36 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Mon, 27 Apr 2009 21:35:36 +0200
Subject: [Openocd-svn] r1548 - in trunk/src: flash target
Message-ID: <200904271935.n3RJZaV4018126@sheep.berlios.de>

Author: oharboe
Date: 2009-04-27 21:35:31 +0200 (Mon, 27 Apr 2009)
New Revision: 1548

Modified:
   trunk/src/flash/avrf.c
   trunk/src/flash/avrf.h
   trunk/src/target/avrt.c
   trunk/src/target/avrt.h
Log:
SimonQian <simonqian at simonqian.com> fix warnings(which stops compilation) and some bugs

Modified: trunk/src/flash/avrf.c
===================================================================
--- trunk/src/flash/avrf.c	2009-04-27 16:08:25 UTC (rev 1547)
+++ trunk/src/flash/avrf.c	2009-04-27 19:35:31 UTC (rev 1548)
@@ -1,500 +1,500 @@
-/***************************************************************************
- *   Copyright (C) 2009 by Simon Qian                                      *
- *   SimonQian at SimonQian.com                                               *
- *                                                                         *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- *                                                                         *
- *   This program is distributed in the hope that it will be useful,       *
- *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
- *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
- *   GNU General Public License for more details.                          *
- *                                                                         *
- *   You should have received a copy of the GNU General Public License     *
- *   along with this program; if not, write to the                         *
- *   Free Software Foundation, Inc.,                                       *
- *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
- ***************************************************************************/
-#ifdef HAVE_CONFIG_H
-#include "config.h"
-#endif
-
-#include "replacements.h"
-
-#include "avrf.h"
-#include "avrt.h"
-#include "flash.h"
-#include "target.h"
-#include "log.h"
-#include "algorithm.h"
-#include "binarybuffer.h"
-
-#include <stdlib.h>
-#include <string.h>
-
-/* AVR_JTAG_Instructions */
-#define AVR_JTAG_INS_LEN							4
-// Public Instructions:
-#define AVR_JTAG_INS_EXTEST							0x00
-#define AVR_JTAG_INS_IDCODE							0x01
-#define AVR_JTAG_INS_SAMPLE_PRELOAD					0x02
-#define AVR_JTAG_INS_BYPASS							0x0F
-// AVR Specified Public Instructions:
-#define AVR_JTAG_INS_AVR_RESET						0x0C
-#define AVR_JTAG_INS_PROG_ENABLE					0x04
-#define AVR_JTAG_INS_PROG_COMMANDS					0x05
-#define AVR_JTAG_INS_PROG_PAGELOAD					0x06
-#define AVR_JTAG_INS_PROG_PAGEREAD					0x07
-
-// Data Registers:
-#define AVR_JTAG_REG_Bypass_Len						1
-#define AVR_JTAG_REG_DeviceID_Len					32
-
-#define AVR_JTAG_REG_Reset_Len						1
-#define AVR_JTAG_REG_JTAGID_Len						32
-#define AVR_JTAG_REG_ProgrammingEnable_Len			16
-#define AVR_JTAG_REG_ProgrammingCommand_Len			15
-#define AVR_JTAG_REG_FlashDataByte_Len				16
-
-avrf_type_t avft_chips_info[] = 
-{
-//	 name,			chip_id,	flash_page_size,	flash_page_num,	eeprom_page_size,	eeprom_page_num
-	{"atmega128",	0x9702,		256,				512,			8,					512},
-};
-
-static int avrf_register_commands(struct command_context_s *cmd_ctx);
-static int avrf_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
-static int avrf_erase(struct flash_bank_s *bank, int first, int last);
-static int avrf_protect(struct flash_bank_s *bank, int set, int first, int last);
-static int avrf_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
-static int avrf_probe(struct flash_bank_s *bank);
-static int avrf_auto_probe(struct flash_bank_s *bank);
-//static int avrf_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-static int avrf_protect_check(struct flash_bank_s *bank);
-static int avrf_info(struct flash_bank_s *bank, char *buf, int buf_size);
-
-static int avrf_handle_mass_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-
-extern int avr_jtag_sendinstr(jtag_tap_t *tap, u8 *ir_in, u8 ir_out);
-extern int avr_jtag_senddat(jtag_tap_t *tap, u32 *dr_in, u32 dr_out, int len);
-
-extern int mcu_write_ir(jtag_tap_t *tap, u8 *ir_in, u8 *ir_out, int ir_len, int rti);
-extern int mcu_write_dr(jtag_tap_t *tap, u8 *ir_in, u8 *ir_out, int dr_len, int rti);
-extern int mcu_write_ir_u8(jtag_tap_t *tap, u8 *ir_in, u8 ir_out, int ir_len, int rti);
-extern int mcu_write_dr_u8(jtag_tap_t *tap, u8 *ir_in, u8 ir_out, int dr_len, int rti);
-extern int mcu_write_ir_u16(jtag_tap_t *tap, u16 *ir_in, u16 ir_out, int ir_len, int rti);
-extern int mcu_write_dr_u16(jtag_tap_t *tap, u16 *ir_in, u16 ir_out, int dr_len, int rti);
-extern int mcu_write_ir_u32(jtag_tap_t *tap, u32 *ir_in, u32 ir_out, int ir_len, int rti);
-extern int mcu_write_dr_u32(jtag_tap_t *tap, u32 *ir_in, u32 ir_out, int dr_len, int rti);
-extern int mcu_execute_queue(void);
-
-flash_driver_t avr_flash =
-{
-	.name = "avr",
-	.register_commands = avrf_register_commands,
-	.flash_bank_command = avrf_flash_bank_command,
-	.erase = avrf_erase,
-	.protect = avrf_protect,
-	.write = avrf_write,
-	.probe = avrf_probe,
-	.auto_probe = avrf_auto_probe,
-	.erase_check = default_flash_mem_blank_check,
-	.protect_check = avrf_protect_check,
-	.info = avrf_info
-};
-
-/* avr program functions */
-static int avr_jtag_reset(avr_common_t *avr, u32 reset)
-{
-	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_AVR_RESET);
-	avr_jtag_senddat(avr->jtag_info.tap, NULL, reset ,AVR_JTAG_REG_Reset_Len);
-	
-	return ERROR_OK;
-}
-
-static int avr_jtag_read_jtagid(avr_common_t *avr, u32 *id)
-{
-	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_IDCODE);
-	avr_jtag_senddat(avr->jtag_info.tap, id, 0, AVR_JTAG_REG_JTAGID_Len);
-	
-	return ERROR_OK;
-}
-
-static int avr_jtagprg_enterprogmode(avr_common_t *avr)
-{
-	avr_jtag_reset(avr, 1);
-	
-	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_PROG_ENABLE);
-	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0xA370, AVR_JTAG_REG_ProgrammingEnable_Len);
-	
-	return ERROR_OK;
-}
-
-static int avr_jtagprg_leaveprogmode(avr_common_t *avr)
-{
-	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_PROG_COMMANDS);
-	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x2300, AVR_JTAG_REG_ProgrammingCommand_Len);
-	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3300, AVR_JTAG_REG_ProgrammingCommand_Len);
-
-	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_PROG_ENABLE);
-	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0, AVR_JTAG_REG_ProgrammingEnable_Len);
-
-	avr_jtag_reset(avr, 0);
-	
-	return ERROR_OK;
-}
-
-static int avr_jtagprg_chiperase(avr_common_t *avr)
-{
-	u32 poll_value;
-	
-	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_PROG_COMMANDS);
-	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x2380, AVR_JTAG_REG_ProgrammingCommand_Len);
-	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3180, AVR_JTAG_REG_ProgrammingCommand_Len);
-	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3380, AVR_JTAG_REG_ProgrammingCommand_Len);
-	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3380, AVR_JTAG_REG_ProgrammingCommand_Len);
-	
-	do{
-		poll_value = 0;
-		avr_jtag_senddat(avr->jtag_info.tap, &poll_value, 0x3380, AVR_JTAG_REG_ProgrammingCommand_Len);
-		if (ERROR_OK != mcu_execute_queue())
-		{
-			return ERROR_FAIL;
-		}
-		LOG_DEBUG("poll_value = 0x%04X", poll_value);
-	}while(!(poll_value & 0x0200));
-	
-	return ERROR_OK;
-}
-
-static int avr_jtagprg_writeflashpage(avr_common_t *avr, u8 *page_buf, u32 buf_size, u32 addr, u32 page_size)
-{
-	u32 i, poll_value;
-	
-	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_PROG_COMMANDS);
-	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x2310, AVR_JTAG_REG_ProgrammingCommand_Len);
-	
-	// load addr high byte
-	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x0700 | ((addr >> 9) & 0xFF), AVR_JTAG_REG_ProgrammingCommand_Len);
-	
-	// load addr low byte
-	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x0300 | ((addr >> 1) & 0xFF), AVR_JTAG_REG_ProgrammingCommand_Len);
-	
-	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_PROG_PAGELOAD);
-	
-	for (i = 0; i < page_size; i++)
-	{
-		if (i < buf_size)
-		{
-			avr_jtag_senddat(avr->jtag_info.tap, NULL, page_buf[i], 8);
-		}
-		else
-		{
-			avr_jtag_senddat(avr->jtag_info.tap, NULL, 0xFF, 8);
-		}
-	}
-	
-	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_PROG_COMMANDS);
-	
-	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3700, AVR_JTAG_REG_ProgrammingCommand_Len);
-	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3500, AVR_JTAG_REG_ProgrammingCommand_Len);
-	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3700, AVR_JTAG_REG_ProgrammingCommand_Len);
-	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3700, AVR_JTAG_REG_ProgrammingCommand_Len);
-	
-	do{
-		poll_value = 0;
-		avr_jtag_senddat(avr->jtag_info.tap, &poll_value, 0x3700, AVR_JTAG_REG_ProgrammingCommand_Len);
-		if (ERROR_OK != mcu_execute_queue())
-		{
-			return ERROR_FAIL;
-		}
-		LOG_DEBUG("poll_value = 0x%04X", poll_value);
-	}while(!(poll_value & 0x0200));
-	
-	return ERROR_OK;
-}
-
-/* interface command */
-static int avrf_register_commands(struct command_context_s *cmd_ctx)
-{
-	command_t *avr_cmd = register_command(cmd_ctx, NULL, "avr", NULL, COMMAND_ANY, "avr flash specific commands");
-	
-	register_command(cmd_ctx, avr_cmd, "mass_erase", avrf_handle_mass_erase_command, COMMAND_EXEC,
-					 "mass erase device");
-	
-	return ERROR_OK;
-}
-
-static int avrf_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
-{
-	avrf_flash_bank_t *avrf_info;
-	
-	if (argc < 6)
-	{
-		LOG_WARNING("incomplete flash_bank avr configuration");
-		return ERROR_FLASH_BANK_INVALID;
-	}
-	
-	avrf_info = malloc(sizeof(avrf_flash_bank_t));
-	bank->driver_priv = avrf_info;
-	
-	avrf_info->probed = 0;
-	
-	return ERROR_OK;
-}
-
-static int avrf_erase(struct flash_bank_s *bank, int first, int last)
-{
-	LOG_INFO(__FUNCTION__);
-	return ERROR_OK;
-}
-
-static int avrf_protect(struct flash_bank_s *bank, int set, int first, int last)
-{
-	LOG_INFO(__FUNCTION__);
-	return ERROR_OK;
-}
-
-static int avrf_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
-{
-	target_t *target = bank->target;
-	avr_common_t *avr = target->arch_info;
-	u32 cur_size, cur_buffer_size, page_size;
-	
-	if (bank->target->state != TARGET_HALTED)
-	{
-		LOG_ERROR("Target not halted");
-		return ERROR_TARGET_NOT_HALTED;
-	}
-	
-	page_size = bank->sectors[0].size;
-	if ((offset % page_size) != 0)
-	{
-		LOG_WARNING("offset 0x%x breaks required %d-byte alignment", offset, page_size);
-		return ERROR_FLASH_DST_BREAKS_ALIGNMENT;
-	}
-	
-	LOG_DEBUG("offset is 0x%08X", offset);
-	LOG_DEBUG("count is %d", count);
-	
-	if (ERROR_OK != avr_jtagprg_enterprogmode(avr))
-	{
-		return ERROR_FAIL;
-	}
-	
-	cur_size = 0;
-	while(count > 0)
-	{
-		if (count > page_size)
-		{
-			cur_buffer_size = page_size;
-		}
-		else
-		{
-			cur_buffer_size = count;
-		}
-		avr_jtagprg_writeflashpage(avr, buffer + cur_size, cur_buffer_size, offset + cur_size, page_size);
-		count -= cur_buffer_size;
-		cur_size += cur_buffer_size;
-		
-		keep_alive();
-	}
-	
-	return avr_jtagprg_leaveprogmode(avr);
-}
-
-#define EXTRACT_MFG(X)  (((X) & 0xffe) >> 1)
-#define EXTRACT_PART(X) (((X) & 0xffff000) >> 12)
-#define EXTRACT_VER(X)  (((X) & 0xf0000000) >> 28)
-static int avrf_probe(struct flash_bank_s *bank)
-{
-	target_t *target = bank->target;
-	avrf_flash_bank_t *avrf_info = bank->driver_priv;
-	avr_common_t *avr = target->arch_info;
-	avrf_type_t *avr_info;
-	int i;
-	u32 device_id;
-	
-	if (bank->target->state != TARGET_HALTED)
-	{
-		LOG_ERROR("Target not halted");
-		return ERROR_TARGET_NOT_HALTED;
-	}
-
-	avrf_info->probed = 0;
-	
-	avr_jtag_read_jtagid(avr, &device_id);
-	if (ERROR_OK != mcu_execute_queue())
-	{
-		return ERROR_FAIL;
-	}
-	
-	LOG_INFO( "device id = 0x%08x", device_id );
-	if (EXTRACT_MFG(device_id) != 0x1F)
-	{
-		LOG_ERROR("0x%X is invalid Manufacturer for avr, 0x%X is expected", EXTRACT_MFG(device_id), 0x1F);
-	}
-	
-	for (i = 0; i < (int)(sizeof(avft_chips_info) / sizeof(avft_chips_info[0])); i++)
-	{
-		if (avft_chips_info[i].chip_id == EXTRACT_PART(device_id))
-		{
-			avr_info = &avft_chips_info[i];
-			LOG_INFO("target device is %s", avr_info->name);
-			break;
-		}
-	}
-	
-	if (i < (int)(sizeof(avft_chips_info) / sizeof(avft_chips_info[0])))
-	{
-		// chip found
-		bank->base = 0x00000000;
-		bank->size = (avr_info->flash_page_size * avr_info->flash_page_num);
-		bank->num_sectors = avr_info->flash_page_num;
-		bank->sectors = malloc(sizeof(flash_sector_t) * avr_info->flash_page_num);
-		
-		for (i = 0; i < avr_info->flash_page_num; i++)
-		{
-			bank->sectors[i].offset = i * avr_info->flash_page_size;
-			bank->sectors[i].size = avr_info->flash_page_size;
-			bank->sectors[i].is_erased = -1;
-			bank->sectors[i].is_protected = 1;
-		}
-		
-		avrf_info->probed = 1;
-		return ERROR_OK;
-	}
-	else
-	{
-		// chip not supported
-		LOG_ERROR("0x%X is not support for avr", EXTRACT_PART(device_id));
-		
-		avrf_info->probed = 1;
-		return ERROR_FAIL;
-	}
-}
-
-static int avrf_auto_probe(struct flash_bank_s *bank)
-{
-	avrf_flash_bank_t *avrf_info = bank->driver_priv;
-	if (avrf_info->probed)
-		return ERROR_OK;
-	return avrf_probe(bank);
-}
-
-static int avrf_protect_check(struct flash_bank_s *bank)
-{
-	LOG_INFO(__FUNCTION__);
-	return ERROR_OK;
-}
-
-static int avrf_info(struct flash_bank_s *bank, char *buf, int buf_size)
-{
-	target_t *target = bank->target;
-	avr_common_t *avr = target->arch_info;
-	avrf_type_t *avr_info;
-	int i;
-	u32 device_id;
-	
-	if (bank->target->state != TARGET_HALTED)
-	{
-		LOG_ERROR("Target not halted");
-		return ERROR_TARGET_NOT_HALTED;
-	}
-	
-	avr_jtag_read_jtagid(avr, &device_id);
-	if (ERROR_OK != mcu_execute_queue())
-	{
-		return ERROR_FAIL;
-	}
-	
-	LOG_INFO( "device id = 0x%08x", device_id );
-	if (EXTRACT_MFG(device_id) != 0x1F)
-	{
-		LOG_ERROR("0x%X is invalid Manufacturer for avr, 0x%X is expected", EXTRACT_MFG(device_id), 0x1F);
-	}
-	
-	for (i = 0; i < (int)(sizeof(avft_chips_info) / sizeof(avft_chips_info[0])); i++)
-	{
-		if (avft_chips_info[i].chip_id == EXTRACT_PART(device_id))
-		{
-			avr_info = &avft_chips_info[i];
-			LOG_INFO("target device is %s", avr_info->name);
-			
-			return ERROR_OK;
-		}
-	}
-	
-	if (i < (int)(sizeof(avft_chips_info) / sizeof(avft_chips_info[0])))
-	{
-		// chip found
-		snprintf(buf, buf_size, "%s - Rev: 0x%X", avr_info->name, EXTRACT_VER(device_id));
-		return ERROR_OK;
-	}
-	else
-	{
-		// chip not supported
-		snprintf(buf, buf_size, "Cannot identify target as a avr\n");
-		return ERROR_FLASH_OPERATION_FAILED;
-	}
-}
-
-static int avrf_mass_erase(struct flash_bank_s *bank)
-{
-	target_t *target = bank->target;
-	avr_common_t *avr = target->arch_info;
-	
-	if (target->state != TARGET_HALTED)
-	{
-		LOG_ERROR("Target not halted");
-		return ERROR_TARGET_NOT_HALTED;
-	}
-	
-	if ((ERROR_OK != avr_jtagprg_enterprogmode(avr))
-		|| (ERROR_OK != avr_jtagprg_chiperase(avr))
-		|| (ERROR_OK != avr_jtagprg_leaveprogmode(avr)))
-	{
-		return ERROR_FAIL;
-	}
-	
-	return ERROR_OK;
-}
-
-static int avrf_handle_mass_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
-{
-	flash_bank_t *bank;
-	int i;
-	
-	if (argc < 1)
-	{
-		command_print(cmd_ctx, "avr mass_erase <bank>");
-		return ERROR_OK;	
-	}
-	
-	bank = get_flash_bank_by_num(strtoul(args[0], NULL, 0));
-	if (!bank)
-	{
-		command_print(cmd_ctx, "flash bank '#%s' is out of bounds", args[0]);
-		return ERROR_OK;
-	}
-	
-	if (avrf_mass_erase(bank) == ERROR_OK)
-	{
-		/* set all sectors as erased */
-		for (i = 0; i < bank->num_sectors; i++)
-		{
-			bank->sectors[i].is_erased = 1;
-		}
-		
-		command_print(cmd_ctx, "avr mass erase complete");
-	}
-	else
-	{
-		command_print(cmd_ctx, "avr mass erase failed");
-	}
-	
-	LOG_DEBUG(__FUNCTION__);
-	return ERROR_OK;
-}
+/***************************************************************************
+ *   Copyright (C) 2009 by Simon Qian                                      *
+ *   SimonQian at SimonQian.com                                               *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   This program is distributed in the hope that it will be useful,       *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
+ *   GNU General Public License for more details.                          *
+ *                                                                         *
+ *   You should have received a copy of the GNU General Public License     *
+ *   along with this program; if not, write to the                         *
+ *   Free Software Foundation, Inc.,                                       *
+ *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
+ ***************************************************************************/
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include "replacements.h"
+
+#include "avrf.h"
+#include "avrt.h"
+#include "flash.h"
+#include "target.h"
+#include "log.h"
+#include "algorithm.h"
+#include "binarybuffer.h"
+
+#include <stdlib.h>
+#include <string.h>
+
+/* AVR_JTAG_Instructions */
+#define AVR_JTAG_INS_LEN							4
+// Public Instructions:
+#define AVR_JTAG_INS_EXTEST							0x00
+#define AVR_JTAG_INS_IDCODE							0x01
+#define AVR_JTAG_INS_SAMPLE_PRELOAD					0x02
+#define AVR_JTAG_INS_BYPASS							0x0F
+// AVR Specified Public Instructions:
+#define AVR_JTAG_INS_AVR_RESET						0x0C
+#define AVR_JTAG_INS_PROG_ENABLE					0x04
+#define AVR_JTAG_INS_PROG_COMMANDS					0x05
+#define AVR_JTAG_INS_PROG_PAGELOAD					0x06
+#define AVR_JTAG_INS_PROG_PAGEREAD					0x07
+
+// Data Registers:
+#define AVR_JTAG_REG_Bypass_Len						1
+#define AVR_JTAG_REG_DeviceID_Len					32
+
+#define AVR_JTAG_REG_Reset_Len						1
+#define AVR_JTAG_REG_JTAGID_Len						32
+#define AVR_JTAG_REG_ProgrammingEnable_Len			16
+#define AVR_JTAG_REG_ProgrammingCommand_Len			15
+#define AVR_JTAG_REG_FlashDataByte_Len				16
+
+avrf_type_t avft_chips_info[] = 
+{
+//	 name,			chip_id,	flash_page_size,	flash_page_num,	eeprom_page_size,	eeprom_page_num
+	{"atmega128",	0x9702,		256,				512,			8,					512},
+};
+
+static int avrf_register_commands(struct command_context_s *cmd_ctx);
+static int avrf_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank);
+static int avrf_erase(struct flash_bank_s *bank, int first, int last);
+static int avrf_protect(struct flash_bank_s *bank, int set, int first, int last);
+static int avrf_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count);
+static int avrf_probe(struct flash_bank_s *bank);
+static int avrf_auto_probe(struct flash_bank_s *bank);
+//static int avrf_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int avrf_protect_check(struct flash_bank_s *bank);
+static int avrf_info(struct flash_bank_s *bank, char *buf, int buf_size);
+
+static int avrf_handle_mass_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+
+extern int avr_jtag_sendinstr(jtag_tap_t *tap, u8 *ir_in, u8 ir_out);
+extern int avr_jtag_senddat(jtag_tap_t *tap, u32 *dr_in, u32 dr_out, int len);
+
+extern int mcu_write_ir(jtag_tap_t *tap, u8 *ir_in, u8 *ir_out, int ir_len, int rti);
+extern int mcu_write_dr(jtag_tap_t *tap, u8 *ir_in, u8 *ir_out, int dr_len, int rti);
+extern int mcu_write_ir_u8(jtag_tap_t *tap, u8 *ir_in, u8 ir_out, int ir_len, int rti);
+extern int mcu_write_dr_u8(jtag_tap_t *tap, u8 *ir_in, u8 ir_out, int dr_len, int rti);
+extern int mcu_write_ir_u16(jtag_tap_t *tap, u16 *ir_in, u16 ir_out, int ir_len, int rti);
+extern int mcu_write_dr_u16(jtag_tap_t *tap, u16 *ir_in, u16 ir_out, int dr_len, int rti);
+extern int mcu_write_ir_u32(jtag_tap_t *tap, u32 *ir_in, u32 ir_out, int ir_len, int rti);
+extern int mcu_write_dr_u32(jtag_tap_t *tap, u32 *ir_in, u32 ir_out, int dr_len, int rti);
+extern int mcu_execute_queue(void);
+
+flash_driver_t avr_flash =
+{
+	.name = "avr",
+	.register_commands = avrf_register_commands,
+	.flash_bank_command = avrf_flash_bank_command,
+	.erase = avrf_erase,
+	.protect = avrf_protect,
+	.write = avrf_write,
+	.probe = avrf_probe,
+	.auto_probe = avrf_auto_probe,
+	.erase_check = default_flash_mem_blank_check,
+	.protect_check = avrf_protect_check,
+	.info = avrf_info
+};
+
+/* avr program functions */
+static int avr_jtag_reset(avr_common_t *avr, u32 reset)
+{
+	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_AVR_RESET);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, reset ,AVR_JTAG_REG_Reset_Len);
+	
+	return ERROR_OK;
+}
+
+static int avr_jtag_read_jtagid(avr_common_t *avr, u32 *id)
+{
+	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_IDCODE);
+	avr_jtag_senddat(avr->jtag_info.tap, id, 0, AVR_JTAG_REG_JTAGID_Len);
+	
+	return ERROR_OK;
+}
+
+static int avr_jtagprg_enterprogmode(avr_common_t *avr)
+{
+	avr_jtag_reset(avr, 1);
+	
+	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_PROG_ENABLE);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0xA370, AVR_JTAG_REG_ProgrammingEnable_Len);
+	
+	return ERROR_OK;
+}
+
+static int avr_jtagprg_leaveprogmode(avr_common_t *avr)
+{
+	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_PROG_COMMANDS);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x2300, AVR_JTAG_REG_ProgrammingCommand_Len);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3300, AVR_JTAG_REG_ProgrammingCommand_Len);
+
+	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_PROG_ENABLE);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0, AVR_JTAG_REG_ProgrammingEnable_Len);
+
+	avr_jtag_reset(avr, 0);
+	
+	return ERROR_OK;
+}
+
+static int avr_jtagprg_chiperase(avr_common_t *avr)
+{
+	u32 poll_value;
+	
+	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_PROG_COMMANDS);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x2380, AVR_JTAG_REG_ProgrammingCommand_Len);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3180, AVR_JTAG_REG_ProgrammingCommand_Len);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3380, AVR_JTAG_REG_ProgrammingCommand_Len);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3380, AVR_JTAG_REG_ProgrammingCommand_Len);
+	
+	do{
+		poll_value = 0;
+		avr_jtag_senddat(avr->jtag_info.tap, &poll_value, 0x3380, AVR_JTAG_REG_ProgrammingCommand_Len);
+		if (ERROR_OK != mcu_execute_queue())
+		{
+			return ERROR_FAIL;
+		}
+		LOG_DEBUG("poll_value = 0x%04X", poll_value);
+	}while(!(poll_value & 0x0200));
+	
+	return ERROR_OK;
+}
+
+static int avr_jtagprg_writeflashpage(avr_common_t *avr, u8 *page_buf, u32 buf_size, u32 addr, u32 page_size)
+{
+	u32 i, poll_value;
+	
+	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_PROG_COMMANDS);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x2310, AVR_JTAG_REG_ProgrammingCommand_Len);
+	
+	// load addr high byte
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x0700 | ((addr >> 9) & 0xFF), AVR_JTAG_REG_ProgrammingCommand_Len);
+	
+	// load addr low byte
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x0300 | ((addr >> 1) & 0xFF), AVR_JTAG_REG_ProgrammingCommand_Len);
+	
+	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_PROG_PAGELOAD);
+	
+	for (i = 0; i < page_size; i++)
+	{
+		if (i < buf_size)
+		{
+			avr_jtag_senddat(avr->jtag_info.tap, NULL, page_buf[i], 8);
+		}
+		else
+		{
+			avr_jtag_senddat(avr->jtag_info.tap, NULL, 0xFF, 8);
+		}
+	}
+	
+	avr_jtag_sendinstr(avr->jtag_info.tap, NULL, AVR_JTAG_INS_PROG_COMMANDS);
+	
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3700, AVR_JTAG_REG_ProgrammingCommand_Len);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3500, AVR_JTAG_REG_ProgrammingCommand_Len);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3700, AVR_JTAG_REG_ProgrammingCommand_Len);
+	avr_jtag_senddat(avr->jtag_info.tap, NULL, 0x3700, AVR_JTAG_REG_ProgrammingCommand_Len);
+	
+	do{
+		poll_value = 0;
+		avr_jtag_senddat(avr->jtag_info.tap, &poll_value, 0x3700, AVR_JTAG_REG_ProgrammingCommand_Len);
+		if (ERROR_OK != mcu_execute_queue())
+		{
+			return ERROR_FAIL;
+		}
+		LOG_DEBUG("poll_value = 0x%04X", poll_value);
+	}while(!(poll_value & 0x0200));
+	
+	return ERROR_OK;
+}
+
+/* interface command */
+static int avrf_register_commands(struct command_context_s *cmd_ctx)
+{
+	command_t *avr_cmd = register_command(cmd_ctx, NULL, "avr", NULL, COMMAND_ANY, "avr flash specific commands");
+	
+	register_command(cmd_ctx, avr_cmd, "mass_erase", avrf_handle_mass_erase_command, COMMAND_EXEC,
+					 "mass erase device");
+	
+	return ERROR_OK;
+}
+
+static int avrf_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
+{
+	avrf_flash_bank_t *avrf_info;
+	
+	if (argc < 6)
+	{
+		LOG_WARNING("incomplete flash_bank avr configuration");
+		return ERROR_FLASH_BANK_INVALID;
+	}
+	
+	avrf_info = malloc(sizeof(avrf_flash_bank_t));
+	bank->driver_priv = avrf_info;
+	
+	avrf_info->probed = 0;
+	
+	return ERROR_OK;
+}
+
+static int avrf_erase(struct flash_bank_s *bank, int first, int last)
+{
+	LOG_INFO(__FUNCTION__);
+	return ERROR_OK;
+}
+
+static int avrf_protect(struct flash_bank_s *bank, int set, int first, int last)
+{
+	LOG_INFO(__FUNCTION__);
+	return ERROR_OK;
+}
+
+static int avrf_write(struct flash_bank_s *bank, u8 *buffer, u32 offset, u32 count)
+{
+	target_t *target = bank->target;
+	avr_common_t *avr = target->arch_info;
+	u32 cur_size, cur_buffer_size, page_size;
+	
+	if (bank->target->state != TARGET_HALTED)
+	{
+		LOG_ERROR("Target not halted");
+		return ERROR_TARGET_NOT_HALTED;
+	}
+	
+	page_size = bank->sectors[0].size;
+	if ((offset % page_size) != 0)
+	{
+		LOG_WARNING("offset 0x%x breaks required %d-byte alignment", offset, page_size);
+		return ERROR_FLASH_DST_BREAKS_ALIGNMENT;
+	}
+	
+	LOG_DEBUG("offset is 0x%08X", offset);
+	LOG_DEBUG("count is %d", count);
+	
+	if (ERROR_OK != avr_jtagprg_enterprogmode(avr))
+	{
+		return ERROR_FAIL;
+	}
+	
+	cur_size = 0;
+	while(count > 0)
+	{
+		if (count > page_size)
+		{
+			cur_buffer_size = page_size;
+		}
+		else
+		{
+			cur_buffer_size = count;
+		}
+		avr_jtagprg_writeflashpage(avr, buffer + cur_size, cur_buffer_size, offset + cur_size, page_size);
+		count -= cur_buffer_size;
+		cur_size += cur_buffer_size;
+		
+		keep_alive();
+	}
+	
+	return avr_jtagprg_leaveprogmode(avr);
+}
+
+#define EXTRACT_MFG(X)  (((X) & 0xffe) >> 1)
+#define EXTRACT_PART(X) (((X) & 0xffff000) >> 12)
+#define EXTRACT_VER(X)  (((X) & 0xf0000000) >> 28)
+static int avrf_probe(struct flash_bank_s *bank)
+{
+	target_t *target = bank->target;
+	avrf_flash_bank_t *avrf_info = bank->driver_priv;
+	avr_common_t *avr = target->arch_info;
+	avrf_type_t *avr_info = NULL;
+	int i;
+	u32 device_id;
+	
+	if (bank->target->state != TARGET_HALTED)
+	{
+		LOG_ERROR("Target not halted");
+		return ERROR_TARGET_NOT_HALTED;
+	}
+
+	avrf_info->probed = 0;
+	
+	avr_jtag_read_jtagid(avr, &device_id);
+	if (ERROR_OK != mcu_execute_queue())
+	{
+		return ERROR_FAIL;
+	}
+	
+	LOG_INFO( "device id = 0x%08x", device_id );
+	if (EXTRACT_MFG(device_id) != 0x1F)
+	{
+		LOG_ERROR("0x%X is invalid Manufacturer for avr, 0x%X is expected", EXTRACT_MFG(device_id), 0x1F);
+	}
+	
+	for (i = 0; i < (int)(sizeof(avft_chips_info) / sizeof(avft_chips_info[0])); i++)
+	{
+		if (avft_chips_info[i].chip_id == EXTRACT_PART(device_id))
+		{
+			avr_info = &avft_chips_info[i];
+			LOG_INFO("target device is %s", avr_info->name);
+			break;
+		}
+	}
+	
+	if (avr_info != NULL)
+	{
+		// chip found
+		bank->base = 0x00000000;
+		bank->size = (avr_info->flash_page_size * avr_info->flash_page_num);
+		bank->num_sectors = avr_info->flash_page_num;
+		bank->sectors = malloc(sizeof(flash_sector_t) * avr_info->flash_page_num);
+		
+		for (i = 0; i < avr_info->flash_page_num; i++)
+		{
+			bank->sectors[i].offset = i * avr_info->flash_page_size;
+			bank->sectors[i].size = avr_info->flash_page_size;
+			bank->sectors[i].is_erased = -1;
+			bank->sectors[i].is_protected = 1;
+		}
+		
+		avrf_info->probed = 1;
+		return ERROR_OK;
+	}
+	else
+	{
+		// chip not supported
+		LOG_ERROR("0x%X is not support for avr", EXTRACT_PART(device_id));
+		
+		avrf_info->probed = 1;
+		return ERROR_FAIL;
+	}
+}
+
+static int avrf_auto_probe(struct flash_bank_s *bank)
+{
+	avrf_flash_bank_t *avrf_info = bank->driver_priv;
+	if (avrf_info->probed)
+		return ERROR_OK;
+	return avrf_probe(bank);
+}
+
+static int avrf_protect_check(struct flash_bank_s *bank)
+{
+	LOG_INFO(__FUNCTION__);
+	return ERROR_OK;
+}
+
+static int avrf_info(struct flash_bank_s *bank, char *buf, int buf_size)
+{
+	target_t *target = bank->target;
+	avr_common_t *avr = target->arch_info;
+	avrf_type_t *avr_info = NULL;
+	int i;
+	u32 device_id;
+	
+	if (bank->target->state != TARGET_HALTED)
+	{
+		LOG_ERROR("Target not halted");
+		return ERROR_TARGET_NOT_HALTED;
+	}
+	
+	avr_jtag_read_jtagid(avr, &device_id);
+	if (ERROR_OK != mcu_execute_queue())
+	{
+		return ERROR_FAIL;
+	}
+	
+	LOG_INFO( "device id = 0x%08x", device_id );
+	if (EXTRACT_MFG(device_id) != 0x1F)
+	{
+		LOG_ERROR("0x%X is invalid Manufacturer for avr, 0x%X is expected", EXTRACT_MFG(device_id), 0x1F);
+	}
+	
+	for (i = 0; i < (int)(sizeof(avft_chips_info) / sizeof(avft_chips_info[0])); i++)
+	{
+		if (avft_chips_info[i].chip_id == EXTRACT_PART(device_id))
+		{
+			avr_info = &avft_chips_info[i];
+			LOG_INFO("target device is %s", avr_info->name);
+			
+			break;
+		}
+	}
+	
+	if (avr_info != NULL)
+	{
+		// chip found
+		snprintf(buf, buf_size, "%s - Rev: 0x%X", avr_info->name, EXTRACT_VER(device_id));
+		return ERROR_OK;
+	}
+	else
+	{
+		// chip not supported
+		snprintf(buf, buf_size, "Cannot identify target as a avr\n");
+		return ERROR_FLASH_OPERATION_FAILED;
+	}
+}
+
+static int avrf_mass_erase(struct flash_bank_s *bank)
+{
+	target_t *target = bank->target;
+	avr_common_t *avr = target->arch_info;
+	
+	if (target->state != TARGET_HALTED)
+	{
+		LOG_ERROR("Target not halted");
+		return ERROR_TARGET_NOT_HALTED;
+	}
+	
+	if ((ERROR_OK != avr_jtagprg_enterprogmode(avr))
+		|| (ERROR_OK != avr_jtagprg_chiperase(avr))
+		|| (ERROR_OK != avr_jtagprg_leaveprogmode(avr)))
+	{
+		return ERROR_FAIL;
+	}
+	
+	return ERROR_OK;
+}
+
+static int avrf_handle_mass_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+{
+	flash_bank_t *bank;
+	int i;
+	
+	if (argc < 1)
+	{
+		command_print(cmd_ctx, "avr mass_erase <bank>");
+		return ERROR_OK;	
+	}
+	
+	bank = get_flash_bank_by_num(strtoul(args[0], NULL, 0));
+	if (!bank)
+	{
+		command_print(cmd_ctx, "flash bank '#%s' is out of bounds", args[0]);
+		return ERROR_OK;
+	}
+	
+	if (avrf_mass_erase(bank) == ERROR_OK)
+	{
+		/* set all sectors as erased */
+		for (i = 0; i < bank->num_sectors; i++)
+		{
+			bank->sectors[i].is_erased = 1;
+		}
+		
+		command_print(cmd_ctx, "avr mass erase complete");
+	}
+	else
+	{
+		command_print(cmd_ctx, "avr mass erase failed");
+	}
+	
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}


Property changes on: trunk/src/flash/avrf.c
___________________________________________________________________
Name: svn:eol-style
   + native

Modified: trunk/src/flash/avrf.h
===================================================================
--- trunk/src/flash/avrf.h	2009-04-27 16:08:25 UTC (rev 1547)
+++ trunk/src/flash/avrf.h	2009-04-27 19:35:31 UTC (rev 1548)
@@ -1,39 +1,39 @@
-/***************************************************************************
- *   Copyright (C) 2009 by Simon Qian                                      *
- *   SimonQian at SimonQian.com                                               *
- *                                                                         *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- *                                                                         *
- *   This program is distributed in the hope that it will be useful,       *
- *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
- *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
- *   GNU General Public License for more details.                          *
- *                                                                         *
- *   You should have received a copy of the GNU General Public License     *
- *   along with this program; if not, write to the                         *
- *   Free Software Foundation, Inc.,                                       *
- *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
- ***************************************************************************/
-#ifndef AVRF_H
-#define AVRF_H
-
-typedef struct avrf_type_s
-{
-	char name[15];
-	u16 chip_id;
-	int flash_page_size;
-	int flash_page_num;
-	int eeprom_page_size;
-	int eeprom_page_num;
-} avrf_type_t;
-
-typedef struct avrf_flash_bank_s
-{
-	int ppage_size;
-	int probed;
-} avrf_flash_bank_t;
-
-#endif /* AVRF_H */
+/***************************************************************************
+ *   Copyright (C) 2009 by Simon Qian                                      *
+ *   SimonQian at SimonQian.com                                               *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   This program is distributed in the hope that it will be useful,       *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
+ *   GNU General Public License for more details.                          *
+ *                                                                         *
+ *   You should have received a copy of the GNU General Public License     *
+ *   along with this program; if not, write to the                         *
+ *   Free Software Foundation, Inc.,                                       *
+ *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
+ ***************************************************************************/
+#ifndef AVRF_H
+#define AVRF_H
+
+typedef struct avrf_type_s
+{
+	char name[15];
+	u16 chip_id;
+	int flash_page_size;
+	int flash_page_num;
+	int eeprom_page_size;
+	int eeprom_page_num;
+} avrf_type_t;
+
+typedef struct avrf_flash_bank_s
+{
+	int ppage_size;
+	int probed;
+} avrf_flash_bank_t;
+
+#endif /* AVRF_H */


Property changes on: trunk/src/flash/avrf.h
___________________________________________________________________
Name: svn:eol-style
   + native

Modified: trunk/src/target/avrt.c
===================================================================
--- trunk/src/target/avrt.c	2009-04-27 16:08:25 UTC (rev 1547)
+++ trunk/src/target/avrt.c	2009-04-27 19:35:31 UTC (rev 1548)
@@ -1,354 +1,354 @@
-/***************************************************************************
- *   Copyright (C) 2009 by Simon Qian                                      *
- *   SimonQian at SimonQian.com                                               *
- *                                                                         *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- *                                                                         *
- *   This program is distributed in the hope that it will be useful,       *
- *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
- *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
- *   GNU General Public License for more details.                          *
- *                                                                         *
- *   You should have received a copy of the GNU General Public License     *
- *   along with this program; if not, write to the                         *
- *   Free Software Foundation, Inc.,                                       *
- *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
- ***************************************************************************/
-#ifdef HAVE_CONFIG_H
-#include "config.h"
-#endif
-
-#include "replacements.h"
-
-#include "avrt.h"
-
-#include "register.h"
-#include "target.h"
-#include "log.h"
-#include "jtag.h"
-#include "binarybuffer.h"
-#include "time_support.h"
-#include "breakpoints.h"
-#include "fileio.h"
-
-#include <stdlib.h>
-#include <string.h>
-
-#include <sys/types.h>
-#include <unistd.h>
-#include <errno.h>
-
-#define AVR_JTAG_INS_LEN							4
-
-/* cli handling */
-int avr_register_commands(struct command_context_s *cmd_ctx);
-
-/* forward declarations */
-int avr_target_create(struct target_s *target, Jim_Interp *interp);
-int avr_init_target(struct command_context_s *cmd_ctx, struct target_s *target);
-int avr_quit(void);
-
-int avr_arch_state(struct target_s *target);
-int avr_poll(target_t *target);
-int avr_halt(target_t *target);
-int avr_resume(struct target_s *target, int current, u32 address, int handle_breakpoints, int debug_execution);
-int avr_step(struct target_s *target, int current, u32 address, int handle_breakpoints);
-
-int avr_assert_reset(target_t *target);
-int avr_deassert_reset(target_t *target);
-int avr_soft_reset_halt(struct target_s *target);
-
-/* IR and DR functions */
-int avr_jtag_sendinstr(jtag_tap_t *tap, u8 *ir_in, u8 ir_out);
-int avr_jtag_senddat(jtag_tap_t *tap, u32 *dr_in, u32 dr_out, int len);
-
-int mcu_write_ir(jtag_tap_t *tap, u8 *ir_in, u8 *ir_out, int ir_len, int rti);
-int mcu_write_dr(jtag_tap_t *tap, u8 *dr_in, u8 *dr_out, int dr_len, int rti);
-int mcu_write_ir_u8(jtag_tap_t *tap, u8 *ir_in, u8 ir_out, int ir_len, int rti);
-int mcu_write_dr_u8(jtag_tap_t *tap, u8 *ir_in, u8 ir_out, int dr_len, int rti);
-int mcu_write_ir_u16(jtag_tap_t *tap, u16 *ir_in, u16 ir_out, int ir_len, int rti);
-int mcu_write_dr_u16(jtag_tap_t *tap, u16 *ir_in, u16 ir_out, int dr_len, int rti);
-int mcu_write_ir_u32(jtag_tap_t *tap, u32 *ir_in, u32 ir_out, int ir_len, int rti);
-int mcu_write_dr_u32(jtag_tap_t *tap, u32 *ir_in, u32 ir_out, int dr_len, int rti);
-int mcu_execute_queue(void);
-
-target_type_t avr_target =
-{
-	.name = "avr",
-
-	.poll = avr_poll,
-	.arch_state = avr_arch_state,
-
-	.target_request_data = NULL,
-
-	.halt = avr_halt,
-	.resume = avr_resume,
-	.step = avr_step,
-
-	.assert_reset = avr_assert_reset,
-	.deassert_reset = avr_deassert_reset,
-	.soft_reset_halt = avr_soft_reset_halt,
-/*
-	.get_gdb_reg_list = avr_get_gdb_reg_list,
-
-	.read_memory = avr_read_memory,
-	.write_memory = avr_write_memory,
-	.bulk_write_memory = avr_bulk_write_memory,
-	.checksum_memory = avr_checksum_memory,
-	.blank_check_memory = avr_blank_check_memory,
-
-	.run_algorithm = avr_run_algorithm,
-
-	.add_breakpoint = avr_add_breakpoint,
-	.remove_breakpoint = avr_remove_breakpoint,
-	.add_watchpoint = avr_add_watchpoint,
-	.remove_watchpoint = avr_remove_watchpoint,
-*/
-	.register_commands = avr_register_commands,
-	.target_create = avr_target_create,
-	.init_target = avr_init_target,
-	.quit = avr_quit,
-/*
-	.virt2phys = avr_virt2phys,
-	.mmu = avr_mmu
-*/
-};
-
-int avr_register_commands(struct command_context_s *cmd_ctx)
-{
-	LOG_DEBUG(__FUNCTION__);
-	return ERROR_OK;
-}
-
-int avr_target_create(struct target_s *target, Jim_Interp *interp)
-{
-	avr_common_t *avr = calloc(1, sizeof(avr_common_t));
-	
-	avr->jtag_info.tap = target->tap;
-	target->arch_info = avr;
-	
-	return ERROR_OK;
-}
-
-int avr_init_target(struct command_context_s *cmd_ctx, struct target_s *target)
-{
-	LOG_DEBUG(__FUNCTION__);
-	return ERROR_OK;
-}
-
-int avr_quit(void)
-{
-	LOG_DEBUG(__FUNCTION__);
-	return ERROR_OK;
-}
-
-int avr_arch_state(struct target_s *target)
-{
-	LOG_DEBUG(__FUNCTION__);
-	return ERROR_OK;
-}
-
-int avr_poll(target_t *target)
-{
-	if ((target->state == TARGET_RUNNING) || (target->state == TARGET_DEBUG_RUNNING))
-	{
-		target->state = TARGET_HALTED;
-	}
-	
-	LOG_DEBUG(__FUNCTION__);
-	return ERROR_OK;
-}
-
-int avr_halt(target_t *target)
-{
-	LOG_DEBUG(__FUNCTION__);
-	return ERROR_OK;
-}
-
-int avr_resume(struct target_s *target, int current, u32 address, int handle_breakpoints, int debug_execution)
-{
-	LOG_DEBUG(__FUNCTION__);
-	return ERROR_OK;
-}
-
-int avr_step(struct target_s *target, int current, u32 address, int handle_breakpoints)
-{
-	LOG_DEBUG(__FUNCTION__);
-	return ERROR_OK;
-}
-
-int avr_assert_reset(target_t *target)
-{
-	target->state = TARGET_RESET;
-	
-	LOG_DEBUG(__FUNCTION__);
-	return ERROR_OK;
-}
-
-int avr_deassert_reset(target_t *target)
-{
-	target->state = TARGET_RUNNING;
-	
-	LOG_DEBUG(__FUNCTION__);
-	return ERROR_OK;
-}
-
-int avr_soft_reset_halt(struct target_s *target)
-{
-	LOG_DEBUG(__FUNCTION__);
-	return ERROR_OK;
-}
-
-int avr_jtag_senddat(jtag_tap_t *tap, u32* dr_in, u32 dr_out, int len)
-{
-	return mcu_write_dr_u32(tap, dr_in, dr_out, len, 1);
-}
-
-int avr_jtag_sendinstr(jtag_tap_t *tap, u8 *ir_in, u8 ir_out)
-{
-	return mcu_write_ir_u8(tap, ir_in, ir_out, AVR_JTAG_INS_LEN, 1);
-}
-
-/* IR and DR functions */
-int mcu_write_ir(jtag_tap_t *tap, u8 *ir_in, u8 *ir_out, int ir_len, int rti)
-{
-	if (NULL == tap)
-	{
-		LOG_ERROR("invalid tap");
-		return ERROR_FAIL;
-	}
-	if (ir_len != tap->ir_length)
-	{
-		LOG_ERROR("invalid ir_len");
-		return ERROR_FAIL;
-	}
-	
-	{
-		scan_field_t field[1];
-		
-		field[0].tap = tap;
-		field[0].num_bits = tap->ir_length;
-		field[0].out_value = ir_out;
-		field[0].out_mask = NULL;
-		field[0].in_value = ir_in;
-		field[0].in_check_value = NULL;
-		field[0].in_check_mask = NULL;
-		field[0].in_handler = NULL;
-		field[0].in_handler_priv = NULL;
-		jtag_add_plain_ir_scan(sizeof(field) / sizeof(field[0]), field, TAP_IDLE);
-	}
-	
-	return ERROR_OK;
-}
-
-int mcu_write_dr(jtag_tap_t *tap, u8 *dr_in, u8 *dr_out, int dr_len, int rti)
-{
-	if (NULL == tap)
-	{
-		LOG_ERROR("invalid tap");
-		return ERROR_FAIL;
-	}
-	
-	{
-		scan_field_t field[1];
-		
-		field[0].tap = tap;
-		field[0].num_bits = dr_len;
-		field[0].out_value = dr_out;
-		field[0].out_mask = NULL;
-		field[0].in_value = dr_in;
-		field[0].in_check_value = NULL;
-		field[0].in_check_mask = NULL;
-		field[0].in_handler = NULL;
-		field[0].in_handler_priv = NULL;
-		jtag_add_plain_dr_scan(sizeof(field) / sizeof(field[0]), field, TAP_IDLE);
-	}
-	
-	return ERROR_OK;
-}
-
-int mcu_write_ir_u8(jtag_tap_t *tap, u8 *ir_in, u8 ir_out, int ir_len, int rti)
-{
-	if (ir_len > 8)
-	{
-		LOG_ERROR("ir_len overflow, maxium is 8");
-		return ERROR_FAIL;
-	}
-	
-	mcu_write_ir(tap, ir_in, &ir_out, ir_len, rti);
-	
-	return ERROR_OK;
-}
-
-int mcu_write_dr_u8(jtag_tap_t *tap, u8 *dr_in, u8 dr_out, int dr_len, int rti)
-{
-	if (dr_len > 8)
-	{
-		LOG_ERROR("dr_len overflow, maxium is 8");
-		return ERROR_FAIL;
-	}
-	
-	mcu_write_dr(tap, dr_in, &dr_out, dr_len, rti);
-	
-	return ERROR_OK;
-}
-
-int mcu_write_ir_u16(jtag_tap_t *tap, u16 *ir_in, u16 ir_out, int ir_len, int rti)
-{
-	if (ir_len > 16)
-	{
-		LOG_ERROR("ir_len overflow, maxium is 16");
-		return ERROR_FAIL;
-	}
-	
-	mcu_write_ir(tap, (u8*)ir_in, (u8*)&ir_out, ir_len, rti);
-	
-	return ERROR_OK;
-}
-
-int mcu_write_dr_u16(jtag_tap_t *tap, u16 *dr_in, u16 dr_out, int dr_len, int rti)
-{
-	if (dr_len > 16)
-	{
-		LOG_ERROR("dr_len overflow, maxium is 16");
-		return ERROR_FAIL;
-	}
-	
-	mcu_write_dr(tap, (u8*)dr_in, (u8*)&dr_out, dr_len, rti);
-	
-	return ERROR_OK;
-}
-
-int mcu_write_ir_u32(jtag_tap_t *tap, u32 *ir_in, u32 ir_out, int ir_len, int rti)
-{
-	if (ir_len > 32)
-	{
-		LOG_ERROR("ir_len overflow, maxium is 32");
-		return ERROR_FAIL;
-	}
-	
-	mcu_write_ir(tap, (u8*)ir_in, (u8*)&ir_out, ir_len, rti);
-	
-	return ERROR_OK;
-}
-
-int mcu_write_dr_u32(jtag_tap_t *tap, u32 *dr_in, u32 dr_out, int dr_len, int rti)
-{
-	if (dr_len > 32)
-	{
-		LOG_ERROR("dr_len overflow, maxium is 32");
-		return ERROR_FAIL;
-	}
-	
-	mcu_write_dr(tap, (u8*)dr_in, (u8*)&dr_out, dr_len, rti);
-	
-	return ERROR_OK;
-}
-
-int mcu_execute_queue(void)
-{
-	return jtag_execute_queue();
-}
+/***************************************************************************
+ *   Copyright (C) 2009 by Simon Qian                                      *
+ *   SimonQian at SimonQian.com                                               *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   This program is distributed in the hope that it will be useful,       *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
+ *   GNU General Public License for more details.                          *
+ *                                                                         *
+ *   You should have received a copy of the GNU General Public License     *
+ *   along with this program; if not, write to the                         *
+ *   Free Software Foundation, Inc.,                                       *
+ *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
+ ***************************************************************************/
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include "replacements.h"
+
+#include "avrt.h"
+
+#include "register.h"
+#include "target.h"
+#include "log.h"
+#include "jtag.h"
+#include "binarybuffer.h"
+#include "time_support.h"
+#include "breakpoints.h"
+#include "fileio.h"
+
+#include <stdlib.h>
+#include <string.h>
+
+#include <sys/types.h>
+#include <unistd.h>
+#include <errno.h>
+
+#define AVR_JTAG_INS_LEN							4
+
+/* cli handling */
+int avr_register_commands(struct command_context_s *cmd_ctx);
+
+/* forward declarations */
+int avr_target_create(struct target_s *target, Jim_Interp *interp);
+int avr_init_target(struct command_context_s *cmd_ctx, struct target_s *target);
+int avr_quit(void);
+
+int avr_arch_state(struct target_s *target);
+int avr_poll(target_t *target);
+int avr_halt(target_t *target);
+int avr_resume(struct target_s *target, int current, u32 address, int handle_breakpoints, int debug_execution);
+int avr_step(struct target_s *target, int current, u32 address, int handle_breakpoints);
+
+int avr_assert_reset(target_t *target);
+int avr_deassert_reset(target_t *target);
+int avr_soft_reset_halt(struct target_s *target);
+
+/* IR and DR functions */
+int avr_jtag_sendinstr(jtag_tap_t *tap, u8 *ir_in, u8 ir_out);
+int avr_jtag_senddat(jtag_tap_t *tap, u32 *dr_in, u32 dr_out, int len);
+
+int mcu_write_ir(jtag_tap_t *tap, u8 *ir_in, u8 *ir_out, int ir_len, int rti);
+int mcu_write_dr(jtag_tap_t *tap, u8 *dr_in, u8 *dr_out, int dr_len, int rti);
+int mcu_write_ir_u8(jtag_tap_t *tap, u8 *ir_in, u8 ir_out, int ir_len, int rti);
+int mcu_write_dr_u8(jtag_tap_t *tap, u8 *ir_in, u8 ir_out, int dr_len, int rti);
+int mcu_write_ir_u16(jtag_tap_t *tap, u16 *ir_in, u16 ir_out, int ir_len, int rti);
+int mcu_write_dr_u16(jtag_tap_t *tap, u16 *ir_in, u16 ir_out, int dr_len, int rti);
+int mcu_write_ir_u32(jtag_tap_t *tap, u32 *ir_in, u32 ir_out, int ir_len, int rti);
+int mcu_write_dr_u32(jtag_tap_t *tap, u32 *ir_in, u32 ir_out, int dr_len, int rti);
+int mcu_execute_queue(void);
+
+target_type_t avr_target =
+{
+	.name = "avr",
+
+	.poll = avr_poll,
+	.arch_state = avr_arch_state,
+
+	.target_request_data = NULL,
+
+	.halt = avr_halt,
+	.resume = avr_resume,
+	.step = avr_step,
+
+	.assert_reset = avr_assert_reset,
+	.deassert_reset = avr_deassert_reset,
+	.soft_reset_halt = avr_soft_reset_halt,
+/*
+	.get_gdb_reg_list = avr_get_gdb_reg_list,
+
+	.read_memory = avr_read_memory,
+	.write_memory = avr_write_memory,
+	.bulk_write_memory = avr_bulk_write_memory,
+	.checksum_memory = avr_checksum_memory,
+	.blank_check_memory = avr_blank_check_memory,
+
+	.run_algorithm = avr_run_algorithm,
+
+	.add_breakpoint = avr_add_breakpoint,
+	.remove_breakpoint = avr_remove_breakpoint,
+	.add_watchpoint = avr_add_watchpoint,
+	.remove_watchpoint = avr_remove_watchpoint,
+*/
+	.register_commands = avr_register_commands,
+	.target_create = avr_target_create,
+	.init_target = avr_init_target,
+	.quit = avr_quit,
+/*
+	.virt2phys = avr_virt2phys,
+	.mmu = avr_mmu
+*/
+};
+
+int avr_register_commands(struct command_context_s *cmd_ctx)
+{
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}
+
+int avr_target_create(struct target_s *target, Jim_Interp *interp)
+{
+	avr_common_t *avr = calloc(1, sizeof(avr_common_t));
+	
+	avr->jtag_info.tap = target->tap;
+	target->arch_info = avr;
+	
+	return ERROR_OK;
+}
+
+int avr_init_target(struct command_context_s *cmd_ctx, struct target_s *target)
+{
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}
+
+int avr_quit(void)
+{
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}
+
+int avr_arch_state(struct target_s *target)
+{
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}
+
+int avr_poll(target_t *target)
+{
+	if ((target->state == TARGET_RUNNING) || (target->state == TARGET_DEBUG_RUNNING))
+	{
+		target->state = TARGET_HALTED;
+	}
+	
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}
+
+int avr_halt(target_t *target)
+{
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}
+
+int avr_resume(struct target_s *target, int current, u32 address, int handle_breakpoints, int debug_execution)
+{
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}
+
+int avr_step(struct target_s *target, int current, u32 address, int handle_breakpoints)
+{
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}
+
+int avr_assert_reset(target_t *target)
+{
+	target->state = TARGET_RESET;
+	
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}
+
+int avr_deassert_reset(target_t *target)
+{
+	target->state = TARGET_RUNNING;
+	
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}
+
+int avr_soft_reset_halt(struct target_s *target)
+{
+	LOG_DEBUG(__FUNCTION__);
+	return ERROR_OK;
+}
+
+int avr_jtag_senddat(jtag_tap_t *tap, u32* dr_in, u32 dr_out, int len)
+{
+	return mcu_write_dr_u32(tap, dr_in, dr_out, len, 1);
+}
+
+int avr_jtag_sendinstr(jtag_tap_t *tap, u8 *ir_in, u8 ir_out)
+{
+	return mcu_write_ir_u8(tap, ir_in, ir_out, AVR_JTAG_INS_LEN, 1);
+}
+
+/* IR and DR functions */
+int mcu_write_ir(jtag_tap_t *tap, u8 *ir_in, u8 *ir_out, int ir_len, int rti)
+{
+	if (NULL == tap)
+	{
+		LOG_ERROR("invalid tap");
+		return ERROR_FAIL;
+	}
+	if (ir_len != tap->ir_length)
+	{
+		LOG_ERROR("invalid ir_len");
+		return ERROR_FAIL;
+	}
+	
+	{
+		scan_field_t field[1];
+		
+		field[0].tap = tap;
+		field[0].num_bits = tap->ir_length;
+		field[0].out_value = ir_out;
+		field[0].out_mask = NULL;
+		field[0].in_value = ir_in;
+		field[0].in_check_value = NULL;
+		field[0].in_check_mask = NULL;
+		field[0].in_handler = NULL;
+		field[0].in_handler_priv = NULL;
+		jtag_add_plain_ir_scan(sizeof(field) / sizeof(field[0]), field, TAP_IDLE);
+	}
+	
+	return ERROR_OK;
+}
+
+int mcu_write_dr(jtag_tap_t *tap, u8 *dr_in, u8 *dr_out, int dr_len, int rti)
+{
+	if (NULL == tap)
+	{
+		LOG_ERROR("invalid tap");
+		return ERROR_FAIL;
+	}
+	
+	{
+		scan_field_t field[1];
+		
+		field[0].tap = tap;
+		field[0].num_bits = dr_len;
+		field[0].out_value = dr_out;
+		field[0].out_mask = NULL;
+		field[0].in_value = dr_in;
+		field[0].in_check_value = NULL;
+		field[0].in_check_mask = NULL;
+		field[0].in_handler = NULL;
+		field[0].in_handler_priv = NULL;
+		jtag_add_plain_dr_scan(sizeof(field) / sizeof(field[0]), field, TAP_IDLE);
+	}
+	
+	return ERROR_OK;
+}
+
+int mcu_write_ir_u8(jtag_tap_t *tap, u8 *ir_in, u8 ir_out, int ir_len, int rti)
+{
+	if (ir_len > 8)
+	{
+		LOG_ERROR("ir_len overflow, maxium is 8");
+		return ERROR_FAIL;
+	}
+	
+	mcu_write_ir(tap, ir_in, &ir_out, ir_len, rti);
+	
+	return ERROR_OK;
+}
+
+int mcu_write_dr_u8(jtag_tap_t *tap, u8 *dr_in, u8 dr_out, int dr_len, int rti)
+{
+	if (dr_len > 8)
+	{
+		LOG_ERROR("dr_len overflow, maxium is 8");
+		return ERROR_FAIL;
+	}
+	
+	mcu_write_dr(tap, dr_in, &dr_out, dr_len, rti);
+	
+	return ERROR_OK;
+}
+
+int mcu_write_ir_u16(jtag_tap_t *tap, u16 *ir_in, u16 ir_out, int ir_len, int rti)
+{
+	if (ir_len > 16)
+	{
+		LOG_ERROR("ir_len overflow, maxium is 16");
+		return ERROR_FAIL;
+	}
+	
+	mcu_write_ir(tap, (u8*)ir_in, (u8*)&ir_out, ir_len, rti);
+	
+	return ERROR_OK;
+}
+
+int mcu_write_dr_u16(jtag_tap_t *tap, u16 *dr_in, u16 dr_out, int dr_len, int rti)
+{
+	if (dr_len > 16)
+	{
+		LOG_ERROR("dr_len overflow, maxium is 16");
+		return ERROR_FAIL;
+	}
+	
+	mcu_write_dr(tap, (u8*)dr_in, (u8*)&dr_out, dr_len, rti);
+	
+	return ERROR_OK;
+}
+
+int mcu_write_ir_u32(jtag_tap_t *tap, u32 *ir_in, u32 ir_out, int ir_len, int rti)
+{
+	if (ir_len > 32)
+	{
+		LOG_ERROR("ir_len overflow, maxium is 32");
+		return ERROR_FAIL;
+	}
+	
+	mcu_write_ir(tap, (u8*)ir_in, (u8*)&ir_out, ir_len, rti);
+	
+	return ERROR_OK;
+}
+
+int mcu_write_dr_u32(jtag_tap_t *tap, u32 *dr_in, u32 dr_out, int dr_len, int rti)
+{
+	if (dr_len > 32)
+	{
+		LOG_ERROR("dr_len overflow, maxium is 32");
+		return ERROR_FAIL;
+	}
+	
+	mcu_write_dr(tap, (u8*)dr_in, (u8*)&dr_out, dr_len, rti);
+	
+	return ERROR_OK;
+}
+
+int mcu_execute_queue(void)
+{
+	return jtag_execute_queue();
+}


Property changes on: trunk/src/target/avrt.c
___________________________________________________________________
Name: svn:eol-style
   + native

Modified: trunk/src/target/avrt.h
===================================================================
--- trunk/src/target/avrt.h	2009-04-27 16:08:25 UTC (rev 1547)
+++ trunk/src/target/avrt.h	2009-04-27 19:35:31 UTC (rev 1548)
@@ -1,33 +1,33 @@
-/***************************************************************************
- *   Copyright (C) 2009 by Simon Qian                                      *
- *   SimonQian at SimonQian.com                                               *
- *                                                                         *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- *                                                                         *
- *   This program is distributed in the hope that it will be useful,       *
- *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
- *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
- *   GNU General Public License for more details.                          *
- *                                                                         *
- *   You should have received a copy of the GNU General Public License     *
- *   along with this program; if not, write to the                         *
- *   Free Software Foundation, Inc.,                                       *
- *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
- ***************************************************************************/
-#ifndef AVRT_H
-#define AVRT_H
-
-typedef struct mcu_jtag_s
-{
-	jtag_tap_t *tap;
-} mcu_jtag_t;
-
-typedef struct avr_common_s
-{
-	mcu_jtag_t jtag_info;
-} avr_common_t;
-
-#endif /* AVRT_H */
+/***************************************************************************
+ *   Copyright (C) 2009 by Simon Qian                                      *
+ *   SimonQian at SimonQian.com                                               *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   This program is distributed in the hope that it will be useful,       *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
+ *   GNU General Public License for more details.                          *
+ *                                                                         *
+ *   You should have received a copy of the GNU General Public License     *
+ *   along with this program; if not, write to the                         *
+ *   Free Software Foundation, Inc.,                                       *
+ *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
+ ***************************************************************************/
+#ifndef AVRT_H
+#define AVRT_H
+
+typedef struct mcu_jtag_s
+{
+	jtag_tap_t *tap;
+} mcu_jtag_t;
+
+typedef struct avr_common_s
+{
+	mcu_jtag_t jtag_info;
+} avr_common_t;
+
+#endif /* AVRT_H */


Property changes on: trunk/src/target/avrt.h
___________________________________________________________________
Name: svn:eol-style
   + native



From oharboe at mail.berlios.de  Tue Apr 28 08:28:40 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Tue, 28 Apr 2009 08:28:40 +0200
Subject: [Openocd-svn] r1549 - in trunk: src/jtag src/server/httpd
	src/target src/target/target
	testing/examples/SAM7X256Test/prj testing/examples/STM32-103
Message-ID: <200904280628.n3S6SeLs010358@sheep.berlios.de>

Author: oharboe
Date: 2009-04-28 08:28:39 +0200 (Tue, 28 Apr 2009)
New Revision: 1549

Modified:
   trunk/src/jtag/dummy.c
   trunk/src/server/httpd/Stylizer.java
   trunk/src/target/arm_adi_v5.c
   trunk/src/target/arm_adi_v5.h
   trunk/src/target/target/at91sam9260_ext_RAM_ext_flash.cfg
   trunk/src/target/target/mega128.cfg
   trunk/testing/examples/SAM7X256Test/prj/eclipse_ram.gdb
   trunk/testing/examples/SAM7X256Test/prj/eclipse_rom.gdb
   trunk/testing/examples/SAM7X256Test/prj/sam7x256_jtagkey.cfg
   trunk/testing/examples/SAM7X256Test/prj/sam7x256_ram.ld
   trunk/testing/examples/SAM7X256Test/prj/sam7x256_reset.script
   trunk/testing/examples/SAM7X256Test/prj/sam7x256_rom.ld
   trunk/testing/examples/STM32-103/readme.txt
Log:
eol-style native

Modified: trunk/src/jtag/dummy.c
===================================================================
--- trunk/src/jtag/dummy.c	2009-04-27 19:35:31 UTC (rev 1548)
+++ trunk/src/jtag/dummy.c	2009-04-28 06:28:39 UTC (rev 1549)
@@ -1,186 +1,186 @@
-/***************************************************************************
- *   Copyright (C) 2008 by ?yvind Harboe                                   *
- *   oyvind.harboe at zylin.com                                               *
- *                                                                         *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- *                                                                         *
- *   This program is distributed in the hope that it will be useful,       *
- *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
- *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
- *   GNU General Public License for more details.                          *
- *                                                                         *
- *   You should have received a copy of the GNU General Public License     *
- *   along with this program; if not, write to the                         *
- *   Free Software Foundation, Inc.,                                       *
- *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
- ***************************************************************************/
-#ifdef HAVE_CONFIG_H
-#include "config.h"
-#endif
-
-#include "replacements.h"
-
-#include "jtag.h"
-#include "bitbang.h"
-
-
-/* my private tap controller state, which tracks state for calling code */
-static tap_state_t dummy_state = TAP_RESET;
-
-static int dummy_clock;         /* edge detector */
-
-static int clock_count;         /* count clocks in any stable state, only stable states */
-
-static u32 dummy_data;
-
-
-static int dummy_speed(int speed);
-static int dummy_register_commands(struct command_context_s *cmd_ctx);
-static int dummy_init(void);
-static int dummy_quit(void);
-static int dummy_khz(int khz, int *jtag_speed);
-static int dummy_speed_div(int speed, int *khz);
-
-
-/* The dummy driver is used to easily check the code path
- * where the target is unresponsive.
- */
-jtag_interface_t dummy_interface =
-{
-	.name = "dummy",
-
-	.execute_queue = bitbang_execute_queue,
-
-	.speed = dummy_speed,
-	.register_commands = dummy_register_commands,
-	.khz = dummy_khz,
-	.speed_div = dummy_speed_div,
-
-	.init = dummy_init,
-	.quit = dummy_quit,
-};
-
-static int dummy_read(void);
-static void dummy_write(int tck, int tms, int tdi);
-static void dummy_reset(int trst, int srst);
-static void dummy_led(int on);
-
-static bitbang_interface_t dummy_bitbang =
-{
-	.read = dummy_read,
-	.write = dummy_write,
-	.reset = dummy_reset,
-	.blink = dummy_led
-};
-
-static int dummy_read(void)
-{
-	int data = 1 & dummy_data;
-	dummy_data = (dummy_data >> 1) | (1<<31);
-	return data;
-}
-
-
-static void dummy_write(int tck, int tms, int tdi)
-{
-	/* TAP standard: "state transitions occur on rising edge of clock" */
-	if( tck != dummy_clock )
-	{
-		if( tck )
-		{
-			tap_state_t old_state = dummy_state;
-			dummy_state = tap_state_transition( old_state, tms );
-
-			if( old_state != dummy_state )
-			{
-				if( clock_count )
-				{
-					LOG_DEBUG("dummy_tap: %d stable clocks", clock_count);
-					clock_count = 0;
-				}
-
-				LOG_DEBUG("dummy_tap: %s", tap_state_name(dummy_state) );
-
-#if defined(DEBUG)
-				if(dummy_state == TAP_DRCAPTURE)
-					dummy_data = 0x01255043;
-#endif
-			}
-			else
-			{
-				/* this is a stable state clock edge, no change of state here,
-				 * simply increment clock_count for subsequent logging
-				 */
-				++clock_count;
-			}
-		}
-		dummy_clock = tck;
-	}
-}
-
-static void dummy_reset(int trst, int srst)
-{
-	dummy_clock = 0;
-
-	if (trst || (srst && (jtag_reset_config & RESET_SRST_PULLS_TRST)))
-		dummy_state = TAP_RESET;
-
-	LOG_DEBUG("reset to: %s", tap_state_name(dummy_state) );
-}
-
-static int dummy_khz(int khz, int *jtag_speed)
-{
-	if (khz==0)
-	{
-		*jtag_speed=0;
-	}
-	else
-	{
-		*jtag_speed=64000/khz;
-	}
-	return ERROR_OK;
-}
-
-static int dummy_speed_div(int speed, int *khz)
-{
-	if (speed==0)
-	{
-		*khz = 0;
-	}
-	else
-	{
-		*khz=64000/speed;
-	}
-
-	return ERROR_OK;
-}
-
-static int dummy_speed(int speed)
-{
-	return ERROR_OK;
-}
-
-static int dummy_register_commands(struct command_context_s *cmd_ctx)
-{
-	return ERROR_OK;
-}
-
-static int dummy_init(void)
-{
-	bitbang_interface = &dummy_bitbang;
-
-	return ERROR_OK;
-}
-
-static int dummy_quit(void)
-{
-	return ERROR_OK;
-}
-
-static void dummy_led(int on)
-{
-}
-
+/***************************************************************************
+ *   Copyright (C) 2008 by ?yvind Harboe                                   *
+ *   oyvind.harboe at zylin.com                                               *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *                                                                         *
+ *   This program is distributed in the hope that it will be useful,       *
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
+ *   GNU General Public License for more details.                          *
+ *                                                                         *
+ *   You should have received a copy of the GNU General Public License     *
+ *   along with this program; if not, write to the                         *
+ *   Free Software Foundation, Inc.,                                       *
+ *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
+ ***************************************************************************/
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include "replacements.h"
+
+#include "jtag.h"
+#include "bitbang.h"
+
+
+/* my private tap controller state, which tracks state for calling code */
+static tap_state_t dummy_state = TAP_RESET;
+
+static int dummy_clock;         /* edge detector */
+
+static int clock_count;         /* count clocks in any stable state, only stable states */
+
+static u32 dummy_data;
+
+
+static int dummy_speed(int speed);
+static int dummy_register_commands(struct command_context_s *cmd_ctx);
+static int dummy_init(void);
+static int dummy_quit(void);
+static int dummy_khz(int khz, int *jtag_speed);
+static int dummy_speed_div(int speed, int *khz);
+
+
+/* The dummy driver is used to easily check the code path
+ * where the target is unresponsive.
+ */
+jtag_interface_t dummy_interface =
+{
+	.name = "dummy",
+
+	.execute_queue = bitbang_execute_queue,
+
+	.speed = dummy_speed,
+	.register_commands = dummy_register_commands,
+	.khz = dummy_khz,
+	.speed_div = dummy_speed_div,
+
+	.init = dummy_init,
+	.quit = dummy_quit,
+};
+
+static int dummy_read(void);
+static void dummy_write(int tck, int tms, int tdi);
+static void dummy_reset(int trst, int srst);
+static void dummy_led(int on);
+
+static bitbang_interface_t dummy_bitbang =
+{
+	.read = dummy_read,
+	.write = dummy_write,
+	.reset = dummy_reset,
+	.blink = dummy_led
+};
+
+static int dummy_read(void)
+{
+	int data = 1 & dummy_data;
+	dummy_data = (dummy_data >> 1) | (1<<31);
+	return data;
+}
+
+
+static void dummy_write(int tck, int tms, int tdi)
+{
+	/* TAP standard: "state transitions occur on rising edge of clock" */
+	if( tck != dummy_clock )
+	{
+		if( tck )
+		{
+			tap_state_t old_state = dummy_state;
+			dummy_state = tap_state_transition( old_state, tms );
+
+			if( old_state != dummy_state )
+			{
+				if( clock_count )
+				{
+					LOG_DEBUG("dummy_tap: %d stable clocks", clock_count);
+					clock_count = 0;
+				}
+
+				LOG_DEBUG("dummy_tap: %s", tap_state_name(dummy_state) );
+
+#if defined(DEBUG)
+				if(dummy_state == TAP_DRCAPTURE)
+					dummy_data = 0x01255043;
+#endif
+			}
+			else
+			{
+				/* this is a stable state clock edge, no change of state here,
+				 * simply increment clock_count for subsequent logging
+				 */
+				++clock_count;
+			}
+		}
+		dummy_clock = tck;
+	}
+}
+
+static void dummy_reset(int trst, int srst)
+{
+	dummy_clock = 0;
+
+	if (trst || (srst && (jtag_reset_config & RESET_SRST_PULLS_TRST)))
+		dummy_state = TAP_RESET;
+
+	LOG_DEBUG("reset to: %s", tap_state_name(dummy_state) );
+}
+
+static int dummy_khz(int khz, int *jtag_speed)
+{
+	if (khz==0)
+	{
+		*jtag_speed=0;
+	}
+	else
+	{
+		*jtag_speed=64000/khz;
+	}
+	return ERROR_OK;
+}
+
+static int dummy_speed_div(int speed, int *khz)
+{
+	if (speed==0)
+	{
+		*khz = 0;
+	}
+	else
+	{
+		*khz=64000/speed;
+	}
+
+	return ERROR_OK;
+}
+
+static int dummy_speed(int speed)
+{
+	return ERROR_OK;
+}
+
+static int dummy_register_commands(struct command_context_s *cmd_ctx)
+{
+	return ERROR_OK;
+}
+
+static int dummy_init(void)
+{
+	bitbang_interface = &dummy_bitbang;
+
+	return ERROR_OK;
+}
+
+static int dummy_quit(void)
+{
+	return ERROR_OK;
+}
+
+static void dummy_led(int on)
+{
+}
+


Property changes on: trunk/src/jtag/dummy.c
___________________________________________________________________
Name: svn:eol-style
   + native

Modified: trunk/src/server/httpd/Stylizer.java
===================================================================
--- trunk/src/server/httpd/Stylizer.java	2009-04-27 19:35:31 UTC (rev 1548)
+++ trunk/src/server/httpd/Stylizer.java	2009-04-28 06:28:39 UTC (rev 1549)
@@ -1,114 +1,114 @@
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.OutputStream;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-import javax.xml.transform.Transformer;
-import javax.xml.transform.TransformerConfigurationException;
-import javax.xml.transform.TransformerException;
-import javax.xml.transform.TransformerFactory;
-import javax.xml.transform.dom.DOMSource;
-import javax.xml.transform.stream.StreamResult;
-import javax.xml.transform.stream.StreamSource;
-
-import org.apache.xpath.XPathAPI;
-import org.w3c.dom.Document;
-import org.w3c.dom.Node;
-import org.w3c.dom.NodeList;
-import org.xml.sax.SAXException;
-
-/** used to generate .tcl files from */
-public class Stylizer
-{
-	// Global value so it can be ref'd by the tree-adapter
-	static Document document;
-	public static void main(String argv[])
-	{
-		if (argv.length != 3)
-		{
-			System.err.println("Usage: java Stylizer stylesheet xmlfile outputdir");
-			System.exit(1);
-		}
-		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-		try
-		{
-			System.err.println("Starting conversion...");
-			
-			File stylesheet = new File(argv[0]);
-			File datafile = new File(argv[1]);
-			DocumentBuilder builder = factory.newDocumentBuilder();
-			document = builder.parse(datafile);
-			
-			NodeList list = XPathAPI.selectNodeList(document, "website/language/page");
-
-			for (int i=0; i<list.getLength(); i++)
-			{
-				Node node=list.item(i);
-				
-				// Use a Transformer for output
-				TransformerFactory tFactory = TransformerFactory.newInstance();
-				StreamSource stylesource = new StreamSource(stylesheet);
-				Transformer transformer = tFactory.newTransformer(stylesource);
-				
-				Node fileName = XPathAPI.selectSingleNode(node, "outfile/text()");
-				
-				System.err.println("Converting " + fileName.getNodeValue());
-				DOMSource source = new DOMSource(document);
-				
-				OutputStream output=new FileOutputStream(new File(argv[2], fileName.getNodeValue()));
-				
-				
-				try
-				{
-					StreamResult result = new StreamResult(output);
-					
-					transformer.setParameter("pagetogenerate", fileName.getNodeValue());
-					transformer.transform(source, result);
-				} 
-				finally
-				{
-					output.close();
-				}
-			}
-		} catch (TransformerConfigurationException tce)
-		{
-			// Error generated by the parser
-			System.out.println("\n** Transformer Factory error");
-			System.out.println("   " + tce.getMessage());
-			// Use the contained exception, if any
-			Throwable x = tce;
-			if (tce.getException() != null)
-				x = tce.getException();
-			x.printStackTrace();
-		} catch (TransformerException te)
-		{
-			// Error generated by the parser
-			System.out.println("\n** Transformation error");
-			System.out.println("   " + te.getMessage());
-			// Use the contained exception, if any
-			Throwable x = te;
-			if (te.getException() != null)
-				x = te.getException();
-			x.printStackTrace();
-		} catch (SAXException sxe)
-		{
-			// Error generated by this application
-			// (or a parser-initialization error)
-			Exception x = sxe;
-			if (sxe.getException() != null)
-				x = sxe.getException();
-			x.printStackTrace();
-		} catch (ParserConfigurationException pce)
-		{
-			// Parser with specified options can't be built
-			pce.printStackTrace();
-		} catch (IOException ioe)
-		{
-			// I/O error
-			ioe.printStackTrace();
-		}
-	} // main
-}
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerConfigurationException;
+import javax.xml.transform.TransformerException;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
+import javax.xml.transform.stream.StreamSource;
+
+import org.apache.xpath.XPathAPI;
+import org.w3c.dom.Document;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+import org.xml.sax.SAXException;
+
+/** used to generate .tcl files from */
+public class Stylizer
+{
+	// Global value so it can be ref'd by the tree-adapter
+	static Document document;
+	public static void main(String argv[])
+	{
+		if (argv.length != 3)
+		{
+			System.err.println("Usage: java Stylizer stylesheet xmlfile outputdir");
+			System.exit(1);
+		}
+		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+		try
+		{
+			System.err.println("Starting conversion...");
+			
+			File stylesheet = new File(argv[0]);
+			File datafile = new File(argv[1]);
+			DocumentBuilder builder = factory.newDocumentBuilder();
+			document = builder.parse(datafile);
+			
+			NodeList list = XPathAPI.selectNodeList(document, "website/language/page");
+
+			for (int i=0; i<list.getLength(); i++)
+			{
+				Node node=list.item(i);
+				
+				// Use a Transformer for output
+				TransformerFactory tFactory = TransformerFactory.newInstance();
+				StreamSource stylesource = new StreamSource(stylesheet);
+				Transformer transformer = tFactory.newTransformer(stylesource);
+				
+				Node fileName = XPathAPI.selectSingleNode(node, "outfile/text()");
+				
+				System.err.println("Converting " + fileName.getNodeValue());
+				DOMSource source = new DOMSource(document);
+				
+				OutputStream output=new FileOutputStream(new File(argv[2], fileName.getNodeValue()));
+				
+				
+				try
+				{
+					StreamResult result = new StreamResult(output);
+					
+					transformer.setParameter("pagetogenerate", fileName.getNodeValue());
+					transformer.transform(source, result);
+				} 
+				finally
+				{
+					output.close();
+				}
+			}
+		} catch (TransformerConfigurationException tce)
+		{
+			// Error generated by the parser
+			System.out.println("\n** Transformer Factory error");
+			System.out.println("   " + tce.getMessage());
+			// Use the contained exception, if any
+			Throwable x = tce;
+			if (tce.getException() != null)
+				x = tce.getException();
+			x.printStackTrace();
+		} catch (TransformerException te)
+		{
+			// Error generated by the parser
+			System.out.println("\n** Transformation error");
+			System.out.println("   " + te.getMessage());
+			// Use the contained exception, if any
+			Throwable x = te;
+			if (te.getException() != null)
+				x = te.getException();
+			x.printStackTrace();
+		} catch (SAXException sxe)
+		{
+			// Error generated by this application
+			// (or a parser-initialization error)
+			Exception x = sxe;
+			if (sxe.getException() != null)
+				x = sxe.getException();
+			x.printStackTrace();
+		} catch (ParserConfigurationException pce)
+		{
+			// Parser with specified options can't be built
+			pce.printStackTrace();
+		} catch (IOException ioe)
+		{
+			// I/O error
+			ioe.printStackTrace();
+		}
+	} // main
+}


Property changes on: trunk/src/server/httpd/Stylizer.java
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: trunk/src/target/arm_adi_v5.c
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: trunk/src/target/arm_adi_v5.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: trunk/src/target/target/at91sam9260_ext_RAM_ext_flash.cfg
___________________________________________________________________
Name: svn:eol-style
   + native

Modified: trunk/src/target/target/mega128.cfg
===================================================================
--- trunk/src/target/target/mega128.cfg	2009-04-27 19:35:31 UTC (rev 1548)
+++ trunk/src/target/target/mega128.cfg	2009-04-28 06:28:39 UTC (rev 1549)
@@ -1,42 +1,42 @@
-# for avr
-
-   set  _CHIPNAME avr
-   set  _ENDIAN little
-
-# jtag speed
-jtag_khz 4500
-
-reset_config  srst_only
-jtag_nsrst_delay 100
-
-#jtag scan chain
-if { [info exists CPUTAPID ] } {
-   set _CPUTAPID $CPUTAPID
-} else {
-   set _CPUTAPID 0x8970203F
-}
-jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
-
-set _TARGETNAME [format "%s.cpu" $_CHIPNAME]
-target create $_TARGETNAME avr -endian $_ENDIAN -chain-position $_TARGETNAME
-
-#$_TARGETNAME configure -work-area-virt 0 -work-area-phys 0x20000000 -work-area-size 16384 -work-area-backup 0
-
-flash bank avr 0 0 0 0 0
-
-#to use it, script will be like:
-#init
-#jtag_khz 4500
-#reset init
-#verify_ircapture disable
-#
-#halt
-#wait halt
-#poll
-#avr mass_erase 0
-#flash write_image E:/Versaloon/Software/CAMERAPROTOCOLAGENT.hex
-#reset run
-#shutdown
-#
-# For more information about the configuration files, take a look at:
-# openocd.texi
+# for avr
+
+   set  _CHIPNAME avr
+   set  _ENDIAN little
+
+# jtag speed
+jtag_khz 4500
+
+reset_config  srst_only
+jtag_nsrst_delay 100
+
+#jtag scan chain
+if { [info exists CPUTAPID ] } {
+   set _CPUTAPID $CPUTAPID
+} else {
+   set _CPUTAPID 0x8970203F
+}
+jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+
+set _TARGETNAME [format "%s.cpu" $_CHIPNAME]
+target create $_TARGETNAME avr -endian $_ENDIAN -chain-position $_TARGETNAME
+
+#$_TARGETNAME configure -work-area-virt 0 -work-area-phys 0x20000000 -work-area-size 16384 -work-area-backup 0
+
+flash bank avr 0 0 0 0 0
+
+#to use it, script will be like:
+#init
+#jtag_khz 4500
+#reset init
+#verify_ircapture disable
+#
+#halt
+#wait halt
+#poll
+#avr mass_erase 0
+#flash write_image E:/Versaloon/Software/CAMERAPROTOCOLAGENT.hex
+#reset run
+#shutdown
+#
+# For more information about the configuration files, take a look at:
+# openocd.texi


Property changes on: trunk/src/target/target/mega128.cfg
___________________________________________________________________
Name: svn:eol-style
   + native

Modified: trunk/testing/examples/SAM7X256Test/prj/eclipse_ram.gdb
===================================================================
--- trunk/testing/examples/SAM7X256Test/prj/eclipse_ram.gdb	2009-04-27 19:35:31 UTC (rev 1548)
+++ trunk/testing/examples/SAM7X256Test/prj/eclipse_ram.gdb	2009-04-28 06:28:39 UTC (rev 1549)
@@ -1,32 +1,32 @@
-target remote localhost:3333
-monitor reset
-monitor sleep 500
-monitor poll
-monitor soft_reset_halt
-monitor arm7_9 sw_bkpts enable
-
-# WDT_MR, disable watchdog 
-monitor mww 0xFFFFFD44 0x00008000
-
-# RSTC_MR, enable user reset
-monitor mww 0xfffffd08 0xa5000001
-
-# CKGR_MOR
-monitor mww 0xFFFFFC20 0x00000601
-monitor sleep 10
-
-# CKGR_PLLR
-monitor mww 0xFFFFFC2C 0x00481c0e
-monitor sleep 10
-
-# PMC_MCKR
-monitor mww 0xFFFFFC30 0x00000007
-monitor sleep 10
-
-# PMC_IER
-monitor mww 0xFFFFFF60 0x00480100
-monitor sleep 100
-
-load
-break main
-continue
+target remote localhost:3333
+monitor reset
+monitor sleep 500
+monitor poll
+monitor soft_reset_halt
+monitor arm7_9 sw_bkpts enable
+
+# WDT_MR, disable watchdog 
+monitor mww 0xFFFFFD44 0x00008000
+
+# RSTC_MR, enable user reset
+monitor mww 0xfffffd08 0xa5000001
+
+# CKGR_MOR
+monitor mww 0xFFFFFC20 0x00000601
+monitor sleep 10
+
+# CKGR_PLLR
+monitor mww 0xFFFFFC2C 0x00481c0e
+monitor sleep 10
+
+# PMC_MCKR
+monitor mww 0xFFFFFC30 0x00000007
+monitor sleep 10
+
+# PMC_IER
+monitor mww 0xFFFFFF60 0x00480100
+monitor sleep 100
+
+load
+break main
+continue


Property changes on: trunk/testing/examples/SAM7X256Test/prj/eclipse_ram.gdb
___________________________________________________________________
Name: svn:eol-style
   + native

Modified: trunk/testing/examples/SAM7X256Test/prj/eclipse_rom.gdb
===================================================================
--- trunk/testing/examples/SAM7X256Test/prj/eclipse_rom.gdb	2009-04-27 19:35:31 UTC (rev 1548)
+++ trunk/testing/examples/SAM7X256Test/prj/eclipse_rom.gdb	2009-04-28 06:28:39 UTC (rev 1549)
@@ -1,32 +1,32 @@
-target remote localhost:3333
-monitor reset
-monitor sleep 500
-monitor poll
-monitor soft_reset_halt
-monitor arm7_9 force_hw_bkpts enable
-
-# WDT_MR, disable watchdog 
-monitor mww 0xFFFFFD44 0x00008000
-
-# RSTC_MR, enable user reset
-monitor mww 0xfffffd08 0xa5000001
-
-# CKGR_MOR
-monitor mww 0xFFFFFC20 0x00000601
-monitor sleep 10
-
-# CKGR_PLLR
-monitor mww 0xFFFFFC2C 0x00481c0e
-monitor sleep 10
-
-# PMC_MCKR
-monitor mww 0xFFFFFC30 0x00000007
-monitor sleep 10
-
-# PMC_IER
-monitor mww 0xFFFFFF60 0x00480100
-monitor sleep 100
-
-load
-break main
-continue
+target remote localhost:3333
+monitor reset
+monitor sleep 500
+monitor poll
+monitor soft_reset_halt
+monitor arm7_9 force_hw_bkpts enable
+
+# WDT_MR, disable watchdog 
+monitor mww 0xFFFFFD44 0x00008000
+
+# RSTC_MR, enable user reset
+monitor mww 0xfffffd08 0xa5000001
+
+# CKGR_MOR
+monitor mww 0xFFFFFC20 0x00000601
+monitor sleep 10
+
+# CKGR_PLLR
+monitor mww 0xFFFFFC2C 0x00481c0e
+monitor sleep 10
+
+# PMC_MCKR
+monitor mww 0xFFFFFC30 0x00000007
+monitor sleep 10
+
+# PMC_IER
+monitor mww 0xFFFFFF60 0x00480100
+monitor sleep 100
+
+load
+break main
+continue


Property changes on: trunk/testing/examples/SAM7X256Test/prj/eclipse_rom.gdb
___________________________________________________________________
Name: svn:eol-style
   + native

Modified: trunk/testing/examples/SAM7X256Test/prj/sam7x256_jtagkey.cfg
===================================================================
--- trunk/testing/examples/SAM7X256Test/prj/sam7x256_jtagkey.cfg	2009-04-27 19:35:31 UTC (rev 1548)
+++ trunk/testing/examples/SAM7X256Test/prj/sam7x256_jtagkey.cfg	2009-04-28 06:28:39 UTC (rev 1549)
@@ -1,40 +1,40 @@
-#daemon configuration
-telnet_port 4444
-gdb_port 3333
-
-# tell gdb our flash memory map
-# and enable flash programming
-gdb_memory_map enable
-gdb_flash_program enable
-
-#interface
-interface ft2232
-ft2232_device_desc "Amontec JTAGkey A"
-ft2232_layout jtagkey
-ft2232_vid_pid 0x0403 0xcff8
-jtag_speed 0
-jtag_nsrst_delay 200
-jtag_ntrst_delay 200
-
-
-#use combined on interfaces or targets that can't set TRST/SRST separately
-reset_config srst_only srst_pulls_trst
-
-#jtag scan chain
-#format L IRC IRCM IDCODE (Length, IR Capture, IR Capture Mask, IDCODE)
-jtag_device 4 0x1 0xf 0xe
-
-#target configuration
-target create target0 arm7tdmi -endian little -chain-position 0 -variant arm7tdmi
-[new_target_name] configure -work-area-virt 0 -work-area-phys 0x00200000 -work-area-size 0x4000 -work-area-backup false
-
-target_script 0 reset .\prj\sam7x256_reset.script
-
-#flash bank <driver> <base> <size> <chip_width> <bus_width>
-flash bank at91sam7 0 0 0 0 0
-
-# For more information about the configuration files, take a look at:
-# http://openfacts.berlios.de/index-en.phtml?title=Open+On-Chip+Debugger
-
-init
-reset halt
+#daemon configuration
+telnet_port 4444
+gdb_port 3333
+
+# tell gdb our flash memory map
+# and enable flash programming
+gdb_memory_map enable
+gdb_flash_program enable
+
+#interface
+interface ft2232
+ft2232_device_desc "Amontec JTAGkey A"
+ft2232_layout jtagkey
+ft2232_vid_pid 0x0403 0xcff8
+jtag_speed 0
+jtag_nsrst_delay 200
+jtag_ntrst_delay 200
+
+
+#use combined on interfaces or targets that can't set TRST/SRST separately
+reset_config srst_only srst_pulls_trst
+
+#jtag scan chain
+#format L IRC IRCM IDCODE (Length, IR Capture, IR Capture Mask, IDCODE)
+jtag_device 4 0x1 0xf 0xe
+
+#target configuration
+target create target0 arm7tdmi -endian little -chain-position 0 -variant arm7tdmi
+[new_target_name] configure -work-area-virt 0 -work-area-phys 0x00200000 -work-area-size 0x4000 -work-area-backup false
+
+target_script 0 reset .\prj\sam7x256_reset.script
+
+#flash bank <driver> <base> <size> <chip_width> <bus_width>
+flash bank at91sam7 0 0 0 0 0
+
+# For more information about the configuration files, take a look at:
+# http://openfacts.berlios.de/index-en.phtml?title=Open+On-Chip+Debugger
+
+init
+reset halt


Property changes on: trunk/testing/examples/SAM7X256Test/prj/sam7x256_jtagkey.cfg
___________________________________________________________________
Name: svn:eol-style
   + native

Modified: trunk/testing/examples/SAM7X256Test/prj/sam7x256_ram.ld
===================================================================
--- trunk/testing/examples/SAM7X256Test/prj/sam7x256_ram.ld	2009-04-27 19:35:31 UTC (rev 1548)
+++ trunk/testing/examples/SAM7X256Test/prj/sam7x256_ram.ld	2009-04-28 06:28:39 UTC (rev 1549)
@@ -1,132 +1,132 @@
-/****************************************************************************
-*  Copyright (c) 2006 by Michael Fischer. All rights reserved.
-*
-*  Redistribution and use in source and binary forms, with or without 
-*  modification, are permitted provided that the following conditions 
-*  are met:
-*  
-*  1. Redistributions of source code must retain the above copyright 
-*     notice, this list of conditions and the following disclaimer.
-*  2. Redistributions in binary form must reproduce the above copyright
-*     notice, this list of conditions and the following disclaimer in the 
-*     documentation and/or other materials provided with the distribution.
-*  3. Neither the name of the author nor the names of its contributors may 
-*     be used to endorse or promote products derived from this software 
-*     without specific prior written permission.
-*
-*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
-*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
-*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
-*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
-*  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
-*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
-*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS 
-*  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
-*  AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
-*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF 
-*  THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
-*  SUCH DAMAGE.
-*
-****************************************************************************
-*
-*  History:
-*
-*  30.03.06  mifi   First Version
-****************************************************************************/
-
-
-ENTRY(ResetHandler)
-SEARCH_DIR(.)
-
-/*
- * Define stack size here
- */
-FIQ_STACK_SIZE = 0x0100;
-IRQ_STACK_SIZE = 0x0100;
-ABT_STACK_SIZE = 0x0100;
-UND_STACK_SIZE = 0x0100;
-SVC_STACK_SIZE = 0x0400;
-
-
-MEMORY
-{
-  ram : org = 0x00200000, len = 64k
-}
-
-/*
- * Do not change the next code
- */
-SECTIONS
-{
-  .text :
-  {
-    *(.vectors);
-    . = ALIGN(4);
-    *(.init);
-    . = ALIGN(4);
-    *(.text);
-    . = ALIGN(4);
-    *(.rodata);
-    . = ALIGN(4);
-    *(.rodata*);
-    . = ALIGN(4);
-    *(.glue_7t);
-    . = ALIGN(4);
-    *(.glue_7);
-    . = ALIGN(4);
-    etext = .;
-  } > ram
-
-  .data :
-  {
-    PROVIDE (__data_start = .);
-    *(.data)
-    . = ALIGN(4);
-    edata = .;
-    _edata = .;
-    PROVIDE (__data_end = .);
-  } > ram
-
-  .bss :
-  {
-    PROVIDE (__bss_start = .);
-    *(.bss)
-    *(COMMON)
-    . = ALIGN(4);
-    PROVIDE (__bss_end = .);
-    
-    . = ALIGN(256);
-    
-    PROVIDE (__stack_start = .);
-    
-    PROVIDE (__stack_fiq_start = .);
-    . += FIQ_STACK_SIZE;
-    . = ALIGN(4);
-    PROVIDE (__stack_fiq_end = .);
-
-    PROVIDE (__stack_irq_start = .);
-    . += IRQ_STACK_SIZE;
-    . = ALIGN(4);
-    PROVIDE (__stack_irq_end = .);
-
-    PROVIDE (__stack_abt_start = .);
-    . += ABT_STACK_SIZE;
-    . = ALIGN(4);
-    PROVIDE (__stack_abt_end = .);
-
-    PROVIDE (__stack_und_start = .);
-    . += UND_STACK_SIZE;
-    . = ALIGN(4);
-    PROVIDE (__stack_und_end = .);
-
-    PROVIDE (__stack_svc_start = .);
-    . += SVC_STACK_SIZE;
-    . = ALIGN(4);
-    PROVIDE (__stack_svc_end = .);
-    PROVIDE (__stack_end = .);
-    PROVIDE (__heap_start = .);   
-  } > ram
-    
-}
-/*** EOF ***/
-
+/****************************************************************************
+*  Copyright (c) 2006 by Michael Fischer. All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without 
+*  modification, are permitted provided that the following conditions 
+*  are met:
+*  
+*  1. Redistributions of source code must retain the above copyright 
+*     notice, this list of conditions and the following disclaimer.
+*  2. Redistributions in binary form must reproduce the above copyright
+*     notice, this list of conditions and the following disclaimer in the 
+*     documentation and/or other materials provided with the distribution.
+*  3. Neither the name of the author nor the names of its contributors may 
+*     be used to endorse or promote products derived from this software 
+*     without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
+*  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS 
+*  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
+*  AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
+*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF 
+*  THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
+*  SUCH DAMAGE.
+*
+****************************************************************************
+*
+*  History:
+*
+*  30.03.06  mifi   First Version
+****************************************************************************/
+
+
+ENTRY(ResetHandler)
+SEARCH_DIR(.)
+
+/*
+ * Define stack size here
+ */
+FIQ_STACK_SIZE = 0x0100;
+IRQ_STACK_SIZE = 0x0100;
+ABT_STACK_SIZE = 0x0100;
+UND_STACK_SIZE = 0x0100;
+SVC_STACK_SIZE = 0x0400;
+
+
+MEMORY
+{
+  ram : org = 0x00200000, len = 64k
+}
+
+/*
+ * Do not change the next code
+ */
+SECTIONS
+{
+  .text :
+  {
+    *(.vectors);
+    . = ALIGN(4);
+    *(.init);
+    . = ALIGN(4);
+    *(.text);
+    . = ALIGN(4);
+    *(.rodata);
+    . = ALIGN(4);
+    *(.rodata*);
+    . = ALIGN(4);
+    *(.glue_7t);
+    . = ALIGN(4);
+    *(.glue_7);
+    . = ALIGN(4);
+    etext = .;
+  } > ram
+
+  .data :
+  {
+    PROVIDE (__data_start = .);
+    *(.data)
+    . = ALIGN(4);
+    edata = .;
+    _edata = .;
+    PROVIDE (__data_end = .);
+  } > ram
+
+  .bss :
+  {
+    PROVIDE (__bss_start = .);
+    *(.bss)
+    *(COMMON)
+    . = ALIGN(4);
+    PROVIDE (__bss_end = .);
+    
+    . = ALIGN(256);
+    
+    PROVIDE (__stack_start = .);
+    
+    PROVIDE (__stack_fiq_start = .);
+    . += FIQ_STACK_SIZE;
+    . = ALIGN(4);
+    PROVIDE (__stack_fiq_end = .);
+
+    PROVIDE (__stack_irq_start = .);
+    . += IRQ_STACK_SIZE;
+    . = ALIGN(4);
+    PROVIDE (__stack_irq_end = .);
+
+    PROVIDE (__stack_abt_start = .);
+    . += ABT_STACK_SIZE;
+    . = ALIGN(4);
+    PROVIDE (__stack_abt_end = .);
+
+    PROVIDE (__stack_und_start = .);
+    . += UND_STACK_SIZE;
+    . = ALIGN(4);
+    PROVIDE (__stack_und_end = .);
+
+    PROVIDE (__stack_svc_start = .);
+    . += SVC_STACK_SIZE;
+    . = ALIGN(4);
+    PROVIDE (__stack_svc_end = .);
+    PROVIDE (__stack_end = .);
+    PROVIDE (__heap_start = .);   
+  } > ram
+    
+}
+/*** EOF ***/
+


Property changes on: trunk/testing/examples/SAM7X256Test/prj/sam7x256_ram.ld
___________________________________________________________________
Name: svn:eol-style
   + native

Modified: trunk/testing/examples/SAM7X256Test/prj/sam7x256_reset.script
===================================================================
--- trunk/testing/examples/SAM7X256Test/prj/sam7x256_reset.script	2009-04-27 19:35:31 UTC (rev 1548)
+++ trunk/testing/examples/SAM7X256Test/prj/sam7x256_reset.script	2009-04-28 06:28:39 UTC (rev 1549)
@@ -1,17 +1,17 @@
-#
-# Init - taken form the script openocd_at91sam7_ecr.script 
-#
-# I take this script from the following page:
-#
-# http://www.siwawi.arubi.uni-kl.de/avr_projects/arm_projects/openocd_intro/index.html
-#
-mww 0xfffffd44 0x00008000	# disable watchdog
-mww 0xfffffd08 0xa5000001	# enable user reset
-mww 0xfffffc20 0x00000601	# CKGR_MOR : enable the main oscillator
-sleep 10
-mww 0xfffffc2c 0x00481c0e 	# CKGR_PLLR: 96.1097 MHz
-sleep 10
-mww 0xfffffc30 0x00000007	# PMC_MCKR : MCK = PLL / 2 ~= 48 MHz
-sleep 10
-mww 0xffffff60 0x003c0100	# MC_FMR: flash mode (FWS=1,FMCN=60)
-sleep 100
+#
+# Init - taken form the script openocd_at91sam7_ecr.script 
+#
+# I take this script from the following page:
+#
+# http://www.siwawi.arubi.uni-kl.de/avr_projects/arm_projects/openocd_intro/index.html
+#
+mww 0xfffffd44 0x00008000	# disable watchdog
+mww 0xfffffd08 0xa5000001	# enable user reset
+mww 0xfffffc20 0x00000601	# CKGR_MOR : enable the main oscillator
+sleep 10
+mww 0xfffffc2c 0x00481c0e 	# CKGR_PLLR: 96.1097 MHz
+sleep 10
+mww 0xfffffc30 0x00000007	# PMC_MCKR : MCK = PLL / 2 ~= 48 MHz
+sleep 10
+mww 0xffffff60 0x003c0100	# MC_FMR: flash mode (FWS=1,FMCN=60)
+sleep 100


Property changes on: trunk/testing/examples/SAM7X256Test/prj/sam7x256_reset.script
___________________________________________________________________
Name: svn:eol-style
   + native

Modified: trunk/testing/examples/SAM7X256Test/prj/sam7x256_rom.ld
===================================================================
--- trunk/testing/examples/SAM7X256Test/prj/sam7x256_rom.ld	2009-04-27 19:35:31 UTC (rev 1548)
+++ trunk/testing/examples/SAM7X256Test/prj/sam7x256_rom.ld	2009-04-28 06:28:39 UTC (rev 1549)
@@ -1,133 +1,133 @@
-/****************************************************************************
-*  Copyright (c) 2006 by Michael Fischer. All rights reserved.
-*
-*  Redistribution and use in source and binary forms, with or without 
-*  modification, are permitted provided that the following conditions 
-*  are met:
-*  
-*  1. Redistributions of source code must retain the above copyright 
-*     notice, this list of conditions and the following disclaimer.
-*  2. Redistributions in binary form must reproduce the above copyright
-*     notice, this list of conditions and the following disclaimer in the 
-*     documentation and/or other materials provided with the distribution.
-*  3. Neither the name of the author nor the names of its contributors may 
-*     be used to endorse or promote products derived from this software 
-*     without specific prior written permission.
-*
-*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
-*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
-*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
-*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
-*  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
-*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
-*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS 
-*  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
-*  AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
-*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF 
-*  THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
-*  SUCH DAMAGE.
-*
-****************************************************************************
-*
-*  History:
-*
-*  26.01.08  mifi   First Version
-****************************************************************************/
-
-
-ENTRY(ResetHandler)
-SEARCH_DIR(.)
-
-/*
- * Define stack size here
- */
-FIQ_STACK_SIZE = 0x0100;
-IRQ_STACK_SIZE = 0x0100;
-ABT_STACK_SIZE = 0x0100;
-UND_STACK_SIZE = 0x0100;
-SVC_STACK_SIZE = 0x0400;
-
-
-MEMORY
-{
-  rom : org = 0x00100000, len = 256k
-  ram : org = 0x00200000, len = 64k
-}
-
-/*
- * Do not change the next code
- */
-SECTIONS
-{
-  .text :
-  {
-    *(.vectors);
-    . = ALIGN(4);
-    *(.init);
-    . = ALIGN(4);
-    *(.text);
-    . = ALIGN(4);
-    *(.rodata);
-    . = ALIGN(4);
-    *(.rodata*);
-    . = ALIGN(4);
-    *(.glue_7t);
-    . = ALIGN(4);
-    *(.glue_7);
-    . = ALIGN(4);
-    etext = .;
-  } > rom
-
-  .data :
-  {
-    PROVIDE (__data_start = .);
-    *(.data)
-    . = ALIGN(4);
-    edata = .;
-    _edata = .;
-    PROVIDE (__data_end = .);
-  } > ram
-
-  .bss :
-  {
-    PROVIDE (__bss_start = .);
-    *(.bss)
-    *(COMMON)
-    . = ALIGN(4);
-    PROVIDE (__bss_end = .);
-    
-    . = ALIGN(256);
-    
-    PROVIDE (__stack_start = .);
-    
-    PROVIDE (__stack_fiq_start = .);
-    . += FIQ_STACK_SIZE;
-    . = ALIGN(4);
-    PROVIDE (__stack_fiq_end = .);
-
-    PROVIDE (__stack_irq_start = .);
-    . += IRQ_STACK_SIZE;
-    . = ALIGN(4);
-    PROVIDE (__stack_irq_end = .);
-
-    PROVIDE (__stack_abt_start = .);
-    . += ABT_STACK_SIZE;
-    . = ALIGN(4);
-    PROVIDE (__stack_abt_end = .);
-
-    PROVIDE (__stack_und_start = .);
-    . += UND_STACK_SIZE;
-    . = ALIGN(4);
-    PROVIDE (__stack_und_end = .);
-
-    PROVIDE (__stack_svc_start = .);
-    . += SVC_STACK_SIZE;
-    . = ALIGN(4);
-    PROVIDE (__stack_svc_end = .);
-    PROVIDE (__stack_end = .);
-    PROVIDE (__heap_start = .);   
-  } > ram
-    
-}
-/*** EOF ***/
-
+/****************************************************************************
+*  Copyright (c) 2006 by Michael Fischer. All rights reserved.
+*
+*  Redistribution and use in source and binary forms, with or without 
+*  modification, are permitted provided that the following conditions 
+*  are met:
+*  
+*  1. Redistributions of source code must retain the above copyright 
+*     notice, this list of conditions and the following disclaimer.
+*  2. Redistributions in binary form must reproduce the above copyright
+*     notice, this list of conditions and the following disclaimer in the 
+*     documentation and/or other materials provided with the distribution.
+*  3. Neither the name of the author nor the names of its contributors may 
+*     be used to endorse or promote products derived from this software 
+*     without specific prior written permission.
+*
+*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
+*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
+*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
+*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
+*  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
+*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
+*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS 
+*  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
+*  AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
+*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF 
+*  THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
+*  SUCH DAMAGE.
+*
+****************************************************************************
+*
+*  History:
+*
+*  26.01.08  mifi   First Version
+****************************************************************************/
+
+
+ENTRY(ResetHandler)
+SEARCH_DIR(.)
+
+/*
+ * Define stack size here
+ */
+FIQ_STACK_SIZE = 0x0100;
+IRQ_STACK_SIZE = 0x0100;
+ABT_STACK_SIZE = 0x0100;
+UND_STACK_SIZE = 0x0100;
+SVC_STACK_SIZE = 0x0400;
+
+
+MEMORY
+{
+  rom : org = 0x00100000, len = 256k
+  ram : org = 0x00200000, len = 64k
+}
+
+/*
+ * Do not change the next code
+ */
+SECTIONS
+{
+  .text :
+  {
+    *(.vectors);
+    . = ALIGN(4);
+    *(.init);
+    . = ALIGN(4);
+    *(.text);
+    . = ALIGN(4);
+    *(.rodata);
+    . = ALIGN(4);
+    *(.rodata*);
+    . = ALIGN(4);
+    *(.glue_7t);
+    . = ALIGN(4);
+    *(.glue_7);
+    . = ALIGN(4);
+    etext = .;
+  } > rom
+
+  .data :
+  {
+    PROVIDE (__data_start = .);
+    *(.data)
+    . = ALIGN(4);
+    edata = .;
+    _edata = .;
+    PROVIDE (__data_end = .);
+  } > ram
+
+  .bss :
+  {
+    PROVIDE (__bss_start = .);
+    *(.bss)
+    *(COMMON)
+    . = ALIGN(4);
+    PROVIDE (__bss_end = .);
+    
+    . = ALIGN(256);
+    
+    PROVIDE (__stack_start = .);
+    
+    PROVIDE (__stack_fiq_start = .);
+    . += FIQ_STACK_SIZE;
+    . = ALIGN(4);
+    PROVIDE (__stack_fiq_end = .);
+
+    PROVIDE (__stack_irq_start = .);
+    . += IRQ_STACK_SIZE;
+    . = ALIGN(4);
+    PROVIDE (__stack_irq_end = .);
+
+    PROVIDE (__stack_abt_start = .);
+    . += ABT_STACK_SIZE;
+    . = ALIGN(4);
+    PROVIDE (__stack_abt_end = .);
+
+    PROVIDE (__stack_und_start = .);
+    . += UND_STACK_SIZE;
+    . = ALIGN(4);
+    PROVIDE (__stack_und_end = .);
+
+    PROVIDE (__stack_svc_start = .);
+    . += SVC_STACK_SIZE;
+    . = ALIGN(4);
+    PROVIDE (__stack_svc_end = .);
+    PROVIDE (__stack_end = .);
+    PROVIDE (__heap_start = .);   
+  } > ram
+    
+}
+/*** EOF ***/
+


Property changes on: trunk/testing/examples/SAM7X256Test/prj/sam7x256_rom.ld
___________________________________________________________________
Name: svn:eol-style
   + native

Modified: trunk/testing/examples/STM32-103/readme.txt
===================================================================
--- trunk/testing/examples/STM32-103/readme.txt	2009-04-27 19:35:31 UTC (rev 1548)
+++ trunk/testing/examples/STM32-103/readme.txt	2009-04-28 06:28:39 UTC (rev 1549)
@@ -1,6 +1,6 @@
-Olimex STM32-p103 board.
-
-main.elf is a file that can be programmed to flash for
-testing purposes(e.g. test GDB load performance).
-
+Olimex STM32-p103 board.
+
+main.elf is a file that can be programmed to flash for
+testing purposes(e.g. test GDB load performance).
+
 http://www.olimex.com/dev/stm32-p103.html
\ No newline at end of file


Property changes on: trunk/testing/examples/STM32-103/readme.txt
___________________________________________________________________
Name: svn:eol-style
   + native



From oharboe at mail.berlios.de  Tue Apr 28 08:29:32 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Tue, 28 Apr 2009 08:29:32 +0200
Subject: [Openocd-svn] r1550 - in trunk: . contrib
Message-ID: <200904280629.n3S6TWAR010401@sheep.berlios.de>

Author: oharboe
Date: 2009-04-28 08:29:32 +0200 (Tue, 28 Apr 2009)
New Revision: 1550

Modified:
   trunk/PATCHES
   trunk/contrib/openocd.udev
Log:
eol-style native

Modified: trunk/PATCHES
===================================================================
--- trunk/PATCHES	2009-04-28 06:28:39 UTC (rev 1549)
+++ trunk/PATCHES	2009-04-28 06:29:32 UTC (rev 1550)
@@ -1,28 +1,28 @@
-Please mail patches to:
-
-openocd-development at lists.berlios.de
-
-The patch should be against svn trunk using an SVN
-diff. 
-
-Attach the patch to the email as a .txt file and
-also write a short change log entry that maintainers
-can copy and paste into the commit message
-
-Add yourself to the GPL copyright for non-trivial changes.
-
-To create a patch from the command line:
- 
-svn diff >mypatch.txt
-
-http://svnbook.red-bean.com/en/1.0/re09.html
-
-NB! remember to use "svn add" on new files first!
-
-http://svnbook.red-bean.com/en/1.0/re01.html
-
-
-
-If you have a decent SVN GUI, then that should be
-able to create and apply patches as well...
+Please mail patches to:
+
+openocd-development at lists.berlios.de
+
+The patch should be against svn trunk using an SVN
+diff. 
+
+Attach the patch to the email as a .txt file and
+also write a short change log entry that maintainers
+can copy and paste into the commit message
+
+Add yourself to the GPL copyright for non-trivial changes.
+
+To create a patch from the command line:
+ 
+svn diff >mypatch.txt
+
+http://svnbook.red-bean.com/en/1.0/re09.html
+
+NB! remember to use "svn add" on new files first!
+
+http://svnbook.red-bean.com/en/1.0/re01.html
+
+
+
+If you have a decent SVN GUI, then that should be
+able to create and apply patches as well...
  
\ No newline at end of file


Property changes on: trunk/PATCHES
___________________________________________________________________
Name: svn:eol-style
   + native

Modified: trunk/contrib/openocd.udev
===================================================================
--- trunk/contrib/openocd.udev	2009-04-28 06:28:39 UTC (rev 1549)
+++ trunk/contrib/openocd.udev	2009-04-28 06:29:32 UTC (rev 1550)
@@ -1,56 +1,56 @@
-BUS!="usb", ACTION!="add", SUBSYSTEM!=="usb_device", GOTO="openocd_rules_end"
-
-# Olimex ARM-USB-OCD
-SYSFS{idVendor}=="15ba", SYSFS{idProduct}=="0003", MODE="664", GROUP="plugdev"
-
-# Olimex ARM-USB-OCD-TINY
-SYSFS{idVendor}=="15ba", SYSFS{idProduct}=="0004", MODE="664", GROUP="plugdev"
-
-# Olimex ARM-JTAG-EW
-SYSFS{idVendor}=="15ba", SYSFS{idProduct}=="001e", MODE="664", GROUP="plugdev"
-
-# USBprog with OpenOCD firmware
-SYSFS{idVendor}=="1781", SYSFS{idProduct}=="0c63", MODE="664", GROUP="plugdev"
-
-# Amontec JTAGkey and JTAGkey-tiny
-SYSFS{idVendor}=="0403", SYSFS{idProduct}=="cff8", MODE="664", GROUP="plugdev"
-
-# Amontec JTAGkey-HiSpeed
-SYSFS{idVendor}=="0fbb", SYSFS{idProduct}=="1000", MODE="664", GROUP="plugdev"
-
-# Axiom AXM-0432 Link (Symphony SoundBite?)
-# Calao Systems USB-A9260-C01
-# TinCanTools Flyswatter
-# OOCD-Link
-# Marvell Sheevaplug (early development versions)
-SYSFS{idVendor}=="0403", SYSFS{idProduct}=="6010", MODE="664", GROUP="plugdev"
-
-# Calao Systems USB-A9260-C02
-SYSFS{idVendor}=="0403", SYSFS{idProduct}=="6001", MODE="664", GROUP="plugdev"
-
-# IAR J-Link USB
-SYSFS{idVendor}=="1366", SYSFS{idProduct}=="0101", MODE="664", GROUP="plugdev"
-
-# Raisonance RLink
-SYSFS{idVendor}=="138e", SYSFS{idProduct}=="9000", MODE="664", GROUP="plugdev"
-
-# Hitex STR9-comStick
-SYSFS{idVendor}=="0640", SYSFS{idProduct}=="002c", MODE="664", GROUP="plugdev"
-
-# Hitex STM32-PerformanceStick
-SYSFS{idVendor}=="0640", SYSFS{idProduct}=="002d", MODE="664", GROUP="plugdev"
-
-# Luminary Micro Stellaris/LM3S811
-SYSFS{idVendor}=="0403", SYSFS{idProduct}=="bcd9", MODE="664", GROUP="plugdev"
-
-# Xverve Signalyzer Tool (DT-USB-ST)
-SYSFS{idVendor}=="0403", SYSFS{idProduct}=="bca0", MODE="664", GROUP="plugdev"
-
-# egnite Turtelizer 2
-SYSFS{idVendor}=="0403", SYSFS{idProduct}=="bdc8", MODE="664", GROUP="plugdev"
-
-# Marvell Sheevaplug
-SYSFS{idVendor}=="9e88", SYSFS{idProduct}=="9e8f", MODE="664", GROUP="plugdev"
-
-LABEL="openocd_rules_end"
-
+BUS!="usb", ACTION!="add", SUBSYSTEM!=="usb_device", GOTO="openocd_rules_end"
+
+# Olimex ARM-USB-OCD
+SYSFS{idVendor}=="15ba", SYSFS{idProduct}=="0003", MODE="664", GROUP="plugdev"
+
+# Olimex ARM-USB-OCD-TINY
+SYSFS{idVendor}=="15ba", SYSFS{idProduct}=="0004", MODE="664", GROUP="plugdev"
+
+# Olimex ARM-JTAG-EW
+SYSFS{idVendor}=="15ba", SYSFS{idProduct}=="001e", MODE="664", GROUP="plugdev"
+
+# USBprog with OpenOCD firmware
+SYSFS{idVendor}=="1781", SYSFS{idProduct}=="0c63", MODE="664", GROUP="plugdev"
+
+# Amontec JTAGkey and JTAGkey-tiny
+SYSFS{idVendor}=="0403", SYSFS{idProduct}=="cff8", MODE="664", GROUP="plugdev"
+
+# Amontec JTAGkey-HiSpeed
+SYSFS{idVendor}=="0fbb", SYSFS{idProduct}=="1000", MODE="664", GROUP="plugdev"
+
+# Axiom AXM-0432 Link (Symphony SoundBite?)
+# Calao Systems USB-A9260-C01
+# TinCanTools Flyswatter
+# OOCD-Link
+# Marvell Sheevaplug (early development versions)
+SYSFS{idVendor}=="0403", SYSFS{idProduct}=="6010", MODE="664", GROUP="plugdev"
+
+# Calao Systems USB-A9260-C02
+SYSFS{idVendor}=="0403", SYSFS{idProduct}=="6001", MODE="664", GROUP="plugdev"
+
+# IAR J-Link USB
+SYSFS{idVendor}=="1366", SYSFS{idProduct}=="0101", MODE="664", GROUP="plugdev"
+
+# Raisonance RLink
+SYSFS{idVendor}=="138e", SYSFS{idProduct}=="9000", MODE="664", GROUP="plugdev"
+
+# Hitex STR9-comStick
+SYSFS{idVendor}=="0640", SYSFS{idProduct}=="002c", MODE="664", GROUP="plugdev"
+
+# Hitex STM32-PerformanceStick
+SYSFS{idVendor}=="0640", SYSFS{idProduct}=="002d", MODE="664", GROUP="plugdev"
+
+# Luminary Micro Stellaris/LM3S811
+SYSFS{idVendor}=="0403", SYSFS{idProduct}=="bcd9", MODE="664", GROUP="plugdev"
+
+# Xverve Signalyzer Tool (DT-USB-ST)
+SYSFS{idVendor}=="0403", SYSFS{idProduct}=="bca0", MODE="664", GROUP="plugdev"
+
+# egnite Turtelizer 2
+SYSFS{idVendor}=="0403", SYSFS{idProduct}=="bdc8", MODE="664", GROUP="plugdev"
+
+# Marvell Sheevaplug
+SYSFS{idVendor}=="9e88", SYSFS{idProduct}=="9e8f", MODE="664", GROUP="plugdev"
+
+LABEL="openocd_rules_end"
+


Property changes on: trunk/contrib/openocd.udev
___________________________________________________________________
Name: svn:eol-style
   + native



From oharboe at mail.berlios.de  Tue Apr 28 09:29:18 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Tue, 28 Apr 2009 09:29:18 +0200
Subject: [Openocd-svn] r1551 - trunk/src/target
Message-ID: <200904280729.n3S7TIBw014851@sheep.berlios.de>

Author: oharboe
Date: 2009-04-28 09:29:18 +0200 (Tue, 28 Apr 2009)
New Revision: 1551

Modified:
   trunk/src/target/arm11.c
   trunk/src/target/arm11.h
   trunk/src/target/arm11_dbgtap.c
Log:
Michael Bruck <mbruck at digenius.de> macros for error handling

Modified: trunk/src/target/arm11.c
===================================================================
--- trunk/src/target/arm11.c	2009-04-28 06:29:32 UTC (rev 1550)
+++ trunk/src/target/arm11.c	2009-04-28 07:29:18 UTC (rev 1551)
@@ -316,15 +316,14 @@
 int arm11_check_init(arm11_common_t * arm11, u32 * dscr)
 {
 	FNC_INFO;
-	int retval;
 
 	u32			dscr_local_tmp_copy;
 
 	if (!dscr)
 	{
 		dscr = &dscr_local_tmp_copy;
-		if ((retval=arm11_read_DSCR(arm11, dscr))!=ERROR_OK)
-			return retval;
+		
+		CHECK_RETVAL(arm11_read_DSCR(arm11, dscr));
 	}
 
 	if (!(*dscr & ARM11_DSCR_MODE_SELECT))
@@ -382,9 +381,7 @@
 	}}
 
 	/* Save DSCR */
-	int retval;
-	if ((retval=arm11_read_DSCR(arm11, &R(DSCR)))!=ERROR_OK)
-		return retval;
+	CHECK_RETVAL(arm11_read_DSCR(arm11, &R(DSCR)));
 
 	/* Save wDTR */
 
@@ -586,12 +583,9 @@
 	   otherwise our programming would be sloppy */
 	{
 		u32 DSCR;
-		int retval;
-		if ((retval=arm11_read_DSCR(arm11, &DSCR))!=ERROR_OK)
-		{
-			return retval;
-		}
 
+		CHECK_RETVAL(arm11_read_DSCR(arm11, &DSCR));
+
 		if (DSCR & (ARM11_DSCR_RDTR_FULL | ARM11_DSCR_WDTR_FULL))
 		{
 			LOG_ERROR("wDTR/rDTR inconsistent (DSCR %08x)", DSCR);
@@ -679,14 +673,12 @@
 		return ERROR_OK;
 
 	u32	dscr;
-	int retval;
-	if ((retval=arm11_read_DSCR(arm11, &dscr))!=ERROR_OK)
-		return retval;
+	
+	CHECK_RETVAL(arm11_read_DSCR(arm11, &dscr));
 
 	LOG_DEBUG("DSCR %08x", dscr);
 
-	if ((retval=arm11_check_init(arm11, &dscr))!=ERROR_OK)
-		return retval;
+	CHECK_RETVAL(arm11_check_init(arm11, &dscr));
 
 	if (dscr & ARM11_DSCR_CORE_HALTED)
 	{
@@ -739,8 +731,6 @@
 /* target execution control */
 int arm11_halt(struct target_s *target)
 {
-	int retval = ERROR_OK;
-
 	FNC_INFO;
 
 	arm11_common_t * arm11 = target->arch_info;
@@ -767,19 +757,13 @@
 
 	arm11_add_IR(arm11, ARM11_HALT, TAP_IDLE);
 
-	if((retval = jtag_execute_queue()) != ERROR_OK)
-	{
-		return retval;
-	}
+	CHECK_RETVAL(jtag_execute_queue());
 
 	u32 dscr;
 
 	while (1)
 	{
-		int retval;
-		retval = arm11_read_DSCR(arm11, &dscr);
-		if (retval!=ERROR_OK)
-			return retval;
+		CHECK_RETVAL(arm11_read_DSCR(arm11, &dscr));
 
 		if (dscr & ARM11_DSCR_CORE_HALTED)
 			break;
@@ -792,19 +776,15 @@
 	target->state		= TARGET_HALTED;
 	target->debug_reason	= arm11_get_DSCR_debug_reason(dscr);
 
-	if((retval = target_call_event_callbacks(target,
-		old_state == TARGET_DEBUG_RUNNING ? TARGET_EVENT_DEBUG_HALTED : TARGET_EVENT_HALTED)) != ERROR_OK)
-	{
-		return retval;
-	}
+	CHECK_RETVAL(
+		target_call_event_callbacks(target,
+			old_state == TARGET_DEBUG_RUNNING ? TARGET_EVENT_DEBUG_HALTED : TARGET_EVENT_HALTED));
 
 	return ERROR_OK;
 }
 
 int arm11_resume(struct target_s *target, int current, u32 address, int handle_breakpoints, int debug_execution)
 {
-	int retval = ERROR_OK;
-
 	FNC_INFO;
 
 	//	  LOG_DEBUG("current %d  address %08x  handle_breakpoints %d  debug_execution %d",
@@ -876,17 +856,13 @@
 
 	arm11_add_IR(arm11, ARM11_RESTART, TAP_IDLE);
 
-	if((retval = jtag_execute_queue()) != ERROR_OK)
-	{
-		return retval;
-	}
+	CHECK_RETVAL(jtag_execute_queue());
 
 	while (1)
 	{
 		u32 dscr;
-		retval = arm11_read_DSCR(arm11, &dscr);
-		if (retval!=ERROR_OK)
-			return retval;
+	
+		CHECK_RETVAL(arm11_read_DSCR(arm11, &dscr));
 
 		LOG_DEBUG("DSCR %08x", dscr);
 
@@ -899,19 +875,14 @@
 		target->state			= TARGET_RUNNING;
 		target->debug_reason	= DBG_REASON_NOTHALTED;
 
-		if((retval = target_call_event_callbacks(target, TARGET_EVENT_RESUMED)) != ERROR_OK)
-		{
-			return retval;
-		}
+		CHECK_RETVAL(target_call_event_callbacks(target, TARGET_EVENT_RESUMED));
 	}
 	else
 	{
 		target->state			= TARGET_DEBUG_RUNNING;
 		target->debug_reason	= DBG_REASON_NOTHALTED;
-		if((retval = target_call_event_callbacks(target, TARGET_EVENT_RESUMED)) != ERROR_OK)
-		{
-			return retval;
-		}
+
+		CHECK_RETVAL(target_call_event_callbacks(target, TARGET_EVENT_RESUMED));
 	}
 
 	return ERROR_OK;
@@ -919,8 +890,6 @@
 
 int arm11_step(struct target_s *target, int current, u32 address, int handle_breakpoints)
 {
-	int retval = ERROR_OK;
-
 	FNC_INFO;
 
 	LOG_DEBUG("target->state: %s",
@@ -943,8 +912,7 @@
 
 	u32	next_instruction;
 
-	if ((arm11_read_memory_word(arm11, R(PC), &next_instruction))!=ERROR_OK)
-		return retval;
+	CHECK_RETVAL(arm11_read_memory_word(arm11, R(PC), &next_instruction));
 
 	/* skip over BKPT */
 	if ((next_instruction & 0xFFF00070) == 0xe1200070)
@@ -988,8 +956,7 @@
 		brp[1].address	= ARM11_SC7_BCR0;
 		brp[1].value	= 0x1 | (3 << 1) | (0x0F << 5) | (0 << 14) | (0 << 16) | (0 << 20) | (2 << 21);
 
-		if ((retval=arm11_sc7_run(arm11, brp, asizeof(brp)))!=ERROR_OK)
-			return retval;
+		CHECK_RETVAL(arm11_sc7_run(arm11, brp, asizeof(brp)));
 
 		/* resume */
 
@@ -1000,15 +967,11 @@
 			R(DSCR) |= ARM11_DSCR_INTERRUPTS_DISABLE;
 
 
-		if ((retval=arm11_leave_debug_state(arm11))!=ERROR_OK)
-			return retval;
+		CHECK_RETVAL(arm11_leave_debug_state(arm11));
 
 		arm11_add_IR(arm11, ARM11_RESTART, TAP_IDLE);
 
-		if((retval = jtag_execute_queue()) != ERROR_OK)
-		{
-			return retval;
-		}
+		CHECK_RETVAL(jtag_execute_queue());
 
 		/** \todo TODO: add a timeout */
 
@@ -1017,10 +980,9 @@
 		while (1)
 		{
 			u32 dscr;
-			retval = arm11_read_DSCR(arm11, &dscr);
-			if (retval!=ERROR_OK)
-				return retval;
 
+			CHECK_RETVAL(arm11_read_DSCR(arm11, &dscr));
+
 			LOG_DEBUG("DSCR %08x", dscr);
 
 			if ((dscr & (ARM11_DSCR_CORE_RESTARTED | ARM11_DSCR_CORE_HALTED)) ==
@@ -1032,8 +994,7 @@
 		arm11_sc7_clear_vbw(arm11);
 
 		/* save state */
-		if((retval = arm11_on_enter_debug_state(arm11))!=ERROR_OK)
-			return retval;
+		CHECK_RETVAL(arm11_on_enter_debug_state(arm11));
 
 	    /* restore default state */
 		R(DSCR) &= ~ARM11_DSCR_INTERRUPTS_DISABLE;
@@ -1043,10 +1004,7 @@
 	//	  target->state		= TARGET_HALTED;
 	target->debug_reason	= DBG_REASON_SINGLESTEP;
 
-	if((retval = target_call_event_callbacks(target, TARGET_EVENT_HALTED)) != ERROR_OK)
-	{
-		return retval;
-	}
+	CHECK_RETVAL(target_call_event_callbacks(target, TARGET_EVENT_HALTED));
 
 	return ERROR_OK;
 }
@@ -1069,9 +1027,7 @@
 
 	if (target->reset_halt)
 	{
-		int retval;
-		if ((retval = target_halt(target))!=ERROR_OK)
-			return retval;
+		CHECK_RETVAL(target_halt(target));
 	}
 
 	return ERROR_OK;
@@ -1511,25 +1467,18 @@
 	}
 
 	// no debug, otherwise breakpoint is not set
-	if((retval = target_resume(target, 0, entry_point, 1, 0)) != ERROR_OK)
-	{
-		return retval;
-	}
+	CHECK_RETVAL(target_resume(target, 0, entry_point, 1, 0));
 
-	if((retval = target_wait_state(target, TARGET_HALTED, timeout_ms)) != ERROR_OK)
-	{
-		return retval;
-	}
+	CHECK_RETVAL(target_wait_state(target, TARGET_HALTED, timeout_ms));
 
 	if (target->state != TARGET_HALTED)
 	{
-		if ((retval=target_halt(target))!=ERROR_OK)
-			return retval;
-		if ((retval=target_wait_state(target, TARGET_HALTED, 500))!=ERROR_OK)
-		{
-			return retval;
-		}
+		CHECK_RETVAL(target_halt(target));
+
+		CHECK_RETVAL(target_wait_state(target, TARGET_HALTED, 500));
+
 		retval = ERROR_TARGET_TIMEOUT;
+
 		goto del_breakpoint;
 	}
 
@@ -1590,7 +1539,6 @@
 
 int arm11_target_create(struct target_s *target, Jim_Interp *interp)
 {
-	int retval = ERROR_OK;
 	FNC_INFO;
 
 	NEW(arm11_common_t, arm11, 1);
@@ -1601,10 +1549,7 @@
 	arm11->jtag_info.tap	= target->tap;
 	arm11->jtag_info.scann_size	= 5;
 
-	if((retval = arm_jtag_setup_connection(&arm11->jtag_info)) != ERROR_OK)
-	{
-		return retval;
-	}
+	CHECK_RETVAL(arm_jtag_setup_connection(&arm11->jtag_info));
 
 	if (target->tap==NULL)
 		return ERROR_FAIL;
@@ -1630,7 +1575,6 @@
 int arm11_examine(struct target_s *target)
 {
 	FNC_INFO;
-	int retval;
 
 	arm11_common_t * arm11 = target->arch_info;
 
@@ -1657,10 +1601,8 @@
 
 	arm11_add_dr_scan_vc(asizeof(chain0_fields), chain0_fields, TAP_IDLE);
 
-	if ((retval=jtag_execute_queue())!=ERROR_OK)
-		return retval;
+	CHECK_RETVAL(jtag_execute_queue());
 
-
 	switch (arm11->device_id & 0x0FFFF000)
 	{
 	case 0x07B36000:	LOG_INFO("found ARM1136"); break;

Modified: trunk/src/target/arm11.h
===================================================================
--- trunk/src/target/arm11.h	2009-04-28 06:29:32 UTC (rev 1550)
+++ trunk/src/target/arm11.h	2009-04-28 07:29:18 UTC (rev 1551)
@@ -51,6 +51,16 @@
 #define ARM11_TAP_DEFAULT			TAP_INVALID
 
 
+#define CHECK_RETVAL(action)								\
+do {														\
+	int __retval = (action);								\
+															\
+	if (__retval != ERROR_OK)								\
+		return __retval;									\
+															\
+} while (0)
+
+
 typedef struct arm11_register_history_s
 {
 	u32		value;

Modified: trunk/src/target/arm11_dbgtap.c
===================================================================
--- trunk/src/target/arm11_dbgtap.c	2009-04-28 06:29:32 UTC (rev 1550)
+++ trunk/src/target/arm11_dbgtap.c	2009-04-28 07:29:18 UTC (rev 1551)
@@ -229,11 +229,7 @@
 
 	arm11_add_dr_scan_vc(1, &chain1_field, TAP_DRPAUSE);
 
-	int retval;
-	if ((retval=jtag_execute_queue())!=ERROR_OK)
-	{
-		return retval;
-	}
+	CHECK_RETVAL(jtag_execute_queue());
 
 	if (arm11->last_dscr != dscr)
 		JTAG_DEBUG("DSCR  = %08x (OLD %08x)", dscr, arm11->last_dscr);
@@ -242,7 +238,7 @@
 
 	*value=dscr;
 
-	return retval;
+	return ERROR_OK;
 }
 
 /** Write the Debug Status and Control Register (DSCR)
@@ -266,9 +262,7 @@
 
 	arm11_add_dr_scan_vc(1, &chain1_field, TAP_DRPAUSE);
 
-	int retval;
-	if ((retval=jtag_execute_queue())!=ERROR_OK)
-		return retval;
+	CHECK_RETVAL(jtag_execute_queue());
 
 	JTAG_DEBUG("DSCR <= %08x (OLD %08x)", dscr, arm11->last_dscr);
 
@@ -383,9 +377,7 @@
 
 			arm11_add_debug_INST(arm11, 0, &flag, count ? TAP_IDLE : TAP_DRPAUSE);
 
-			int retval;
-			if ((retval=jtag_execute_queue())!=ERROR_OK)
-				return retval;
+			CHECK_RETVAL(jtag_execute_queue());
 
 			if (flag)
 				break;
@@ -447,10 +439,9 @@
 			Data	    = *data;
 
 			arm11_add_dr_scan_vc(asizeof(chain5_fields), chain5_fields, TAP_IDLE);
-			int retval;
-			if ((retval=jtag_execute_queue())!=ERROR_OK)
-				return retval;
 
+			CHECK_RETVAL(jtag_execute_queue());
+
 			JTAG_DEBUG("DTR  Ready %d  nRetry %d", Ready, nRetry);
 		}
 		while (!Ready);
@@ -465,10 +456,9 @@
 		Data	    = 0;
 
 		arm11_add_dr_scan_vc(asizeof(chain5_fields), chain5_fields, TAP_DRPAUSE);
-		int retval;
-		if ((retval=jtag_execute_queue())!=ERROR_OK)
-			return retval;
 
+		CHECK_RETVAL(jtag_execute_queue());
+
 		JTAG_DEBUG("DTR  Data %08x  Ready %d  nRetry %d", Data, Ready, nRetry);
 	}
 	while (!Ready);
@@ -550,9 +540,7 @@
 
 	arm11_add_dr_scan_vc(asizeof(chain5_fields), chain5_fields, TAP_DRPAUSE);
 
-	int retval;
-	if ((retval=jtag_execute_queue())!=ERROR_OK)
-		return retval;
+	CHECK_RETVAL(jtag_execute_queue());
 
 	size_t error_count = 0;
 
@@ -625,9 +613,8 @@
 		do
 		{
 			arm11_add_dr_scan_vc(asizeof(chain5_fields), chain5_fields, count ? TAP_IDLE : TAP_DRPAUSE);
-			int retval;
-			if ((retval=jtag_execute_queue())!=ERROR_OK)
-				return retval;
+			
+			CHECK_RETVAL(jtag_execute_queue());
 
 			JTAG_DEBUG("DTR  Data %08x  Ready %d  nRetry %d", Data, Ready, nRetry);
 		}
@@ -728,9 +715,8 @@
 			JTAG_DEBUG("SC7 <= Address %02x  Data %08x    nRW %d", AddressOut, DataOut, nRW);
 
 			arm11_add_dr_scan_vc(asizeof(chain7_fields), chain7_fields, TAP_DRPAUSE);
-			int retval;
-			if ((retval=jtag_execute_queue())!=ERROR_OK)
-				return retval;
+			
+			CHECK_RETVAL(jtag_execute_queue());
 
 			JTAG_DEBUG("SC7 => Address %02x  Data %08x  Ready %d", AddressIn, DataIn, Ready);
 		}
@@ -826,16 +812,13 @@
  */
 int arm11_read_memory_word(arm11_common_t * arm11, u32 address, u32 * result)
 {
-	int retval;
 	arm11_run_instr_data_prepare(arm11);
 
 	/* MRC p14,0,r0,c0,c5,0 (r0 = address) */
-	if ((retval=arm11_run_instr_data_to_core1(arm11, 0xee100e15, address))!=ERROR_OK)
-		return retval;
+	CHECK_RETVAL(arm11_run_instr_data_to_core1(arm11, 0xee100e15, address));
 
 	/* LDC p14,c5,[R0],#4 (DTR = [r0]) */
-	if ((retval=arm11_run_instr_data_from_core(arm11, 0xecb05e01, result, 1))!=ERROR_OK)
-		return retval;
+	CHECK_RETVAL(arm11_run_instr_data_from_core(arm11, 0xecb05e01, result, 1));
 
 	arm11_run_instr_data_finish(arm11);
 



From oharboe at mail.berlios.de  Tue Apr 28 09:33:50 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Tue, 28 Apr 2009 09:33:50 +0200
Subject: [Openocd-svn] r1552 - trunk/src/target
Message-ID: <200904280733.n3S7XoYv015359@sheep.berlios.de>

Author: oharboe
Date: 2009-04-28 09:33:50 +0200 (Tue, 28 Apr 2009)
New Revision: 1552

Modified:
   trunk/src/target/arm11.c
Log:
convert some LOG_INFO()'s during stepping into LOG_DEBUG()

Modified: trunk/src/target/arm11.c
===================================================================
--- trunk/src/target/arm11.c	2009-04-28 07:29:18 UTC (rev 1551)
+++ trunk/src/target/arm11.c	2009-04-28 07:33:50 UTC (rev 1552)
@@ -322,7 +322,7 @@
 	if (!dscr)
 	{
 		dscr = &dscr_local_tmp_copy;
-		
+
 		CHECK_RETVAL(arm11_read_DSCR(arm11, dscr));
 	}
 
@@ -673,7 +673,7 @@
 		return ERROR_OK;
 
 	u32	dscr;
-	
+
 	CHECK_RETVAL(arm11_read_DSCR(arm11, &dscr));
 
 	LOG_DEBUG("DSCR %08x", dscr);
@@ -861,7 +861,7 @@
 	while (1)
 	{
 		u32 dscr;
-	
+
 		CHECK_RETVAL(arm11_read_DSCR(arm11, &dscr));
 
 		LOG_DEBUG("DSCR %08x", dscr);
@@ -906,7 +906,7 @@
 	if (!current)
 		R(PC) = address;
 
-	LOG_INFO("STEP PC %08x%s", R(PC), !current ? "!" : "");
+	LOG_DEBUG("STEP PC %08x%s", R(PC), !current ? "!" : "");
 
 	/** \todo TODO: Thumb not supported here */
 
@@ -920,7 +920,7 @@
 		R(PC) += 4;
 		arm11->reg_list[ARM11_RC_PC].valid = 1;
 		arm11->reg_list[ARM11_RC_PC].dirty = 0;
-		LOG_INFO("Skipping BKPT");
+		LOG_DEBUG("Skipping BKPT");
 	}
 	/* skip over Wait for interrupt / Standby */
 	/* mcr	15, 0, r?, cr7, cr0, {4} */
@@ -929,12 +929,12 @@
 		R(PC) += 4;
 		arm11->reg_list[ARM11_RC_PC].valid = 1;
 		arm11->reg_list[ARM11_RC_PC].dirty = 0;
-		LOG_INFO("Skipping WFI");
+		LOG_DEBUG("Skipping WFI");
 	}
 	/* ignore B to self */
 	else if ((next_instruction & 0xFEFFFFFF) == 0xeafffffe)
 	{
-		LOG_INFO("Not stepping jump to self");
+		LOG_DEBUG("Not stepping jump to self");
 	}
 	else
 	{
@@ -1331,13 +1331,13 @@
 
 	if (!arm11->free_brps)
 	{
-		LOG_INFO("no breakpoint unit available for hardware breakpoint");
+		LOG_DEBUG("no breakpoint unit available for hardware breakpoint");
 		return ERROR_TARGET_RESOURCE_NOT_AVAILABLE;
 	}
 
 	if (breakpoint->length != 4)
 	{
-		LOG_INFO("only breakpoints of four bytes length supported");
+		LOG_DEBUG("only breakpoints of four bytes length supported");
 		return ERROR_TARGET_RESOURCE_NOT_AVAILABLE;
 	}
 



From oharboe at mail.berlios.de  Tue Apr 28 09:34:43 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Tue, 28 Apr 2009 09:34:43 +0200
Subject: [Openocd-svn] r1553 - trunk/src/jtag
Message-ID: <200904280734.n3S7Yh1b015442@sheep.berlios.de>

Author: oharboe
Date: 2009-04-28 09:34:43 +0200 (Tue, 28 Apr 2009)
New Revision: 1553

Modified:
   trunk/src/jtag/gw16012.c
Log:
Zach Welch <zw at superlucidity.net> fix gw16012 with --enable-parport_ppdev

Modified: trunk/src/jtag/gw16012.c
===================================================================
--- trunk/src/jtag/gw16012.c	2009-04-28 07:33:50 UTC (rev 1552)
+++ trunk/src/jtag/gw16012.c	2009-04-28 07:34:43 UTC (rev 1553)
@@ -461,32 +461,65 @@
 }
 #endif
 
-static int gw16012_init(void)
+#if PARPORT_USE_PPDEV == 1
+
+#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
+
+#define GW16012_PPDEV_NAME	"ppi"
+
+static int gw16012_init_ioctls(void)
 {
-#if PARPORT_USE_PPDEV == 1
+	int temp = 0;
+	temp = ioctl(device_handle, PPCLAIM);
+	if (temp < 0)
+	{
+		LOG_ERROR("cannot claim device");
+		return ERROR_JTAG_INIT_FAILED;
+	}
+
+	temp = PARPORT_MODE_COMPAT;
+	temp = ioctl(device_handle, PPSETMODE, &temp);
+	if (temp < 0)
+	{
+		LOG_ERROR(" cannot set compatible mode to device");
+		return ERROR_JTAG_INIT_FAILED;
+	}
+
+	temp = IEEE1284_MODE_COMPAT;
+	temp = ioctl(device_handle, PPNEGOT, &temp);
+	if (temp < 0)
+	{
+		LOG_ERROR("cannot set compatible 1284 mode to device");
+		return ERROR_JTAG_INIT_FAILED;
+	}
+	return ERROR_OK;
+}
+#else
+
+#define GW16012_PPDEV_NAME	"parport"
+
+static int gw16012_init_ioctls(void)
+{
+	return ERROR_OK;
+}
+
+#endif // defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
+
+static int gw16012_init_device(void)
+{
+	const char *device_name = GW16012_PPDEV_NAME;
 	char buffer[256];
-	int i = 0;
-#endif
-	u8 status_port;
 
-#if PARPORT_USE_PPDEV == 1
-	if (device_handle>0)
+	if (device_handle > 0)
 	{
 		LOG_ERROR("device is already opened");
 		return ERROR_JTAG_INIT_FAILED;
 	}
 
-#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
-	LOG_DEBUG("opening /dev/ppi%d...", gw16012_port);
+	snprintf(buffer, 256, "/dev/%s%d", device_name, gw16012_port);
+	LOG_DEBUG("opening %s...", buffer);
 
-	snprintf(buffer, 256, "/dev/ppi%d", gw16012_port);
 	device_handle = open(buffer, O_WRONLY);
-#else
-	LOG_DEBUG("opening /dev/parport%d...", gw16012_port);
-
-	snprintf(buffer, 256, "/dev/parport%d", gw16012_port);
-	device_handle = open(buffer, O_WRONLY);
-#endif
 	if (device_handle<0)
 	{
 		LOG_ERROR("cannot open device. check it exists and that user read and write rights are set");
@@ -495,31 +528,16 @@
 
 	LOG_DEBUG("...open");
 
-#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
-	i=ioctl(device_handle, PPCLAIM);
-	if (i<0)
-	{
-		LOG_ERROR("cannot claim device");
+	if (gw16012_init_ioctls() != ERROR_OK)
 		return ERROR_JTAG_INIT_FAILED;
-	}
 
-	i = PARPORT_MODE_COMPAT;
-	i= ioctl(device_handle, PPSETMODE, & i);
-	if (i<0)
-	{
-		LOG_ERROR(" cannot set compatible mode to device");
-		return ERROR_JTAG_INIT_FAILED;
-	}
+	return ERROR_OK;
+}
 
-	i = IEEE1284_MODE_COMPAT;
-	i = ioctl(device_handle, PPNEGOT, & i);
-	if (i<0)
-	{
-		LOG_ERROR("cannot set compatible 1284 mode to device");
-		return ERROR_JTAG_INIT_FAILED;
-	}
-#endif
-#else
+#else // PARPORT_USE_PPDEV
+
+static int gw16012_init_device(void)
+{
 	if (gw16012_port == 0)
 	{
 		gw16012_port = 0x378;
@@ -544,8 +562,18 @@
 #else
 	outb(0x0, gw16012_port + 2);
 #endif
-#endif /* PARPORT_USE_PPDEV */
+	return ERROR_OK;
+}
 
+#endif // PARPORT_USE_PPDEV
+
+static int gw16012_init(void)
+{
+	u8 status_port;
+
+	if (gw16012_init_device() != ERROR_OK)
+		return ERROR_JTAG_INIT_FAILED;
+
 	gw16012_input(&status_port);
 	gw16012_msb = (status_port & 0x80) ^ 0x80;
 



From oharboe at mail.berlios.de  Tue Apr 28 10:42:10 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Tue, 28 Apr 2009 10:42:10 +0200
Subject: [Openocd-svn] r1554 - trunk/src/target
Message-ID: <200904280842.n3S8gAfO022243@sheep.berlios.de>

Author: oharboe
Date: 2009-04-28 10:42:09 +0200 (Tue, 28 Apr 2009)
New Revision: 1554

Modified:
   trunk/src/target/arm11.c
Log:
fix checksum memory. By failing the fallback code will handle checksum calculation

Modified: trunk/src/target/arm11.c
===================================================================
--- trunk/src/target/arm11.c	2009-04-28 07:34:43 UTC (rev 1553)
+++ trunk/src/target/arm11.c	2009-04-28 08:42:09 UTC (rev 1554)
@@ -1305,11 +1305,13 @@
 	return arm11_write_memory(target, address, 4, count, buffer);
 }
 
+/* here we have nothing target specific to contribute, so we fail and then the
+ * fallback code will read data from the target and calculate the CRC on the
+ * host.
+ */
 int arm11_checksum_memory(struct target_s *target, u32 address, u32 count, u32* checksum)
 {
-	FNC_INFO_NOTIMPLEMENTED;
-
-	return ERROR_OK;
+	return ERROR_FAIL;
 }
 
 /* target break-/watchpoint control



From ntfreak at mail.berlios.de  Tue Apr 28 15:40:06 2009
From: ntfreak at mail.berlios.de (ntfreak at BerliOS)
Date: Tue, 28 Apr 2009 15:40:06 +0200
Subject: [Openocd-svn] r1555 - trunk/src/helper
Message-ID: <200904281340.n3SDe65a027068@sheep.berlios.de>

Author: ntfreak
Date: 2009-04-28 15:40:06 +0200 (Tue, 28 Apr 2009)
New Revision: 1555

Modified:
   trunk/src/helper/replacements.c
Log:
- fix win32 build

Modified: trunk/src/helper/replacements.c
===================================================================
--- trunk/src/helper/replacements.c	2009-04-28 08:42:09 UTC (rev 1554)
+++ trunk/src/helper/replacements.c	2009-04-28 13:40:06 UTC (rev 1555)
@@ -172,7 +172,8 @@
 	/* build an array of handles for non-sockets */
 	for (i = 0; i < max_fd; i++) {
 		if (SAFE_FD_ISSET(i, rfds) || SAFE_FD_ISSET(i, wfds) || SAFE_FD_ISSET(i, efds)) {
-			handles[n_handles] = (HANDLE)_get_osfhandle(i);
+			long handle = _get_osfhandle(i);
+			handles[n_handles] = (HANDLE)handle;
 			if (handles[n_handles] == INVALID_HANDLE_VALUE) {
 				/* socket */
 				if (SAFE_FD_ISSET(i, rfds)) {
@@ -246,8 +247,9 @@
 					if (WAIT_OBJECT_0 == WaitForSingleObject(handles[i], 0)) {
 						if (SAFE_FD_ISSET(handle_slot_to_fd[i], rfds)) {
 							DWORD dwBytes;
+							long handle = _get_osfhandle(handle_slot_to_fd[i]);
 							
-							if (PeekNamedPipe((HANDLE)_get_osfhandle(handle_slot_to_fd[i]), NULL, 0, NULL, &dwBytes, NULL))
+							if (PeekNamedPipe((HANDLE)handle, NULL, 0, NULL, &dwBytes, NULL))
 							{
 								/* check to see if gdb pipe has data available */
 								if (dwBytes)



From mlu at mail.berlios.de  Tue Apr 28 19:40:04 2009
From: mlu at mail.berlios.de (mlu at mail.berlios.de)
Date: Tue, 28 Apr 2009 19:40:04 +0200
Subject: [Openocd-svn] r1556 - trunk/src/jtag
Message-ID: <200904281740.n3SHe4VZ023327@sheep.berlios.de>

Author: mlu
Date: 2009-04-28 19:40:02 +0200 (Tue, 28 Apr 2009)
New Revision: 1556

Modified:
   trunk/src/jtag/jlink.c
Log:
Correctedout  buffer size and missing jlink_tap_init() call.
Expanded JLink adapter info at startup.


Modified: trunk/src/jtag/jlink.c
===================================================================
--- trunk/src/jtag/jlink.c	2009-04-28 13:40:06 UTC (rev 1555)
+++ trunk/src/jtag/jlink.c	2009-04-28 17:40:02 UTC (rev 1556)
@@ -44,7 +44,7 @@
 
 // See Section 1.3.2 of the Segger JLink USB protocol manual
 #define JLINK_IN_BUFFER_SIZE			2048
-#define JLINK_OUT_BUFFER_SIZE			2048
+#define JLINK_OUT_BUFFER_SIZE			2*2048+4
 #define JLINK_EMU_RESULT_BUFFER_SIZE	64
 
 /* Global USB buffers */
@@ -53,14 +53,16 @@
 static u8 usb_emu_result_buffer[JLINK_EMU_RESULT_BUFFER_SIZE];
 
 /* Constants for JLink command */
-#define EMU_CMD_VERSION     0x01
-#define EMU_CMD_SET_SPEED   0x05
-#define EMU_CMD_GET_STATE   0x07
-#define EMU_CMD_HW_JTAG3    0xcf
-#define EMU_CMD_HW_RESET0   0xdc
-#define EMU_CMD_HW_RESET1   0xdd
-#define EMU_CMD_HW_TRST0    0xde
-#define EMU_CMD_HW_TRST1    0xdf
+#define EMU_CMD_VERSION     		0x01
+#define EMU_CMD_SET_SPEED   		0x05
+#define EMU_CMD_GET_STATE   		0x07
+#define EMU_CMD_HW_JTAG3    		0xcf
+#define EMU_CMD_GET_MAX_MEM_BLOCK   0xd4
+#define EMU_CMD_HW_RESET0   		0xdc
+#define EMU_CMD_HW_RESET1   		0xdd
+#define EMU_CMD_HW_TRST0    		0xde
+#define EMU_CMD_HW_TRST1    		0xdf
+#define EMU_CMD_GET_CAPS    		0xe8
 
 /* max speed 12MHz v5.0 jlink */
 #define JLINK_MAX_SPEED 12000
@@ -530,6 +532,7 @@
 {
 	int result;
 	int len;
+	u32 jlink_caps, jlink_max_size;
 
 	/* query hardware version */
 	jlink_simple_command(EMU_CMD_VERSION);
@@ -537,8 +540,7 @@
 	result = jlink_usb_read(jlink_jtag_handle, 2);
 	if (2 != result)
 	{
-		LOG_ERROR("J-Link command EMU_CMD_VERSION failed (%d)\n",
-				result);
+		LOG_ERROR("J-Link command EMU_CMD_VERSION failed (%d)\n", result);
 		return ERROR_JTAG_DEVICE_ERROR;
 	}
 
@@ -546,14 +548,41 @@
 	result = jlink_usb_read(jlink_jtag_handle, len);
 	if (result != len)
 	{
-		LOG_ERROR("J-Link command EMU_CMD_VERSION failed (%d)\n",
-				result);
+		LOG_ERROR("J-Link command EMU_CMD_VERSION failed (%d)\n", result);
 		return ERROR_JTAG_DEVICE_ERROR;
 	}
 
 	usb_in_buffer[result] = 0;
 	LOG_INFO("%s", (char *)usb_in_buffer);
 
+	/* query hardware capabilities */
+	jlink_simple_command(EMU_CMD_GET_CAPS);
+
+	result = jlink_usb_read(jlink_jtag_handle, 4);
+	if (4 != result)
+	{
+		LOG_ERROR("J-Link command EMU_CMD_GET_CAPS failed (%d)\n", result);
+		return ERROR_JTAG_DEVICE_ERROR;
+	}
+
+	jlink_caps = buf_get_u32(usb_in_buffer, 0, 32);
+	LOG_INFO("JLink caps 0x%x", jlink_caps);
+
+
+	/* query hardware maximum memory block */
+	jlink_simple_command(EMU_CMD_GET_MAX_MEM_BLOCK);
+
+	result = jlink_usb_read(jlink_jtag_handle, 4);
+	if (4 != result)
+	{
+		LOG_ERROR("J-Link command EMU_CMD_GET_MAX_MEM_BLOCK failed (%d)\n", result);
+		return ERROR_JTAG_DEVICE_ERROR;
+	}
+
+	jlink_max_size = buf_get_u32(usb_in_buffer, 0, 32);
+	LOG_INFO("JLink max mem block %i", jlink_max_size);
+
+
 	return ERROR_OK;
 }
 
@@ -689,8 +718,8 @@
 	result = jlink_usb_message(jlink_jtag_handle, 4 + 2 * byte_length, byte_length);
 	if (result != byte_length)
 	{
-		LOG_ERROR("jlink_tap_execute, wrong result %d (expected %d)",
-				result, byte_length);
+		LOG_ERROR("jlink_tap_execute, wrong result %d (expected %d)", result, byte_length);
+		jlink_tap_init();
 		return ERROR_JTAG_QUEUE_FAILED;
 	}
 
@@ -726,7 +755,6 @@
 	}
 
 	jlink_tap_init();
-
 	return ERROR_OK;
 }
 
@@ -800,7 +828,7 @@
 	}
 
 	result = jlink_usb_read(jlink_jtag, in_length);
-	if ((result != in_length) && (result != in_length + 1))
+	if ((result != in_length) && (result != (in_length + 1)))
 	{
 		LOG_ERROR("usb_bulk_read failed (requested=%d, result=%d)",
 				in_length, result);



From oharboe at mail.berlios.de  Tue Apr 28 21:02:31 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Tue, 28 Apr 2009 21:02:31 +0200
Subject: [Openocd-svn] r1557 - trunk/src/jtag
Message-ID: <200904281902.n3SJ2V6S020269@sheep.berlios.de>

Author: oharboe
Date: 2009-04-28 21:02:29 +0200 (Tue, 28 Apr 2009)
New Revision: 1557

Modified:
   trunk/src/jtag/jtag.c
   trunk/src/jtag/jtag.h
Log:
Dick Hollenbeck <dick at softplc.com> and Jeff Williams tap_get_tms_path_len()

Modified: trunk/src/jtag/jtag.c
===================================================================
--- trunk/src/jtag/jtag.c	2009-04-28 17:40:02 UTC (rev 1556)
+++ trunk/src/jtag/jtag.c	2009-04-28 19:02:29 UTC (rev 1557)
@@ -1245,7 +1245,7 @@
 	bit_count = 0;
 
 #ifdef _DEBUG_JTAG_IO_
-	LOG_DEBUG("num_fields: %i",cmd->num_fields);
+	LOG_DEBUG("%s num_fields: %i", cmd->ir_scan ? "IRSCAN" : "DRSCAN", cmd->num_fields);
 #endif
 
 	for (i = 0; i < cmd->num_fields; i++)
@@ -1261,10 +1261,20 @@
 			free(char_buf);
 #endif
 		}
+		else
+		{
+#ifdef _DEBUG_JTAG_IO_
+			LOG_DEBUG("fields[%i].out_value[%i]: NULL", i, cmd->fields[i].num_bits);
+#endif
+		}
 
 		bit_count += cmd->fields[i].num_bits;
 	}
 
+#ifdef _DEBUG_JTAG_IO_
+	//LOG_DEBUG("bit_count totalling: %i",  bit_count );
+#endif
+
 	return bit_count;
 }
 
@@ -3053,14 +3063,6 @@
 {
 	/* given a stable state, return the index into the tms_seqs[] array within tap_get_tms_path() */
 
-	/* old version
-	const static int move_map[16] =
-	{
-		0, -1, -1,  2, -1,  3, -1, -1,
-		1, -1, -1,  4, -1,  5, -1, -1
-	};
-	*/
-
 	int ndx;
 
 	switch( astate )
@@ -3079,48 +3081,109 @@
 	return ndx;
 }
 
-int tap_get_tms_path( tap_state_t from, tap_state_t to )
+
+/* tap_move[i][j]: tap movement command to go from state i to state j
+ * 0: Test-Logic-Reset
+ * 1: Run-Test/Idle
+ * 2: Shift-DR
+ * 3: Pause-DR
+ * 4: Shift-IR
+ * 5: Pause-IR
+ *
+ * DRSHIFT->DRSHIFT and IRSHIFT->IRSHIFT have to be caught in interface specific code
+ */
+static struct
 {
-	/* tap_move[i][j]: tap movement command to go from state i to state j
-	 * 0: Test-Logic-Reset
-	 * 1: Run-Test/Idle
-	 * 2: Shift-DR
-	 * 3: Pause-DR
-	 * 4: Shift-IR
-	 * 5: Pause-IR
-	 *
-	 * DRSHIFT->DRSHIFT and IRSHIFT->IRSHIFT have to be caught in interface specific code
+	u8	bits;
+	u8	bit_count;
+
+} tms_seqs[6][6] =		/*  [from_state_ndx][to_state_ndx] */
+{
+	/* value clocked to TMS to move from one of six stable states to another.
+	 * N.B. OOCD clocks TMS from LSB first, so read these right-to-left.
+	 * N.B. These values are tightly bound to the table in tap_get_tms_path_len().
+	 * N.B. Reset only needs to be 0b11111, but in JLink an even byte of 1's is more stable.
+	 * 		These extra ones cause no TAP state problem, because we go into reset and stay in reset.
 	 */
-	static const u8 tms_seqs[6][6] =
-	{
-		/* value clocked to TMS to move from one of six stable states to another */
 
-		/* RESET  IDLE  DRSHIFT  DRPAUSE  IRSHIFT  IRPAUSE */
-		{  0x7f, 0x00,    0x17,    0x0a,    0x1b,    0x16 },	/* RESET */
-		{  0x7f, 0x00,    0x25,    0x05,    0x2b,    0x0b },	/* IDLE */
-		{  0x7f, 0x31,    0x00,    0x01,    0x0f,    0x2f },	/* DRSHIFT  */
-		{  0x7f, 0x30,    0x20,    0x17,    0x1e,    0x2f },	/* DRPAUSE  */
-		{  0x7f, 0x31,    0x07,    0x17,    0x00,    0x01 },	/* IRSHIFT  */
-		{  0x7f, 0x30,    0x1c,    0x17,    0x20,    0x2f }	/* IRPAUSE  */
-	};
+/*
+ * These macros allow us to specify TMS state transitions by bits rather than hex bytes.
+ * Read the bits from LSBit first to MSBit last (right-to-left).
+ */
+#define HEX__(n) 0x##n##LU
 
-	if( !tap_is_state_stable(from) )
-	{
-		LOG_ERROR( "fatal: tap_state \"from\" (=%s) is not stable", tap_state_name(from) );
-		exit(1);
-	}
+#define B8__(x) \
+	 (((x) & 0x0000000FLU)?(1<<0):0) \
+	+(((x) & 0x000000F0LU)?(1<<1):0) \
+	+(((x) & 0x00000F00LU)?(1<<2):0) \
+	+(((x) & 0x0000F000LU)?(1<<3):0) \
+	+(((x) & 0x000F0000LU)?(1<<4):0) \
+	+(((x) & 0x00F00000LU)?(1<<5):0) \
+	+(((x) & 0x0F000000LU)?(1<<6):0) \
+	+(((x) & 0xF0000000LU)?(1<<7):0)
 
-	if( !tap_is_state_stable(to) )
-	{
-		LOG_ERROR( "fatal: tap_state \"to\" (=%s) is not stable", tap_state_name(to) );
-		exit(1);
-	}
+#define B8(bits,count)		{ ((u8)B8__(HEX__(bits))), (count) }
 
-	/* @todo: support other than 7 clocks ? */
-	return tms_seqs[tap_move_ndx(from)][tap_move_ndx(to)];
+#if 0 && ((BUILD_FT2232_FTD2XX==1) || (BUILD_FT2232_LIBFTDI==1))
+	/* 	this is the table submitted by Jeff Williams on 3/30/2009 with this comment:
+
+		OK, I added Peter's version of the state table, and it works OK for
+		me on MC1322x. I've recreated the jlink portion of patch with this
+		new state table. His changes to my state table are pretty minor in
+		terms of total transitions, but Peter feels that his version fixes
+		some long-standing problems.
+		Jeff
+
+		I added the bit count into the table
+		Dick
+	*/
+
+	/* to state: */
+	/*	RESET			IDLE				DRSHIFT			DRPAUSE			IRSHIFT	  		IRPAUSE */		/* from state: */
+	{	B8(11111,5),		B8(0,1),			B8(0010,4), 		B8(01010,5),		B8(00110,5), 	B8(010110,6) },	/* RESET */
+	{	B8(11111,5),		B8(0,1),			B8(001,3),  		B8(0101,4),		B8(0011,4),  	B8(01011,5) },	/* IDLE */
+	{	B8(11111,5),		B8(011,3),		B8(00111,5),		B8(01,2),		B8(001111,6),	B8(0101111,7) },	/* DRSHIFT */
+	{	B8(11111,5),		B8(011,3),		B8(01,2),   		B8(0,1),			B8(001111,6),	B8(0101111,7) },	/* DRPAUSE */
+	{	B8(11111,5),		B8(011,3),		B8(00111,5),		B8(010111,6), 	B8(001111,6),	B8(01,2) },		/* IRSHIFT */
+	{	B8(11111,5),		B8(011,3),		B8(00111,5),		B8(010111,6),	B8(01,2),   		B8(0,1) } 		/* IRPAUSE */
+
+#else	/* this is the old table, converted from hex and with the bit_count set to 7 for each combo, like before */
+
+	/* to state: */
+	/*	RESET			IDLE				DRSHIFT			DRPAUSE			IRSHIFT	  		IRPAUSE */		/* from state: */
+	{	B8(1111111,7),	B8(0000000,7),	B8(0010111,7), 	B8(0001010,7),	B8(0011011,7), 	B8(0010110,7) },	/* RESET */
+	{	B8(1111111,7),	B8(0000000,7),	B8(0100101,7),  	B8(0000101,7),	B8(0101011,7),  	B8(0001011,7) },	/* IDLE */
+	{	B8(1111111,7),	B8(0110001,7),	B8(0000000,7),	B8(0000001,7),	B8(0001111,7),	B8(0101111,7) },	/* DRSHIFT */
+	{	B8(1111111,7),	B8(0110000,7),	B8(0100000,7),  	B8(0010111,7),	B8(0011110,7),	B8(0101111,7) },	/* DRPAUSE */
+	{	B8(1111111,7),	B8(0110001,7),	B8(0000111,7),	B8(0010111,7), 	B8(0000000,7),	B8(0000001,7) },	/* IRSHIFT */
+	{	B8(1111111,7),	B8(0110000,7),	B8(0011100,7),	B8(0010111,7),	B8(0100000,7),  	B8(0101111,7) } 	/* IRPAUSE */
+
+#endif
+
+#if 0 /* keeping old hex stuff for awhile, for reference */
+	/* RESET  			IDLE  			DRSHIFT  		DRPAUSE  		IRSHIFT  		IRPAUSE */
+	{  0x7f, 			0x00,    		0x17,    		0x0a,    		0x1b,    		0x16 },	/* RESET */
+	{  0x7f, 			0x00,    		0x25,    		0x05,    		0x2b,    		0x0b },	/* IDLE */
+	{  0x7f, 			0x31,    		0x00,    		0x01,    		0x0f,    		0x2f },	/* DRSHIFT  */
+	{  0x7f, 			0x30,    		0x20,    		0x17,    		0x1e,    		0x2f },	/* DRPAUSE  */
+	{  0x7f, 			0x31,    		0x07,    		0x17,    		0x00,    		0x01 },	/* IRSHIFT  */
+	{  0x7f, 			0x30,    		0x1c,    		0x17,    		0x20,    		0x2f }	/* IRPAUSE  */
+#endif
+};
+
+
+int tap_get_tms_path( tap_state_t from, tap_state_t to )
+{
+	return tms_seqs[tap_move_ndx(from)][tap_move_ndx(to)].bits;
 }
 
 
+int tap_get_tms_path_len( tap_state_t from, tap_state_t to )
+{
+	return tms_seqs[tap_move_ndx(from)][tap_move_ndx(to)].bit_count;
+}
+
+
 bool tap_is_state_stable(tap_state_t astate)
 {
 	bool is_stable;
@@ -3250,7 +3313,7 @@
 	switch( state )
 	{
 	case TAP_RESET:		ret = "RESET";			break;
-	case TAP_IDLE:		ret = "RUN/IDLE";			break;
+	case TAP_IDLE:		ret = "RUN/IDLE";		break;
 	case TAP_DRSELECT:	ret = "DRSELECT";		break;
 	case TAP_DRCAPTURE: ret = "DRCAPTURE";		break;
 	case TAP_DRSHIFT:	ret = "DRSHIFT";			break;

Modified: trunk/src/jtag/jtag.h
===================================================================
--- trunk/src/jtag/jtag.h	2009-04-28 17:40:02 UTC (rev 1556)
+++ trunk/src/jtag/jtag.h	2009-04-28 19:02:29 UTC (rev 1557)
@@ -181,7 +181,26 @@
  */
 int tap_get_tms_path(tap_state_t from, tap_state_t to);
 
+
 /**
+ * Function int tap_get_tms_path_len
+ * returns the total number of bits that represents a TMS path
+ * transition as given by the function tap_get_tms_path().
+ *
+ * For at least one interface (JLink) it's not OK to simply "pad" TMS sequences
+ * to fit a whole byte.  (I suspect this is a general TAP problem within OOCD.)
+ * Padding TMS causes all manner of instability that's not easily
+ * discovered.  Using this routine we can apply EXACTLY the state transitions
+ * required to make something work - no more - no less.
+ *
+ * @param from is the starting state
+ * @param to is the resultant or final state
+ * @return int - the total number of bits in a transition.
+ */
+int tap_get_tms_path_len(tap_state_t from, tap_state_t to);
+
+
+/**
  * Function tap_move_ndx
  * when given a stable state, returns an index from 0-5.  The index corresponds to a
  * sequence of stable states which are given in this order: <p>



From oharboe at mail.berlios.de  Tue Apr 28 22:59:53 2009
From: oharboe at mail.berlios.de (oharboe at mail.berlios.de)
Date: Tue, 28 Apr 2009 22:59:53 +0200
Subject: [Openocd-svn] r1558 - trunk/src/jtag
Message-ID: <200904282059.n3SKxrLb000685@sheep.berlios.de>

Author: oharboe
Date: 2009-04-28 22:59:52 +0200 (Tue, 28 Apr 2009)
New Revision: 1558

Modified:
   trunk/src/jtag/jtag.h
Log:
more docs on jtag_add_pathmove()

Modified: trunk/src/jtag/jtag.h
===================================================================
--- trunk/src/jtag/jtag.h	2009-04-28 19:02:29 UTC (rev 1557)
+++ trunk/src/jtag/jtag.h	2009-04-28 20:59:52 UTC (rev 1558)
@@ -575,7 +575,18 @@
 extern void jtag_add_tlr(void);
 extern int  interface_jtag_add_tlr(void);
 
-/* Do not use jtag_add_pathmove() unless you need to, but do use it
+/* Application code *must* assume that interfaces will
+ * implement transitions between states with different
+ * paths and path lengths through the state diagram. The
+ * path will vary across interface and also across versions
+ * of the same interface over time. Even if the OpenOCD code
+ * is unchanged, the actual path taken may vary over time
+ * and versions of interface firmware or PCB revisions.
+ * 
+ * Use jtag_add_pathmove() when specific transition sequences
+ * are required.
+ * 
+ * Do not use jtag_add_pathmove() unless you need to, but do use it
  * if you have to.
  *
  * DANGER! If the target is dependent upon a particular sequence



From zwelch at mail.berlios.de  Wed Apr 29 02:33:52 2009
From: zwelch at mail.berlios.de (zwelch at mail.berlios.de)
Date: Wed, 29 Apr 2009 02:33:52 +0200
Subject: [Openocd-svn] r1559 - in trunk: . src/helper src/jtag
Message-ID: <200904290033.n3T0Xqmh032426@sheep.berlios.de>

Author: zwelch
Date: 2009-04-29 02:33:35 +0200 (Wed, 29 Apr 2009)
New Revision: 1559

Modified:
   trunk/configure.in
   trunk/src/helper/jim-eventloop.c
   trunk/src/helper/replacements.h
   trunk/src/jtag/jtag.c
Log:
Add missing header files to fix C99 compatibility.

Modified: trunk/configure.in
===================================================================
--- trunk/configure.in	2009-04-28 20:59:52 UTC (rev 1558)
+++ trunk/configure.in	2009-04-29 00:33:35 UTC (rev 1559)
@@ -9,6 +9,7 @@
 AC_CHECK_HEADERS(jtag_minidriver.h)
 AC_CHECK_HEADERS(sys/param.h)
 AC_CHECK_HEADERS(sys/time.h)
+AC_CHECK_HEADERS(sys/select.h)
 AC_CHECK_HEADERS(elf.h)
 AC_CHECK_HEADERS(strings.h)
 AC_CHECK_HEADERS(stdbool.h)

Modified: trunk/src/helper/jim-eventloop.c
===================================================================
--- trunk/src/helper/jim-eventloop.c	2009-04-28 20:59:52 UTC (rev 1558)
+++ trunk/src/helper/jim-eventloop.c	2009-04-29 00:33:35 UTC (rev 1559)
@@ -62,6 +62,7 @@
 #include <sys/time.h>
 #include <sys/types.h>
 #include <unistd.h>
+#include <stdio.h>
 #include <errno.h>
 
 #include "replacements.h"

Modified: trunk/src/helper/replacements.h
===================================================================
--- trunk/src/helper/replacements.h	2009-04-28 20:59:52 UTC (rev 1558)
+++ trunk/src/helper/replacements.h	2009-04-29 00:33:35 UTC (rev 1559)
@@ -35,9 +35,16 @@
 #if BUILD_ECOSBOARD
 #include <pkgconf/system.h>
 #include <stdlib.h>
-#include <sys/select.h>
 #endif
 
+#ifdef HAVE_SYS_SELECT_H 
+#include <sys/select.h> /* select, FD_SET and friends (POSIX.1-2001) */
+#endif
+
+#ifdef HAVE_SYS_TIME_H 
+#include <sys/time.h> /* FD_SET and friends (pre-POSIX.1-2001) */
+#endif
+
 /* include necessary headers for socket functionality */
 #ifdef _WIN32
 #include <winsock2.h>

Modified: trunk/src/jtag/jtag.c
===================================================================
--- trunk/src/jtag/jtag.c	2009-04-28 20:59:52 UTC (rev 1558)
+++ trunk/src/jtag/jtag.c	2009-04-29 00:33:35 UTC (rev 1559)
@@ -35,9 +35,12 @@
 #include "command.h"
 #include "log.h"
 
-#include "stdlib.h"
-#include "string.h"
+#include <stdlib.h>
+#include <string.h>
 #include <unistd.h>
+#ifdef HAVE_STRINGS_H
+#include <strings.h>
+#endif
 
 /* note that this is not marked as static as it must be available from outside jtag.c for those
    that implement the jtag_xxx() minidriver layer



From zwelch at mail.berlios.de  Wed Apr 29 03:43:38 2009
From: zwelch at mail.berlios.de (zwelch at mail.berlios.de)
Date: Wed, 29 Apr 2009 03:43:38 +0200
Subject: [Openocd-svn] r1560 - in trunk/src: flash helper jtag server target
Message-ID: <200904290143.n3T1hcpL008523@sheep.berlios.de>

Author: zwelch
Date: 2009-04-29 03:43:01 +0200 (Wed, 29 Apr 2009)
New Revision: 1560

Modified:
   trunk/src/flash/stellaris.c
   trunk/src/helper/fileio.c
   trunk/src/helper/jim.c
   trunk/src/helper/replacements.c
   trunk/src/helper/replacements.h
   trunk/src/helper/time_support.c
   trunk/src/jtag/jtag.h
   trunk/src/server/tcl_server.c
   trunk/src/target/arm7_9_common.h
   trunk/src/target/arm7tdmi.c
   trunk/src/target/arm926ejs.c
   trunk/src/target/arm9tdmi.c
   trunk/src/target/armv4_5.h
   trunk/src/target/armv4_5_mmu.c
   trunk/src/target/armv7m.h
   trunk/src/target/embeddedice.c
   trunk/src/target/etb.c
   trunk/src/target/etm.c
Log:
Remove redundant declarations to allow building with -Wredundant-decls.

Modified: trunk/src/flash/stellaris.c
===================================================================
--- trunk/src/flash/stellaris.c	2009-04-29 00:33:35 UTC (rev 1559)
+++ trunk/src/flash/stellaris.c	2009-04-29 01:43:01 UTC (rev 1560)
@@ -59,7 +59,6 @@
 static void stellaris_set_flash_mode(flash_bank_t *bank,int mode);
 //static u32 stellaris_wait_status_busy(flash_bank_t *bank, u32 waitbits, int timeout);
 
-static int stellaris_read_part_info(struct flash_bank_s *bank);
 static int stellaris_handle_mass_erase_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 static int stellaris_mass_erase(struct flash_bank_s *bank);
 

Modified: trunk/src/helper/fileio.c
===================================================================
--- trunk/src/helper/fileio.c	2009-04-29 00:33:35 UTC (rev 1559)
+++ trunk/src/helper/fileio.c	2009-04-29 01:43:01 UTC (rev 1560)
@@ -43,7 +43,6 @@
 #include <errno.h>
 #include <ctype.h>
 
-int fileio_close(fileio_t *fileio);
 int fileio_dispatch_read(fileio_t *fileio, u32 size, u8 *buffer, u32 *size_read);
 
 int fileio_open_local(fileio_t *fileio)

Modified: trunk/src/helper/jim.c
===================================================================
--- trunk/src/helper/jim.c	2009-04-29 00:33:35 UTC (rev 1559)
+++ trunk/src/helper/jim.c	2009-04-29 01:43:01 UTC (rev 1560)
@@ -11979,7 +11979,7 @@
 
     if (argc == 1) {
 
-#ifndef _WIN32
+#if !defined(_WIN32) && !defined(__USE_GNU)
         extern char **environ;
 #endif
 

Modified: trunk/src/helper/replacements.c
===================================================================
--- trunk/src/helper/replacements.c	2009-04-29 00:33:35 UTC (rev 1559)
+++ trunk/src/helper/replacements.c	2009-04-29 01:43:01 UTC (rev 1560)
@@ -64,6 +64,7 @@
 	return t;
 }
 
+#define IN_REPLACEMENTS_C
 #include "replacements.h"
 
 #include <stdio.h>

Modified: trunk/src/helper/replacements.h
===================================================================
--- trunk/src/helper/replacements.h	2009-04-29 00:33:35 UTC (rev 1559)
+++ trunk/src/helper/replacements.h	2009-04-29 01:43:01 UTC (rev 1560)
@@ -103,9 +103,11 @@
 extern int gettimeofday(struct timeval *tv, struct timezone *tz);
 #endif
 
+#ifndef IN_REPLACEMENTS_C
 /**** clear_malloc & fill_malloc ****/
 void *clear_malloc(size_t size);
 void *fill_malloc(size_t size);
+#endif
 
 /*
  * Now you have 3 ways for the malloc function:

Modified: trunk/src/helper/time_support.c
===================================================================
--- trunk/src/helper/time_support.c	2009-04-29 00:33:35 UTC (rev 1559)
+++ trunk/src/helper/time_support.c	2009-04-29 01:43:01 UTC (rev 1560)
@@ -33,9 +33,6 @@
 
 #include <stdlib.h>
 
-int timeval_subtract(struct timeval *result, struct timeval *x, struct timeval *y);
-int timeval_add(struct timeval *result, struct timeval *x, struct timeval *y);
-int timeval_add_time(struct timeval *result, int sec, int usec);
 
 /* calculate difference between two struct timeval values */
 int timeval_subtract(struct timeval *result, struct timeval *x, struct timeval *y)

Modified: trunk/src/jtag/jtag.h
===================================================================
--- trunk/src/jtag/jtag.h	2009-04-29 00:33:35 UTC (rev 1559)
+++ trunk/src/jtag/jtag.h	2009-04-29 01:43:01 UTC (rev 1560)
@@ -395,7 +395,6 @@
 };
 extern jtag_tap_t* jtag_AllTaps(void);
 extern jtag_tap_t* jtag_TapByPosition(int n);
-extern jtag_tap_t* jtag_TapByPosition(int n);
 extern jtag_tap_t* jtag_TapByString(const char* dotted_name);
 extern jtag_tap_t* jtag_TapByJimObj(Jim_Interp* interp, Jim_Obj* obj);
 extern jtag_tap_t* jtag_TapByAbsPosition(int abs_position);

Modified: trunk/src/server/tcl_server.c
===================================================================
--- trunk/src/server/tcl_server.c	2009-04-29 00:33:35 UTC (rev 1559)
+++ trunk/src/server/tcl_server.c	2009-04-29 01:43:01 UTC (rev 1560)
@@ -43,7 +43,6 @@
 	int tc_outerror; /* flag an output error */
 } tcl_connection_t;
 
-extern Jim_Interp *interp;
 static unsigned short tcl_port = 0;
 
 /* commands */

Modified: trunk/src/target/arm7_9_common.h
===================================================================
--- trunk/src/target/arm7_9_common.h	2009-04-29 00:33:35 UTC (rev 1559)
+++ trunk/src/target/arm7_9_common.h	2009-04-29 01:43:01 UTC (rev 1560)
@@ -127,7 +127,6 @@
 int arm7_9_prepare_reset_halt(struct target_s *target);
 
 int arm7_9_halt(target_t *target);
-int arm7_9_debug_entry(target_t *target);
 int arm7_9_full_context(target_t *target);
 int arm7_9_restore_context(target_t *target);
 int arm7_9_resume(struct target_s *target, int current, u32 address, int handle_breakpoints, int debug_execution);

Modified: trunk/src/target/arm7tdmi.c
===================================================================
--- trunk/src/target/arm7tdmi.c	2009-04-29 00:33:35 UTC (rev 1559)
+++ trunk/src/target/arm7tdmi.c	2009-04-29 01:43:01 UTC (rev 1560)
@@ -43,13 +43,9 @@
 #define _DEBUG_INSTRUCTION_EXECUTION_
 #endif
 
-/* cli handling */
-int arm7tdmi_register_commands(struct command_context_s *cmd_ctx);
-
 /* forward declarations */
 
 int arm7tdmi_target_create(struct target_s *target,Jim_Interp *interp);
-int arm7tdmi_init_target(struct command_context_s *cmd_ctx, struct target_s *target);
 int arm7tdmi_quit(void);
 
 /* target function declarations */

Modified: trunk/src/target/arm926ejs.c
===================================================================
--- trunk/src/target/arm926ejs.c	2009-04-29 00:33:35 UTC (rev 1559)
+++ trunk/src/target/arm926ejs.c	2009-04-29 01:43:01 UTC (rev 1560)
@@ -34,8 +34,6 @@
 #endif
 
 /* cli handling */
-int arm926ejs_register_commands(struct command_context_s *cmd_ctx);
-
 int arm926ejs_handle_cp15_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 int arm926ejs_handle_cp15i_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 int arm926ejs_handle_virt2phys_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
@@ -50,10 +48,8 @@
 int arm926ejs_target_create(struct target_s *target, Jim_Interp *interp);
 int arm926ejs_init_target(struct command_context_s *cmd_ctx, struct target_s *target);
 int arm926ejs_quit(void);
-int arm926ejs_arch_state(struct target_s *target);
 int arm926ejs_read_memory(struct target_s *target, u32 address, u32 size, u32 count, u8 *buffer);
-int arm926ejs_write_memory(struct target_s *target, u32 address, u32 size, u32 count, u8 *buffer);
-int arm926ejs_soft_reset_halt(struct target_s *target);
+
 static int arm926ejs_virt2phys(struct target_s *target, u32 virtual, u32 *physical);
 static int arm926ejs_mmu(struct target_s *target, int *enabled);
 

Modified: trunk/src/target/arm9tdmi.c
===================================================================
--- trunk/src/target/arm9tdmi.c	2009-04-29 00:33:35 UTC (rev 1559)
+++ trunk/src/target/arm9tdmi.c	2009-04-29 01:43:01 UTC (rev 1560)
@@ -48,13 +48,11 @@
 #endif
 
 /* cli handling */
-int arm9tdmi_register_commands(struct command_context_s *cmd_ctx);
 int handle_arm9tdmi_catch_vectors_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
 /* forward declarations */
 int arm9tdmi_target_create( struct target_s *target, Jim_Interp *interp );
 
-int arm9tdmi_init_target(struct command_context_s *cmd_ctx, struct target_s *target);
 int arm9tdmi_quit(void);
 
 target_type_t arm9tdmi_target =

Modified: trunk/src/target/armv4_5.h
===================================================================
--- trunk/src/target/armv4_5.h	2009-04-29 00:33:35 UTC (rev 1559)
+++ trunk/src/target/armv4_5.h	2009-04-29 01:43:01 UTC (rev 1560)
@@ -139,7 +139,6 @@
 
 extern int armv4_5_arch_state(struct target_s *target);
 extern int armv4_5_get_gdb_reg_list(target_t *target, reg_t **reg_list[], int *reg_list_size);
-extern int armv4_5_invalidate_core_regs(target_t *target);
 
 extern int armv4_5_register_commands(struct command_context_s *cmd_ctx);
 extern int armv4_5_init_arch_info(target_t *target, armv4_5_common_t *armv4_5);

Modified: trunk/src/target/armv4_5_mmu.c
===================================================================
--- trunk/src/target/armv4_5_mmu.c	2009-04-29 00:33:35 UTC (rev 1559)
+++ trunk/src/target/armv4_5_mmu.c	2009-04-29 01:43:01 UTC (rev 1560)
@@ -30,8 +30,6 @@
 #include <stdlib.h>
 
 u32 armv4mmu_translate_va(target_t *target, armv4_5_mmu_common_t *armv4_5_mmu, u32 va, int *type, u32 *cb, int *domain, u32 *ap);
-int armv4_5_mmu_read_physical(target_t *target, armv4_5_mmu_common_t *armv4_5_mmu, u32 address, u32 size, u32 count, u8 *buffer);
-int armv4_5_mmu_write_physical(target_t *target, armv4_5_mmu_common_t *armv4_5_mmu, u32 address, u32 size, u32 count, u8 *buffer);
 
 char* armv4_5_mmu_page_type_names[] =
 {

Modified: trunk/src/target/armv7m.h
===================================================================
--- trunk/src/target/armv7m.h	2009-04-29 00:33:35 UTC (rev 1559)
+++ trunk/src/target/armv7m.h	2009-04-29 01:43:01 UTC (rev 1560)
@@ -121,7 +121,6 @@
 
 extern int armv7m_arch_state(struct target_s *target);
 extern int armv7m_get_gdb_reg_list(target_t *target, reg_t **reg_list[], int *reg_list_size);
-extern int armv7m_invalidate_core_regs(target_t *target);
 
 extern int armv7m_register_commands(struct command_context_s *cmd_ctx);
 extern int armv7m_init_arch_info(target_t *target, armv7m_common_t *armv7m);

Modified: trunk/src/target/embeddedice.c
===================================================================
--- trunk/src/target/embeddedice.c	2009-04-29 00:33:35 UTC (rev 1559)
+++ trunk/src/target/embeddedice.c	2009-04-29 01:43:01 UTC (rev 1560)
@@ -86,12 +86,7 @@
 int embeddedice_reg_arch_type = -1;
 
 int embeddedice_get_reg(reg_t *reg);
-void embeddedice_set_reg(reg_t *reg, u32 value);
-int embeddedice_set_reg_w_exec(reg_t *reg, u8 *buf);
 
-void embeddedice_write_reg(reg_t *reg, u32 value);
-int embeddedice_read_reg(reg_t *reg);
-
 reg_cache_t* embeddedice_build_reg_cache(target_t *target, arm7_9_common_t *arm7_9)
 {
 	int retval;

Modified: trunk/src/target/etb.c
===================================================================
--- trunk/src/target/etb.c	2009-04-29 00:33:35 UTC (rev 1559)
+++ trunk/src/target/etb.c	2009-04-29 01:43:01 UTC (rev 1560)
@@ -52,12 +52,7 @@
 int etb_reg_arch_type = -1;
 
 int etb_get_reg(reg_t *reg);
-int etb_set_reg(reg_t *reg, u32 value);
-int etb_set_reg_w_exec(reg_t *reg, u8 *buf);
 
-int etb_write_reg(reg_t *reg, u32 value);
-int etb_read_reg(reg_t *reg);
-
 int handle_etb_config_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
 int etb_set_instr(etb_t *etb, u32 new_instr)

Modified: trunk/src/target/etm.c
===================================================================
--- trunk/src/target/etm.c	2009-04-29 00:33:35 UTC (rev 1559)
+++ trunk/src/target/etm.c	2009-04-29 01:43:01 UTC (rev 1560)
@@ -208,12 +208,7 @@
 int etm_reg_arch_type = -1;
 
 int etm_get_reg(reg_t *reg);
-int etm_set_reg(reg_t *reg, u32 value);
-int etm_set_reg_w_exec(reg_t *reg, u8 *buf);
 
-int etm_write_reg(reg_t *reg, u32 value);
-int etm_read_reg(reg_t *reg);
-
 command_t *etm_cmd = NULL;
 
 reg_cache_t* etm_build_reg_cache(target_t *target, arm_jtag_t *jtag_info, etm_context_t *etm_ctx)
@@ -480,7 +475,6 @@
 /* ETM trace analysis functionality
  *
  */
-extern etm_capture_driver_t etb_capture_driver;
 extern etm_capture_driver_t etm_dummy_capture_driver;
 #if BUILD_OOCD_TRACE == 1
 extern etm_capture_driver_t oocd_trace_capture_driver;



From zwelch at mail.berlios.de  Wed Apr 29 04:18:54 2009
From: zwelch at mail.berlios.de (zwelch at mail.berlios.de)
Date: Wed, 29 Apr 2009 04:18:54 +0200
Subject: [Openocd-svn] r1561 - trunk/src/jtag
Message-ID: <200904290218.n3T2Isnc011003@sheep.berlios.de>

Author: zwelch
Date: 2009-04-29 04:18:50 +0200 (Wed, 29 Apr 2009)
New Revision: 1561

Modified:
   trunk/src/jtag/jlink.c
Log:
Fix jlink for Debian/Ubuntu (by Ben Dooks <ben-openocd at fluff.org>).

Modified: trunk/src/jtag/jlink.c
===================================================================
--- trunk/src/jtag/jlink.c	2009-04-29 01:43:01 UTC (rev 1560)
+++ trunk/src/jtag/jlink.c	2009-04-29 02:18:50 UTC (rev 1561)
@@ -886,12 +886,21 @@
 	}
 	return rc;
 }
+
+static int wrap_usb_bulk_write(usb_dev_handle *dev, int ep,
+			       char *buff, int size, int timeout)
+{
+	/* usb_bulk_write() takes const char *buff */
+	return usb_bulk_write(dev, ep, buff, size, timeout);
+}
+
 static inline int usb_bulk_write_ex(usb_dev_handle *dev, int ep,
 		char *bytes, int size, int timeout)
 {
-	return usb_bulk_with_retries(&usb_bulk_write,
+	return usb_bulk_with_retries(&wrap_usb_bulk_write,
 			dev, ep, bytes, size, timeout);
 }
+
 static inline int usb_bulk_read_ex(usb_dev_handle *dev, int ep,
 		char *bytes, int size, int timeout)
 {



From zwelch at mail.berlios.de  Wed Apr 29 05:28:19 2009
From: zwelch at mail.berlios.de (zwelch at mail.berlios.de)
Date: Wed, 29 Apr 2009 05:28:19 +0200
Subject: [Openocd-svn] r1562 - trunk
Message-ID: <200904290328.n3T3SJq2020536@sheep.berlios.de>

Author: zwelch
Date: 2009-04-29 05:28:12 +0200 (Wed, 29 Apr 2009)
New Revision: 1562

Modified:
   trunk/configure.in
Log:
Add -Wredundant-decls to prevent unwanted duplicate declarations.

Modified: trunk/configure.in
===================================================================
--- trunk/configure.in	2009-04-29 02:18:50 UTC (rev 1561)
+++ trunk/configure.in	2009-04-29 03:28:12 UTC (rev 1562)
@@ -779,6 +779,7 @@
 	GCC_WARNINGS="${GCC_WARNINGS} -Wextra -Wno-unused-parameter"
 	GCC_WARNINGS="${GCC_WARNINGS} -Wbad-function-cast"
 	GCC_WARNINGS="${GCC_WARNINGS} -Wcast-align"
+	GCC_WARNINGS="${GCC_WARNINGS} -Wredundant-decls"
 fi
 if test "${gcc_werror}" = yes; then
 	GCC_WARNINGS="${GCC_WARNINGS} -Werror"



From zwelch at mail.berlios.de  Wed Apr 29 07:22:22 2009
From: zwelch at mail.berlios.de (zwelch at mail.berlios.de)
Date: Wed, 29 Apr 2009 07:22:22 +0200
Subject: [Openocd-svn] r1563 - trunk/src/jtag
Message-ID: <200904290522.n3T5MME9005469@sheep.berlios.de>

Author: zwelch
Date: 2009-04-29 07:22:14 +0200 (Wed, 29 Apr 2009)
New Revision: 1563

Modified:
   trunk/src/jtag/jlink.c
Log:
Remove vestigial last_tms variable from jlink driver.

Modified: trunk/src/jtag/jlink.c
===================================================================
--- trunk/src/jtag/jlink.c	2009-04-29 03:28:12 UTC (rev 1562)
+++ trunk/src/jtag/jlink.c	2009-04-29 05:22:14 UTC (rev 1563)
@@ -621,8 +621,6 @@
 static int pending_scan_results_length;
 static pending_scan_result_t pending_scan_results_buffer[MAX_PENDING_SCAN_RESULTS];
 
-static int last_tms;
-
 static void jlink_tap_init(void)
 {
 	tap_length = 0;
@@ -642,7 +640,6 @@
 
 static void jlink_tap_append_step(int tms, int tdi)
 {
-	last_tms = tms;
 	int index = tap_length / 8;
 
 	if (index >= JLINK_TAP_BUFFER_SIZE)



From zwelch at mail.berlios.de  Wed Apr 29 08:30:47 2009
From: zwelch at mail.berlios.de (zwelch at mail.berlios.de)
Date: Wed, 29 Apr 2009 08:30:47 +0200
Subject: [Openocd-svn] r1564 - trunk/src/jtag
Message-ID: <200904290630.n3T6Ul7B024790@sheep.berlios.de>

Author: zwelch
Date: 2009-04-29 08:30:44 +0200 (Wed, 29 Apr 2009)
New Revision: 1564

Modified:
   trunk/src/jtag/jlink.c
Log:
Fix jlink usb_bulk_with_retries to return actual error codes.

Modified: trunk/src/jtag/jlink.c
===================================================================
--- trunk/src/jtag/jlink.c	2009-04-29 05:22:14 UTC (rev 1563)
+++ trunk/src/jtag/jlink.c	2009-04-29 06:30:44 UTC (rev 1564)
@@ -31,6 +31,7 @@
 
 #include <usb.h>
 #include <string.h>
+#include <errno.h>
 
 #include "log.h"
 
@@ -867,21 +868,17 @@
 		usb_dev_handle *dev, int ep,
 		char *bytes, int size, int timeout)
 {
-	int rc = 0, tries = 3, this_size;
+	int tries = 3, count = 0;
 
-	while (tries && size) {
-
-		this_size = f(dev, ep, bytes, size, timeout);
-		if (this_size > 0) {
-			
-			size -= this_size;
-			rc += this_size;
-			bytes += this_size;
-
-		} else
-			tries --;
+	while (tries && (count < size))
+	{
+		int result = f(dev, ep, bytes + count, size - count, timeout);
+		if (result > 0)
+			count += result;
+		else if ((-ETIMEDOUT != result) || !--tries)
+			return result;
 	}
-	return rc;
+	return count;
 }
 
 static int wrap_usb_bulk_write(usb_dev_handle *dev, int ep,



From zwelch at mail.berlios.de  Wed Apr 29 09:38:44 2009
From: zwelch at mail.berlios.de (zwelch at mail.berlios.de)
Date: Wed, 29 Apr 2009 09:38:44 +0200
Subject: [Openocd-svn] r1565 - in trunk/src: jtag target/interface
Message-ID: <200904290738.n3T7cigj019532@sheep.berlios.de>

Author: zwelch
Date: 2009-04-29 09:38:35 +0200 (Wed, 29 Apr 2009)
New Revision: 1565

Added:
   trunk/src/target/interface/icebear.cfg
Modified:
   trunk/src/jtag/ft2232.c
Log:
Sten <debian at sansys-electronic.com>: add support for ICEbear FDTI-based interface.

Modified: trunk/src/jtag/ft2232.c
===================================================================
--- trunk/src/jtag/ft2232.c	2009-04-29 06:30:44 UTC (rev 1564)
+++ trunk/src/jtag/ft2232.c	2009-04-29 07:38:35 UTC (rev 1565)
@@ -114,6 +114,7 @@
 static int  stm32stick_init(void);
 static int  axm0432_jtag_init(void);
 static int sheevaplug_init(void);
+static int icebear_jtag_init(void);
 
 /* reset procedures for supported layouts */
 static void usbjtag_reset(int trst, int srst);
@@ -125,6 +126,7 @@
 static void stm32stick_reset(int trst, int srst);
 static void axm0432_jtag_reset(int trst, int srst);
 static void sheevaplug_reset(int trst, int srst);
+static void icebear_jtag_reset(int trst, int srst);
 
 /* blink procedures for layouts that support a blinking led */
 static void olimex_jtag_blink(void);
@@ -146,6 +148,7 @@
 	{ "stm32stick",           stm32stick_init,           stm32stick_reset,   NULL                    },
 	{ "axm0432_jtag",         axm0432_jtag_init,         axm0432_jtag_reset, NULL                    },
 	{"sheevaplug",            sheevaplug_init,           sheevaplug_reset,   NULL                    },
+	{ "icebear",              icebear_jtag_init,         icebear_jtag_reset, NULL                    },
 	{ NULL,                   NULL,                      NULL,               NULL                    },
 };
 
@@ -2661,3 +2664,105 @@
 
 	return retval;
 }
+
+/* ---------------------------------------------------------------------
+ * Support for IceBear JTAG adapter from Section5:
+ * 	http://section5.ch/icebear
+ *
+ * Author: Sten, debian at sansys-electronic.com
+ */
+
+/* Icebear pin layout
+ *
+ * ADBUS5 (nEMU) nSRST	| 2   1|	GND (10k->VCC)
+ * GND GND		| 4   3|	n.c.
+ * ADBUS3 TMS		| 6   5|	ADBUS6 VCC
+ * ADBUS0 TCK		| 8   7|	ADBUS7 (GND)
+ * ADBUS4 nTRST		|10   9|	ACBUS0 (GND)
+ * ADBUS1 TDI		|12  11|	ACBUS1 (GND)
+ * ADBUS2 TDO		|14  13|	GND GND
+ *
+ * ADBUS0 O L TCK		ACBUS0 GND
+ * ADBUS1 O L TDI		ACBUS1 GND
+ * ADBUS2 I   TDO		ACBUS2 n.c.
+ * ADBUS3 O H TMS		ACBUS3 n.c.
+ * ADBUS4 O H nTRST
+ * ADBUS5 O H nSRST
+ * ADBUS6 -   VCC
+ * ADBUS7 -   GND
+ */
+static int icebear_jtag_init(void) {
+	u8  buf[3];
+	u32 bytes_written;
+
+	low_direction	= 0x0b;	/* output: TCK TDI TMS; input: TDO */
+	low_output	= 0x08;	/* high: TMS; low: TCK TDI */
+	nTRST		= 0x10;
+	nSRST		= 0x20;
+
+	if ((jtag_reset_config & RESET_TRST_OPEN_DRAIN) != 0) {
+		low_direction	&= ~nTRST;	/* nTRST high impedance */
+	}
+	else {
+		low_direction	|= nTRST;
+		low_output	|= nTRST;
+	}
+
+	low_direction	|= nSRST;
+	low_output	|= nSRST;
+
+	/* initialize low byte for jtag */
+	buf[0] = 0x80;          /* command "set data bits low byte" */
+	buf[1] = low_output;
+	buf[2] = low_direction;
+	LOG_DEBUG("%2.2x %2.2x %2.2x", buf[0], buf[1], buf[2]);
+
+	if ( ( ( ft2232_write(buf, 3, &bytes_written) ) != ERROR_OK ) || (bytes_written != 3) ) {
+		LOG_ERROR("couldn't initialize FT2232 with 'IceBear' layout (low)");
+		return ERROR_JTAG_INIT_FAILED;
+	}
+
+	high_output    = 0x0;
+	high_direction = 0x00;
+
+
+	/* initialize high port */
+	buf[0] = 0x82;              /* command "set data bits high byte" */
+	buf[1] = high_output;       /* value */
+	buf[2] = high_direction;    /* all outputs (xRST and xRSTnOE) */
+	LOG_DEBUG("%2.2x %2.2x %2.2x", buf[0], buf[1], buf[2]);
+
+	if ( ( ( ft2232_write(buf, 3, &bytes_written) ) != ERROR_OK ) || (bytes_written != 3) ) {
+		LOG_ERROR("couldn't initialize FT2232 with 'IceBear' layout (high)");
+		return ERROR_JTAG_INIT_FAILED;
+	}
+
+	return ERROR_OK;
+}
+
+static void icebear_jtag_reset(int trst, int srst) {
+
+	if (trst == 1) {
+		low_direction	|= nTRST;
+		low_output	&= ~nTRST;
+	}
+	else if (trst == 0) {
+		if ((jtag_reset_config & RESET_TRST_OPEN_DRAIN) != 0)
+			low_direction	&= ~nTRST;
+		else
+			low_output	|= nTRST;
+	}
+
+	if (srst == 1) {
+		low_output &= ~nSRST;
+	}
+	else if (srst == 0) {
+		low_output |= nSRST;
+	}
+
+	/* command "set data bits low byte" */
+	BUFFER_ADD = 0x80;
+	BUFFER_ADD = low_output;
+	BUFFER_ADD = low_direction;
+	LOG_DEBUG("trst: %i, srst: %i, low_output: 0x%2.2x, low_direction: 0x%2.2x", trst, srst, low_output, low_direction);
+}

Added: trunk/src/target/interface/icebear.cfg
===================================================================
--- trunk/src/target/interface/icebear.cfg	2009-04-29 06:30:44 UTC (rev 1564)
+++ trunk/src/target/interface/icebear.cfg	2009-04-29 07:38:35 UTC (rev 1565)
@@ -0,0 +1,23 @@
+#####################################################
+# IceBear Configuration
+#
+# http://section5.ch/icebear
+#
+# Author: Sten, debian at sansys-electronic.com
+#####################################################
+#
+# Add file /etc/udev/rules.d/45-icebear.rules
+#
+#BUS!="usb", ACTION!="add", SUBSYSTEM!=="usb_device", GOTO="kcontrol_rules_end"
+#
+#SYSFS{idProduct}=="c140", SYSFS{idVendor}=="0403", MODE="666", GROUP="usb"
+#SYSFS{idProduct}=="c141", SYSFS{idVendor}=="0403", MODE="666", GROUP="usb"
+#
+#LABEL="kcontrol_rules_end"
+#
+
+interface ft2232
+#ft2232_device_desc ""
+ft2232_layout icebear
+ft2232_vid_pid 0x0403 0xc140
+



From zwelch at mail.berlios.de  Wed Apr 29 09:40:12 2009
From: zwelch at mail.berlios.de (zwelch at mail.berlios.de)
Date: Wed, 29 Apr 2009 09:40:12 +0200
Subject: [Openocd-svn] r1566 - trunk/src/target/board
Message-ID: <200904290740.n3T7eCGx020416@sheep.berlios.de>

Author: zwelch
Date: 2009-04-29 09:40:07 +0200 (Wed, 29 Apr 2009)
New Revision: 1566

Added:
   trunk/src/target/board/olimex_LPC2378STK.cfg
Log:
Sten <debian at sansys-electronic.com>: add support for Olimex LPC2378STK eval board.

Added: trunk/src/target/board/olimex_LPC2378STK.cfg
===================================================================
--- trunk/src/target/board/olimex_LPC2378STK.cfg	2009-04-29 07:38:35 UTC (rev 1565)
+++ trunk/src/target/board/olimex_LPC2378STK.cfg	2009-04-29 07:40:07 UTC (rev 1566)
@@ -0,0 +1,11 @@
+#####################################################
+# Olimex LPC2378STK eval board
+#
+# http://olimex.com/dev/lpc-2378stk.html
+#
+# Author: Sten, debian at sansys-electronic.com
+#####################################################
+#
+
+source [find target/lpc2378.cfg]
+



From oharboe at mail.berlios.de  Wed Apr 29 13:37:34 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Wed, 29 Apr 2009 13:37:34 +0200
Subject: [Openocd-svn] r1567 - trunk/src/target
Message-ID: <200904291137.n3TBbY3i019113@sheep.berlios.de>

Author: oharboe
Date: 2009-04-29 13:37:33 +0200 (Wed, 29 Apr 2009)
New Revision: 1567

Modified:
   trunk/src/target/arm11.h
   trunk/src/target/arm11_dbgtap.c
Log:
comments and debug code

Modified: trunk/src/target/arm11.h
===================================================================
--- trunk/src/target/arm11.h	2009-04-29 07:40:07 UTC (rev 1566)
+++ trunk/src/target/arm11.h	2009-04-29 11:37:33 UTC (rev 1567)
@@ -56,7 +56,10 @@
 	int __retval = (action);								\
 															\
 	if (__retval != ERROR_OK)								\
+	{														\
+		LOG_DEBUG("error while calling \"" # action "\"");	\
 		return __retval;									\
+	}														\
 															\
 } while (0)
 

Modified: trunk/src/target/arm11_dbgtap.c
===================================================================
--- trunk/src/target/arm11_dbgtap.c	2009-04-29 07:40:07 UTC (rev 1566)
+++ trunk/src/target/arm11_dbgtap.c	2009-04-29 11:37:33 UTC (rev 1567)
@@ -36,6 +36,13 @@
 #define JTAG_DEBUG(expr ...)	do {} while(0)
 #endif
 
+/*
+This pathmove goes from Pause-IR to Shift-IR while avoiding RTI. The
+behavior of the FTDI driver IIRC was to go via RTI.
+
+Conversely there may be other places in this code where the ARM11 code relies
+on the driver to hit through RTI when coming from Update-?R.
+*/
 tap_state_t arm11_move_pi_to_si_via_ci[] =
 {
     TAP_IREXIT2, TAP_IRUPDATE, TAP_DRSELECT, TAP_IRSELECT, TAP_IRCAPTURE, TAP_IRSHIFT
@@ -476,6 +483,8 @@
  *  layer (FT2232) that is long enough to finish execution on
  *  the core but still shorter than any manually inducible delays.
  *
+ *  To disable this code, try "memwrite burst false"
+ *
  */
 tap_state_t arm11_MOVE_DRPAUSE_IDLE_DRPAUSE_with_delay[] =
 {
@@ -613,7 +622,7 @@
 		do
 		{
 			arm11_add_dr_scan_vc(asizeof(chain5_fields), chain5_fields, count ? TAP_IDLE : TAP_DRPAUSE);
-			
+
 			CHECK_RETVAL(jtag_execute_queue());
 
 			JTAG_DEBUG("DTR  Data %08x  Ready %d  nRetry %d", Data, Ready, nRetry);
@@ -715,7 +724,7 @@
 			JTAG_DEBUG("SC7 <= Address %02x  Data %08x    nRW %d", AddressOut, DataOut, nRW);
 
 			arm11_add_dr_scan_vc(asizeof(chain7_fields), chain7_fields, TAP_DRPAUSE);
-			
+
 			CHECK_RETVAL(jtag_execute_queue());
 
 			JTAG_DEBUG("SC7 => Address %02x  Data %08x  Ready %d", AddressIn, DataIn, Ready);



From ntfreak at mail.berlios.de  Wed Apr 29 15:24:06 2009
From: ntfreak at mail.berlios.de (ntfreak at BerliOS)
Date: Wed, 29 Apr 2009 15:24:06 +0200
Subject: [Openocd-svn] r1568 - in trunk/src/target: board interface
Message-ID: <200904291324.n3TDO6nx014702@sheep.berlios.de>

Author: ntfreak
Date: 2009-04-29 15:24:05 +0200 (Wed, 29 Apr 2009)
New Revision: 1568

Modified:
   trunk/src/target/board/olimex_LPC2378STK.cfg
   trunk/src/target/interface/icebear.cfg
Log:
- add missing svn props from svn 1565 commit


Property changes on: trunk/src/target/board/olimex_LPC2378STK.cfg
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: trunk/src/target/interface/icebear.cfg
___________________________________________________________________
Name: svn:eol-style
   + native



From mlu at mail.berlios.de  Wed Apr 29 20:17:52 2009
From: mlu at mail.berlios.de (mlu at mail.berlios.de)
Date: Wed, 29 Apr 2009 20:17:52 +0200
Subject: [Openocd-svn] r1569 - trunk/src/target
Message-ID: <200904291817.n3TIHql5029912@sheep.berlios.de>

Author: mlu
Date: 2009-04-29 20:17:51 +0200 (Wed, 29 Apr 2009)
New Revision: 1569

Modified:
   trunk/src/target/arm_adi_v5.c
Log:
More error logging for DAP errors

Modified: trunk/src/target/arm_adi_v5.c
===================================================================
--- trunk/src/target/arm_adi_v5.c	2009-04-29 13:24:05 UTC (rev 1568)
+++ trunk/src/target/arm_adi_v5.c	2009-04-29 18:17:51 UTC (rev 1569)
@@ -247,7 +247,7 @@
 		}
 		else
 		{
-			u32 mem_ap_csw;
+			u32 mem_ap_csw, mem_ap_tar;
 
 			/* Print information about last AHBAP access */
 			LOG_ERROR("AHBAP Cached values: dp_select 0x%x, ap_csw 0x%x, ap_tar 0x%x", swjdp->dp_select_value, swjdp->ap_csw_value, swjdp->ap_tar_value);
@@ -266,9 +266,10 @@
 			LOG_DEBUG("swjdp: status 0x%x", ctrlstat);
 
 			dap_ap_read_reg_u32(swjdp, AP_REG_CSW, &mem_ap_csw);
+			dap_ap_read_reg_u32(swjdp, AP_REG_TAR, &mem_ap_tar);
 			if ((retval=jtag_execute_queue())!=ERROR_OK)
 				return retval;
-			LOG_ERROR("Read MEM_AP_CSW 0x%x", mem_ap_csw);
+			LOG_ERROR("Read MEM_AP_CSW 0x%x, MEM_AP_TAR 0x%x", mem_ap_csw, mem_ap_tar);
 
 		}
 		if ((retval=jtag_execute_queue())!=ERROR_OK)



From zwelch at mail.berlios.de  Wed Apr 29 20:26:14 2009
From: zwelch at mail.berlios.de (zwelch at mail.berlios.de)
Date: Wed, 29 Apr 2009 20:26:14 +0200
Subject: [Openocd-svn] r1570 - trunk/contrib
Message-ID: <200904291826.n3TIQEQa031770@sheep.berlios.de>

Author: zwelch
Date: 2009-04-29 20:26:11 +0200 (Wed, 29 Apr 2009)
New Revision: 1570

Modified:
   trunk/contrib/openocd.udev
Log:
Add udev rules for USB ICEbear interface.

Modified: trunk/contrib/openocd.udev
===================================================================
--- trunk/contrib/openocd.udev	2009-04-29 18:17:51 UTC (rev 1569)
+++ trunk/contrib/openocd.udev	2009-04-29 18:26:11 UTC (rev 1570)
@@ -52,5 +52,9 @@
 # Marvell Sheevaplug
 SYSFS{idVendor}=="9e88", SYSFS{idProduct}=="9e8f", MODE="664", GROUP="plugdev"
 
+# Icebear (Section5)
+SYSFS{idProduct}=="c140", SYSFS{idVendor}=="0403", MODE="666", GROUP="usb"
+SYSFS{idProduct}=="c141", SYSFS{idVendor}=="0403", MODE="666", GROUP="usb"
+
 LABEL="openocd_rules_end"
 



From mlu at mail.berlios.de  Wed Apr 29 23:08:41 2009
From: mlu at mail.berlios.de (mlu at mail.berlios.de)
Date: Wed, 29 Apr 2009 23:08:41 +0200
Subject: [Openocd-svn] r1571 - trunk/src/flash
Message-ID: <200904292108.n3TL8fbS020344@sheep.berlios.de>

Author: mlu
Date: 2009-04-29 23:08:39 +0200 (Wed, 29 Apr 2009)
New Revision: 1571

Modified:
   trunk/src/flash/stm32x.c
Log:
Clear FLASH_SR error flags after flash errors to avoid reset befor further flash operations.

Modified: trunk/src/flash/stm32x.c
===================================================================
--- trunk/src/flash/stm32x.c	2009-04-29 18:26:11 UTC (rev 1570)
+++ trunk/src/flash/stm32x.c	2009-04-29 21:08:39 UTC (rev 1571)
@@ -120,6 +120,7 @@
 
 static u32 stm32x_wait_status_busy(flash_bank_t *bank, int timeout)
 {
+	target_t *target = bank->target;
 	u32 status;
 	
 	/* wait for busy to clear */
@@ -128,7 +129,11 @@
 		LOG_DEBUG("status: 0x%x", status);
 		alive_sleep(1);
 	}
-	
+	/* Clear but report errors */
+	if (status & (FLASH_WRPRTERR|FLASH_PGERR))
+	{
+		target_write_u32(target, STM32_FLASH_SR, FLASH_WRPRTERR|FLASH_PGERR);	
+	}
 	return status;
 }
 
@@ -568,6 +573,8 @@
 		if (buf_get_u32(reg_params[3].value, 0, 32) & FLASH_PGERR)
 		{
 			LOG_ERROR("flash memory not erased before writing");
+			/* Clear but report errors */
+			target_write_u32(target, STM32_FLASH_SR, FLASH_PGERR);	
 			retval = ERROR_FLASH_OPERATION_FAILED;
 			break;
 		}
@@ -575,6 +582,8 @@
 		if (buf_get_u32(reg_params[3].value, 0, 32) & FLASH_WRPRTERR)
 		{
 			LOG_ERROR("flash memory write protected");
+			/* Clear but report errors */
+			target_write_u32(target, STM32_FLASH_SR, FLASH_WRPRTERR);	
 			retval = ERROR_FLASH_OPERATION_FAILED;
 			break;
 		}



From zwelch at mail.berlios.de  Thu Apr 30 02:58:02 2009
From: zwelch at mail.berlios.de (zwelch at mail.berlios.de)
Date: Thu, 30 Apr 2009 02:58:02 +0200
Subject: [Openocd-svn] r1572 - trunk/src/helper
Message-ID: <200904300058.n3U0w2NN003135@sheep.berlios.de>

Author: zwelch
Date: 2009-04-30 02:57:58 +0200 (Thu, 30 Apr 2009)
New Revision: 1572

Modified:
   trunk/src/helper/jim.c
Log:
Michael Bruck <mbruck at digenius.de>: use HAVE_UNISTD_H for environ decl.

Modified: trunk/src/helper/jim.c
===================================================================
--- trunk/src/helper/jim.c	2009-04-29 21:08:39 UTC (rev 1571)
+++ trunk/src/helper/jim.c	2009-04-30 00:57:58 UTC (rev 1572)
@@ -11979,7 +11979,7 @@
 
     if (argc == 1) {
 
-#if !defined(_WIN32) && !defined(__USE_GNU)
+#ifndef HAVE_UNISTD_H
         extern char **environ;
 #endif
 



From zwelch at mail.berlios.de  Thu Apr 30 02:59:50 2009
From: zwelch at mail.berlios.de (zwelch at mail.berlios.de)
Date: Thu, 30 Apr 2009 02:59:50 +0200
Subject: [Openocd-svn] r1573 - trunk/src/jtag
Message-ID: <200904300059.n3U0xo4Q003698@sheep.berlios.de>

Author: zwelch
Date: 2009-04-30 02:59:46 +0200 (Thu, 30 Apr 2009)
New Revision: 1573

Modified:
   trunk/src/jtag/ft2232.c
Log:
Michael Bruck <mbruck at digenius.de>: sys/select.h must preceed windows.h.

Modified: trunk/src/jtag/ft2232.c
===================================================================
--- trunk/src/jtag/ft2232.c	2009-04-30 00:57:58 UTC (rev 1572)
+++ trunk/src/jtag/ft2232.c	2009-04-30 00:59:46 UTC (rev 1573)
@@ -33,12 +33,12 @@
 #include "config.h"
 #endif
 
+#include "replacements.h"
+
 #if IS_CYGWIN == 1
 #include "windows.h"
 #endif
 
-#include "replacements.h"
-
 /* project specific includes */
 #include "log.h"
 #include "types.h"



From oharboe at mail.berlios.de  Thu Apr 30 08:26:23 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Thu, 30 Apr 2009 08:26:23 +0200
Subject: [Openocd-svn] r1574 - trunk/src/target/target
Message-ID: <200904300626.n3U6QNrV016193@sheep.berlios.de>

Author: oharboe
Date: 2009-04-30 08:26:22 +0200 (Thu, 30 Apr 2009)
New Revision: 1574

Removed:
   trunk/src/target/target/lpc2148_2mhz.cfg
   trunk/src/target/target/lpc2148_rclk.cfg
Modified:
   trunk/src/target/target/lpc2148.cfg
Log:
use jtag_rclk 500 to avoid proliferation of target scripts

Modified: trunk/src/target/target/lpc2148.cfg
===================================================================
--- trunk/src/target/target/lpc2148.cfg	2009-04-30 00:59:46 UTC (rev 1573)
+++ trunk/src/target/target/lpc2148.cfg	2009-04-30 06:26:22 UTC (rev 1574)
@@ -1,3 +1,8 @@
+# Use RCLK. If RCLK is not available fall back to 500kHz. 
+# 
+# Depending on cabling you might be able to eek this up to 2000kHz.
+jtag_rclk 500
+
 if { [info exists CHIPNAME] } {	
    set _CHIPNAME $CHIPNAME
 } else {

Deleted: trunk/src/target/target/lpc2148_2mhz.cfg
===================================================================
--- trunk/src/target/target/lpc2148_2mhz.cfg	2009-04-30 00:59:46 UTC (rev 1573)
+++ trunk/src/target/target/lpc2148_2mhz.cfg	2009-04-30 06:26:22 UTC (rev 1574)
@@ -1,4 +0,0 @@
-# 2MHz
-jtag_khz 2000
-script target/lpc2148.cfg
-

Deleted: trunk/src/target/target/lpc2148_rclk.cfg
===================================================================
--- trunk/src/target/target/lpc2148_rclk.cfg	2009-04-30 00:59:46 UTC (rev 1573)
+++ trunk/src/target/target/lpc2148_rclk.cfg	2009-04-30 06:26:22 UTC (rev 1574)
@@ -1,4 +0,0 @@
-# RCLK
-jtag_khz 0
-script target/lpc2148.cfg
-



From oharboe at mail.berlios.de  Thu Apr 30 10:08:50 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Thu, 30 Apr 2009 10:08:50 +0200
Subject: [Openocd-svn] r1575 - trunk/src/flash
Message-ID: <200904300808.n3U88oJP004671@sheep.berlios.de>

Author: oharboe
Date: 2009-04-30 10:08:49 +0200 (Thu, 30 Apr 2009)
New Revision: 1575

Modified:
   trunk/src/flash/flash.c
Log:
flash fillX now has a verify stage

Modified: trunk/src/flash/flash.c
===================================================================
--- trunk/src/flash/flash.c	2009-04-30 06:26:22 UTC (rev 1574)
+++ trunk/src/flash/flash.c	2009-04-30 08:08:49 UTC (rev 1575)
@@ -726,6 +726,7 @@
 	u32 pattern;
 	u32 count;
 	u8 chunk[1024];
+	u8 readback[1024];
 	u32 wrote = 0;
 	u32 cur_size = 0;
 	u32 chunk_count;
@@ -799,6 +800,21 @@
 		err = flash_driver_write(bank, chunk, address - bank->base + wrote, cur_size);
 		if (err!=ERROR_OK)
 			return err;
+
+		err = target_read_buffer(target, address + wrote, cur_size, readback);
+		if (err!=ERROR_OK)
+			return err;
+
+		int i;
+		for (i=0; i<cur_size; i++)
+		{
+			if (readback[i]!=chunk[i])
+			{
+				LOG_ERROR("Verfication error address 0x%08x, read back 0x%02x, expected 0x%02x", address + wrote + i, readback[i], chunk[i]);
+				return ERROR_FAIL;
+			}
+		}
+
 	}
 
 	if ((retval = duration_stop_measure(&duration, &duration_text)) != ERROR_OK)



From oharboe at mail.berlios.de  Thu Apr 30 10:15:28 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Thu, 30 Apr 2009 10:15:28 +0200
Subject: [Openocd-svn] r1576 - trunk/src/flash
Message-ID: <200904300815.n3U8FS77005444@sheep.berlios.de>

Author: oharboe
Date: 2009-04-30 10:15:27 +0200 (Thu, 30 Apr 2009)
New Revision: 1576

Modified:
   trunk/src/flash/lpc2000.c
Log:
no change

Modified: trunk/src/flash/lpc2000.c
===================================================================
--- trunk/src/flash/lpc2000.c	2009-04-30 08:08:49 UTC (rev 1575)
+++ trunk/src/flash/lpc2000.c	2009-04-30 08:15:27 UTC (rev 1576)
@@ -17,6 +17,7 @@
  *   Free Software Foundation, Inc.,                                       *
  *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
  ***************************************************************************/
+
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
@@ -60,7 +61,7 @@
 static int lpc2000_erase_check(struct flash_bank_s *bank);
 static int lpc2000_protect_check(struct flash_bank_s *bank);
 static int lpc2000_info(struct flash_bank_s *bank, char *buf, int buf_size);
-	
+
 static int lpc2000_handle_part_id_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
 flash_driver_t lpc2000_flash =
@@ -81,25 +82,25 @@
 static int lpc2000_register_commands(struct command_context_s *cmd_ctx)
 {
 	command_t *lpc2000_cmd = register_command(cmd_ctx, NULL, "lpc2000", NULL, COMMAND_ANY, NULL);
-	
+
 	register_command(cmd_ctx, lpc2000_cmd, "part_id", lpc2000_handle_part_id_command, COMMAND_EXEC,
 					 "print part id of lpc2000 flash bank <num>");
-	
+
 	return ERROR_OK;
 }
 
 static int lpc2000_build_sector_list(struct flash_bank_s *bank)
 {
 	lpc2000_flash_bank_t *lpc2000_info = bank->driver_priv;
-	
+
 	/* default to a 4096 write buffer */
 	lpc2000_info->cmd51_max_buffer = 4096;
-	
+
 	if (lpc2000_info->variant == 1)
 	{
 		int i = 0;
 		u32 offset = 0;
-		
+
 		/* variant 1 has different layout for 128kb and 256kb flashes */
 		if (bank->size == 128 * 1024)
 		{
@@ -118,7 +119,7 @@
 		{
 			bank->num_sectors = 18;
 			bank->sectors = malloc(sizeof(flash_sector_t) * 18);
-			
+
 			for (i = 0; i < 8; i++)
 			{
 				bank->sectors[i].offset = offset;
@@ -155,7 +156,7 @@
 		int num_sectors;
 		int i;
 		u32 offset = 0;
-	
+
 		/* variant 2 has a uniform layout, only number of sectors differs */
 		switch (bank->size)
 		{
@@ -191,10 +192,10 @@
 				exit(-1);
 				break;
 		}
-		
+
 		bank->num_sectors = num_sectors;
 		bank->sectors = malloc(sizeof(flash_sector_t) * num_sectors);
-		
+
 		for (i = 0; i < num_sectors; i++)
 		{
 			if ((i >= 0) && (i < 8))
@@ -228,7 +229,7 @@
 		LOG_ERROR("BUG: unknown lpc2000_info->variant encountered");
 		exit(-1);
 	}
-	
+
 	return ERROR_OK;
 }
 
@@ -248,19 +249,19 @@
 	reg_param_t reg_params[5];
 	armv4_5_algorithm_t armv4_5_info;
 	u32 status_code;
-	
+
 	/* regrab previously allocated working_area, or allocate a new one */
 	if (!lpc2000_info->iap_working_area)
 	{
 		u8 jump_gate[8];
-		
+
 		/* make sure we have a working area */
 		if (target_alloc_working_area(target, 172, &lpc2000_info->iap_working_area) != ERROR_OK)
 		{
 			LOG_ERROR("no working area specified, can't write LPC2000 internal flash");
 			return ERROR_FLASH_OPERATION_FAILED;
 		}
-		
+
 		/* write IAP code to working area */
 		target_buffer_set_u32(target, jump_gate, ARMV4_5_BX(12));
 		target_buffer_set_u32(target, jump_gate + 4, ARMV4_5_B(0xfffffe, 0));
@@ -269,11 +270,11 @@
 			return retval;
 		}
 	}
-	
+
 	armv4_5_info.common_magic = ARMV4_5_COMMON_MAGIC;
 	armv4_5_info.core_mode = ARMV4_5_MODE_SVC;
 	armv4_5_info.core_state = ARMV4_5_STATE_ARM;
-	
+
 	/* command parameter table */
 	init_mem_param(&mem_params[0], lpc2000_info->iap_working_area->address + 8, 4 * 6, PARAM_OUT);
 	target_buffer_set_u32(target, mem_params[0].value, code);
@@ -282,20 +283,20 @@
 	target_buffer_set_u32(target, mem_params[0].value + 0xc, param_table[2]);
 	target_buffer_set_u32(target, mem_params[0].value + 0x10, param_table[3]);
 	target_buffer_set_u32(target, mem_params[0].value + 0x14, param_table[4]);
-	
+
 	init_reg_param(&reg_params[0], "r0", 32, PARAM_OUT);
 	buf_set_u32(reg_params[0].value, 0, 32, lpc2000_info->iap_working_area->address + 0x8);
-	
+
 	/* command result table */
 	init_mem_param(&mem_params[1], lpc2000_info->iap_working_area->address + 0x20, 4 * 3, PARAM_IN);
-	
+
 	init_reg_param(&reg_params[1], "r1", 32, PARAM_OUT);
 	buf_set_u32(reg_params[1].value, 0, 32, lpc2000_info->iap_working_area->address + 0x20);
-	
+
 	/* IAP entry point */
 	init_reg_param(&reg_params[2], "r12", 32, PARAM_OUT);
 	buf_set_u32(reg_params[2].value, 0, 32, 0x7ffffff1);
-	
+
 	/* IAP stack */
 	init_reg_param(&reg_params[3], "r13_svc", 32, PARAM_OUT);
 	buf_set_u32(reg_params[3].value, 0, 32, lpc2000_info->iap_working_area->address + 0xac);
@@ -303,22 +304,22 @@
 	/* return address */
 	init_reg_param(&reg_params[4], "lr_svc", 32, PARAM_OUT);
 	buf_set_u32(reg_params[4].value, 0, 32, lpc2000_info->iap_working_area->address + 0x4);
-	
+
 	target->type->run_algorithm(target, 2, mem_params, 5, reg_params, lpc2000_info->iap_working_area->address, lpc2000_info->iap_working_area->address + 0x4, 10000, &armv4_5_info);
-	
+
 	status_code = buf_get_u32(mem_params[1].value, 0, 32);
 	result_table[0] = target_buffer_get_u32(target, mem_params[1].value);
 	result_table[1] = target_buffer_get_u32(target, mem_params[1].value + 4);
-	
+
 	destroy_mem_param(&mem_params[0]);
 	destroy_mem_param(&mem_params[1]);
-	
+
 	destroy_reg_param(&reg_params[0]);
 	destroy_reg_param(&reg_params[1]);
 	destroy_reg_param(&reg_params[2]);
 	destroy_reg_param(&reg_params[3]);
 	destroy_reg_param(&reg_params[4]);
-	
+
 	return status_code;
 }
 
@@ -328,16 +329,16 @@
 	u32 result_table[2];
 	int status_code;
 	int i;
-	
+
 	if ((first < 0) || (last >= bank->num_sectors))
 		return ERROR_FLASH_SECTOR_INVALID;
-	
+
 	for (i = first; i <= last; i++)
 	{
 		/* check single sector */
 		param_table[0] = param_table[1] = i;
 		status_code = lpc2000_iap_call(bank, 53, param_table, result_table);
-		
+
 		switch (status_code)
 		{
 			case ERROR_FLASH_OPERATION_FAILED:
@@ -359,7 +360,7 @@
 				exit(-1);
 		}
 	}
-	
+
 	return ERROR_OK;
 }
 
@@ -368,16 +369,16 @@
 static int lpc2000_flash_bank_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, struct flash_bank_s *bank)
 {
 	lpc2000_flash_bank_t *lpc2000_info;
-	
+
 	if (argc < 8)
 	{
 		LOG_WARNING("incomplete flash_bank lpc2000 configuration");
 		return ERROR_FLASH_BANK_INVALID;
 	}
-	
+
 	lpc2000_info = malloc(sizeof(lpc2000_flash_bank_t));
 	bank->driver_priv = lpc2000_info;
-	
+
 	if (strcmp(args[6], "lpc2000_v1") == 0)
 	{
 		lpc2000_info->variant = 1;
@@ -398,18 +399,18 @@
 		free(lpc2000_info);
 		return ERROR_FLASH_BANK_INVALID;
 	}
-	
+
 	lpc2000_info->iap_working_area = NULL;
 	lpc2000_info->cclk = strtoul(args[7], NULL, 0);
 	lpc2000_info->calc_checksum = 0;
 	lpc2000_build_sector_list(bank);
-		
+
 	if (argc >= 9)
 	{
 		if (strcmp(args[8], "calc_checksum") == 0)
 			lpc2000_info->calc_checksum = 1;
 	}
-	
+
 	return ERROR_OK;
 }
 
@@ -419,7 +420,7 @@
 	u32 param_table[5];
 	u32 result_table[2];
 	int status_code;
-	
+
 	if (bank->target->state != TARGET_HALTED)
 	{
 		LOG_ERROR("Target not halted");
@@ -429,7 +430,7 @@
 	param_table[0] = first;
 	param_table[1] = last;
 	param_table[2] = lpc2000_info->cclk;
-	
+
 	/* Prepare sectors */
 	status_code = lpc2000_iap_call(bank, 50, param_table, result_table);
 	switch (status_code)
@@ -445,7 +446,7 @@
 			LOG_WARNING("lpc2000 prepare sectors returned %i", status_code);
 			return ERROR_FLASH_OPERATION_FAILED;
 	}
-	
+
 	/* Erase sectors */
 	status_code = lpc2000_iap_call(bank, 52, param_table, result_table);
 	switch (status_code)
@@ -461,7 +462,7 @@
 			LOG_WARNING("lpc2000 erase sectors returned %i", status_code);
 			return ERROR_FLASH_OPERATION_FAILED;
 	}
-	
+
 	return ERROR_OK;
 }
 
@@ -486,27 +487,27 @@
 	int i;
 	working_area_t *download_area;
 	int retval = ERROR_OK;
-		 
+
 	if (bank->target->state != TARGET_HALTED)
 	{
 		LOG_ERROR("Target not halted");
 		return ERROR_TARGET_NOT_HALTED;
 	}
-	
+
 	if (offset + count > bank->size)
 		return ERROR_FLASH_DST_OUT_OF_BANK;
-		
+
 	if (lpc2000_info->cmd51_can_256b)
 		dst_min_alignment = 256;
 	else
 		dst_min_alignment = 512;
-	
+
 	if (offset % dst_min_alignment)
 	{
 		LOG_WARNING("offset 0x%x breaks required alignment 0x%x", offset, dst_min_alignment);
 		return ERROR_FLASH_DST_BREAKS_ALIGNMENT;
 	}
-	
+
 	for (i = 0; i < bank->num_sectors; i++)
 	{
 		if (offset >= bank->sectors[i].offset)
@@ -514,7 +515,7 @@
 		if (offset + CEIL(count, dst_min_alignment) * dst_min_alignment > bank->sectors[i].offset)
 			last_sector = i;
 	}
-	
+
 	LOG_DEBUG("first_sector: %i, last_sector: %i", first_sector, last_sector);
 
 	/* check if exception vectors should be flashed */
@@ -532,14 +533,14 @@
 		LOG_DEBUG("checksum: 0x%8.8x", checksum);
 		buf_set_u32(buffer + 0x14, 0, 32, checksum);
 	}
-	
+
 	/* allocate a working area */
 	if (target_alloc_working_area(target, lpc2000_info->cmd51_max_buffer, &download_area) != ERROR_OK)
 	{
 		LOG_ERROR("no working area specified, can't write LPC2000 internal flash");
 		return ERROR_FLASH_OPERATION_FAILED;
 	}
-	
+
 	while (bytes_remaining > 0)
 	{
 		u32 thisrun_bytes;
@@ -551,7 +552,7 @@
 			thisrun_bytes = 512;
 		else
 			thisrun_bytes = 256;
-		
+
 		/* Prepare sectors */
 		param_table[0] = first_sector;
 		param_table[1] = last_sector;
@@ -575,7 +576,7 @@
 		/* Exit if error occured */
 		if (retval != ERROR_OK)
 			break;
-		
+
 		if (bytes_remaining >= thisrun_bytes)
 		{
 			if ((retval = target_write_buffer(bank->target, download_area->address, thisrun_bytes, buffer + bytes_written)) != ERROR_OK)
@@ -594,9 +595,9 @@
 			target_write_buffer(bank->target, download_area->address, thisrun_bytes, last_buffer);
 			free(last_buffer);
 		}
-		
+
 		LOG_DEBUG("writing 0x%x bytes to address 0x%x", thisrun_bytes, bank->base + offset + bytes_written);
-		
+
 		/* Write data */
 		param_table[0] = bank->base + offset + bytes_written;
 		param_table[1] = download_area->address;
@@ -618,26 +619,26 @@
 				retval = ERROR_FLASH_OPERATION_FAILED;
 				break;
 		}
-		
+
 		/* Exit if error occured */
 		if (retval != ERROR_OK)
 			break;
-		
+
 		if (bytes_remaining > thisrun_bytes)
 			bytes_remaining -= thisrun_bytes;
 		else
 			bytes_remaining = 0;
 		bytes_written += thisrun_bytes;
 	}
-	
+
 	target_free_working_area(target, download_area);
-	
+
 	return retval;
 }
 
 static int lpc2000_probe(struct flash_bank_s *bank)
 {
-	/* we can't probe on an lpc2000 
+	/* we can't probe on an lpc2000
 	 * if this is an lpc2xxx, it has the configured flash
 	 */
 	return ERROR_OK;
@@ -650,7 +651,7 @@
 		LOG_ERROR("Target not halted");
 		return ERROR_TARGET_NOT_HALTED;
 	}
-	
+
 	return lpc2000_iap_blank_check(bank, 0, bank->num_sectors - 1);
 }
 
@@ -665,7 +666,7 @@
 	lpc2000_flash_bank_t *lpc2000_info = bank->driver_priv;
 
 	snprintf(buf, buf_size, "lpc2000 flash driver variant: %i, clk: %i", lpc2000_info->variant, lpc2000_info->cclk);
-	
+
 	return ERROR_OK;
 }
 
@@ -680,7 +681,7 @@
 	{
 		return ERROR_COMMAND_SYNTAX_ERROR;
 	}
-	
+
 	bank = get_flash_bank_by_num(strtoul(args[0], NULL, 0));
 	if (!bank)
 	{
@@ -693,7 +694,7 @@
 		LOG_ERROR("Target not halted");
 		return ERROR_TARGET_NOT_HALTED;
 	}
-	
+
 	if ((status_code = lpc2000_iap_call(bank, 54, param_table, result_table)) != 0x0)
 	{
 		if (status_code == ERROR_FLASH_OPERATION_FAILED)
@@ -707,6 +708,6 @@
 	{
 		command_print(cmd_ctx, "lpc2000 part id: 0x%8.8x", result_table[0]);
 	}
-	
+
 	return ERROR_OK;
 }



From zwelch at mail.berlios.de  Thu Apr 30 11:14:05 2009
From: zwelch at mail.berlios.de (zwelch at mail.berlios.de)
Date: Thu, 30 Apr 2009 11:14:05 +0200
Subject: [Openocd-svn] r1577 - trunk/src/flash
Message-ID: <200904300914.n3U9E5Qx011581@sheep.berlios.de>

Author: zwelch
Date: 2009-04-30 11:14:01 +0200 (Thu, 30 Apr 2009)
New Revision: 1577

Modified:
   trunk/src/flash/flash.c
Log:
Fix signed/unsigned comparison.

Modified: trunk/src/flash/flash.c
===================================================================
--- trunk/src/flash/flash.c	2009-04-30 08:15:27 UTC (rev 1576)
+++ trunk/src/flash/flash.c	2009-04-30 09:14:01 UTC (rev 1577)
@@ -805,7 +805,7 @@
 		if (err!=ERROR_OK)
 			return err;
 
-		int i;
+		unsigned i;
 		for (i=0; i<cur_size; i++)
 		{
 			if (readback[i]!=chunk[i])



From oharboe at mail.berlios.de  Thu Apr 30 11:39:28 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Thu, 30 Apr 2009 11:39:28 +0200
Subject: [Openocd-svn] r1578 - trunk/src/flash
Message-ID: <200904300939.n3U9dSh0014335@sheep.berlios.de>

Author: oharboe
Date: 2009-04-30 11:39:24 +0200 (Thu, 30 Apr 2009)
New Revision: 1578

Modified:
   trunk/src/flash/lpc2000.c
Log:
Print out warning when LPC calc_checksum will cause verification to fail.

Modified: trunk/src/flash/lpc2000.c
===================================================================
--- trunk/src/flash/lpc2000.c	2009-04-30 09:14:01 UTC (rev 1577)
+++ trunk/src/flash/lpc2000.c	2009-04-30 09:39:24 UTC (rev 1578)
@@ -531,6 +531,15 @@
 		}
 		checksum = 0 - checksum;
 		LOG_DEBUG("checksum: 0x%8.8x", checksum);
+
+		u32 original_value=buf_get_u32(buffer + (5 * 4), 0, 32);
+		if (original_value!=checksum)
+		{
+			LOG_WARNING("Verification will fail since checksum in image(0x%8.8x) written to flash was different from calculated vector checksum(0x%8.8x).",
+					original_value, checksum);
+			LOG_WARNING("To remove this warning modify build tools on developer PC to inject correct LPC vector checksum.");
+		}
+
 		buf_set_u32(buffer + 0x14, 0, 32, checksum);
 	}
 



From zwelch at mail.berlios.de  Thu Apr 30 11:50:11 2009
From: zwelch at mail.berlios.de (zwelch at mail.berlios.de)
Date: Thu, 30 Apr 2009 11:50:11 +0200
Subject: [Openocd-svn] r1579 - trunk/src/target
Message-ID: <200904300950.n3U9oBfS015324@sheep.berlios.de>

Author: zwelch
Date: 2009-04-30 11:49:38 +0200 (Thu, 30 Apr 2009)
New Revision: 1579

Modified:
   trunk/src/target/breakpoints.c
   trunk/src/target/breakpoints.h
   trunk/src/target/embeddedice.c
   trunk/src/target/embeddedice.h
   trunk/src/target/etb.c
   trunk/src/target/etb.h
   trunk/src/target/etm.c
   trunk/src/target/etm_dummy.c
   trunk/src/target/etm_dummy.h
   trunk/src/target/image.c
   trunk/src/target/oocd_trace.c
   trunk/src/target/oocd_trace.h
   trunk/src/target/target.c
   trunk/src/target/target_request.c
   trunk/src/target/trace.c
Log:
Add static keywords to core target source file data and functions.

Modified: trunk/src/target/breakpoints.c
===================================================================
--- trunk/src/target/breakpoints.c	2009-04-30 09:39:24 UTC (rev 1578)
+++ trunk/src/target/breakpoints.c	2009-04-30 09:49:38 UTC (rev 1579)
@@ -30,13 +30,13 @@
 
 #include "breakpoints.h"
 
-char *breakpoint_type_strings[] =
+static char *breakpoint_type_strings[] =
 {
 	"hardware",
 	"software"
 };
 
-char *watchpoint_rw_strings[] =
+static char *watchpoint_rw_strings[] =
 {
 	"read",
 	"write",

Modified: trunk/src/target/breakpoints.h
===================================================================
--- trunk/src/target/breakpoints.h	2009-04-30 09:39:24 UTC (rev 1578)
+++ trunk/src/target/breakpoints.h	2009-04-30 09:49:38 UTC (rev 1579)
@@ -30,15 +30,11 @@
 	BKPT_SOFT,
 };
 
-extern char *breakpoint_type_strings[];
-
 enum watchpoint_rw
 {
 	WPT_READ = 0, WPT_WRITE = 1, WPT_ACCESS = 2
 };
 
-extern char *watchpoint_rw_strings[];
-
 typedef struct breakpoint_s
 {
 	u32 address;

Modified: trunk/src/target/embeddedice.c
===================================================================
--- trunk/src/target/embeddedice.c	2009-04-30 09:39:24 UTC (rev 1578)
+++ trunk/src/target/embeddedice.c	2009-04-30 09:49:38 UTC (rev 1579)
@@ -42,15 +42,17 @@
 
 #include <stdlib.h>
 
-bitfield_desc_t embeddedice_comms_ctrl_bitfield_desc[] =
+#if 0
+static bitfield_desc_t embeddedice_comms_ctrl_bitfield_desc[] =
 {
 	{"R", 1},
 	{"W", 1},
 	{"reserved", 26},
 	{"version", 4}
 };
+#endif
 
-int embeddedice_reg_arch_info[] =
+static int embeddedice_reg_arch_info[] =
 {
 	0x0, 0x1, 0x4, 0x5,
 	0x8, 0x9, 0xa, 0xb, 0xc, 0xd,
@@ -58,7 +60,7 @@
 	0x2
 };
 
-char* embeddedice_reg_list[] =
+static char* embeddedice_reg_list[] =
 {
 	"debug_ctrl",
 	"debug_status",
@@ -83,9 +85,9 @@
 	"vector catch"
 };
 
-int embeddedice_reg_arch_type = -1;
+static int embeddedice_reg_arch_type = -1;
 
-int embeddedice_get_reg(reg_t *reg);
+static int embeddedice_get_reg(reg_t *reg);
 
 reg_cache_t* embeddedice_build_reg_cache(target_t *target, arm7_9_common_t *arm7_9)
 {
@@ -215,7 +217,7 @@
 	return jtag_execute_queue();
 }
 
-int embeddedice_get_reg(reg_t *reg)
+static int embeddedice_get_reg(reg_t *reg)
 {
 	int retval;
 	if ((retval = embeddedice_read_reg(reg)) != ERROR_OK)

Modified: trunk/src/target/embeddedice.h
===================================================================
--- trunk/src/target/embeddedice.h	2009-04-30 09:39:24 UTC (rev 1578)
+++ trunk/src/target/embeddedice.h	2009-04-30 09:49:38 UTC (rev 1579)
@@ -111,9 +111,9 @@
 /* If many embeddedice_write_reg() follow eachother, then the >1 invocations can be this faster version of
  * embeddedice_write_reg
  */
-static const int embeddedice_num_bits[]={32,5,1};
 static __inline__ void embeddedice_write_reg_inner( jtag_tap_t *tap, int reg_addr, u32 value)
 {
+	static const int embeddedice_num_bits[]={32,5,1};
 	u32 values[3];
 
 	values[0]=value;

Modified: trunk/src/target/etb.c
===================================================================
--- trunk/src/target/etb.c	2009-04-30 09:39:24 UTC (rev 1578)
+++ trunk/src/target/etb.c	2009-04-30 09:49:38 UTC (rev 1579)
@@ -36,7 +36,7 @@
 
 #include <stdlib.h>
 
-char* etb_reg_list[] =
+static char* etb_reg_list[] =
 {
 	"ETB_identification",
 	"ETB_ram_depth",
@@ -49,13 +49,13 @@
 	"ETB_control",
 };
 
-int etb_reg_arch_type = -1;
+static int etb_reg_arch_type = -1;
 
-int etb_get_reg(reg_t *reg);
+static int etb_get_reg(reg_t *reg);
 
-int handle_etb_config_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_etb_config_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
-int etb_set_instr(etb_t *etb, u32 new_instr)
+static int etb_set_instr(etb_t *etb, u32 new_instr)
 {
 	jtag_tap_t *tap;
 	tap = etb->tap;
@@ -85,7 +85,7 @@
 	return ERROR_OK;
 }
 
-int etb_scann(etb_t *etb, u32 new_scan_chain)
+static int etb_scann(etb_t *etb, u32 new_scan_chain)
 {
 	if(etb->cur_scan_chain != new_scan_chain)
 	{
@@ -156,7 +156,7 @@
 	return reg_cache;
 }
 
-int etb_get_reg(reg_t *reg)
+static int etb_get_reg(reg_t *reg)
 {
 	int retval;
 	if ((retval = etb_read_reg(reg)) != ERROR_OK)
@@ -174,7 +174,7 @@
 	return ERROR_OK;
 }
 
-int etb_read_ram(etb_t *etb, u32 *data, int num_frames)
+static int etb_read_ram(etb_t *etb, u32 *data, int num_frames)
 {
 	scan_field_t fields[3];
 	int i;
@@ -397,7 +397,7 @@
 	return etb_write_reg(reg, buf_get_u32(reg->value, 0, reg->size));
 }
 
-int etb_register_commands(struct command_context_s *cmd_ctx)
+static int etb_register_commands(struct command_context_s *cmd_ctx)
 {
 	command_t *etb_cmd;
 
@@ -408,7 +408,7 @@
 	return ERROR_OK;
 }
 
-int handle_etb_config_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_etb_config_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target;
 	jtag_tap_t *tap;
@@ -462,7 +462,7 @@
 	return ERROR_OK;
 }
 
-int etb_init(etm_context_t *etm_ctx)
+static int etb_init(etm_context_t *etm_ctx)
 {
 	etb_t *etb = etm_ctx->capture_driver_priv;
 
@@ -479,7 +479,7 @@
 	return ERROR_OK;
 }
 
-trace_status_t etb_status(etm_context_t *etm_ctx)
+static trace_status_t etb_status(etm_context_t *etm_ctx)
 {
 	etb_t *etb = etm_ctx->capture_driver_priv;
 
@@ -534,7 +534,7 @@
 	return etm_ctx->capture_status;
 }
 
-int etb_read_trace(etm_context_t *etm_ctx)
+static int etb_read_trace(etm_context_t *etm_ctx)
 {
 	etb_t *etb = etm_ctx->capture_driver_priv;
 	int first_frame = 0;
@@ -684,7 +684,7 @@
 	return ERROR_OK;
 }
 
-int etb_start_capture(etm_context_t *etm_ctx)
+static int etb_start_capture(etm_context_t *etm_ctx)
 {
 	etb_t *etb = etm_ctx->capture_driver_priv;
 	u32 etb_ctrl_value = 0x1;
@@ -716,7 +716,7 @@
 	return ERROR_OK;
 }
 
-int etb_stop_capture(etm_context_t *etm_ctx)
+static int etb_stop_capture(etm_context_t *etm_ctx)
 {
 	etb_t *etb = etm_ctx->capture_driver_priv;
 	reg_t *etb_ctrl_reg = &etb->reg_cache->reg_list[ETB_CTRL];

Modified: trunk/src/target/etb.h
===================================================================
--- trunk/src/target/etb.h	2009-04-30 09:39:24 UTC (rev 1578)
+++ trunk/src/target/etb.h	2009-04-30 09:49:38 UTC (rev 1579)
@@ -70,6 +70,4 @@
 extern int etb_set_reg(reg_t *reg, u32 value);
 extern int etb_set_reg_w_exec(reg_t *reg, u8 *buf);
 
-extern int etb_register_commands(struct command_context_s *cmd_ctx);
-
 #endif /* ETB_H */

Modified: trunk/src/target/etm.c
===================================================================
--- trunk/src/target/etm.c	2009-04-30 09:39:24 UTC (rev 1578)
+++ trunk/src/target/etm.c	2009-04-30 09:49:38 UTC (rev 1579)
@@ -46,15 +46,17 @@
  *
  */
 
-bitfield_desc_t etm_comms_ctrl_bitfield_desc[] =
+#if 0
+static bitfield_desc_t etm_comms_ctrl_bitfield_desc[] =
 {
 	{"R", 1},
 	{"W", 1},
 	{"reserved", 26},
 	{"version", 4}
 };
+#endif
 
-int etm_reg_arch_info[] =
+static int etm_reg_arch_info[] =
 {
 	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
 	0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
@@ -72,7 +74,7 @@
 	0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
 };
 
-int etm_reg_arch_size_info[] =
+static int etm_reg_arch_size_info[] =
 {
 	32, 32, 17, 8, 3, 9, 32, 16,
 	17, 26, 25, 8, 17, 32, 32, 17,
@@ -90,7 +92,7 @@
 	17, 17, 17, 17, 32, 32, 32, 32
 };
 
-char* etm_reg_list[] =
+static char* etm_reg_list[] =
 {
 	"ETM_CTRL",
 	"ETM_CONFIG",
@@ -205,11 +207,11 @@
 	"ETM_CONTEXTID_COMPARATOR_MASK"
 };
 
-int etm_reg_arch_type = -1;
+static int etm_reg_arch_type = -1;
 
-int etm_get_reg(reg_t *reg);
+static int etm_get_reg(reg_t *reg);
 
-command_t *etm_cmd = NULL;
+static command_t *etm_cmd = NULL;
 
 reg_cache_t* etm_build_reg_cache(target_t *target, arm_jtag_t *jtag_info, etm_context_t *etm_ctx)
 {
@@ -480,7 +482,7 @@
 extern etm_capture_driver_t oocd_trace_capture_driver;
 #endif
 
-etm_capture_driver_t *etm_capture_drivers[] =
+static etm_capture_driver_t *etm_capture_drivers[] =
 {
 	&etb_capture_driver,
 	&etm_dummy_capture_driver,
@@ -502,7 +504,7 @@
 	"reserved",
 };
 
-int etm_read_instruction(etm_context_t *ctx, arm_instruction_t *instruction)
+static int etm_read_instruction(etm_context_t *ctx, arm_instruction_t *instruction)
 {
 	int i;
 	int section = -1;
@@ -570,7 +572,7 @@
 	return ERROR_OK;
 }
 
-int etmv1_next_packet(etm_context_t *ctx, u8 *packet, int apo)
+static int etmv1_next_packet(etm_context_t *ctx, u8 *packet, int apo)
 {
 	while (ctx->data_index < ctx->trace_depth)
 	{
@@ -635,7 +637,7 @@
 	return -1;
 }
 
-int etmv1_branch_address(etm_context_t *ctx)
+static int etmv1_branch_address(etm_context_t *ctx)
 {
 	int retval;
 	u8 packet;
@@ -721,7 +723,7 @@
 	return 0;
 }
 
-int etmv1_data(etm_context_t *ctx, int size, u32 *data)
+static int etmv1_data(etm_context_t *ctx, int size, u32 *data)
 {
 	int j;
 	u8 buf[4];
@@ -750,7 +752,7 @@
 	return 0;
 }
 
-int etmv1_analyze_trace(etm_context_t *ctx, struct command_context_s *cmd_ctx)
+static int etmv1_analyze_trace(etm_context_t *ctx, struct command_context_s *cmd_ctx)
 {
 	int retval;
 	arm_instruction_t instruction;
@@ -1043,7 +1045,7 @@
 	return ERROR_OK;
 }
 
-int handle_etm_tracemode_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_etm_tracemode_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target;
 	armv4_5_common_t *armv4_5;
@@ -1223,7 +1225,7 @@
 	return ERROR_OK;
 }
 
-int handle_etm_config_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_etm_config_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target;
 	armv4_5_common_t *armv4_5;
@@ -1423,7 +1425,7 @@
 	return ERROR_OK;
 }
 
-int handle_etm_status_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_etm_status_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target;
 	armv4_5_common_t *armv4_5;
@@ -1471,7 +1473,7 @@
 	return ERROR_OK;
 }
 
-int handle_etm_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_etm_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target;
 	armv4_5_common_t *armv4_5;
@@ -1530,7 +1532,7 @@
 	return ERROR_OK;
 }
 
-int handle_etm_dump_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_etm_dump_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	fileio_t file;
 	target_t *target;
@@ -1598,7 +1600,7 @@
 	return ERROR_OK;
 }
 
-int handle_etm_load_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_etm_load_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	fileio_t file;
 	target_t *target;
@@ -1680,7 +1682,7 @@
 	return ERROR_OK;
 }
 
-int handle_etm_trigger_percent_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_etm_trigger_percent_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target;
 	armv4_5_common_t *armv4_5;
@@ -1720,7 +1722,7 @@
 	return ERROR_OK;
 }
 
-int handle_etm_start_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_etm_start_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target;
 	armv4_5_common_t *armv4_5;
@@ -1765,7 +1767,7 @@
 	return ERROR_OK;
 }
 
-int handle_etm_stop_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_etm_stop_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target;
 	armv4_5_common_t *armv4_5;
@@ -1801,7 +1803,7 @@
 	return ERROR_OK;
 }
 
-int handle_etm_analyze_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_etm_analyze_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target;
 	armv4_5_common_t *armv4_5;

Modified: trunk/src/target/etm_dummy.c
===================================================================
--- trunk/src/target/etm_dummy.c	2009-04-30 09:39:24 UTC (rev 1578)
+++ trunk/src/target/etm_dummy.c	2009-04-30 09:49:38 UTC (rev 1579)
@@ -36,7 +36,7 @@
 
 #include <stdlib.h>
 
-int handle_etm_dummy_config_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_etm_dummy_config_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target;
 	armv4_5_common_t *armv4_5;
@@ -69,7 +69,7 @@
 	return ERROR_OK;
 }
 
-int etm_dummy_register_commands(struct command_context_s *cmd_ctx)
+static int etm_dummy_register_commands(struct command_context_s *cmd_ctx)
 {
 	command_t *etm_dummy_cmd;
 
@@ -80,27 +80,27 @@
 	return ERROR_OK;
 }
 
-int etm_dummy_init(etm_context_t *etm_ctx)
+static int etm_dummy_init(etm_context_t *etm_ctx)
 {
 	return ERROR_OK;
 }
 
-trace_status_t etm_dummy_status(etm_context_t *etm_ctx)
+static trace_status_t etm_dummy_status(etm_context_t *etm_ctx)
 {
 	return TRACE_IDLE;
 }
 
-int etm_dummy_read_trace(etm_context_t *etm_ctx)
+static int etm_dummy_read_trace(etm_context_t *etm_ctx)
 {
 	return ERROR_OK;
 }
 
-int etm_dummy_start_capture(etm_context_t *etm_ctx)
+static int etm_dummy_start_capture(etm_context_t *etm_ctx)
 {
 	return ERROR_ETM_PORTMODE_NOT_SUPPORTED;
 }
 
-int etm_dummy_stop_capture(etm_context_t *etm_ctx)
+static int etm_dummy_stop_capture(etm_context_t *etm_ctx)
 {
 	return ERROR_OK;
 }

Modified: trunk/src/target/etm_dummy.h
===================================================================
--- trunk/src/target/etm_dummy.h	2009-04-30 09:39:24 UTC (rev 1578)
+++ trunk/src/target/etm_dummy.h	2009-04-30 09:49:38 UTC (rev 1579)
@@ -28,6 +28,5 @@
 #include "etm.h"
 
 extern etm_capture_driver_t etm_dummy_capture_driver;
-extern int etm_dummy_register_commands(struct command_context_s *cmd_ctx);
 
 #endif /* ETB_H */

Modified: trunk/src/target/image.c
===================================================================
--- trunk/src/target/image.c	2009-04-30 09:39:24 UTC (rev 1578)
+++ trunk/src/target/image.c	2009-04-30 09:49:38 UTC (rev 1579)
@@ -113,7 +113,7 @@
 	return ERROR_OK;
 }
 
-int identify_image_type(image_t *image, char *type_string, char *url)
+static int identify_image_type(image_t *image, char *type_string, char *url)
 {
 	if (type_string)
 	{
@@ -154,7 +154,7 @@
 	return ERROR_OK;
 }
 
-int image_ihex_buffer_complete(image_t *image)
+static int image_ihex_buffer_complete(image_t *image)
 {
 	image_ihex_t *ihex = image->type_private;
 	fileio_t *fileio = &ihex->fileio;
@@ -344,7 +344,7 @@
 	return ERROR_IMAGE_FORMAT_ERROR;
 }
 
-int image_elf_read_headers(image_t *image)
+static int image_elf_read_headers(image_t *image)
 {
 	image_elf_t *elf = image->type_private;
 	u32 read_bytes;
@@ -445,7 +445,7 @@
 	return ERROR_OK;
 }
 
-int image_elf_read_section(image_t *image, int section, u32 offset, u32 size, u8 *buffer, u32 *size_read)
+static int image_elf_read_section(image_t *image, int section, u32 offset, u32 size, u8 *buffer, u32 *size_read)
 {
 	image_elf_t *elf = image->type_private;
 	Elf32_Phdr *segment = (Elf32_Phdr *)image->sections[section].private;
@@ -486,7 +486,7 @@
 	return ERROR_OK;
 }
 
-int image_mot_buffer_complete(image_t *image)
+static int image_mot_buffer_complete(image_t *image)
 {
 	image_mot_t *mot = image->type_private;
 	fileio_t *fileio = &mot->fileio;

Modified: trunk/src/target/oocd_trace.c
===================================================================
--- trunk/src/target/oocd_trace.c	2009-04-30 09:39:24 UTC (rev 1578)
+++ trunk/src/target/oocd_trace.c	2009-04-30 09:49:38 UTC (rev 1579)
@@ -41,7 +41,9 @@
 
 #include <stdlib.h>
 
-int oocd_trace_read_reg(oocd_trace_t *oocd_trace, int reg, u32 *value)
+static int oocd_trace_register_commands(struct command_context_s *cmd_ctx);
+
+static int oocd_trace_read_reg(oocd_trace_t *oocd_trace, int reg, u32 *value)
 {
 	size_t bytes_written, bytes_read, bytes_to_read;
 	u8 cmd;
@@ -61,7 +63,7 @@
 	return ERROR_OK;
 }
 
-int oocd_trace_write_reg(oocd_trace_t *oocd_trace, int reg, u32 value)
+static int oocd_trace_write_reg(oocd_trace_t *oocd_trace, int reg, u32 value)
 {
 	size_t bytes_written;
 	u8 data[5];
@@ -78,7 +80,7 @@
 	return ERROR_OK;
 }
 
-int oocd_trace_read_memory(oocd_trace_t *oocd_trace, u8 *data, u32 address, u32 size)
+static int oocd_trace_read_memory(oocd_trace_t *oocd_trace, u8 *data, u32 address, u32 size)
 {
 	size_t bytes_written, bytes_to_read;
 	ssize_t bytes_read;
@@ -105,7 +107,7 @@
 	return ERROR_OK;
 }
 
-int oocd_trace_init(etm_context_t *etm_ctx)
+static int oocd_trace_init(etm_context_t *etm_ctx)
 {
 	u8 trash[256];
 	oocd_trace_t *oocd_trace = etm_ctx->capture_driver_priv;
@@ -152,7 +154,7 @@
 	return ERROR_OK;
 }
 
-trace_status_t oocd_trace_status(etm_context_t *etm_ctx)
+static trace_status_t oocd_trace_status(etm_context_t *etm_ctx)
 {
 	oocd_trace_t *oocd_trace = etm_ctx->capture_driver_priv;
 	u32 status;
@@ -184,7 +186,7 @@
 	return etm_ctx->capture_status;
 }
 
-int oocd_trace_read_trace(etm_context_t *etm_ctx)
+static int oocd_trace_read_trace(etm_context_t *etm_ctx)
 {
 	oocd_trace_t *oocd_trace = etm_ctx->capture_driver_priv;
 	u32 status, address;
@@ -242,7 +244,7 @@
 	return ERROR_OK;
 }
 
-int oocd_trace_start_capture(etm_context_t *etm_ctx)
+static int oocd_trace_start_capture(etm_context_t *etm_ctx)
 {
 	oocd_trace_t *oocd_trace = etm_ctx->capture_driver_priv;
 	u32 control = 0x1;	/* 0x1: enabled */
@@ -275,7 +277,7 @@
 	return ERROR_OK; 
 }
 
-int oocd_trace_stop_capture(etm_context_t *etm_ctx)
+static int oocd_trace_stop_capture(etm_context_t *etm_ctx)
 {
 	oocd_trace_t *oocd_trace = etm_ctx->capture_driver_priv;
 
@@ -298,7 +300,7 @@
 	.read_trace = oocd_trace_read_trace,
 };
 
-int handle_oocd_trace_config_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_oocd_trace_config_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target;
 	armv4_5_common_t *armv4_5;
@@ -336,7 +338,7 @@
 	return ERROR_OK;
 }
 
-int handle_oocd_trace_status_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_oocd_trace_status_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target;
 	armv4_5_common_t *armv4_5;
@@ -376,7 +378,7 @@
 	return ERROR_OK;
 }
 
-int handle_oocd_trace_resync_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_oocd_trace_resync_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target;
 	armv4_5_common_t *armv4_5;

Modified: trunk/src/target/oocd_trace.h
===================================================================
--- trunk/src/target/oocd_trace.h	2009-04-30 09:39:24 UTC (rev 1578)
+++ trunk/src/target/oocd_trace.h	2009-04-30 09:49:38 UTC (rev 1579)
@@ -59,6 +59,4 @@
 
 extern etm_capture_driver_t oocd_trace_capture_driver;
 
-extern int oocd_trace_register_commands(struct command_context_s *cmd_ctx);
-
 #endif /* OOCD_TRACE_TRACE_H */

Modified: trunk/src/target/target.c
===================================================================
--- trunk/src/target/target.c	2009-04-30 09:39:24 UTC (rev 1578)
+++ trunk/src/target/target.c	2009-04-30 09:49:38 UTC (rev 1579)
@@ -59,33 +59,31 @@
 #include <fileio.h>
 #include <image.h>
 
-int cli_target_callback_event_handler(struct target_s *target, enum target_event event, void *priv);
+static int handle_targets_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
-int handle_targets_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_reg_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_poll_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_halt_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_wait_halt_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_reset_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_soft_reset_halt_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_resume_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_step_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_md_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_mw_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_load_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_dump_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_verify_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_test_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_bp_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_rbp_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_wp_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_rwp_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_virt2phys_command(command_context_t *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_profile_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_fast_load_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
+static int handle_fast_load_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
 
-int handle_reg_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_poll_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_halt_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_wait_halt_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_reset_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_soft_reset_halt_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_resume_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_step_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_md_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_mw_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_load_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_dump_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_verify_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_test_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_bp_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_rbp_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_wp_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_rwp_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_virt2phys_command(command_context_t *cmd_ctx, char *cmd, char **args, int argc);
-int handle_profile_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_fast_load_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-int handle_fast_load_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc);
-
 static int jim_array2mem(Jim_Interp *interp, int argc, Jim_Obj *const *argv);
 static int jim_mem2array(Jim_Interp *interp, int argc, Jim_Obj *const *argv);
 static int jim_target( Jim_Interp *interp, int argc, Jim_Obj *const *argv);
@@ -1346,7 +1344,7 @@
 	return retval;
 }
 
-int handle_targets_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_targets_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	char *cp;
 	target_t *target = all_targets;
@@ -1542,7 +1540,7 @@
 	return retval;
 }
 
-int handle_reg_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_reg_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target;
 	reg_t *reg = NULL;
@@ -1653,7 +1651,7 @@
 	return ERROR_OK;
 }
 
-int handle_poll_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_poll_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	int retval = ERROR_OK;
 	target_t *target = get_current_target(cmd_ctx);
@@ -1688,7 +1686,7 @@
 	return retval;
 }
 
-int handle_wait_halt_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_wait_halt_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	int ms = 5000;
 
@@ -1753,7 +1751,7 @@
 	return ERROR_OK;
 }
 
-int handle_halt_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_halt_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	int retval;
 	target_t *target = get_current_target(cmd_ctx);
@@ -1778,7 +1776,7 @@
 	return handle_wait_halt_command(cmd_ctx, cmd, args, argc);
 }
 
-int handle_soft_reset_halt_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_soft_reset_halt_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target = get_current_target(cmd_ctx);
 
@@ -1789,7 +1787,7 @@
 	return ERROR_OK;
 }
 
-int handle_reset_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_reset_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	const Jim_Nvp *n;
 	enum target_reset_mode reset_mode = RESET_RUN;
@@ -1808,7 +1806,7 @@
 }
 
 
-int handle_resume_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_resume_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	int retval;
 	target_t *target = get_current_target(cmd_ctx);
@@ -1827,7 +1825,7 @@
 	return retval;
 }
 
-int handle_step_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_step_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target = get_current_target(cmd_ctx);
 
@@ -1842,7 +1840,7 @@
 	return ERROR_OK;
 }
 
-int handle_md_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_md_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	const int line_bytecnt = 32;
 	int count = 1;
@@ -1919,7 +1917,7 @@
 	return retval;
 }
 
-int handle_mw_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_mw_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	u32 address = 0;
 	u32 value = 0;
@@ -1983,7 +1981,7 @@
 
 }
 
-int handle_load_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_load_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	u8 *buffer;
 	u32 buf_cnt;
@@ -2107,7 +2105,7 @@
 
 }
 
-int handle_dump_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_dump_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	fileio_t fileio;
 
@@ -2179,7 +2177,7 @@
 	return ERROR_OK;
 }
 
-int handle_verify_image_command_internal(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, int verify)
+static int handle_verify_image_command_internal(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc, int verify)
 {
 	u8 *buffer;
 	u32 buf_cnt;
@@ -2322,17 +2320,17 @@
 	return retval;
 }
 
-int handle_verify_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_verify_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	return handle_verify_image_command_internal(cmd_ctx, cmd, args, argc, 1);
 }
 
-int handle_test_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_test_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	return handle_verify_image_command_internal(cmd_ctx, cmd, args, argc, 0);
 }
 
-int handle_bp_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_bp_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	int retval;
 	target_t *target = get_current_target(cmd_ctx);
@@ -2384,7 +2382,7 @@
 	return ERROR_OK;
 }
 
-int handle_rbp_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_rbp_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target = get_current_target(cmd_ctx);
 
@@ -2394,7 +2392,7 @@
 	return ERROR_OK;
 }
 
-int handle_wp_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_wp_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target = get_current_target(cmd_ctx);
 	int retval;
@@ -2456,7 +2454,7 @@
 	return ERROR_OK;
 }
 
-int handle_rwp_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_rwp_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target = get_current_target(cmd_ctx);
 
@@ -2466,7 +2464,7 @@
 	return ERROR_OK;
 }
 
-int handle_virt2phys_command(command_context_t *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_virt2phys_command(command_context_t *cmd_ctx, char *cmd, char **args, int argc)
 {
 	int retval;
 	target_t *target = get_current_target(cmd_ctx);
@@ -2610,7 +2608,7 @@
 }
 
 /* profiling samples the CPU PC as quickly as OpenOCD is able, which will be used as a random sampling of PC */
-int handle_profile_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_profile_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target = get_current_target(cmd_ctx);
 	struct timeval timeout, now;
@@ -4092,7 +4090,7 @@
 
 
 
-int handle_fast_load_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_fast_load_image_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	u8 *buffer;
 	u32 buf_cnt;
@@ -4228,7 +4226,7 @@
 	return retval;
 }
 
-int handle_fast_load_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_fast_load_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	if (argc>0)
 		return ERROR_COMMAND_SYNTAX_ERROR;

Modified: trunk/src/target/target_request.c
===================================================================
--- trunk/src/target/target_request.c	2009-04-30 09:39:24 UTC (rev 1578)
+++ trunk/src/target/target_request.c	2009-04-30 09:49:38 UTC (rev 1579)
@@ -38,10 +38,10 @@
 #include <stdlib.h>
 #include <string.h>
 
-command_t *target_request_cmd = NULL;
+static command_t *target_request_cmd = NULL;
 static int charmsg_mode = 0;
 
-int target_asciimsg(target_t *target, u32 length)
+static int target_asciimsg(target_t *target, u32 length)
 {
 	char *msg = malloc(CEIL(length + 1, 4) * 4);
 	debug_msg_receiver_t *c = target->dbgmsg;
@@ -60,14 +60,14 @@
 	return ERROR_OK;
 }
 
-int target_charmsg(target_t *target, u8 msg)
+static int target_charmsg(target_t *target, u8 msg)
 {
 	LOG_USER_N("%c", msg);
 	
 	return ERROR_OK;
 }
 
-int target_hexmsg(target_t *target, int size, u32 length)
+static int target_hexmsg(target_t *target, int size, u32 length)
 {
 	u8 *data = malloc(CEIL(length * size, 4) * 4);
 	char line[128];
@@ -154,7 +154,7 @@
 	return ERROR_OK;
 }
 
-int add_debug_msg_receiver(struct command_context_s *cmd_ctx, target_t *target)
+static int add_debug_msg_receiver(struct command_context_s *cmd_ctx, target_t *target)
 {
 	debug_msg_receiver_t **p = &target->dbgmsg;
 	
@@ -182,7 +182,7 @@
 	return ERROR_OK;
 }
 
-debug_msg_receiver_t* find_debug_msg_receiver(struct command_context_s *cmd_ctx, target_t *target)
+static debug_msg_receiver_t* find_debug_msg_receiver(struct command_context_s *cmd_ctx, target_t *target)
 {
 	int do_all_targets = 0;
 	debug_msg_receiver_t **p = &target->dbgmsg;
@@ -261,7 +261,7 @@
 	return ERROR_OK;
 }
 
-int handle_target_request_debugmsgs_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_target_request_debugmsgs_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target = get_current_target(cmd_ctx);
 

Modified: trunk/src/target/trace.c
===================================================================
--- trunk/src/target/trace.c	2009-04-30 09:39:24 UTC (rev 1578)
+++ trunk/src/target/trace.c	2009-04-30 09:49:38 UTC (rev 1579)
@@ -53,7 +53,7 @@
 	return ERROR_OK;
 }
 
-int handle_trace_point_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_trace_point_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target = get_current_target(cmd_ctx);
 	trace_t *trace = target->trace_info;
@@ -99,7 +99,7 @@
 	return ERROR_OK;
 }
 
-int handle_trace_history_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
+static int handle_trace_history_command(struct command_context_s *cmd_ctx, char *cmd, char **args, int argc)
 {
 	target_t *target = get_current_target(cmd_ctx);
 	trace_t *trace = target->trace_info;



From oharboe at mail.berlios.de  Thu Apr 30 11:50:15 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Thu, 30 Apr 2009 11:50:15 +0200
Subject: [Openocd-svn] r1580 - trunk/src/target/target
Message-ID: <200904300950.n3U9oFdO015342@sheep.berlios.de>

Author: oharboe
Date: 2009-04-30 11:50:14 +0200 (Thu, 30 Apr 2009)
New Revision: 1580

Added:
   trunk/src/target/target/lpc2478.cfg
Log:
lpc2478 target config

Added: trunk/src/target/target/lpc2478.cfg
===================================================================
--- trunk/src/target/target/lpc2478.cfg	2009-04-30 09:49:38 UTC (rev 1579)
+++ trunk/src/target/target/lpc2478.cfg	2009-04-30 09:50:14 UTC (rev 1580)
@@ -0,0 +1,35 @@
+# Testing feeedback wanted!
+set _CHIPNAME lpc2478
+set _ENDIAN little
+set _CPUTAPID 0x4f1f0f0f
+
+# Use RCLK. If RCLK is not available fall back to 500kHz. 
+# 
+# Depending on cabling you might be able to eek this up to 2000kHz.
+jtag_rclk 500
+
+jtag_nsrst_delay 200
+jtag_ntrst_delay 200
+
+#use combined on interfaces or targets that can't set TRST/SRST separately
+reset_config trst_and_srst srst_pulls_trst
+
+
+jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
+
+set _TARGETNAME [format "%s.cpu" $_CHIPNAME]
+target create $_TARGETNAME arm7tdmi -endian $_ENDIAN -chain-position $_TARGETNAME -variant arm7tdmi-s_r4
+$_TARGETNAME configure -work-area-virt 0 -work-area-phys 0x40000000 -work-area-size 0x4000 -work-area-backup 0
+
+
+$_TARGETNAME configure -event reset-init {
+	# Force target into ARM state
+	soft_reset_halt
+	# FIX!!!! should we remap the range below??? Is this applicable to
+	# Copied from LPC2148.
+	#do not remap 0x0000-0x0020 to anything but the flash
+	mwb 0xE01FC040 0x01
+}
+
+
+flash bank lpc2000 0x0 0x7D000 0 0 0 lpc2000_v2 12000 calc_checksum


Property changes on: trunk/src/target/target/lpc2478.cfg
___________________________________________________________________
Name: svn:eol-style
   + native



From oharboe at mail.berlios.de  Thu Apr 30 12:07:48 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Thu, 30 Apr 2009 12:07:48 +0200
Subject: [Openocd-svn] r1581 - trunk/src zy1000/trunk/build/include
	zy1000/trunk/build/menu zy1000/trunk/build/tcl
	zy1000/trunk/snapshots
Message-ID: <200904301007.n3UA7m81019569@sheep.berlios.de>

Author: oharboe
Date: 2009-04-30 12:07:39 +0200 (Thu, 30 Apr 2009)
New Revision: 1581

Modified:
   trunk/src/ecosboard.c
   zy1000/trunk/build/include/rom.h
   zy1000/trunk/build/menu/zy1000menu.xml
   zy1000/trunk/build/tcl/editconfigs.tcl
   zy1000/trunk/build/tcl/index.tcl
   zy1000/trunk/build/tcl/openocd.cfg
   zy1000/trunk/build/tcl/preconfig.tcl
   zy1000/trunk/build/tcl/production.tcl
   zy1000/trunk/build/tcl/support.tcl
   zy1000/trunk/snapshots/athttpd.zip
   zy1000/trunk/snapshots/discover.zip
   zy1000/trunk/snapshots/jimtcl.zip
Log:
list board's as well as target config files.

Modified: trunk/src/ecosboard.c
===================================================================
--- trunk/src/ecosboard.c	2009-04-30 09:50:14 UTC (rev 1580)
+++ trunk/src/ecosboard.c	2009-04-30 10:07:39 UTC (rev 1581)
@@ -982,6 +982,9 @@
 	char *dirname=alloc_printf("%s/target", zylin_config_dir);
 	mkdir(dirname, 0777);
 	free(dirname);
+	dirname=alloc_printf("%s/board", zylin_config_dir);
+	mkdir(dirname, 0777);
+	free(dirname);
 	dirname=alloc_printf("%s/event", zylin_config_dir);
 	mkdir(dirname, 0777);
 	free(dirname);

Modified: zy1000/trunk/build/include/rom.h
===================================================================
--- zy1000/trunk/build/include/rom.h	2009-04-30 09:50:14 UTC (rev 1580)
+++ zy1000/trunk/build/include/rom.h	2009-04-30 10:07:39 UTC (rev 1581)
@@ -1,774 +1,818 @@
 /* This is a generated file. Do not edit. */
 
 static CYGBLD_ATTRIB_ALIGN(4) const unsigned char filedata[] = {
-    0x2e, 0x6d, 0x6f, 0x52, 0xbf, 0x00, 0x00, 0x00,
-    0x20, 0x17, 0x08, 0x00, 0x04, 0x03, 0x02, 0x01,
+    0x2e, 0x6d, 0x6f, 0x52, 0xca, 0x00, 0x00, 0x00,
+    0x20, 0x4f, 0x08, 0x00, 0x04, 0x03, 0x02, 0x01,
     0x52, 0x4f, 0x4d, 0x46, 0x53, 0x20, 0x76, 0x31,
     0x2e, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x01, 0x00, 0x6f, 0x01, 0x0a, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x05, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x00, 0x18, 0x00, 0x00,
+    0xa7, 0x77, 0xf9, 0x49, 0x60, 0x19, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xe0, 0x8f, 0x00, 0x00,
-    0xc4, 0x8f, 0xd4, 0x49, 0x20, 0x34, 0x00, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0x00, 0x37, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xc0, 0x02, 0x00, 0x00,
-    0x4e, 0x90, 0xd4, 0x49, 0x60, 0x1d, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x00, 0x03, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0xc0, 0x1e, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xa8, 0x37, 0x00, 0x00,
-    0xd1, 0x8f, 0xd4, 0x49, 0x00, 0xc4, 0x00, 0x00,
+    0x65, 0x77, 0xf9, 0x49, 0xe0, 0xc6, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x96, 0x2b, 0x00, 0x00,
-    0xd1, 0x8f, 0xd4, 0x49, 0xc0, 0xfb, 0x00, 0x00,
+    0x66, 0x77, 0xf9, 0x49, 0xa0, 0xfe, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x34, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x00, 0x00, 0x00,
-    0x4e, 0x90, 0xd4, 0x49, 0x20, 0x20, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0xc0, 0x21, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xb4, 0x37, 0x00, 0x00,
-    0xd2, 0x8f, 0xd4, 0x49, 0x60, 0x27, 0x01, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x16, 0x37, 0x00, 0x00,
+    0x66, 0x77, 0xf9, 0x49, 0x40, 0x2a, 0x01, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x9d, 0x2f, 0x00, 0x00,
-    0xd3, 0x8f, 0xd4, 0x49, 0x20, 0x5f, 0x01, 0x00,
+    0x66, 0x77, 0xf9, 0x49, 0x60, 0x61, 0x01, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xff, 0x2d, 0x00, 0x00,
-    0xd3, 0x8f, 0xd4, 0x49, 0xc0, 0x8e, 0x01, 0x00,
+    0x66, 0x77, 0xf9, 0x49, 0x00, 0x91, 0x01, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x9e, 0x00, 0x00, 0x00,
-    0xd3, 0x8f, 0xd4, 0x49, 0xc0, 0xbc, 0x01, 0x00,
+    0x67, 0x77, 0xf9, 0x49, 0x00, 0xbf, 0x01, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x90, 0x38, 0x00, 0x00,
-    0xd3, 0x8f, 0xd4, 0x49, 0x60, 0xbd, 0x01, 0x00,
+    0x67, 0x77, 0xf9, 0x49, 0xa0, 0xbf, 0x01, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x18, 0x2e, 0x00, 0x00,
-    0xd4, 0x8f, 0xd4, 0x49, 0x00, 0xf6, 0x01, 0x00,
+    0x67, 0x77, 0xf9, 0x49, 0x40, 0xf8, 0x01, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x8b, 0x65, 0x00, 0x00,
-    0xc4, 0x8f, 0xd4, 0x49, 0x20, 0x24, 0x02, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0x60, 0x26, 0x02, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x32, 0x3e,
     0x08, 0x00, 0x6f, 0x01, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x92, 0x02, 0x00, 0x00,
-    0xc4, 0x8f, 0xd4, 0x49, 0x80, 0x14, 0x08, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0x80, 0x4c, 0x08, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x5b, 0x2f, 0x00, 0x00,
-    0xd5, 0x8f, 0xd4, 0x49, 0xc0, 0x89, 0x02, 0x00,
+    0x68, 0x77, 0xf9, 0x49, 0x00, 0x8c, 0x02, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xbb, 0x39, 0x00, 0x00,
-    0xd6, 0x8f, 0xd4, 0x49, 0x20, 0xb9, 0x02, 0x00,
+    0x68, 0x77, 0xf9, 0x49, 0x60, 0xbb, 0x02, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x35, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xe0, 0x03, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x80, 0x20, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x40, 0x04, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x20, 0x22, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x59, 0x26, 0x00, 0x00,
-    0xd6, 0x8f, 0xd4, 0x49, 0xe0, 0xf2, 0x02, 0x00,
+    0x68, 0x77, 0xf9, 0x49, 0x20, 0xf5, 0x02, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x22, 0x03, 0x00, 0x00,
-    0xc4, 0x8f, 0xd4, 0x49, 0x40, 0x19, 0x03, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0x80, 0x1b, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x6a, 0x08, 0x00, 0x00,
-    0xc4, 0x8f, 0xd4, 0x49, 0x80, 0x1c, 0x03, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0xc0, 0x1e, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x39, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xc0, 0x02, 0x00, 0x00,
-    0xd1, 0x8f, 0xd4, 0x49, 0x60, 0x24, 0x00, 0x00,
+    0x65, 0x77, 0xf9, 0x49, 0x60, 0x26, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xf2, 0x08, 0x00, 0x00,
-    0xcc, 0x8f, 0xd4, 0x49, 0x00, 0x25, 0x03, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x83, 0x09, 0x00, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0x40, 0x27, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xdd, 0x2a, 0x00, 0x00,
-    0xdb, 0x8f, 0xd4, 0x49, 0x00, 0x2e, 0x03, 0x00,
+    0x6e, 0x77, 0xf9, 0x49, 0xe0, 0x30, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x19, 0x30, 0x00, 0x00,
-    0xdb, 0x8f, 0xd4, 0x49, 0xe0, 0x58, 0x03, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xb9, 0x30, 0x00, 0x00,
+    0x6e, 0x77, 0xf9, 0x49, 0xc0, 0x5b, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xdb, 0x32, 0x00, 0x00,
-    0xdb, 0x8f, 0xd4, 0x49, 0x00, 0x89, 0x03, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xcd, 0x32, 0x00, 0x00,
+    0x6e, 0x77, 0xf9, 0x49, 0x80, 0x8c, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x0d, 0x29, 0x00, 0x00,
-    0xdb, 0x8f, 0xd4, 0x49, 0xe0, 0xbb, 0x03, 0x00,
+    0x6e, 0x77, 0xf9, 0x49, 0x60, 0xbf, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x07, 0x2e, 0x00, 0x00,
-    0xdb, 0x8f, 0xd4, 0x49, 0x00, 0xe5, 0x03, 0x00,
+    0x6f, 0x77, 0xf9, 0x49, 0x80, 0xe8, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x26, 0x01, 0x00, 0x00,
-    0xdc, 0x8f, 0xd4, 0x49, 0x20, 0x13, 0x04, 0x00,
+    0x6f, 0x77, 0xf9, 0x49, 0xa0, 0x16, 0x04, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x3f, 0x0b, 0x00, 0x00,
-    0xcd, 0x8f, 0xd4, 0x49, 0x60, 0x14, 0x04, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0xe0, 0x17, 0x04, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x91, 0x30, 0x00, 0x00,
-    0xdc, 0x8f, 0xd4, 0x49, 0xa0, 0x1f, 0x04, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x8a, 0x30, 0x00, 0x00,
+    0x6f, 0x77, 0xf9, 0x49, 0x20, 0x23, 0x04, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x41, 0x07, 0x00, 0x00,
-    0xdc, 0x8f, 0xd4, 0x49, 0x40, 0x50, 0x04, 0x00,
+    0x70, 0x77, 0xf9, 0x49, 0xc0, 0x53, 0x04, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x30, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x20, 0x07, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x20, 0x27, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x00, 0x08, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0x20, 0x29, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x22, 0x48, 0x00, 0x00,
-    0xdd, 0x8f, 0xd4, 0x49, 0xa0, 0x57, 0x04, 0x00,
+    0x70, 0x77, 0xf9, 0x49, 0x20, 0x5b, 0x04, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x32, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x04, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x00, 0x01, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x40, 0x2e, 0x00, 0x00,
+    0xa7, 0x77, 0xf9, 0x49, 0x20, 0x31, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xca, 0x2e, 0x00, 0x00,
-    0xdd, 0x8f, 0xd4, 0x49, 0xe0, 0x9f, 0x04, 0x00,
+    0x70, 0x77, 0xf9, 0x49, 0x60, 0xa3, 0x04, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x34, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x00, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x40, 0x2f, 0x00, 0x00,
+    0xa7, 0x77, 0xf9, 0x49, 0x20, 0x32, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xab, 0x30, 0x00, 0x00,
-    0xdd, 0x8f, 0xd4, 0x49, 0xc0, 0xce, 0x04, 0x00,
+    0x70, 0x77, 0xf9, 0x49, 0x40, 0xd2, 0x04, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x70, 0x01, 0x00, 0x00,
-    0xdd, 0x8f, 0xd4, 0x49, 0x80, 0xff, 0x04, 0x00,
+    0x71, 0x77, 0xf9, 0x49, 0x00, 0x03, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x37, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x00, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0xa0, 0x2f, 0x00, 0x00,
+    0xa7, 0x77, 0xf9, 0x49, 0x80, 0x32, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xb3, 0x35, 0x00, 0x00,
-    0xdd, 0x8f, 0xd4, 0x49, 0x00, 0x01, 0x05, 0x00,
+    0x71, 0x77, 0xf9, 0x49, 0x80, 0x04, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x13, 0x06, 0x00, 0x00,
-    0xcd, 0x8f, 0xd4, 0x49, 0xc0, 0x36, 0x05, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0x40, 0x3a, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x65, 0x03, 0x00, 0x00,
-    0xc4, 0x8f, 0xd4, 0x49, 0xe0, 0x3c, 0x05, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0x60, 0x40, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xce, 0x00, 0x00, 0x00,
-    0x4e, 0x90, 0xd4, 0x49, 0x60, 0x40, 0x05, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0xe0, 0x43, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x51, 0x08, 0x00, 0x00,
-    0x4e, 0x90, 0xd4, 0x49, 0x40, 0x41, 0x05, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0xc0, 0x44, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x62, 0x09, 0x00, 0x00,
-    0x4e, 0x90, 0xd4, 0x49, 0xa0, 0x49, 0x05, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x20, 0x4d, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x14, 0x04, 0x00, 0x00,
-    0x4e, 0x90, 0xd4, 0x49, 0x20, 0x53, 0x05, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0xa0, 0x56, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x00, 0x00, 0x00,
-    0x4e, 0x90, 0xd4, 0x49, 0x40, 0x57, 0x05, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0xc0, 0x5a, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xbe, 0x07, 0x00, 0x00,
-    0x4e, 0x90, 0xd4, 0x49, 0xa0, 0x57, 0x05, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x20, 0x5b, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x11, 0x0a, 0x00, 0x00,
-    0x4e, 0x90, 0xd4, 0x49, 0x60, 0x5f, 0x05, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0xe0, 0x62, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x75, 0x00, 0x00, 0x00,
-    0x4e, 0x90, 0xd4, 0x49, 0x80, 0x69, 0x05, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x00, 0x6d, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x23, 0x01, 0x00, 0x00,
-    0x4e, 0x90, 0xd4, 0x49, 0x00, 0x6a, 0x05, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x80, 0x6d, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x7a, 0x00, 0x00, 0x00,
-    0x4e, 0x90, 0xd4, 0x49, 0x40, 0x6b, 0x05, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x15, 0x01, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0xc0, 0x6e, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x64, 0x00, 0x00, 0x00,
-    0x4e, 0x90, 0xd4, 0x49, 0xc0, 0x6b, 0x05, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x7a, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0xe0, 0x6f, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xc4, 0x00, 0x00, 0x00,
-    0x4e, 0x90, 0xd4, 0x49, 0x40, 0x6c, 0x05, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x64, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x60, 0x70, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x89, 0x00, 0x00, 0x00,
-    0x4e, 0x90, 0xd4, 0x49, 0x20, 0x6d, 0x05, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xc4, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0xe0, 0x70, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x83, 0x10, 0x00, 0x00,
-    0x4e, 0x90, 0xd4, 0x49, 0xc0, 0x6d, 0x05, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x76, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0xc0, 0x71, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x69, 0x00, 0x00, 0x00,
-    0x4e, 0x90, 0xd4, 0x49, 0x60, 0x7e, 0x05, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x89, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x40, 0x72, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xa9, 0x00, 0x00, 0x00,
-    0x4e, 0x90, 0xd4, 0x49, 0xe0, 0x7e, 0x05, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x8c, 0x10, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0xe0, 0x72, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x8c, 0x00, 0x00, 0x00,
-    0x4e, 0x90, 0xd4, 0x49, 0xa0, 0x7f, 0x05, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x69, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x80, 0x83, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x4b, 0x0c, 0x00, 0x00,
-    0x4e, 0x90, 0xd4, 0x49, 0x40, 0x80, 0x05, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x6b, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x00, 0x84, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x5c, 0x03, 0x00, 0x00,
-    0x4e, 0x90, 0xd4, 0x49, 0xa0, 0x8c, 0x05, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x90, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x80, 0x84, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xe0, 0x8f, 0x00, 0x00,
-    0x4e, 0x90, 0xd4, 0x49, 0x00, 0x90, 0x05, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x4b, 0x0c, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x20, 0x85, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x30, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xe0, 0x1f, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x5c, 0x03, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x80, 0x91, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x85, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x20, 0x20, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xe0, 0x8f, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0xe0, 0x94, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x3d, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xc0, 0x20, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x68, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0xc0, 0x24, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x87, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x00, 0x21, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xca, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x40, 0x25, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xfc, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xa0, 0x21, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x6f, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x20, 0x26, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xfe, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xa0, 0x22, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xaf, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0xa0, 0x26, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xb4, 0x01, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xa0, 0x23, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x60, 0x27, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x3a, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x60, 0x25, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x80, 0x28, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x11, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xa0, 0x25, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xb7, 0x01, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0xa0, 0x29, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xee, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xc0, 0x25, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x7c, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x60, 0x2b, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x26, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xc0, 0x26, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x45, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0xe0, 0x2b, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x79, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x00, 0x27, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xde, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x40, 0x2c, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x7b, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x80, 0x27, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x82, 0x02, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x20, 0x2d, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xa5, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x00, 0x28, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x53, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0xc0, 0x2f, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x72, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xc0, 0x28, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xb8, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x20, 0x30, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x86, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x40, 0x29, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xb7, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0xe0, 0x30, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x75, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xe0, 0x29, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xa5, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0xa0, 0x31, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xb7, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x60, 0x2a, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xea, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x60, 0x32, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x8f, 0x01, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x20, 0x2b, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x0a, 0x01, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x60, 0x33, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xad, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xc0, 0x2c, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xc8, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x80, 0x34, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x4d, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x80, 0x2d, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xb7, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x60, 0x35, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x51, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xe0, 0x2d, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xcf, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x20, 0x36, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x26, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x40, 0x2e, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xda, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x00, 0x37, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x59, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x80, 0x2e, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x0b, 0x01, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0xe0, 0x37, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x79, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xe0, 0x2e, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x97, 0x00, 0x00, 0x00,
+    0xa3, 0x77, 0xf9, 0x49, 0x00, 0x39, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x8b, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x60, 0x2f, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xda, 0x00, 0x00, 0x00,
+    0xa4, 0x77, 0xf9, 0x49, 0xa0, 0x39, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x6e, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x00, 0x30, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xa3, 0x00, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x80, 0x3a, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x8d, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x80, 0x30, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x17, 0x01, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x40, 0x3b, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x5f, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x20, 0x31, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xf7, 0x00, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x60, 0x3c, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x35, 0x01, 0x00, 0x00,
-    0xcc, 0x8f, 0xd4, 0x49, 0x80, 0x31, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xcf, 0x00, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x60, 0x3d, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x33, 0x01, 0x00, 0x00,
-    0xcc, 0x8f, 0xd4, 0x49, 0xc0, 0x32, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xbb, 0x00, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x40, 0x3e, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x6c, 0x01, 0x00, 0x00,
-    0xcc, 0x8f, 0xd4, 0x49, 0x00, 0x34, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xe1, 0x00, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x00, 0x3f, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x36, 0x01, 0x00, 0x00,
-    0xcc, 0x8f, 0xd4, 0x49, 0x80, 0x35, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x73, 0x00, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x00, 0x40, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x5d, 0x01, 0x00, 0x00,
-    0xcc, 0x8f, 0xd4, 0x49, 0xc0, 0x36, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xf0, 0x01, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x80, 0x40, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x4a, 0x01, 0x00, 0x00,
-    0xcc, 0x8f, 0xd4, 0x49, 0x20, 0x38, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x35, 0x01, 0x00, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0x80, 0x42, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xc6, 0x01, 0x00, 0x00,
-    0xcc, 0x8f, 0xd4, 0x49, 0x80, 0x39, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x33, 0x01, 0x00, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0xc0, 0x43, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xc0, 0x03, 0x00, 0x00,
-    0xcc, 0x8f, 0xd4, 0x49, 0x60, 0x3b, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x6c, 0x01, 0x00, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0x00, 0x45, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x0a, 0x0c, 0x00, 0x00,
-    0xcc, 0x8f, 0xd4, 0x49, 0x20, 0x3f, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x36, 0x01, 0x00, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0x80, 0x46, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x5f, 0x01, 0x00, 0x00,
-    0xcc, 0x8f, 0xd4, 0x49, 0x40, 0x4b, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x5d, 0x01, 0x00, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0xc0, 0x47, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x19, 0x01, 0x00, 0x00,
-    0xcc, 0x8f, 0xd4, 0x49, 0xa0, 0x4c, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x4a, 0x01, 0x00, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0x20, 0x49, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x09, 0x01, 0x00, 0x00,
-    0xcc, 0x8f, 0xd4, 0x49, 0xc0, 0x4d, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xc6, 0x01, 0x00, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0x80, 0x4a, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x60, 0x01, 0x00, 0x00,
-    0xcc, 0x8f, 0xd4, 0x49, 0xe0, 0x4e, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xc0, 0x03, 0x00, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0x60, 0x4c, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x31, 0x01, 0x00, 0x00,
-    0xcc, 0x8f, 0xd4, 0x49, 0x40, 0x50, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x0a, 0x0c, 0x00, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0x20, 0x50, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xa9, 0x00, 0x00, 0x00,
-    0xcc, 0x8f, 0xd4, 0x49, 0x80, 0x51, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x5f, 0x01, 0x00, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0x40, 0x5c, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xf1, 0x08, 0x00, 0x00,
-    0xcc, 0x8f, 0xd4, 0x49, 0x40, 0x52, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x19, 0x01, 0x00, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0xa0, 0x5d, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x86, 0x01, 0x00, 0x00,
-    0xcc, 0x8f, 0xd4, 0x49, 0x40, 0x5b, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x09, 0x01, 0x00, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0xc0, 0x5e, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x65, 0x01, 0x00, 0x00,
-    0xcc, 0x8f, 0xd4, 0x49, 0xe0, 0x5c, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x60, 0x01, 0x00, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0xe0, 0x5f, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x84, 0x0f, 0x00, 0x00,
-    0xcc, 0x8f, 0xd4, 0x49, 0x60, 0x5e, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x31, 0x01, 0x00, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0x40, 0x61, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x8a, 0x06, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x00, 0x6e, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xa9, 0x00, 0x00, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0x80, 0x62, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x27, 0x07, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xa0, 0x74, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xf1, 0x08, 0x00, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0x40, 0x63, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x47, 0x05, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xe0, 0x7b, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x86, 0x01, 0x00, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0x40, 0x6c, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x37, 0x06, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x40, 0x81, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x65, 0x01, 0x00, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0xe0, 0x6d, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xfa, 0x03, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x80, 0x87, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x84, 0x0f, 0x00, 0x00,
+    0x64, 0x77, 0xf9, 0x49, 0x60, 0x6f, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x9f, 0x03, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x80, 0x8b, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x8a, 0x06, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x00, 0x7f, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xdf, 0x02, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x20, 0x8f, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x27, 0x07, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0xa0, 0x85, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xf2, 0x05, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x00, 0x92, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x47, 0x05, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0xe0, 0x8c, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x01, 0x03, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x00, 0x98, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x37, 0x06, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x40, 0x92, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x77, 0x04, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x20, 0x9b, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xfa, 0x03, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x80, 0x98, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x1d, 0x07, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xa0, 0x9f, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x95, 0x0f, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x80, 0x9c, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x3c, 0x05, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xc0, 0xa6, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x9f, 0x03, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x20, 0xac, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x17, 0x03, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x00, 0xac, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xdf, 0x02, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0xc0, 0xaf, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xe2, 0x05, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x20, 0xaf, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xf2, 0x05, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0xa0, 0xb2, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x17, 0x03, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x20, 0xb5, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x01, 0x03, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0xa0, 0xb8, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x19, 0x05, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x40, 0xb8, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x77, 0x04, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0xc0, 0xbb, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xc2, 0x04, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x60, 0xbd, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x1d, 0x07, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x40, 0xc0, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xbd, 0x04, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x40, 0xc2, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x3c, 0x05, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x60, 0xc7, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xf6, 0x03, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x00, 0xc7, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x17, 0x03, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0xa0, 0xcc, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x88, 0x06, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x00, 0xcb, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xe2, 0x05, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0xc0, 0xcf, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x34, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xa0, 0xd1, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x17, 0x03, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0xc0, 0xd5, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x31, 0x00, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xe0, 0xd1, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x19, 0x05, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0xe0, 0xd8, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x4c, 0x04, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x20, 0xd2, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xc2, 0x04, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x00, 0xde, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x25, 0x03, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x80, 0xd6, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xbd, 0x04, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0xe0, 0xe2, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x14, 0x01, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xc0, 0xd9, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x24, 0x04, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0xa0, 0xe7, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x50, 0x04, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xe0, 0xda, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x0d, 0x04, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0xe0, 0xeb, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x3d, 0x06, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x40, 0xdf, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xf6, 0x03, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x00, 0xf0, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x55, 0x04, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x80, 0xe5, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x1e, 0x07, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x00, 0xf4, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x88, 0x09, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xe0, 0xe9, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x34, 0x00, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x20, 0xfb, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x15, 0x02, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x80, 0xf3, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x31, 0x00, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x60, 0xfb, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x9d, 0x05, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0xa0, 0xf5, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x4c, 0x04, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0xa0, 0xfb, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x18, 0x03, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x40, 0xfb, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xda, 0x05, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x00, 0x00, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x60, 0xfe, 0x06, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x60, 0x04, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0xe0, 0x05, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x98, 0x05, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x80, 0x02, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xb2, 0x03, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x40, 0x0a, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xe3, 0x03, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x20, 0x08, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x25, 0x03, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x00, 0x0e, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x3f, 0x04, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x20, 0x0c, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x14, 0x01, 0x00, 0x00,
+    0xa5, 0x77, 0xf9, 0x49, 0x40, 0x11, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x4e, 0x02, 0x00, 0x00,
-    0x4f, 0x90, 0xd4, 0x49, 0x60, 0x10, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x58, 0x04, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0x60, 0x12, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x97, 0x05, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0xc0, 0x12, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x3d, 0x06, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0xc0, 0x16, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x67, 0x02, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x60, 0x18, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x55, 0x04, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0x00, 0x1d, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x33, 0x01, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0xe0, 0x1a, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x88, 0x09, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0x60, 0x21, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x02, 0x03, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x20, 0x1c, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x15, 0x02, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0x00, 0x2b, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x84, 0x05, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x40, 0x1f, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x9d, 0x05, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0x20, 0x2d, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x2c, 0x05, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0xe0, 0x24, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x18, 0x03, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0xc0, 0x32, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x49, 0x05, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x20, 0x2a, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0xe0, 0x35, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xfd, 0x04, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x80, 0x2f, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x98, 0x05, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0x00, 0x3a, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x5e, 0x05, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x80, 0x34, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xe3, 0x03, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0xa0, 0x3f, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x9e, 0x06, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0xe0, 0x39, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x3f, 0x04, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0xa0, 0x43, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x84, 0x07, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x80, 0x40, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x4e, 0x02, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0xe0, 0x47, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x19, 0x07, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x20, 0x48, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x97, 0x05, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0x40, 0x4a, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xcc, 0x01, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x40, 0x4f, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x67, 0x02, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0xe0, 0x4f, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x5a, 0x00, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x20, 0x51, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x33, 0x01, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0x60, 0x52, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0x21, 0x0f, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x80, 0x51, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x02, 0x03, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0xa0, 0x53, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xfa, 0x09, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0xc0, 0x60, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x2e, 0x06, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0xc0, 0x56, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
-    0xeb, 0x03, 0x01, 0x02, 0xf5, 0x0b, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0xc0, 0x6a, 0x07, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x2c, 0x05, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0x00, 0x5d, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x49, 0x05, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0x40, 0x62, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x34, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xfd, 0x04, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0xa0, 0x67, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x35, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x5e, 0x05, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0xa0, 0x6c, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x36, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x9e, 0x06, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0x00, 0x72, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x37, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x84, 0x07, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0xa0, 0x78, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x38, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x19, 0x07, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0x40, 0x80, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x39, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xcc, 0x01, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0x60, 0x87, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x30, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x5a, 0x00, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0x40, 0x89, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x31, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0x1a, 0x0f, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0xa0, 0x89, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x32, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xfa, 0x09, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0xc0, 0x98, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x33, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
+    0xeb, 0x03, 0x01, 0x02, 0xf5, 0x0b, 0x00, 0x00,
+    0xa6, 0x77, 0xf9, 0x49, 0xc0, 0xa2, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x34, 0x3e,
+    0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x7f, 0x06, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0xc0, 0x76, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x34, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0xc0, 0xae, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x35, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x04, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x80, 0x00, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x00, 0x30, 0x00, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x35, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0xe0, 0x32, 0x00, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x36, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x03, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x00, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x80, 0x30, 0x00, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x36, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0x60, 0x33, 0x00, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x88, 0x0e, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x40, 0x7d, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x37, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0x40, 0xb5, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xe0, 0x06, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0xe0, 0x8b, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x38, 0x3e,
+    0xa7, 0x77, 0xf9, 0x49, 0xe0, 0xc3, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x5e, 0x02, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0xc0, 0x92, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x39, 0x3e,
+    0xa7, 0x77, 0xf9, 0x49, 0xc0, 0xca, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x30, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x03, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x00, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0xe0, 0x30, 0x00, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x30, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0xc0, 0x33, 0x00, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x31, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x03, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x00, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x40, 0x31, 0x00, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x31, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0x20, 0x34, 0x00, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x32, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x00, 0x01, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0xa0, 0x31, 0x00, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x32, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0x80, 0x34, 0x00, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x18, 0x0c, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x20, 0x95, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x33, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0x20, 0xcd, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x21, 0x0f, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x40, 0xa1, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x34, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0x40, 0xd9, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xa9, 0x10, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x80, 0xb0, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x35, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0x80, 0xe8, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x66, 0x01, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x40, 0xc1, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x36, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0x40, 0xf9, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xaf, 0x05, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0xc0, 0xc2, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x37, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0xc0, 0xfa, 0x07, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xcf, 0x0e, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x80, 0xc8, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x38, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0x80, 0x00, 0x08, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x39, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xa0, 0x00, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0xa0, 0x32, 0x00, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x39, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0x80, 0x35, 0x00, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x39, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xec, 0x00, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x60, 0xd7, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x30, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0x60, 0x0f, 0x08, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x39, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xf1, 0x1d, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x60, 0xd8, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x31, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0x60, 0x10, 0x08, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x39, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xf6, 0x11, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x60, 0xf6, 0x07, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x32, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0x60, 0x2e, 0x08, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x39, 0x33, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xe0, 0x00, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x40, 0x33, 0x00, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x33, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0x20, 0x36, 0x00, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x39, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x79, 0x00, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x60, 0x08, 0x08, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x34, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0x60, 0x40, 0x08, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x39, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x77, 0x00, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0xe0, 0x08, 0x08, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x35, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0xe0, 0x40, 0x08, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x39, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x78, 0x00, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x60, 0x09, 0x08, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x36, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0x60, 0x41, 0x08, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x39, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x78, 0x00, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0xe0, 0x09, 0x08, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x37, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0xe0, 0x41, 0x08, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x39, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x79, 0x00, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x60, 0x0a, 0x08, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x38, 0x3e,
+    0xa6, 0x77, 0xf9, 0x49, 0x60, 0x42, 0x08, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x31, 0x39, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x58, 0x03, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0xe0, 0x0a, 0x08, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x39, 0x3e,
+    0xa7, 0x77, 0xf9, 0x49, 0xe0, 0x42, 0x08, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x32, 0x30, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x38, 0x06, 0x00, 0x00,
-    0x50, 0x90, 0xd4, 0x49, 0x40, 0x0e, 0x08, 0x00,
-    0x3c, 0x20, 0x20, 0x20, 0x31, 0x39, 0x30, 0x3e,
+    0xa7, 0x77, 0xf9, 0x49, 0x40, 0x46, 0x08, 0x00,
+    0x3c, 0x20, 0x20, 0x20, 0x32, 0x30, 0x31, 0x3e,
     0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
     0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -986,38 +1030,46 @@
     0x69, 0x6d, 0x78, 0x32, 0x37, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x33, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
+    0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78, 0x5f, 0x4c,
+    0x50, 0x43, 0x32, 0x33, 0x37, 0x38, 0x53, 0x54,
+    0x4b, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00,
+    0x34, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00,
     0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78, 0x5f, 0x6c,
     0x70, 0x63, 0x5f, 0x68, 0x32, 0x31, 0x34, 0x38,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
-    0x34, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00,
+    0x35, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00,
     0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78, 0x5f, 0x73,
     0x61, 0x6d, 0x37, 0x5f, 0x65, 0x78, 0x32, 0x35,
     0x36, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00,
-    0x35, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00,
+    0x36, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00,
     0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78, 0x5f, 0x73,
     0x61, 0x6d, 0x39, 0x5f, 0x6c, 0x39, 0x32, 0x36,
     0x30, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00,
-    0x36, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00,
+    0x37, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
+    0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78, 0x5f, 0x73,
+    0x74, 0x6d, 0x33, 0x32, 0x5f, 0x68, 0x31, 0x30,
+    0x33, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00,
+    0x38, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00,
     0x70, 0x69, 0x63, 0x2d, 0x70, 0x33, 0x32, 0x6d,
     0x78, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x37, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
+    0x39, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00,
     0x73, 0x68, 0x65, 0x65, 0x76, 0x61, 0x70, 0x6c,
     0x75, 0x67, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x38, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00,
+    0x3a, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00,
     0x73, 0x74, 0x6d, 0x33, 0x32, 0x31, 0x30, 0x65,
     0x5f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x39, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00,
+    0x3b, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
     0x73, 0x74, 0x6d, 0x33, 0x32, 0x66, 0x31, 0x30,
     0x78, 0x5f, 0x31, 0x32, 0x38, 0x6b, 0x5f, 0x65,
     0x76, 0x61, 0x6c, 0x2e, 0x63, 0x66, 0x67, 0x00,
-    0x3a, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00,
+    0x3c, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00,
     0x74, 0x69, 0x5f, 0x62, 0x65, 0x61, 0x67, 0x6c,
     0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x3b, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00,
+    0x3d, 0x00, 0x00, 0x00, 0xe0, 0x02, 0x00, 0x00,
     0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
     0x62, 0x6f, 0x61, 0x72, 0x64, 0x2d, 0x61, 0x74,
     0x6d, 0x65, 0x6c, 0x2d, 0x61, 0x74, 0x39, 0x31,
@@ -1025,7 +1077,7 @@
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x3c, 0x00, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00,
+    0x3e, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
     0x78, 0x33, 0x30, 0x30, 0x74, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -1037,7 +1089,7 @@
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x3d, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0x3f, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x61, 0x74, 0x39, 0x31, 0x65, 0x62, 0x34, 0x30,
     0x61, 0x2e, 0x65, 0x6c, 0x66, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -1049,122 +1101,134 @@
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x3e, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0x40, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x61, 0x72, 0x6d, 0x2d, 0x6a, 0x74, 0x61, 0x67,
     0x2d, 0x65, 0x77, 0x2e, 0x63, 0x66, 0x67, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x3f, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
+    0x41, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
     0x61, 0x72, 0x6d, 0x2d, 0x75, 0x73, 0x62, 0x2d,
     0x6f, 0x63, 0x64, 0x2e, 0x63, 0x66, 0x67, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x40, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
+    0x42, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
     0x61, 0x74, 0x39, 0x31, 0x72, 0x6d, 0x39, 0x32,
     0x30, 0x30, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x41, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
+    0x43, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
     0x61, 0x78, 0x6d, 0x30, 0x34, 0x33, 0x32, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x42, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
+    0x44, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
     0x63, 0x61, 0x6c, 0x61, 0x6f, 0x2d, 0x75, 0x73,
     0x62, 0x2d, 0x61, 0x39, 0x32, 0x36, 0x30, 0x2d,
     0x63, 0x30, 0x31, 0x2e, 0x63, 0x66, 0x67, 0x00,
-    0x43, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
+    0x45, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
     0x63, 0x61, 0x6c, 0x61, 0x6f, 0x2d, 0x75, 0x73,
     0x62, 0x2d, 0x61, 0x39, 0x32, 0x36, 0x30, 0x2d,
     0x63, 0x30, 0x32, 0x2e, 0x63, 0x66, 0x67, 0x00,
-    0x44, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00,
+    0x46, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00,
     0x63, 0x61, 0x6c, 0x61, 0x6f, 0x2d, 0x75, 0x73,
     0x62, 0x2d, 0x61, 0x39, 0x32, 0x36, 0x30, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x45, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00,
+    0x47, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00,
     0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f,
     0x6e, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x46, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00,
+    0x48, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00,
     0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x47, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
+    0x49, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
     0x66, 0x6c, 0x79, 0x73, 0x77, 0x61, 0x74, 0x74,
     0x65, 0x72, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x48, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00,
+    0x4a, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00,
+    0x69, 0x63, 0x65, 0x62, 0x65, 0x61, 0x72, 0x2e,
+    0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x4b, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00,
     0x6a, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x49, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00,
+    0x4c, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00,
     0x6a, 0x74, 0x61, 0x67, 0x6b, 0x65, 0x79, 0x2d,
     0x74, 0x69, 0x6e, 0x79, 0x2e, 0x63, 0x66, 0x67,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x4a, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00,
+    0x4d, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
     0x6a, 0x74, 0x61, 0x67, 0x6b, 0x65, 0x79, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x4b, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
+    0x4e, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00,
     0x6c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79,
     0x2d, 0x6c, 0x69, 0x62, 0x66, 0x74, 0x64, 0x69,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
-    0x4c, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00,
+    0x4f, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00,
     0x6c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79,
     0x2d, 0x6c, 0x6d, 0x33, 0x73, 0x38, 0x31, 0x31,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
-    0x4d, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00,
+    0x50, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00,
     0x6c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x4e, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00,
+    0x51, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
     0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78, 0x2d, 0x61,
     0x72, 0x6d, 0x2d, 0x75, 0x73, 0x62, 0x2d, 0x6f,
     0x63, 0x64, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00,
-    0x4f, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
+    0x52, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00,
     0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78, 0x2d, 0x6a,
     0x74, 0x61, 0x67, 0x2d, 0x74, 0x69, 0x6e, 0x79,
     0x2d, 0x61, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00,
-    0x50, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00,
+    0x53, 0x00, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00,
     0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78, 0x2d, 0x6a,
     0x74, 0x61, 0x67, 0x2d, 0x74, 0x69, 0x6e, 0x79,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
-    0x51, 0x00, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00,
+    0x54, 0x00, 0x00, 0x00, 0xe0, 0x02, 0x00, 0x00,
+    0x6f, 0x6f, 0x63, 0x64, 0x6c, 0x69, 0x6e, 0x6b,
+    0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x55, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
     0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x63, 0x64, 0x2d,
     0x75, 0x73, 0x62, 0x2e, 0x63, 0x66, 0x67, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x52, 0x00, 0x00, 0x00, 0xe0, 0x02, 0x00, 0x00,
+    0x56, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00,
     0x70, 0x61, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x53, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
+    0x57, 0x00, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00,
     0x70, 0x61, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x5f,
     0x64, 0x6c, 0x63, 0x35, 0x2e, 0x63, 0x66, 0x67,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x54, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00,
+    0x58, 0x00, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00,
     0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x55, 0x00, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00,
+    0x59, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00,
     0x73, 0x68, 0x65, 0x65, 0x76, 0x61, 0x70, 0x6c,
     0x75, 0x67, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x56, 0x00, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00,
+    0x5a, 0x00, 0x00, 0x00, 0xa0, 0x03, 0x00, 0x00,
     0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
     0x65, 0x72, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x57, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00,
+    0x5b, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00,
     0x73, 0x74, 0x6d, 0x33, 0x32, 0x2d, 0x73, 0x74,
     0x69, 0x63, 0x6b, 0x2e, 0x63, 0x66, 0x67, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x58, 0x00, 0x00, 0x00, 0xa0, 0x03, 0x00, 0x00,
+    0x5c, 0x00, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00,
     0x73, 0x74, 0x72, 0x39, 0x2d, 0x63, 0x6f, 0x6d,
     0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x59, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00,
+    0x5d, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
     0x74, 0x75, 0x72, 0x74, 0x65, 0x6c, 0x69, 0x7a,
     0x65, 0x72, 0x32, 0x2e, 0x63, 0x66, 0x67, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x5a, 0x00, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00,
+    0x5e, 0x00, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00,
     0x75, 0x73, 0x62, 0x70, 0x72, 0x6f, 0x67, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x5f, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00,
+    0x76, 0x73, 0x6c, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
+    0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x14, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
     0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -1173,79 +1237,79 @@
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x5b, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x62,
     0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x6e,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x5c, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
+    0x61, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
     0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74,
     0x6f, 0x70, 0x2e, 0x70, 0x6e, 0x67, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x5d, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
+    0x62, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
     0x68, 0x5f, 0x74, 0x61, 0x62, 0x31, 0x2e, 0x70,
     0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x5e, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
+    0x63, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
     0x68, 0x5f, 0x74, 0x61, 0x62, 0x31, 0x5f, 0x73,
     0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x2e,
     0x70, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x5f, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
+    0x64, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
     0x68, 0x5f, 0x74, 0x61, 0x62, 0x32, 0x2e, 0x70,
     0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x60, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
+    0x65, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
     0x68, 0x5f, 0x74, 0x61, 0x62, 0x32, 0x5f, 0x73,
     0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x2e,
     0x70, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x61, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00,
+    0x66, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00,
     0x68, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x66, 0x72,
     0x65, 0x65, 0x2e, 0x70, 0x6e, 0x67, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x62, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00,
+    0x67, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00,
     0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x62, 0x6f, 0x74,
     0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x6e, 0x67, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x63, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00,
+    0x68, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00,
     0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x74, 0x6f, 0x70,
     0x2e, 0x70, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x64, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
+    0x69, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
     0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x6f,
     0x74, 0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x6e, 0x67,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x65, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00,
+    0x6a, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00,
     0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x6f,
     0x70, 0x2e, 0x70, 0x6e, 0x67, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x66, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00,
+    0x6b, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00,
     0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x6f,
     0x70, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x2e,
     0x70, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x67, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00,
+    0x6c, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00,
     0x74, 0x6f, 0x70, 0x5f, 0x72, 0x69, 0x67, 0x68,
     0x74, 0x2e, 0x70, 0x6e, 0x67, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x68, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
+    0x6d, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
     0x76, 0x5f, 0x31, 0x2e, 0x70, 0x6e, 0x67, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x69, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00,
+    0x6e, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00,
     0x76, 0x5f, 0x32, 0x5f, 0x74, 0x69, 0x6c, 0x65,
     0x2e, 0x70, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x6a, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00,
+    0x6f, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00,
     0x76, 0x5f, 0x33, 0x2e, 0x70, 0x6e, 0x67, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x6b, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00,
+    0x70, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00,
     0x76, 0x5f, 0x74, 0x61, 0x62, 0x2e, 0x70, 0x6e,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x6c, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
+    0x71, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
     0x76, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x73, 0x65,
     0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x70,
     0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x6d, 0x00, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00,
+    0x72, 0x00, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00,
     0x7a, 0x79, 0x6c, 0x69, 0x6e, 0x5f, 0x6c, 0x6f,
     0x67, 0x6f, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f,
     0x6d, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x2e, 0x50,
@@ -1261,203 +1325,231 @@
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x6e, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0x73, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x61, 0x64, 0x75, 0x63, 0x37, 0x30, 0x32, 0x78,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x6f, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
+    0x74, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
     0x61, 0x74, 0x39, 0x31, 0x65, 0x62, 0x34, 0x30,
     0x61, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x70, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
+    0x75, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
     0x61, 0x74, 0x39, 0x31, 0x72, 0x34, 0x30, 0x30,
     0x30, 0x38, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x71, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
+    0x76, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
     0x61, 0x74, 0x39, 0x31, 0x72, 0x6d, 0x39, 0x32,
     0x30, 0x30, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x72, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
+    0x77, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
     0x61, 0x74, 0x39, 0x31, 0x73, 0x61, 0x6d, 0x39,
     0x32, 0x36, 0x30, 0x2e, 0x63, 0x66, 0x67, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x73, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
+    0x78, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00,
+    0x61, 0x74, 0x39, 0x31, 0x73, 0x61, 0x6d, 0x39,
+    0x32, 0x36, 0x30, 0x5f, 0x65, 0x78, 0x74, 0x5f,
+    0x52, 0x41, 0x4d, 0x5f, 0x65, 0x78, 0x74, 0x5f,
+    0x66, 0x6c, 0x61, 0x73, 0x68, 0x2e, 0x63, 0x66,
+    0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x79, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00,
     0x65, 0x70, 0x63, 0x39, 0x33, 0x30, 0x31, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x74, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00,
+    0x7a, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00,
     0x66, 0x65, 0x72, 0x6f, 0x63, 0x65, 0x6f, 0x6e,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x75, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00,
+    0x7b, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
     0x69, 0x6d, 0x6f, 0x74, 0x65, 0x32, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x76, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00,
+    0x7c, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00,
     0x69, 0x6d, 0x78, 0x32, 0x31, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x77, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
+    0x7d, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00,
     0x69, 0x6d, 0x78, 0x32, 0x37, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x78, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00,
+    0x7e, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00,
     0x69, 0x6d, 0x78, 0x33, 0x31, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x79, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00,
+    0x7f, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
     0x69, 0x6d, 0x78, 0x33, 0x35, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x7a, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00,
+    0x80, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00,
     0x69, 0x70, 0x78, 0x34, 0x32, 0x78, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x7b, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
+    0x81, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00,
     0x69, 0x73, 0x35, 0x31, 0x31, 0x34, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x7c, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00,
+    0x82, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00,
     0x69, 0x78, 0x70, 0x34, 0x32, 0x78, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x7d, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00,
+    0x83, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
     0x6c, 0x6d, 0x33, 0x73, 0x33, 0x37, 0x34, 0x38,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x7e, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00,
+    0x84, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00,
     0x6c, 0x6d, 0x33, 0x73, 0x36, 0x39, 0x36, 0x35,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x7f, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
+    0x85, 0x00, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00,
     0x6c, 0x6d, 0x33, 0x73, 0x38, 0x31, 0x31, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x80, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00,
+    0x86, 0x00, 0x00, 0x00, 0xe0, 0x02, 0x00, 0x00,
+    0x6c, 0x70, 0x63, 0x32, 0x31, 0x30, 0x33, 0x2e,
+    0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x87, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
+    0x6c, 0x70, 0x63, 0x32, 0x31, 0x32, 0x34, 0x2e,
+    0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x88, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00,
     0x6c, 0x70, 0x63, 0x32, 0x31, 0x32, 0x39, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x81, 0x00, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00,
+    0x89, 0x00, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00,
     0x6c, 0x70, 0x63, 0x32, 0x31, 0x34, 0x38, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x82, 0x00, 0x00, 0x00, 0xe0, 0x02, 0x00, 0x00,
+    0x8a, 0x00, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00,
     0x6c, 0x70, 0x63, 0x32, 0x31, 0x34, 0x38, 0x5f,
     0x32, 0x6d, 0x68, 0x7a, 0x2e, 0x63, 0x66, 0x67,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x83, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
+    0x8b, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00,
     0x6c, 0x70, 0x63, 0x32, 0x31, 0x34, 0x38, 0x5f,
     0x72, 0x63, 0x6c, 0x6b, 0x2e, 0x63, 0x66, 0x67,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x84, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00,
+    0x8c, 0x00, 0x00, 0x00, 0xa0, 0x03, 0x00, 0x00,
     0x6c, 0x70, 0x63, 0x32, 0x32, 0x39, 0x34, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x85, 0x00, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00,
+    0x8d, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00,
+    0x6c, 0x70, 0x63, 0x32, 0x33, 0x37, 0x38, 0x2e,
+    0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x8e, 0x00, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00,
+    0x6c, 0x70, 0x63, 0x32, 0x34, 0x37, 0x38, 0x2e,
+    0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x8f, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
+    0x6d, 0x65, 0x67, 0x61, 0x31, 0x32, 0x38, 0x2e,
+    0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x90, 0x00, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00,
     0x6e, 0x65, 0x74, 0x78, 0x35, 0x30, 0x30, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x86, 0x00, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00,
+    0x91, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00,
     0x6e, 0x73, 0x6c, 0x75, 0x32, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x87, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00,
+    0x92, 0x00, 0x00, 0x00, 0x60, 0x04, 0x00, 0x00,
     0x6f, 0x6d, 0x61, 0x70, 0x33, 0x35, 0x33, 0x30,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x88, 0x00, 0x00, 0x00, 0xa0, 0x03, 0x00, 0x00,
+    0x93, 0x00, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00,
     0x6f, 0x6d, 0x61, 0x70, 0x35, 0x39, 0x31, 0x32,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x89, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00,
+    0x94, 0x00, 0x00, 0x00, 0xa0, 0x04, 0x00, 0x00,
     0x70, 0x69, 0x63, 0x33, 0x32, 0x6d, 0x78, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x8a, 0x00, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00,
+    0x95, 0x00, 0x00, 0x00, 0xc0, 0x04, 0x00, 0x00,
     0x70, 0x78, 0x61, 0x32, 0x35, 0x35, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x8b, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
+    0x96, 0x00, 0x00, 0x00, 0xe0, 0x04, 0x00, 0x00,
     0x70, 0x78, 0x61, 0x32, 0x35, 0x35, 0x5f, 0x73,
     0x73, 0x74, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x8c, 0x00, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00,
+    0x97, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
     0x70, 0x78, 0x61, 0x32, 0x37, 0x30, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x8d, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00,
+    0x98, 0x00, 0x00, 0x00, 0x20, 0x05, 0x00, 0x00,
     0x70, 0x78, 0x69, 0x34, 0x32, 0x78, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x8e, 0x00, 0x00, 0x00, 0x60, 0x04, 0x00, 0x00,
+    0x99, 0x00, 0x00, 0x00, 0x40, 0x05, 0x00, 0x00,
     0x73, 0x61, 0x6d, 0x37, 0x73, 0x65, 0x35, 0x31,
     0x32, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x8f, 0x00, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00,
+    0x9a, 0x00, 0x00, 0x00, 0x60, 0x05, 0x00, 0x00,
     0x73, 0x61, 0x6d, 0x37, 0x78, 0x32, 0x35, 0x36,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x90, 0x00, 0x00, 0x00, 0xa0, 0x04, 0x00, 0x00,
+    0x9b, 0x00, 0x00, 0x00, 0x80, 0x05, 0x00, 0x00,
     0x73, 0x61, 0x6d, 0x73, 0x75, 0x6e, 0x67, 0x5f,
     0x73, 0x33, 0x63, 0x32, 0x34, 0x31, 0x30, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x91, 0x00, 0x00, 0x00, 0xc0, 0x04, 0x00, 0x00,
+    0x9c, 0x00, 0x00, 0x00, 0xa0, 0x05, 0x00, 0x00,
     0x73, 0x61, 0x6d, 0x73, 0x75, 0x6e, 0x67, 0x5f,
     0x73, 0x33, 0x63, 0x32, 0x34, 0x34, 0x30, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x92, 0x00, 0x00, 0x00, 0xe0, 0x04, 0x00, 0x00,
+    0x9d, 0x00, 0x00, 0x00, 0xc0, 0x05, 0x00, 0x00,
     0x73, 0x61, 0x6d, 0x73, 0x75, 0x6e, 0x67, 0x5f,
     0x73, 0x33, 0x63, 0x34, 0x35, 0x31, 0x30, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x93, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
+    0x9e, 0x00, 0x00, 0x00, 0xe0, 0x05, 0x00, 0x00,
     0x73, 0x61, 0x6d, 0x73, 0x75, 0x6e, 0x67, 0x5f,
     0x73, 0x33, 0x63, 0x36, 0x34, 0x31, 0x30, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x94, 0x00, 0x00, 0x00, 0x20, 0x05, 0x00, 0x00,
+    0x9f, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
     0x73, 0x68, 0x61, 0x72, 0x70, 0x5f, 0x6c, 0x68,
     0x37, 0x39, 0x35, 0x33, 0x32, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x95, 0x00, 0x00, 0x00, 0x40, 0x05, 0x00, 0x00,
+    0xa0, 0x00, 0x00, 0x00, 0x20, 0x06, 0x00, 0x00,
     0x73, 0x6d, 0x64, 0x6b, 0x36, 0x34, 0x31, 0x30,
     0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x96, 0x00, 0x00, 0x00, 0x60, 0x05, 0x00, 0x00,
+    0xa1, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x00,
     0x73, 0x6d, 0x70, 0x38, 0x36, 0x33, 0x34, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x97, 0x00, 0x00, 0x00, 0x80, 0x05, 0x00, 0x00,
+    0xa2, 0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00,
     0x73, 0x74, 0x6d, 0x33, 0x32, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x98, 0x00, 0x00, 0x00, 0xa0, 0x05, 0x00, 0x00,
+    0xa3, 0x00, 0x00, 0x00, 0x80, 0x06, 0x00, 0x00,
     0x73, 0x74, 0x6d, 0x33, 0x32, 0x73, 0x74, 0x69,
     0x63, 0x6b, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x99, 0x00, 0x00, 0x00, 0xc0, 0x05, 0x00, 0x00,
+    0xa4, 0x00, 0x00, 0x00, 0xa0, 0x06, 0x00, 0x00,
     0x73, 0x74, 0x72, 0x37, 0x31, 0x30, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x9a, 0x00, 0x00, 0x00, 0xe0, 0x05, 0x00, 0x00,
+    0xa5, 0x00, 0x00, 0x00, 0xc0, 0x06, 0x00, 0x00,
     0x73, 0x74, 0x72, 0x37, 0x33, 0x30, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x9b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
+    0xa6, 0x00, 0x00, 0x00, 0xe0, 0x06, 0x00, 0x00,
     0x73, 0x74, 0x72, 0x37, 0x35, 0x30, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x9c, 0x00, 0x00, 0x00, 0x20, 0x06, 0x00, 0x00,
+    0xa7, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00,
     0x73, 0x74, 0x72, 0x39, 0x31, 0x30, 0x2d, 0x65,
     0x76, 0x61, 0x6c, 0x2e, 0x63, 0x66, 0x67, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x9d, 0x00, 0x00, 0x00, 0x40, 0x06, 0x00, 0x00,
+    0xa8, 0x00, 0x00, 0x00, 0x20, 0x07, 0x00, 0x00,
     0x73, 0x74, 0x72, 0x39, 0x31, 0x32, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x9e, 0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00,
+    0xa9, 0x00, 0x00, 0x00, 0x40, 0x07, 0x00, 0x00,
     0x73, 0x74, 0x72, 0x39, 0x63, 0x6f, 0x6d, 0x73,
     0x74, 0x69, 0x63, 0x6b, 0x2e, 0x63, 0x66, 0x67,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x9f, 0x00, 0x00, 0x00, 0xa0, 0x06, 0x00, 0x00,
+    0xaa, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x00,
     0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
     0x65, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x74, 0x61,
     0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e,
@@ -1465,19 +1557,19 @@
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa0, 0x00, 0x00, 0x00, 0xc0, 0x06, 0x00, 0x00,
+    0xab, 0x00, 0x00, 0x00, 0xa0, 0x07, 0x00, 0x00,
     0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e,
     0x74, 0x61, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f,
     0x72, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00,
-    0xa1, 0x00, 0x00, 0x00, 0xe0, 0x06, 0x00, 0x00,
+    0xac, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00,
     0x77, 0x69, 0x2d, 0x39, 0x63, 0x2e, 0x63, 0x66,
     0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa2, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00,
+    0xad, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00,
     0x78, 0x62, 0x61, 0x5f, 0x72, 0x65, 0x76, 0x41,
     0x33, 0x2e, 0x63, 0x66, 0x67, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa3, 0x00, 0x00, 0x00, 0x20, 0x07, 0x00, 0x00,
+    0xae, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
     0x7a, 0x79, 0x31, 0x30, 0x30, 0x30, 0x2e, 0x63,
     0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -1489,27 +1581,27 @@
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa4, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0xaf, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x62, 0x69, 0x74, 0x73, 0x62, 0x79, 0x74, 0x65,
     0x73, 0x2e, 0x74, 0x63, 0x6c, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa5, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
+    0xb0, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
     0x63, 0x68, 0x69, 0x70, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa6, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
+    0xb1, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
     0x63, 0x70, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa7, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
+    0xb2, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
     0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x74,
     0x63, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa8, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
+    0xb3, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
     0x6d, 0x6d, 0x72, 0x5f, 0x68, 0x65, 0x6c, 0x70,
     0x65, 0x72, 0x73, 0x2e, 0x74, 0x63, 0x6c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa9, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
+    0xb4, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
     0x72, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65,
     0x2e, 0x74, 0x63, 0x6c, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -1521,7 +1613,7 @@
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xbd, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0xc8, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x31, 0x2e,
     0x63, 0x66, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -1533,11 +1625,11 @@
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xbe, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0xc9, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x68, 0x61,
     0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2e, 0x62, 0x69,
     0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa5, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
+    0xb0, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
     0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -1545,15 +1637,15 @@
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xaa, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0xb5, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x61, 0x74, 0x6d, 0x65, 0x6c, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xab, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
+    0xb6, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
     0x73, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa6, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
+    0xb1, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
     0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -1561,111 +1653,111 @@
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xb7, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0xc2, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x61, 0x72, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xaa, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
+    0xb5, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
     0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa5, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
+    0xb0, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xac, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0xb7, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x61, 0x74, 0x39, 0x31, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xab, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
+    0xb6, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
     0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa5, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
+    0xb0, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xb3, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0xbe, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x73, 0x74, 0x6d, 0x33, 0x32, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xac, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
+    0xb7, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
     0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xaa, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
+    0xb5, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xad, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0xb8, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x61, 0x69, 0x63, 0x2e, 0x74, 0x63, 0x6c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xae, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
+    0xb9, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
     0x61, 0x74, 0x39, 0x31, 0x73, 0x61, 0x6d, 0x37,
     0x78, 0x31, 0x32, 0x38, 0x2e, 0x74, 0x63, 0x6c,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xaf, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
+    0xba, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
     0x61, 0x74, 0x39, 0x31, 0x73, 0x61, 0x6d, 0x37,
     0x78, 0x32, 0x35, 0x36, 0x2e, 0x74, 0x63, 0x6c,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xb0, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
+    0xbb, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
     0x70, 0x6d, 0x63, 0x2e, 0x74, 0x63, 0x6c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xb1, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
+    0xbc, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
     0x72, 0x74, 0x74, 0x2e, 0x74, 0x63, 0x6c, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xb2, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
+    0xbd, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
     0x75, 0x73, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x74,
     0x63, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xb3, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
+    0xbe, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
     0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xab, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
+    0xb6, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xb4, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0xbf, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x73, 0x74, 0x6d, 0x33, 0x32, 0x2e, 0x74, 0x63,
     0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xb5, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
+    0xc0, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
     0x73, 0x74, 0x6d, 0x33, 0x32, 0x5f, 0x72, 0x63,
     0x63, 0x2e, 0x74, 0x63, 0x6c, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xb6, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
+    0xc1, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
     0x73, 0x74, 0x6d, 0x33, 0x32, 0x5f, 0x72, 0x65,
     0x67, 0x73, 0x2e, 0x74, 0x63, 0x6c, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xb7, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
+    0xc2, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
     0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xa6, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
+    0xb1, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
     0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xb8, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+    0xc3, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
     0x61, 0x72, 0x6d, 0x37, 0x74, 0x64, 0x6d, 0x69,
     0x2e, 0x74, 0x63, 0x6c, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xb9, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
+    0xc4, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
     0x61, 0x72, 0x6d, 0x39, 0x32, 0x30, 0x2e, 0x74,
     0x63, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xba, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
+    0xc5, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
     0x61, 0x72, 0x6d, 0x39, 0x34, 0x36, 0x2e, 0x74,
     0x63, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xbb, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
+    0xc6, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
     0x61, 0x72, 0x6d, 0x39, 0x36, 0x36, 0x2e, 0x74,
     0x63, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0xbc, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
+    0xc7, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
     0x63, 0x6f, 0x72, 0x74, 0x65, 0x78, 0x5f, 0x6d,
     0x33, 0x2e, 0x74, 0x63, 0x6c, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -10232,163 +10324,173 @@
     0x6d, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x74, 0x65,
     0x78, 0x74, 0x5d, 0x0d, 0x0a, 0x09, 0x09, 0x09,
     0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x09, 0x70, 0x72, 0x6f, 0x63,
-    0x20, 0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64,
-    0x20, 0x7b, 0x20, 0x76, 0x61, 0x6c, 0x20, 0x6c,
-    0x69, 0x73, 0x74, 0x20, 0x7d, 0x20, 0x7b, 0x0d,
-    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x73, 0x65,
-    0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x22, 0x22,
     0x09, 0x09, 0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x66, 0x6f, 0x72, 0x65, 0x61, 0x63, 0x68,
-    0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x24,
-    0x6c, 0x69, 0x73, 0x74, 0x20, 0x7b, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x09, 0x73, 0x65, 0x74, 0x20,
-    0x74, 0x20, 0x24, 0x76, 0x61, 0x6c, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x09, 0x61, 0x70, 0x70, 0x65,
-    0x6e, 0x64, 0x20, 0x74, 0x20, 0x24, 0x76, 0x61,
-    0x6c, 0x75, 0x65, 0x0d, 0x0a, 0x09, 0x09, 0x09,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x6c, 0x61, 0x70, 0x70,
-    0x65, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x73, 0x20,
-    0x24, 0x74, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74,
-    0x75, 0x72, 0x6e, 0x20, 0x24, 0x72, 0x65, 0x73,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x20, 0x7d,
-    0x09, 0x09, 0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x73, 0x65, 0x74, 0x20, 0x66, 0x69, 0x6c, 0x65,
-    0x73, 0x20, 0x5b, 0x70, 0x72, 0x65, 0x70, 0x65,
-    0x6e, 0x64, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65,
-    0x74, 0x2f, 0x20, 0x5b, 0x6c, 0x73, 0x20, 0x2f,
-    0x72, 0x6f, 0x6d, 0x2f, 0x74, 0x61, 0x72, 0x67,
-    0x65, 0x74, 0x5d, 0x5d, 0x0d, 0x0a, 0x09, 0x09,
     0x09, 0x09, 0x73, 0x65, 0x74, 0x20, 0x66, 0x69,
+    0x6c, 0x65, 0x73, 0x20, 0x5b, 0x70, 0x72, 0x65,
+    0x70, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x61, 0x72,
+    0x67, 0x65, 0x74, 0x2f, 0x20, 0x5b, 0x6c, 0x73,
+    0x20, 0x2f, 0x72, 0x6f, 0x6d, 0x2f, 0x74, 0x61,
+    0x72, 0x67, 0x65, 0x74, 0x5d, 0x5d, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x09, 0x73, 0x65, 0x74, 0x20,
+    0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x5b, 0x6c,
+    0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x20, 0x24, 0x66,
+    0x69, 0x6c, 0x65, 0x73, 0x20, 0x5b, 0x70, 0x72,
+    0x65, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x61,
+    0x72, 0x67, 0x65, 0x74, 0x2f, 0x20, 0x5b, 0x6c,
+    0x73, 0x20, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
+    0x67, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
+    0x67, 0x73, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65,
+    0x74, 0x5d, 0x5d, 0x5d, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x09, 0x73, 0x65, 0x74, 0x20, 0x66, 0x69,
     0x6c, 0x65, 0x73, 0x20, 0x5b, 0x6c, 0x75, 0x6e,
     0x69, 0x6f, 0x6e, 0x20, 0x24, 0x66, 0x69, 0x6c,
     0x65, 0x73, 0x20, 0x5b, 0x70, 0x72, 0x65, 0x70,
-    0x65, 0x6e, 0x64, 0x20, 0x65, 0x76, 0x65, 0x6e,
-    0x74, 0x2f, 0x20, 0x5b, 0x6c, 0x73, 0x20, 0x2f,
+    0x65, 0x6e, 0x64, 0x20, 0x62, 0x6f, 0x61, 0x72,
+    0x64, 0x2f, 0x20, 0x5b, 0x6c, 0x73, 0x20, 0x2f,
+    0x72, 0x6f, 0x6d, 0x2f, 0x62, 0x6f, 0x61, 0x72,
+    0x64, 0x5d, 0x5d, 0x5d, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x09, 0x73, 0x65, 0x74, 0x20, 0x66, 0x69,
+    0x6c, 0x65, 0x73, 0x20, 0x5b, 0x6c, 0x75, 0x6e,
+    0x69, 0x6f, 0x6e, 0x20, 0x24, 0x66, 0x69, 0x6c,
+    0x65, 0x73, 0x20, 0x5b, 0x70, 0x72, 0x65, 0x70,
+    0x65, 0x6e, 0x64, 0x20, 0x62, 0x6f, 0x61, 0x72,
+    0x64, 0x2f, 0x20, 0x5b, 0x6c, 0x73, 0x20, 0x2f,
     0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73,
     0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f,
-    0x65, 0x76, 0x65, 0x6e, 0x74, 0x5d, 0x5d, 0x5d,
+    0x62, 0x6f, 0x61, 0x72, 0x64, 0x5d, 0x5d, 0x5d,
     0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x73, 0x65,
     0x74, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20,
-    0x5b, 0x6c, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x20,
-    0x24, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x5b,
-    0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x20,
-    0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2f, 0x20,
-    0x5b, 0x6c, 0x73, 0x20, 0x2f, 0x63, 0x6f, 0x6e,
-    0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x74,
-    0x69, 0x6e, 0x67, 0x73, 0x2f, 0x74, 0x61, 0x72,
-    0x67, 0x65, 0x74, 0x5d, 0x5d, 0x5d, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x09, 0x73, 0x65, 0x74, 0x20,
-    0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x5b, 0x6c,
-    0x73, 0x6f, 0x72, 0x74, 0x20, 0x24, 0x66, 0x69,
-    0x6c, 0x65, 0x73, 0x5d, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
-    0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20,
-    0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c,
-    0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74,
-    0x79, 0x6c, 0x65, 0x3d, 0x22, 0x70, 0x61, 0x64,
-    0x64, 0x69, 0x6e, 0x67, 0x3a, 0x30, 0x70, 0x78,
-    0x3b, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d,
-    0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65,
-    0x3a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73,
-    0x65, 0x3b, 0x22, 0x3e, 0x3c, 0x74, 0x72, 0x3e,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x3c,
-    0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
-    0x3d, 0x22, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
-    0x67, 0x2d, 0x74, 0x6f, 0x70, 0x3a, 0x31, 0x70,
-    0x78, 0x3b, 0x22, 0x3e, 0x3c, 0x73, 0x65, 0x6c,
-    0x65, 0x63, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65,
-    0x3d, 0x22, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73,
-    0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22,
-    0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x73, 0x65, 0x74,
-    0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61,
-    0x72, 0x67, 0x65, 0x74, 0x20, 0x30, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x66,
-    0x6f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x20, 0x69,
-    0x20, 0x24, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20,
-    0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x0d, 0x0a, 0x61, 0x70, 0x70,
-    0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66,
-    0x65, 0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09,
+    0x5b, 0x6c, 0x73, 0x6f, 0x72, 0x74, 0x20, 0x24,
+    0x66, 0x69, 0x6c, 0x65, 0x73, 0x5d, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x09, 0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65,
+    0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65,
+    0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20,
+    0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x70,
+    0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x30,
+    0x70, 0x78, 0x3b, 0x62, 0x6f, 0x72, 0x64, 0x65,
+    0x72, 0x2d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70,
+    0x73, 0x65, 0x3a, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
+    0x70, 0x73, 0x65, 0x3b, 0x22, 0x3e, 0x3c, 0x74,
+    0x72, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x3c, 0x74, 0x64, 0x20, 0x73, 0x74, 0x79,
+    0x6c, 0x65, 0x3d, 0x22, 0x70, 0x61, 0x64, 0x64,
+    0x69, 0x6e, 0x67, 0x2d, 0x74, 0x6f, 0x70, 0x3a,
+    0x31, 0x70, 0x78, 0x3b, 0x22, 0x3e, 0x3c, 0x73,
+    0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x6e, 0x61,
+    0x6d, 0x65, 0x3d, 0x22, 0x66, 0x6f, 0x72, 0x6d,
+    0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
+    0x64, 0x22, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x73,
+    0x65, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64,
+    0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x30,
+    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x66, 0x6f, 0x72, 0x65, 0x61, 0x63, 0x68,
+    0x20, 0x69, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x65,
+    0x73, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x0d, 0x0a, 0x61,
+    0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75,
+    0x66, 0x66, 0x65, 0x72, 0x20, 0x7b, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
+    0x20, 0x09, 0x09, 0x3c, 0x6f, 0x70, 0x74, 0x69,
+    0x6f, 0x6e, 0x20, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x20, 0x20, 0x09, 0x09,
+    0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x20, 0x09,
-    0x09, 0x3c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
-    0x20, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x20, 0x20, 0x09, 0x09, 0x7d, 0x0d,
-    0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x20, 0x20, 0x09, 0x09, 0x69,
-    0x66, 0x20, 0x7b, 0x5b, 0x73, 0x74, 0x72, 0x69,
-    0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61,
-    0x72, 0x65, 0x20, 0x24, 0x66, 0x6f, 0x72, 0x6d,
-    0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
-    0x65, 0x20, 0x24, 0x69, 0x5d, 0x3d, 0x3d, 0x30,
-    0x7d, 0x20, 0x7b, 0x20, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x69, 0x66, 0x20, 0x7b, 0x5b, 0x73, 0x74,
+    0x72, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6d,
+    0x70, 0x61, 0x72, 0x65, 0x20, 0x24, 0x66, 0x6f,
+    0x72, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e,
+    0x61, 0x6d, 0x65, 0x20, 0x24, 0x69, 0x5d, 0x3d,
+    0x3d, 0x30, 0x7d, 0x20, 0x7b, 0x20, 0x0d, 0x0a,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x73, 0x65, 0x74, 0x20, 0x66, 0x6f, 0x75,
-    0x6e, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
-    0x20, 0x31, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x20, 0x09,
-    0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20,
-    0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b,
-    0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
-    0x3d, 0x22, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
-    0x65, 0x64, 0x22, 0x7d, 0x20, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x73, 0x65, 0x74, 0x20, 0x66,
+    0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x72, 0x67,
+    0x65, 0x74, 0x20, 0x31, 0x0d, 0x0a, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
-    0x20, 0x09, 0x09, 0x7d, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x20,
-    0x09, 0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e,
+    0x20, 0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e,
     0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
-    0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x20, 0x20, 0x09, 0x09, 0x76, 0x61,
-    0x6c, 0x75, 0x65, 0x3d, 0x22, 0x7d, 0x0d, 0x0a,
+    0x20, 0x7b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
+    0x65, 0x64, 0x3d, 0x22, 0x73, 0x65, 0x6c, 0x65,
+    0x63, 0x74, 0x65, 0x64, 0x22, 0x7d, 0x20, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x20, 0x20, 0x09, 0x09, 0x7d, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x20, 0x20, 0x09, 0x0d, 0x0a, 0x61, 0x70, 0x70,
+    0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66,
+    0x65, 0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x20, 0x20, 0x09, 0x09,
+    0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x7d,
+    0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
+    0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20,
+    0x24, 0x69, 0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65,
+    0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65,
+    0x72, 0x20, 0x7b, 0x22, 0x3e, 0x7d, 0x0d, 0x0a,
     0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62,
     0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x24, 0x69,
     0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
     0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20,
-    0x7b, 0x22, 0x3e, 0x7d, 0x0d, 0x0a, 0x61, 0x70,
-    0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66,
-    0x66, 0x65, 0x72, 0x20, 0x24, 0x69, 0x0d, 0x0a,
-    0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62,
-    0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b, 0x3c,
-    0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3e,
+    0x7b, 0x3c, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
+    0x6e, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x7d, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x69, 0x66, 0x20, 0x7b, 0x24, 0x66,
+    0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x72, 0x67,
+    0x65, 0x74, 0x3d, 0x3d, 0x30, 0x7d, 0x20, 0x7b,
     0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x7d, 0x0d,
+    0x09, 0x09, 0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65,
+    0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65,
+    0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x20, 0x20, 0x09, 0x09,
+    0x3c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
+    0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
+    0x3d, 0x22, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
+    0x65, 0x64, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x75,
+    0x65, 0x3d, 0x22, 0x22, 0x3e, 0x53, 0x65, 0x6c,
+    0x65, 0x63, 0x74, 0x20, 0x74, 0x61, 0x72, 0x67,
+    0x65, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
+    0x67, 0x3c, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
+    0x6e, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x7d, 0x0d, 0x0a, 0x0d,
     0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x69, 0x66, 0x20, 0x7b, 0x24, 0x66, 0x6f, 0x75,
-    0x6e, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
-    0x3d, 0x3d, 0x30, 0x7d, 0x20, 0x7b, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
-    0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20,
-    0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x20, 0x20, 0x09, 0x09, 0x3c, 0x6f,
-    0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x65,
-    0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x3d, 0x22,
-    0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
-    0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d,
-    0x22, 0x22, 0x3e, 0x53, 0x65, 0x6c, 0x65, 0x63,
-    0x74, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
-    0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3c,
-    0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3e,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x7d, 0x0d,
-    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0d,
-    0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20,
-    0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b,
+    0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e,
+    0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
+    0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x3c, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63,
+    0x74, 0x3e, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x74,
+    0x64, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
+    0x22, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73,
+    0x70, 0x61, 0x63, 0x65, 0x73, 0x6d, 0x61, 0x6c,
+    0x6c, 0x22, 0x3e, 0x26, 0x6e, 0x62, 0x73, 0x70,
+    0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x3c, 0x74, 0x64, 0x3e,
+    0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74,
+    0x79, 0x70, 0x65, 0x3d, 0x22, 0x73, 0x75, 0x62,
+    0x6d, 0x69, 0x74, 0x22, 0x20, 0x76, 0x61, 0x6c,
+    0x75, 0x65, 0x3d, 0x22, 0x4c, 0x6f, 0x61, 0x64,
+    0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22,
+    0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x63, 0x74,
+    0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x3c, 0x2f, 0x74,
+    0x64, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x3c, 0x74, 0x64, 0x20, 0x63, 0x6c, 0x61,
+    0x73, 0x73, 0x3d, 0x22, 0x62, 0x75, 0x74, 0x74,
+    0x6f, 0x6e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
+    0x6d, 0x61, 0x6c, 0x6c, 0x22, 0x3e, 0x26, 0x6e,
+    0x62, 0x73, 0x70, 0x3c, 0x2f, 0x74, 0x64, 0x3e,
     0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x3c,
-    0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x3e,
+    0x74, 0x64, 0x3e, 0x3c, 0x69, 0x6e, 0x70, 0x75,
+    0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
+    0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0x20,
+    0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x53,
+    0x68, 0x6f, 0x77, 0x20, 0x64, 0x65, 0x66, 0x61,
+    0x75, 0x6c, 0x74, 0x22, 0x20, 0x6e, 0x61, 0x6d,
+    0x65, 0x3d, 0x22, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
+    0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e,
     0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x3c, 0x74, 0x64, 0x20,
     0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x62,
@@ -10400,610 +10502,534 @@
     0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70,
     0x65, 0x3d, 0x22, 0x73, 0x75, 0x62, 0x6d, 0x69,
     0x74, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
-    0x3d, 0x22, 0x4c, 0x6f, 0x61, 0x64, 0x22, 0x20,
-    0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x66, 0x6f,
-    0x72, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
-    0x6e, 0x22, 0x3e, 0x3c, 0x2f, 0x74, 0x64, 0x3e,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x3c,
+    0x3d, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
+    0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22,
+    0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x63, 0x74,
+    0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x3c, 0x2f, 0x74,
+    0x64, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x3c, 0x2f, 0x74,
+    0x61, 0x62, 0x6c, 0x65, 0x3e, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x3c, 0x74, 0x65, 0x78, 0x74,
+    0x61, 0x72, 0x65, 0x61, 0x20, 0x20, 0x73, 0x74,
+    0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6f, 0x76, 0x65,
+    0x72, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x61, 0x75,
+    0x74, 0x6f, 0x3b, 0x22, 0x20, 0x20, 0x72, 0x6f,
+    0x77, 0x73, 0x3d, 0x22, 0x32, 0x31, 0x22, 0x20,
+    0x63, 0x6f, 0x6c, 0x73, 0x3d, 0x22, 0x36, 0x35,
+    0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22,
+    0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x65, 0x64, 0x69,
+    0x74, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x77,
+    0x72, 0x61, 0x70, 0x3d, 0x22, 0x6f, 0x66, 0x66,
+    0x22, 0x3e, 0x7d, 0x0d, 0x0a, 0x61, 0x70, 0x70,
+    0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66,
+    0x65, 0x72, 0x20, 0x24, 0x66, 0x6f, 0x72, 0x6d,
+    0x5f, 0x65, 0x64, 0x69, 0x74, 0x74, 0x65, 0x78,
+    0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x0d,
+    0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20,
+    0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b,
+    0x3c, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x61, 0x72,
+    0x65, 0x61, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20,
+    0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x70,
+    0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x30,
+    0x70, 0x78, 0x3b, 0x62, 0x6f, 0x72, 0x64, 0x65,
+    0x72, 0x2d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70,
+    0x73, 0x65, 0x3a, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
+    0x70, 0x73, 0x65, 0x3b, 0x22, 0x3e, 0x3c, 0x74,
+    0x72, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
+    0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20,
+    0x7b, 0x3c, 0x74, 0x64, 0x20, 0x63, 0x6c, 0x61,
+    0x73, 0x73, 0x3d, 0x22, 0x66, 0x6f, 0x72, 0x6d,
+    0x74, 0x65, 0x78, 0x74, 0x22, 0x3e, 0x46, 0x69,
+    0x6c, 0x65, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c,
+    0x74, 0x64, 0x3e, 0x3c, 0x69, 0x6e, 0x70, 0x75,
+    0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
+    0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x6e, 0x61,
+    0x6d, 0x65, 0x3d, 0x22, 0x66, 0x6f, 0x72, 0x6d,
+    0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
+    0x65, 0x22, 0x20, 0x7d, 0x20, 0x22, 0x5c, 0x6e,
+    0x22, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62,
+    0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x22, 0x76,
+    0x61, 0x6c, 0x75, 0x65, 0x3d, 0x5c, 0x22, 0x24,
+    0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x69, 0x6c,
+    0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5c, 0x22, 0x20,
+    0x3e, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x5c, 0x6e,
+    0x22, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62,
+    0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b, 0x3c,
     0x74, 0x64, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
     0x3d, 0x22, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
     0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x6d, 0x61,
     0x6c, 0x6c, 0x22, 0x3e, 0x26, 0x6e, 0x62, 0x73,
-    0x70, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x74, 0x64,
-    0x3e, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20,
-    0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x73, 0x75,
-    0x62, 0x6d, 0x69, 0x74, 0x22, 0x20, 0x76, 0x61,
-    0x6c, 0x75, 0x65, 0x3d, 0x22, 0x53, 0x68, 0x6f,
-    0x77, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
-    0x74, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
-    0x22, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x63,
-    0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x3c, 0x2f,
-    0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x3c, 0x74, 0x64, 0x20, 0x63, 0x6c,
-    0x61, 0x73, 0x73, 0x3d, 0x22, 0x62, 0x75, 0x74,
-    0x74, 0x6f, 0x6e, 0x73, 0x70, 0x61, 0x63, 0x65,
-    0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x22, 0x3e, 0x26,
-    0x6e, 0x62, 0x73, 0x70, 0x3c, 0x2f, 0x74, 0x64,
-    0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x3c, 0x74, 0x64, 0x3e, 0x3c, 0x69, 0x6e, 0x70,
-    0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d,
-    0x22, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x22,
-    0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22,
-    0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x20,
-    0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x66, 0x6f,
-    0x72, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
-    0x6e, 0x22, 0x3e, 0x3c, 0x2f, 0x74, 0x64, 0x3e,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x2f,
-    0x74, 0x72, 0x3e, 0x3c, 0x2f, 0x74, 0x61, 0x62,
-    0x6c, 0x65, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09,
-    0x09, 0x3c, 0x74, 0x65, 0x78, 0x74, 0x61, 0x72,
-    0x65, 0x61, 0x20, 0x20, 0x73, 0x74, 0x79, 0x6c,
-    0x65, 0x3d, 0x22, 0x6f, 0x76, 0x65, 0x72, 0x66,
-    0x6c, 0x6f, 0x77, 0x3a, 0x61, 0x75, 0x74, 0x6f,
-    0x3b, 0x22, 0x20, 0x20, 0x72, 0x6f, 0x77, 0x73,
-    0x3d, 0x22, 0x32, 0x31, 0x22, 0x20, 0x63, 0x6f,
-    0x6c, 0x73, 0x3d, 0x22, 0x36, 0x35, 0x22, 0x20,
-    0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x66, 0x6f,
-    0x72, 0x6d, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x74,
-    0x65, 0x78, 0x74, 0x22, 0x20, 0x77, 0x72, 0x61,
-    0x70, 0x3d, 0x22, 0x6f, 0x66, 0x66, 0x22, 0x3e,
-    0x7d, 0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e,
-    0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
-    0x20, 0x24, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x65,
-    0x64, 0x69, 0x74, 0x74, 0x65, 0x78, 0x74, 0x5f,
-    0x73, 0x75, 0x62, 0x73, 0x74, 0x0d, 0x0a, 0x61,
+    0x70, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x74,
+    0x64, 0x3e, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74,
+    0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x73,
+    0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0x20, 0x76,
+    0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x53, 0x61,
+    0x76, 0x65, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65,
+    0x3d, 0x22, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61,
+    0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x3c,
+    0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x62, 0x72, 0x3e,
+    0x7d, 0x20, 0x22, 0x5c, 0x6e, 0x22, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x61, 0x70, 0x70,
+    0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66,
+    0x65, 0x72, 0x20, 0x7b, 0x3c, 0x2f, 0x74, 0x72,
+    0x3e, 0x3c, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65,
+    0x3e, 0x7d, 0x20, 0x22, 0x5c, 0x6e, 0x22, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x09, 0x0d, 0x0a, 0x61,
     0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75,
-    0x66, 0x66, 0x65, 0x72, 0x20, 0x7b, 0x3c, 0x2f,
-    0x74, 0x65, 0x78, 0x74, 0x61, 0x72, 0x65, 0x61,
-    0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c,
-    0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74,
-    0x79, 0x6c, 0x65, 0x3d, 0x22, 0x70, 0x61, 0x64,
-    0x64, 0x69, 0x6e, 0x67, 0x3a, 0x30, 0x70, 0x78,
-    0x3b, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d,
-    0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65,
-    0x3a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73,
-    0x65, 0x3b, 0x22, 0x3e, 0x3c, 0x74, 0x72, 0x3e,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x7d, 0x0d,
-    0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62,
-    0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b, 0x3c,
-    0x74, 0x64, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
-    0x3d, 0x22, 0x66, 0x6f, 0x72, 0x6d, 0x74, 0x65,
-    0x78, 0x74, 0x22, 0x3e, 0x46, 0x69, 0x6c, 0x65,
-    0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x74, 0x64,
-    0x3e, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20,
-    0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65,
-    0x78, 0x74, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65,
-    0x3d, 0x22, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66,
-    0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22,
-    0x20, 0x7d, 0x20, 0x22, 0x5c, 0x6e, 0x22, 0x0d,
-    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x61, 0x70,
-    0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66,
-    0x66, 0x65, 0x72, 0x20, 0x22, 0x76, 0x61, 0x6c,
-    0x75, 0x65, 0x3d, 0x5c, 0x22, 0x24, 0x66, 0x6f,
-    0x72, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e,
-    0x61, 0x6d, 0x65, 0x5c, 0x22, 0x20, 0x3e, 0x3c,
-    0x2f, 0x74, 0x64, 0x3e, 0x5c, 0x6e, 0x22, 0x0d,
-    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x61, 0x70,
-    0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66,
-    0x66, 0x65, 0x72, 0x20, 0x7b, 0x3c, 0x74, 0x64,
-    0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,
-    0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73, 0x70,
-    0x61, 0x63, 0x65, 0x73, 0x6d, 0x61, 0x6c, 0x6c,
-    0x22, 0x3e, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3c,
-    0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x74, 0x64, 0x3e,
-    0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74,
-    0x79, 0x70, 0x65, 0x3d, 0x22, 0x73, 0x75, 0x62,
-    0x6d, 0x69, 0x74, 0x22, 0x20, 0x76, 0x61, 0x6c,
-    0x75, 0x65, 0x3d, 0x22, 0x53, 0x61, 0x76, 0x65,
-    0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22,
-    0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x63, 0x74,
-    0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x3c, 0x2f, 0x74,
-    0x64, 0x3e, 0x3c, 0x62, 0x72, 0x3e, 0x7d, 0x20,
-    0x22, 0x5c, 0x6e, 0x22, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e,
-    0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
-    0x20, 0x7b, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x3c,
-    0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x7d,
-    0x20, 0x22, 0x5c, 0x6e, 0x22, 0x0d, 0x0a, 0x09,
-    0x09, 0x09, 0x09, 0x0d, 0x0a, 0x61, 0x70, 0x70,
-    0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66,
-    0x65, 0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x3c, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x3e,
-    0x09, 0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09, 0x09,
-    0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x7d, 0x0d,
-    0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x20, 0x09, 0x09, 0x0d, 0x0a, 0x09,
+    0x66, 0x66, 0x65, 0x72, 0x20, 0x7b, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x3c, 0x2f, 0x66, 0x6f, 0x72,
+    0x6d, 0x3e, 0x09, 0x09, 0x09, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d,
+    0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x0a,
+    0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x20, 0x09, 0x73, 0x65, 0x74, 0x20, 0x74,
+    0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x64, 0x65,
+    0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x5b, 0x66,
+    0x6f, 0x72, 0x6d, 0x66, 0x65, 0x74, 0x63, 0x68,
+    0x20, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f,
+    0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5d,
+    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x20, 0x09, 0x69, 0x66, 0x20, 0x7b,
+    0x5b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20,
+    0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x24,
+    0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x64,
+    0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5d, 0x3d,
+    0x3d, 0x30, 0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
-    0x09, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x67,
-    0x67, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
-    0x69, 0x6c, 0x73, 0x20, 0x5b, 0x66, 0x6f, 0x72,
-    0x6d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x20, 0x74,
+    0x09, 0x09, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f,
+    0x67, 0x67, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74,
+    0x61, 0x69, 0x6c, 0x73, 0x20, 0x30, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x20, 0x09, 0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x73,
+    0x65, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x5f,
+    0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20,
+    0x5b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x76, 0x61,
+    0x72, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64,
+    0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5d, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x20, 0x09, 0x69, 0x66, 0x20, 0x7b, 0x5b,
+    0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x6c,
+    0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x24, 0x73,
+    0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x74, 0x61,
+    0x69, 0x6c, 0x73, 0x5d, 0x3d, 0x3d, 0x30, 0x7d,
+    0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x73,
+    0x65, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x5f,
+    0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20,
+    0x30, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x20, 0x09, 0x7d, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x20, 0x09, 0x69, 0x66, 0x20, 0x7b, 0x24, 0x74,
     0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x64, 0x65,
-    0x74, 0x61, 0x69, 0x6c, 0x73, 0x5d, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x20, 0x09, 0x69, 0x66, 0x20, 0x7b, 0x5b, 0x73,
-    0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x65,
-    0x6e, 0x67, 0x74, 0x68, 0x20, 0x24, 0x74, 0x6f,
-    0x67, 0x67, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74,
-    0x61, 0x69, 0x6c, 0x73, 0x5d, 0x3d, 0x3d, 0x30,
+    0x74, 0x61, 0x69, 0x6c, 0x73, 0x3d, 0x3d, 0x31,
     0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09,
-    0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x67, 0x67,
-    0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
-    0x6c, 0x73, 0x20, 0x30, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
-    0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x20, 0x09, 0x73, 0x65, 0x74,
-    0x20, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65,
-    0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x5b, 0x6c,
-    0x6f, 0x61, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x20,
-    0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x74,
-    0x61, 0x69, 0x6c, 0x73, 0x5d, 0x0d, 0x0a, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
-    0x09, 0x69, 0x66, 0x20, 0x7b, 0x5b, 0x73, 0x74,
-    0x72, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x65, 0x6e,
-    0x67, 0x74, 0x68, 0x20, 0x24, 0x73, 0x68, 0x6f,
+    0x73, 0x65, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x77,
+    0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
+    0x20, 0x5b, 0x65, 0x78, 0x70, 0x72, 0x20, 0x31,
+    0x2d, 0x24, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64,
+    0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5d, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x20, 0x09, 0x09, 0x73, 0x61, 0x76, 0x65,
+    0x5f, 0x76, 0x61, 0x72, 0x20, 0x73, 0x68, 0x6f,
     0x77, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
-    0x73, 0x5d, 0x3d, 0x3d, 0x30, 0x7d, 0x20, 0x7b,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x20, 0x09, 0x09, 0x73, 0x65, 0x74,
-    0x20, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65,
-    0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x30, 0x0d,
+    0x73, 0x20, 0x24, 0x73, 0x68, 0x6f, 0x77, 0x5f,
+    0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x0d,
     0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x20, 0x09, 0x7d, 0x0d, 0x0a, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
-    0x69, 0x66, 0x20, 0x7b, 0x24, 0x74, 0x6f, 0x67,
-    0x67, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
-    0x69, 0x6c, 0x73, 0x3d, 0x3d, 0x31, 0x7d, 0x20,
-    0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x73, 0x65,
-    0x74, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64,
-    0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x5b,
-    0x65, 0x78, 0x70, 0x72, 0x20, 0x31, 0x2d, 0x24,
-    0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x74,
-    0x61, 0x69, 0x6c, 0x73, 0x5d, 0x0d, 0x0a, 0x09,
+    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x20, 0x09, 0x09, 0x69, 0x66, 0x20, 0x7b,
+    0x5b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20,
+    0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x24,
+    0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5d,
+    0x21, 0x3d, 0x30, 0x7d, 0x20, 0x7b, 0x0d, 0x0a,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
-    0x09, 0x09, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x76,
-    0x61, 0x72, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x5f,
-    0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20,
-    0x24, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65,
-    0x74, 0x61, 0x69, 0x6c, 0x73, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x0d, 0x0a, 0x61, 0x70, 0x70,
+    0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66,
+    0x65, 0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x3c, 0x74,
+    0x72, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d,
+    0x22, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a,
+    0x31, 0x30, 0x30, 0x25, 0x3b, 0x22, 0x3e, 0x0d,
+    0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73, 0x74, 0x79,
+    0x6c, 0x65, 0x3d, 0x22, 0x68, 0x65, 0x69, 0x67,
+    0x68, 0x74, 0x3a, 0x31, 0x30, 0x30, 0x25, 0x3b,
+    0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
+    0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
+    0x3a, 0x72, 0x65, 0x64, 0x3b, 0x22, 0x20, 0x63,
+    0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22,
+    0x36, 0x22, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x61,
+    0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x79, 0x6c,
+    0x65, 0x3d, 0x22, 0x70, 0x61, 0x64, 0x64, 0x69,
+    0x6e, 0x67, 0x3a, 0x30, 0x70, 0x78, 0x3b, 0x62,
+    0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x63, 0x6f,
+    0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x3a, 0x63,
+    0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x3b,
+    0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
+    0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
+    0x3a, 0x23, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
+    0x3b, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x31,
+    0x30, 0x30, 0x25, 0x22, 0x20, 0x63, 0x6c, 0x61,
+    0x73, 0x73, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74,
+    0x67, 0x72, 0x61, 0x79, 0x22, 0x3e, 0x0d, 0x0a,
+    0x3c, 0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c,
+    0x65, 0x3d, 0x22, 0x77, 0x69, 0x64, 0x74, 0x68,
+    0x3a, 0x32, 0x35, 0x70, 0x78, 0x3b, 0x22, 0x3e,
+    0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c, 0x2f,
+    0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
+    0x09, 0x69, 0x66, 0x20, 0x7b, 0x24, 0x73, 0x68,
+    0x6f, 0x77, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
+    0x6c, 0x73, 0x3d, 0x3d, 0x31, 0x7d, 0x20, 0x7b,
+    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
+    0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
+    0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20,
+    0x3c, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
-    0x09, 0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
-    0x09, 0x09, 0x69, 0x66, 0x20, 0x7b, 0x5b, 0x73,
-    0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x65,
-    0x6e, 0x67, 0x74, 0x68, 0x20, 0x24, 0x63, 0x6f,
-    0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5d, 0x21, 0x3d,
-    0x30, 0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09,
-    0x09, 0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e,
+    0x09, 0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e,
     0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
-    0x20, 0x7b, 0x0d, 0x0a, 0x3c, 0x74, 0x72, 0x20,
-    0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x68,
-    0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x31, 0x30,
-    0x30, 0x25, 0x3b, 0x22, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
-    0x3d, 0x22, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
-    0x3a, 0x31, 0x30, 0x30, 0x25, 0x3b, 0x62, 0x61,
-    0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
-    0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x72,
-    0x65, 0x64, 0x3b, 0x22, 0x20, 0x63, 0x6f, 0x6c,
-    0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22, 0x36, 0x22,
-    0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x61, 0x62, 0x6c,
-    0x65, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d,
-    0x22, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
-    0x3a, 0x30, 0x70, 0x78, 0x3b, 0x62, 0x6f, 0x72,
-    0x64, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6c, 0x6c,
-    0x61, 0x70, 0x73, 0x65, 0x3a, 0x63, 0x6f, 0x6c,
-    0x6c, 0x61, 0x70, 0x73, 0x65, 0x3b, 0x62, 0x61,
-    0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
-    0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23,
-    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3b, 0x77,
-    0x69, 0x64, 0x74, 0x68, 0x3a, 0x31, 0x30, 0x30,
-    0x25, 0x22, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
-    0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x67, 0x72,
-    0x61, 0x79, 0x22, 0x3e, 0x0d, 0x0a, 0x3c, 0x74,
-    0x64, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d,
-    0x22, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x32,
-    0x35, 0x70, 0x78, 0x3b, 0x22, 0x3e, 0x26, 0x6e,
-    0x62, 0x73, 0x70, 0x3b, 0x3c, 0x2f, 0x74, 0x64,
-    0x3e, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x20, 0x7b, 0x74, 0x64, 0x20, 0x73, 0x74, 0x79,
+    0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61, 0x63, 0x6b,
+    0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63,
+    0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x64, 0x64,
+    0x64, 0x64, 0x64, 0x64, 0x3b, 0x70, 0x61, 0x64,
+    0x64, 0x69, 0x6e, 0x67, 0x2d, 0x6c, 0x65, 0x66,
+    0x74, 0x3a, 0x35, 0x70, 0x78, 0x3b, 0x70, 0x61,
+    0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x72, 0x69,
+    0x67, 0x68, 0x74, 0x3a, 0x35, 0x70, 0x78, 0x3b,
+    0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d,
+    0x74, 0x6f, 0x70, 0x3a, 0x33, 0x70, 0x78, 0x3b,
+    0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d,
+    0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x3a, 0x33,
+    0x70, 0x78, 0x3b, 0x22, 0x7d, 0x0d, 0x0a, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x69,
-    0x66, 0x20, 0x7b, 0x24, 0x73, 0x68, 0x6f, 0x77,
-    0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
-    0x3d, 0x3d, 0x31, 0x7d, 0x20, 0x7b, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x09, 0x61,
+    0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75,
+    0x66, 0x66, 0x65, 0x72, 0x20, 0x3e, 0x0d, 0x0a,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x09,
-    0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62,
-    0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x3c, 0x0d,
+    0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x7d,
+    0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0d,
     0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09,
     0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20,
-    0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b,
-    0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
-    0x3d, 0x22, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
-    0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x6c,
-    0x6f, 0x72, 0x3a, 0x23, 0x64, 0x64, 0x64, 0x64,
-    0x64, 0x64, 0x3b, 0x70, 0x61, 0x64, 0x64, 0x69,
-    0x6e, 0x67, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x3a,
-    0x35, 0x70, 0x78, 0x3b, 0x70, 0x61, 0x64, 0x64,
-    0x69, 0x6e, 0x67, 0x2d, 0x72, 0x69, 0x67, 0x68,
-    0x74, 0x3a, 0x35, 0x70, 0x78, 0x3b, 0x70, 0x61,
-    0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x6f,
-    0x70, 0x3a, 0x33, 0x70, 0x78, 0x3b, 0x70, 0x61,
-    0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x62, 0x6f,
-    0x74, 0x74, 0x6f, 0x6d, 0x3a, 0x33, 0x70, 0x78,
-    0x3b, 0x22, 0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x3c,
+    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
+    0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
+    0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20,
+    0x7b, 0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c,
+    0x65, 0x3d, 0x22, 0x62, 0x61, 0x63, 0x6b, 0x67,
+    0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x69, 0x6d,
+    0x61, 0x67, 0x65, 0x3a, 0x75, 0x72, 0x6c, 0x28,
+    0x27, 0x2f, 0x72, 0x6f, 0x6d, 0x2f, 0x6d, 0x65,
+    0x6e, 0x75, 0x5f, 0x63, 0x75, 0x74, 0x73, 0x2f,
+    0x68, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x66, 0x72,
+    0x65, 0x65, 0x2e, 0x70, 0x6e, 0x67, 0x27, 0x29,
+    0x3b, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x31,
+    0x31, 0x30, 0x70, 0x78, 0x3b, 0x68, 0x65, 0x69,
+    0x67, 0x68, 0x74, 0x3a, 0x32, 0x39, 0x70, 0x78,
+    0x3b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
+    0x75, 0x6e, 0x64, 0x2d, 0x72, 0x65, 0x70, 0x65,
+    0x61, 0x74, 0x3a, 0x20, 0x6e, 0x6f, 0x2d, 0x72,
+    0x65, 0x70, 0x65, 0x61, 0x74, 0x3b, 0x62, 0x61,
+    0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
+    0x2d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
+    0x6e, 0x3a, 0x74, 0x6f, 0x70, 0x20, 0x6c, 0x65,
+    0x66, 0x74, 0x3b, 0x22, 0x7d, 0x0d, 0x0a, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x20, 0x09, 0x09, 0x09, 0x61, 0x70, 0x70,
-    0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66,
-    0x65, 0x72, 0x20, 0x3e, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x20, 0x09, 0x09, 0x7d, 0x20, 0x65,
-    0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0d, 0x0a, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x09, 0x61,
     0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75,
-    0x66, 0x66, 0x65, 0x72, 0x20, 0x3c, 0x0d, 0x0a,
+    0x66, 0x66, 0x65, 0x72, 0x20, 0x3e, 0x0d, 0x0a,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x09,
-    0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62,
-    0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b, 0x74,
-    0x64, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d,
-    0x22, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
-    0x75, 0x6e, 0x64, 0x2d, 0x69, 0x6d, 0x61, 0x67,
-    0x65, 0x3a, 0x75, 0x72, 0x6c, 0x28, 0x27, 0x2f,
-    0x72, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x6e, 0x75,
-    0x5f, 0x63, 0x75, 0x74, 0x73, 0x2f, 0x68, 0x5f,
-    0x74, 0x61, 0x62, 0x5f, 0x66, 0x72, 0x65, 0x65,
-    0x2e, 0x70, 0x6e, 0x67, 0x27, 0x29, 0x3b, 0x77,
-    0x69, 0x64, 0x74, 0x68, 0x3a, 0x31, 0x31, 0x30,
-    0x70, 0x78, 0x3b, 0x68, 0x65, 0x69, 0x67, 0x68,
-    0x74, 0x3a, 0x32, 0x39, 0x70, 0x78, 0x3b, 0x62,
-    0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
-    0x64, 0x2d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
-    0x3a, 0x20, 0x6e, 0x6f, 0x2d, 0x72, 0x65, 0x70,
-    0x65, 0x61, 0x74, 0x3b, 0x62, 0x61, 0x63, 0x6b,
-    0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x70,
-    0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
-    0x74, 0x6f, 0x70, 0x20, 0x6c, 0x65, 0x66, 0x74,
-    0x3b, 0x22, 0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x7d,
+    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
+    0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
+    0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20,
+    0x7b, 0x0d, 0x0a, 0x3c, 0x61, 0x20, 0x63, 0x6c,
+    0x61, 0x73, 0x73, 0x3d, 0x22, 0x6f, 0x70, 0x65,
+    0x6e, 0x6f, 0x63, 0x64, 0x22, 0x20, 0x68, 0x72,
+    0x65, 0x66, 0x3d, 0x22, 0x2f, 0x72, 0x61, 0x6d,
+    0x2f, 0x63, 0x67, 0x69, 0x2f, 0x65, 0x64, 0x69,
+    0x74, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
+    0x2e, 0x74, 0x63, 0x6c, 0x3f, 0x74, 0x6f, 0x67,
+    0x67, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
+    0x69, 0x6c, 0x73, 0x3d, 0x31, 0x22, 0x3e, 0x0d,
+    0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x69, 0x66, 0x20,
+    0x7b, 0x24, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64,
+    0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x3d, 0x3d,
+    0x31, 0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x61, 0x70,
+    0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66,
+    0x66, 0x65, 0x72, 0x20, 0x22, 0x48, 0x69, 0x64,
+    0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
+    0x73, 0x22, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x20, 0x09, 0x09, 0x09, 0x61, 0x70, 0x70,
     0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66,
-    0x65, 0x72, 0x20, 0x3e, 0x0d, 0x0a, 0x09, 0x09,
+    0x65, 0x72, 0x20, 0x3c, 0x62, 0x72, 0x2f, 0x3e,
+    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x20, 0x09, 0x09, 0x7d, 0x0d, 0x0a,
+    0x09, 0x7d, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20,
+    0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x0d, 0x0a,
-    0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62,
-    0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b, 0x0d,
-    0x0a, 0x3c, 0x61, 0x20, 0x63, 0x6c, 0x61, 0x73,
-    0x73, 0x3d, 0x22, 0x6f, 0x70, 0x65, 0x6e, 0x6f,
-    0x63, 0x64, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66,
-    0x3d, 0x22, 0x2f, 0x72, 0x61, 0x6d, 0x2f, 0x63,
-    0x67, 0x69, 0x2f, 0x65, 0x64, 0x69, 0x74, 0x63,
-    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x74,
-    0x63, 0x6c, 0x3f, 0x74, 0x6f, 0x67, 0x67, 0x6c,
-    0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
-    0x73, 0x3d, 0x31, 0x22, 0x3e, 0x0d, 0x0a, 0x7d,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x69, 0x66, 0x20, 0x7b, 0x24,
-    0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x74,
-    0x61, 0x69, 0x6c, 0x73, 0x3d, 0x3d, 0x31, 0x7d,
-    0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x61, 0x70, 0x70, 0x65,
-    0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65,
-    0x72, 0x20, 0x22, 0x48, 0x69, 0x64, 0x65, 0x20,
-    0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
     0x09, 0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e,
     0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
-    0x20, 0x3c, 0x62, 0x72, 0x2f, 0x3e, 0x0d, 0x0a,
+    0x20, 0x7b, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x73,
+    0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x70, 0x6f,
+    0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x72,
+    0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x3b,
+    0x74, 0x6f, 0x70, 0x3a, 0x37, 0x70, 0x78, 0x3b,
+    0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69,
+    0x67, 0x6e, 0x3a, 0x63, 0x65, 0x6e, 0x74, 0x65,
+    0x72, 0x3b, 0x22, 0x3e, 0x7d, 0x0d, 0x0a, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x7d,
-    0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0d,
-    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x61,
+    0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75,
+    0x66, 0x66, 0x65, 0x72, 0x20, 0x22, 0x53, 0x68,
+    0x6f, 0x77, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69,
+    0x6c, 0x73, 0x22, 0x0d, 0x0a, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20,
-    0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b,
-    0x3c, 0x64, 0x69, 0x76, 0x20, 0x73, 0x74, 0x79,
-    0x6c, 0x65, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x69,
-    0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x72, 0x65, 0x6c,
-    0x61, 0x74, 0x69, 0x76, 0x65, 0x3b, 0x74, 0x6f,
-    0x70, 0x3a, 0x37, 0x70, 0x78, 0x3b, 0x74, 0x65,
-    0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e,
-    0x3a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x3b,
-    0x22, 0x3e, 0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x61, 0x70, 0x70,
     0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66,
-    0x65, 0x72, 0x20, 0x22, 0x53, 0x68, 0x6f, 0x77,
-    0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
-    0x22, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x65, 0x72, 0x20, 0x7b, 0x3c, 0x2f, 0x64, 0x69,
+    0x76, 0x3e, 0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e,
-    0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
-    0x20, 0x7b, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
-    0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x7d, 0x0d, 0x0a, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0d, 0x0a,
+    0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62,
+    0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b, 0x0d,
+    0x0a, 0x3c, 0x2f, 0x61, 0x3e, 0x0d, 0x0a, 0x7d,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x0d, 0x0a, 0x61, 0x70,
+    0x09, 0x20, 0x09, 0x09, 0x69, 0x66, 0x20, 0x7b,
+    0x24, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65,
+    0x74, 0x61, 0x69, 0x6c, 0x73, 0x3d, 0x3d, 0x31,
+    0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x20, 0x09, 0x09, 0x09, 0x61, 0x70,
     0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66,
-    0x66, 0x65, 0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x3c,
-    0x2f, 0x61, 0x3e, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
-    0x09, 0x09, 0x69, 0x66, 0x20, 0x7b, 0x24, 0x73,
+    0x66, 0x65, 0x72, 0x20, 0x24, 0x63, 0x6f, 0x6e,
+    0x73, 0x6f, 0x6c, 0x65, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x7d, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
+    0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
+    0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20,
+    0x7b, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x7d, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x20, 0x09, 0x69, 0x66, 0x20, 0x7b, 0x24, 0x73,
     0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x74, 0x61,
-    0x69, 0x6c, 0x73, 0x3d, 0x3d, 0x31, 0x7d, 0x20,
+    0x69, 0x6c, 0x73, 0x21, 0x3d, 0x31, 0x7d, 0x20,
     0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x20, 0x09, 0x09, 0x09, 0x61, 0x70, 0x70, 0x65,
-    0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65,
-    0x72, 0x20, 0x24, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
-    0x6c, 0x65, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x20, 0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e,
+    0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
+    0x20, 0x7b, 0x3c, 0x74, 0x64, 0x3e, 0x26, 0x6e,
+    0x62, 0x73, 0x70, 0x3b, 0x3c, 0x2f, 0x74, 0x64,
+    0x3e, 0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x20, 0x09, 0x09, 0x7d, 0x0d, 0x0a, 0x09,
+    0x09, 0x20, 0x09, 0x7d, 0x0d, 0x0a, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x0d, 0x0a,
-    0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62,
-    0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b, 0x3c,
-    0x2f, 0x74, 0x64, 0x3e, 0x7d, 0x0d, 0x0a, 0x0d,
-    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
-    0x69, 0x66, 0x20, 0x7b, 0x24, 0x73, 0x68, 0x6f,
-    0x77, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
-    0x73, 0x21, 0x3d, 0x31, 0x7d, 0x20, 0x7b, 0x0d,
-    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
-    0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20,
-    0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b,
-    0x3c, 0x74, 0x64, 0x3e, 0x26, 0x6e, 0x62, 0x73,
-    0x70, 0x3b, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x7d,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
-    0x09, 0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x20, 0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65,
-    0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65,
-    0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x3c, 0x74, 0x64,
-    0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
-    0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x32, 0x35,
-    0x70, 0x78, 0x3b, 0x22, 0x3e, 0x26, 0x6e, 0x62,
-    0x73, 0x70, 0x3b, 0x3c, 0x2f, 0x74, 0x64, 0x3e,
-    0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x61, 0x62, 0x6c,
-    0x65, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x64,
-    0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e,
-    0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x20, 0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x0d, 0x0a, 0x61, 0x70,
+    0x09, 0x09, 0x09, 0x20, 0x0d, 0x0a, 0x61, 0x70,
     0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66,
     0x66, 0x65, 0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x3c,
-    0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64,
-    0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
-    0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x33,
-    0x30, 0x70, 0x78, 0x3b, 0x62, 0x61, 0x63, 0x6b,
-    0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x69,
-    0x6d, 0x61, 0x67, 0x65, 0x3a, 0x75, 0x72, 0x6c,
-    0x28, 0x27, 0x2f, 0x72, 0x6f, 0x6d, 0x2f, 0x6d,
-    0x65, 0x6e, 0x75, 0x5f, 0x63, 0x75, 0x74, 0x73,
-    0x2f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f,
-    0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x2e, 0x70,
-    0x6e, 0x67, 0x27, 0x29, 0x3b, 0x62, 0x61, 0x63,
-    0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d,
-    0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x3a, 0x20,
-    0x6e, 0x6f, 0x2d, 0x72, 0x65, 0x70, 0x65, 0x61,
-    0x74, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
-    0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x70, 0x6f, 0x73,
-    0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x74, 0x6f,
-    0x70, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3b,
-    0x22, 0x20, 0x63, 0x6f, 0x6c, 0x73, 0x70, 0x61,
-    0x6e, 0x3d, 0x22, 0x36, 0x22, 0x3e, 0x0d, 0x0a,
-    0x3c, 0x64, 0x69, 0x76, 0x20, 0x73, 0x74, 0x79,
-    0x6c, 0x65, 0x3d, 0x22, 0x77, 0x69, 0x64, 0x74,
-    0x68, 0x3a, 0x35, 0x30, 0x30, 0x70, 0x78, 0x3b,
-    0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
-    0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
-    0x3a, 0x23, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
-    0x3b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a,
-    0x31, 0x30, 0x30, 0x25, 0x3b, 0x22, 0x3e, 0x0d,
+    0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
+    0x3d, 0x22, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a,
+    0x32, 0x35, 0x70, 0x78, 0x3b, 0x22, 0x3e, 0x26,
+    0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c, 0x2f, 0x74,
+    0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x61,
+    0x62, 0x6c, 0x65, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f,
+    0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74,
+    0x72, 0x3e, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d,
     0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x20, 0x09, 0x09, 0x09, 0x26, 0x6e, 0x62,
-    0x73, 0x70, 0x3b, 0x0d, 0x0a, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x09,
-    0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a,
-    0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f,
-    0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x0d, 0x0a,
-    0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c,
+    0x09, 0x09, 0x20, 0x7d, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0d, 0x0a,
+    0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62,
+    0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b, 0x0d,
+    0x0a, 0x3c, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c,
     0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
-    0x3d, 0x22, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a,
-    0x36, 0x70, 0x78, 0x3b, 0x22, 0x2f, 0x3e, 0x0d,
+    0x3d, 0x22, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
+    0x3a, 0x33, 0x30, 0x70, 0x78, 0x3b, 0x62, 0x61,
+    0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
+    0x2d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x3a, 0x75,
+    0x72, 0x6c, 0x28, 0x27, 0x2f, 0x72, 0x6f, 0x6d,
+    0x2f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x63, 0x75,
+    0x74, 0x73, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x65,
+    0x72, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d,
+    0x2e, 0x70, 0x6e, 0x67, 0x27, 0x29, 0x3b, 0x62,
+    0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
+    0x64, 0x2d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
+    0x3a, 0x20, 0x6e, 0x6f, 0x2d, 0x72, 0x65, 0x70,
+    0x65, 0x61, 0x74, 0x3b, 0x62, 0x61, 0x63, 0x6b,
+    0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x70,
+    0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
+    0x74, 0x6f, 0x70, 0x20, 0x72, 0x69, 0x67, 0x68,
+    0x74, 0x3b, 0x22, 0x20, 0x63, 0x6f, 0x6c, 0x73,
+    0x70, 0x61, 0x6e, 0x3d, 0x22, 0x36, 0x22, 0x3e,
+    0x0d, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x73,
+    0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x77, 0x69,
+    0x64, 0x74, 0x68, 0x3a, 0x35, 0x30, 0x30, 0x70,
+    0x78, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
+    0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x6c,
+    0x6f, 0x72, 0x3a, 0x23, 0x66, 0x66, 0x66, 0x66,
+    0x66, 0x66, 0x3b, 0x68, 0x65, 0x69, 0x67, 0x68,
+    0x74, 0x3a, 0x31, 0x30, 0x30, 0x25, 0x3b, 0x22,
+    0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x09, 0x26,
+    0x6e, 0x62, 0x73, 0x70, 0x3b, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
+    0x09, 0x09, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
+    0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d,
+    0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x0a,
+    0x3c, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e,
+    0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d,
     0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73, 0x74, 0x79,
     0x6c, 0x65, 0x3d, 0x22, 0x77, 0x69, 0x64, 0x74,
-    0x68, 0x3a, 0x32, 0x34, 0x35, 0x70, 0x78, 0x3b,
-    0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x31,
-    0x30, 0x30, 0x25, 0x22, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74,
-    0x79, 0x6c, 0x65, 0x3d, 0x22, 0x70, 0x61, 0x64,
-    0x64, 0x69, 0x6e, 0x67, 0x3a, 0x30, 0x70, 0x78,
-    0x3b, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d,
-    0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65,
-    0x3a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73,
-    0x65, 0x3b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
-    0x3a, 0x31, 0x30, 0x30, 0x25, 0x3b, 0x22, 0x3e,
-    0x0d, 0x0a, 0x3c, 0x74, 0x72, 0x3e, 0x0d, 0x0a,
-    0x3c, 0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c,
-    0x65, 0x3d, 0x22, 0x77, 0x69, 0x64, 0x74, 0x68,
-    0x3a, 0x31, 0x30, 0x33, 0x70, 0x78, 0x3b, 0x68,
-    0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x32, 0x39,
-    0x70, 0x78, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x67,
-    0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x69, 0x6d,
-    0x61, 0x67, 0x65, 0x3a, 0x75, 0x72, 0x6c, 0x28,
-    0x27, 0x2f, 0x72, 0x6f, 0x6d, 0x2f, 0x6d, 0x65,
-    0x6e, 0x75, 0x5f, 0x63, 0x75, 0x74, 0x73, 0x2f,
-    0x68, 0x5f, 0x74, 0x61, 0x62, 0x32, 0x5f, 0x73,
-    0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x2e,
-    0x70, 0x6e, 0x67, 0x27, 0x29, 0x3b, 0x62, 0x61,
-    0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
-    0x2d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x3a,
-    0x20, 0x6e, 0x6f, 0x2d, 0x72, 0x65, 0x70, 0x65,
-    0x61, 0x74, 0x3b, 0x22, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x64, 0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c,
-    0x65, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x69, 0x74,
-    0x69, 0x6f, 0x6e, 0x3a, 0x72, 0x65, 0x6c, 0x61,
-    0x74, 0x69, 0x76, 0x65, 0x3b, 0x74, 0x6f, 0x70,
-    0x3a, 0x37, 0x70, 0x78, 0x3b, 0x3b, 0x66, 0x6f,
-    0x6e, 0x74, 0x2d, 0x77, 0x65, 0x69, 0x67, 0x68,
-    0x74, 0x3a, 0x62, 0x6f, 0x6c, 0x64, 0x3b, 0x74,
-    0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67,
-    0x6e, 0x3a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
-    0x3b, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x31,
-    0x30, 0x30, 0x70, 0x78, 0x3b, 0x22, 0x20, 0x63,
-    0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x74, 0x65,
-    0x78, 0x74, 0x67, 0x72, 0x61, 0x79, 0x22, 0x3e,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x20, 0x20, 0x20, 0x20,
-    0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
-    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0d, 0x0a, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x20, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
-    0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d,
-    0x0a, 0x3c, 0x74, 0x64, 0x20, 0x77, 0x69, 0x64,
-    0x74, 0x68, 0x3d, 0x22, 0x34, 0x30, 0x70, 0x78,
+    0x68, 0x3a, 0x36, 0x70, 0x78, 0x3b, 0x22, 0x2f,
+    0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73,
+    0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x77, 0x69,
+    0x64, 0x74, 0x68, 0x3a, 0x32, 0x34, 0x35, 0x70,
+    0x78, 0x3b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
+    0x3a, 0x31, 0x30, 0x30, 0x25, 0x22, 0x3e, 0x0d,
+    0x0a, 0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20,
+    0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x70,
+    0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x30,
+    0x70, 0x78, 0x3b, 0x62, 0x6f, 0x72, 0x64, 0x65,
+    0x72, 0x2d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70,
+    0x73, 0x65, 0x3a, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
+    0x70, 0x73, 0x65, 0x3b, 0x68, 0x65, 0x69, 0x67,
+    0x68, 0x74, 0x3a, 0x31, 0x30, 0x30, 0x25, 0x3b,
+    0x22, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x72, 0x3e,
+    0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73, 0x74,
+    0x79, 0x6c, 0x65, 0x3d, 0x22, 0x77, 0x69, 0x64,
+    0x74, 0x68, 0x3a, 0x31, 0x30, 0x33, 0x70, 0x78,
+    0x3b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a,
+    0x32, 0x39, 0x70, 0x78, 0x3b, 0x62, 0x61, 0x63,
+    0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d,
+    0x69, 0x6d, 0x61, 0x67, 0x65, 0x3a, 0x75, 0x72,
+    0x6c, 0x28, 0x27, 0x2f, 0x72, 0x6f, 0x6d, 0x2f,
+    0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x63, 0x75, 0x74,
+    0x73, 0x2f, 0x68, 0x5f, 0x74, 0x61, 0x62, 0x32,
+    0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
+    0x64, 0x2e, 0x70, 0x6e, 0x67, 0x27, 0x29, 0x3b,
+    0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
+    0x6e, 0x64, 0x2d, 0x72, 0x65, 0x70, 0x65, 0x61,
+    0x74, 0x3a, 0x20, 0x6e, 0x6f, 0x2d, 0x72, 0x65,
+    0x70, 0x65, 0x61, 0x74, 0x3b, 0x22, 0x3e, 0x0d,
+    0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x73, 0x74,
+    0x79, 0x6c, 0x65, 0x3d, 0x22, 0x70, 0x6f, 0x73,
+    0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x72, 0x65,
+    0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x3b, 0x74,
+    0x6f, 0x70, 0x3a, 0x37, 0x70, 0x78, 0x3b, 0x3b,
+    0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x77, 0x65, 0x69,
+    0x67, 0x68, 0x74, 0x3a, 0x62, 0x6f, 0x6c, 0x64,
+    0x3b, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c,
+    0x69, 0x67, 0x6e, 0x3a, 0x63, 0x65, 0x6e, 0x74,
+    0x65, 0x72, 0x3b, 0x77, 0x69, 0x64, 0x74, 0x68,
+    0x3a, 0x31, 0x30, 0x30, 0x70, 0x78, 0x3b, 0x22,
+    0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,
+    0x74, 0x65, 0x78, 0x74, 0x67, 0x72, 0x61, 0x79,
     0x22, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x26,
-    0x6e, 0x62, 0x73, 0x70, 0x3b, 0x0d, 0x0a, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
-    0x09, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a,
-    0x3c, 0x74, 0x64, 0x2f, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74,
-    0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20,
-    0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x68,
-    0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x31, 0x30,
-    0x70, 0x78, 0x3b, 0x77, 0x69, 0x64, 0x74, 0x68,
-    0x3a, 0x32, 0x34, 0x35, 0x70, 0x78, 0x3b, 0x62,
-    0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
-    0x64, 0x2d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x3a,
-    0x75, 0x72, 0x6c, 0x28, 0x27, 0x2f, 0x72, 0x6f,
-    0x6d, 0x2f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x63,
-    0x75, 0x74, 0x73, 0x2f, 0x72, 0x69, 0x67, 0x68,
-    0x74, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x6d,
-    0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x6e, 0x67, 0x27,
-    0x29, 0x3b, 0x22, 0x20, 0x63, 0x6f, 0x6c, 0x73,
-    0x70, 0x61, 0x6e, 0x3d, 0x22, 0x33, 0x22, 0x2f,
-    0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e,
-    0x0d, 0x0a, 0x3c, 0x74, 0x72, 0x3e, 0x0d, 0x0a,
-    0x3c, 0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c,
-    0x65, 0x3d, 0x22, 0x62, 0x61, 0x63, 0x6b, 0x67,
-    0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f,
-    0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x64, 0x38, 0x64,
-    0x37, 0x64, 0x37, 0x3b, 0x77, 0x69, 0x64, 0x74,
-    0x68, 0x3a, 0x32, 0x34, 0x35, 0x70, 0x78, 0x3b,
-    0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d,
-    0x6c, 0x65, 0x66, 0x74, 0x3a, 0x31, 0x30, 0x70,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x20,
+    0x20, 0x20, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
+    0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x20, 0x3c, 0x2f, 0x64, 0x69,
+    0x76, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x64,
+    0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20, 0x77,
+    0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x34, 0x30,
+    0x70, 0x78, 0x22, 0x3e, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
+    0x09, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x20, 0x09, 0x3c, 0x2f, 0x74, 0x64, 0x3e,
+    0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x2f, 0x3e, 0x0d,
+    0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x0a,
+    0x3c, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74,
+    0x64, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d,
+    0x22, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a,
+    0x31, 0x30, 0x70, 0x78, 0x3b, 0x77, 0x69, 0x64,
+    0x74, 0x68, 0x3a, 0x32, 0x34, 0x35, 0x70, 0x78,
+    0x3b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
+    0x75, 0x6e, 0x64, 0x2d, 0x69, 0x6d, 0x61, 0x67,
+    0x65, 0x3a, 0x75, 0x72, 0x6c, 0x28, 0x27, 0x2f,
+    0x72, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x6e, 0x75,
+    0x5f, 0x63, 0x75, 0x74, 0x73, 0x2f, 0x72, 0x69,
+    0x67, 0x68, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x5f,
+    0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x6e,
+    0x67, 0x27, 0x29, 0x3b, 0x22, 0x20, 0x63, 0x6f,
+    0x6c, 0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22, 0x33,
+    0x22, 0x2f, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74,
+    0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x72, 0x3e,
+    0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73, 0x74,
+    0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61, 0x63,
+    0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d,
+    0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x64,
+    0x38, 0x64, 0x37, 0x64, 0x37, 0x3b, 0x77, 0x69,
+    0x64, 0x74, 0x68, 0x3a, 0x32, 0x34, 0x35, 0x70,
     0x78, 0x3b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
-    0x67, 0x2d, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6d,
-    0x3a, 0x31, 0x30, 0x70, 0x78, 0x3b, 0x6c, 0x69,
-    0x6e, 0x65, 0x2d, 0x68, 0x65, 0x69, 0x67, 0x68,
-    0x74, 0x3a, 0x31, 0x37, 0x70, 0x78, 0x3b, 0x22,
-    0x20, 0x63, 0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e,
-    0x3d, 0x22, 0x33, 0x22, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x61, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
-    0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b,
-    0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22,
-    0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77,
-    0x77, 0x77, 0x2e, 0x7a, 0x79, 0x6c, 0x69, 0x6e,
-    0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x79, 0x31,
-    0x30, 0x30, 0x30, 0x2f, 0x5a, 0x59, 0x31, 0x30,
-    0x30, 0x30, 0x5f, 0x51, 0x75, 0x69, 0x63, 0x6b,
-    0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x47,
-    0x75, 0x69, 0x64, 0x65, 0x2e, 0x70, 0x64, 0x66,
-    0x22, 0x3e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x20,
-    0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x4d, 0x61,
-    0x6e, 0x75, 0x61, 0x6c, 0x3c, 0x2f, 0x61, 0x3e,
-    0x0d, 0x0a, 0x3c, 0x62, 0x72, 0x2f, 0x3e, 0x0d,
+    0x67, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x3a, 0x31,
+    0x30, 0x70, 0x78, 0x3b, 0x70, 0x61, 0x64, 0x64,
+    0x69, 0x6e, 0x67, 0x2d, 0x62, 0x75, 0x74, 0x74,
+    0x6f, 0x6d, 0x3a, 0x31, 0x30, 0x70, 0x78, 0x3b,
+    0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x68, 0x65, 0x69,
+    0x67, 0x68, 0x74, 0x3a, 0x31, 0x37, 0x70, 0x78,
+    0x3b, 0x22, 0x20, 0x63, 0x6f, 0x6c, 0x73, 0x70,
+    0x61, 0x6e, 0x3d, 0x22, 0x33, 0x22, 0x3e, 0x0d,
     0x0a, 0x3c, 0x61, 0x20, 0x74, 0x61, 0x72, 0x67,
     0x65, 0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61,
     0x6e, 0x6b, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66,
     0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
     0x2f, 0x77, 0x77, 0x77, 0x2e, 0x7a, 0x79, 0x6c,
     0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a,
-    0x79, 0x31, 0x30, 0x30, 0x30, 0x2f, 0x6f, 0x70,
-    0x65, 0x6e, 0x6f, 0x63, 0x64, 0x2e, 0x70, 0x64,
-    0x66, 0x22, 0x3e, 0x4f, 0x70, 0x65, 0x6e, 0x4f,
-    0x43, 0x44, 0x20, 0x4d, 0x61, 0x6e, 0x75, 0x61,
-    0x6c, 0x3c, 0x2f, 0x61, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x62, 0x72, 0x2f, 0x3e, 0x0d, 0x0a, 0x3c, 0x61,
-    0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3d,
-    0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22,
-    0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68,
-    0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
-    0x77, 0x2e, 0x7a, 0x79, 0x6c, 0x69, 0x6e, 0x2e,
-    0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x79, 0x31, 0x30,
-    0x30, 0x30, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
-    0x63, 0x74, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22,
-    0x3e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
-    0x20, 0x5a, 0x79, 0x6c, 0x69, 0x6e, 0x20, 0x41,
-    0x53, 0x3c, 0x2f, 0x61, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f,
-    0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x72,
-    0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73,
-    0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61,
-    0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
-    0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23,
-    0x64, 0x38, 0x64, 0x37, 0x64, 0x37, 0x3b, 0x68,
-    0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x31, 0x35,
-    0x70, 0x78, 0x3b, 0x22, 0x20, 0x63, 0x6f, 0x6c,
-    0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22, 0x33, 0x22,
-    0x2f, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x72,
-    0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x72, 0x3e, 0x0d,
-    0x0a, 0x3c, 0x74, 0x64, 0x20, 0x63, 0x6f, 0x6c,
-    0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22, 0x33, 0x22,
-    0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x61, 0x62, 0x6c,
-    0x65, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d,
-    0x22, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
-    0x3a, 0x30, 0x70, 0x78, 0x3b, 0x62, 0x6f, 0x72,
-    0x64, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6c, 0x6c,
-    0x61, 0x70, 0x73, 0x65, 0x3a, 0x63, 0x6f, 0x6c,
-    0x6c, 0x61, 0x70, 0x73, 0x65, 0x3b, 0x22, 0x3e,
-    0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73, 0x74,
-    0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61, 0x63,
-    0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d,
-    0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x64,
-    0x38, 0x64, 0x37, 0x64, 0x37, 0x3b, 0x77, 0x69,
-    0x64, 0x74, 0x68, 0x3a, 0x31, 0x30, 0x70, 0x78,
-    0x3b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a,
-    0x31, 0x70, 0x78, 0x22, 0x2f, 0x3e, 0x0d, 0x0a,
-    0x3c, 0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c,
-    0x65, 0x3d, 0x22, 0x62, 0x61, 0x63, 0x6b, 0x67,
-    0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f,
-    0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x39, 0x39, 0x39,
-    0x39, 0x39, 0x39, 0x3b, 0x77, 0x69, 0x64, 0x74,
-    0x68, 0x3a, 0x32, 0x32, 0x35, 0x70, 0x78, 0x3b,
-    0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a,
-    0x31, 0x70, 0x78, 0x3b, 0x22, 0x2f, 0x3e, 0x0d,
-    0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73, 0x74, 0x79,
-    0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61, 0x63, 0x6b,
-    0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63,
-    0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x64, 0x38,
-    0x64, 0x37, 0x64, 0x37, 0x3b, 0x77, 0x69, 0x64,
-    0x74, 0x68, 0x3a, 0x31, 0x30, 0x70, 0x78, 0x3b,
-    0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x31,
-    0x70, 0x78, 0x22, 0x2f, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x0d,
+    0x79, 0x31, 0x30, 0x30, 0x30, 0x2f, 0x5a, 0x59,
+    0x31, 0x30, 0x30, 0x30, 0x5f, 0x51, 0x75, 0x69,
+    0x63, 0x6b, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74,
+    0x5f, 0x47, 0x75, 0x69, 0x64, 0x65, 0x2e, 0x70,
+    0x64, 0x66, 0x22, 0x3e, 0x51, 0x75, 0x69, 0x63,
+    0x6b, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20,
+    0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x3c, 0x2f,
+    0x61, 0x3e, 0x0d, 0x0a, 0x3c, 0x62, 0x72, 0x2f,
+    0x3e, 0x0d, 0x0a, 0x3c, 0x61, 0x20, 0x74, 0x61,
+    0x72, 0x67, 0x65, 0x74, 0x3d, 0x22, 0x5f, 0x62,
+    0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x20, 0x68, 0x72,
+    0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
+    0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x7a,
+    0x79, 0x6c, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d,
+    0x2f, 0x7a, 0x79, 0x31, 0x30, 0x30, 0x30, 0x2f,
+    0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x63, 0x64, 0x2e,
+    0x70, 0x64, 0x66, 0x22, 0x3e, 0x4f, 0x70, 0x65,
+    0x6e, 0x4f, 0x43, 0x44, 0x20, 0x4d, 0x61, 0x6e,
+    0x75, 0x61, 0x6c, 0x3c, 0x2f, 0x61, 0x3e, 0x0d,
+    0x0a, 0x3c, 0x62, 0x72, 0x2f, 0x3e, 0x0d, 0x0a,
+    0x3c, 0x61, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65,
+    0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e,
+    0x6b, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d,
+    0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
+    0x77, 0x77, 0x77, 0x2e, 0x7a, 0x79, 0x6c, 0x69,
+    0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x79,
+    0x31, 0x30, 0x30, 0x30, 0x5f, 0x63, 0x6f, 0x6e,
+    0x74, 0x61, 0x63, 0x74, 0x2e, 0x68, 0x74, 0x6d,
+    0x6c, 0x22, 0x3e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
+    0x63, 0x74, 0x20, 0x5a, 0x79, 0x6c, 0x69, 0x6e,
+    0x20, 0x41, 0x53, 0x3c, 0x2f, 0x61, 0x3e, 0x0d,
     0x0a, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a,
     0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c,
     0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64,
@@ -11016,226 +11042,272 @@
     0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22,
     0x33, 0x22, 0x2f, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f,
     0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x72,
-    0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
-    0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x31,
-    0x30, 0x30, 0x25, 0x3b, 0x22, 0x3e, 0x0d, 0x0a,
-    0x3c, 0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c,
-    0x65, 0x3d, 0x22, 0x68, 0x65, 0x69, 0x67, 0x68,
-    0x74, 0x3a, 0x31, 0x30, 0x30, 0x25, 0x3b, 0x62,
+    0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20, 0x63,
+    0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22,
+    0x33, 0x22, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x61,
+    0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x79, 0x6c,
+    0x65, 0x3d, 0x22, 0x70, 0x61, 0x64, 0x64, 0x69,
+    0x6e, 0x67, 0x3a, 0x30, 0x70, 0x78, 0x3b, 0x62,
+    0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x63, 0x6f,
+    0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x3a, 0x63,
+    0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x3b,
+    0x22, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20,
+    0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62,
     0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
     0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a,
     0x23, 0x64, 0x38, 0x64, 0x37, 0x64, 0x37, 0x3b,
-    0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d,
-    0x6c, 0x65, 0x66, 0x74, 0x3a, 0x31, 0x30, 0x70,
-    0x78, 0x3b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
-    0x67, 0x2d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3a,
-    0x31, 0x30, 0x70, 0x78, 0x3b, 0x22, 0x20, 0x63,
-    0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22,
-    0x33, 0x22, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
-    0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x67, 0x72,
-    0x61, 0x79, 0x22, 0x3e, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x3c, 0x70, 0x3e, 0x48, 0x65, 0x72, 0x65, 0x20,
-    0x79, 0x6f, 0x75, 0x20, 0x63, 0x61, 0x6e, 0x20,
-    0x65, 0x64, 0x69, 0x74, 0x20, 0x70, 0x72, 0x65,
-    0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20,
+    0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x31, 0x30,
+    0x70, 0x78, 0x3b, 0x68, 0x65, 0x69, 0x67, 0x68,
+    0x74, 0x3a, 0x31, 0x70, 0x78, 0x22, 0x2f, 0x3e,
+    0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73, 0x74,
+    0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61, 0x63,
+    0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d,
+    0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x39,
+    0x39, 0x39, 0x39, 0x39, 0x39, 0x3b, 0x77, 0x69,
+    0x64, 0x74, 0x68, 0x3a, 0x32, 0x32, 0x35, 0x70,
+    0x78, 0x3b, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68,
+    0x74, 0x3a, 0x31, 0x70, 0x78, 0x3b, 0x22, 0x2f,
+    0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73,
+    0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61,
+    0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
+    0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23,
+    0x64, 0x38, 0x64, 0x37, 0x64, 0x37, 0x3b, 0x77,
+    0x69, 0x64, 0x74, 0x68, 0x3a, 0x31, 0x30, 0x70,
+    0x78, 0x3b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
+    0x3a, 0x31, 0x70, 0x78, 0x22, 0x2f, 0x3e, 0x0d,
+    0x0a, 0x3c, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65,
+    0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x64, 0x3e,
+    0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0d,
+    0x0a, 0x3c, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c,
+    0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
+    0x3d, 0x22, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
+    0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x6c,
+    0x6f, 0x72, 0x3a, 0x23, 0x64, 0x38, 0x64, 0x37,
+    0x64, 0x37, 0x3b, 0x68, 0x65, 0x69, 0x67, 0x68,
+    0x74, 0x3a, 0x31, 0x35, 0x70, 0x78, 0x3b, 0x22,
+    0x20, 0x63, 0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e,
+    0x3d, 0x22, 0x33, 0x22, 0x2f, 0x3e, 0x0d, 0x0a,
+    0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c,
+    0x74, 0x72, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
+    0x3d, 0x22, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
+    0x3a, 0x31, 0x30, 0x30, 0x25, 0x3b, 0x22, 0x3e,
+    0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73, 0x74,
+    0x79, 0x6c, 0x65, 0x3d, 0x22, 0x68, 0x65, 0x69,
+    0x67, 0x68, 0x74, 0x3a, 0x31, 0x30, 0x30, 0x25,
+    0x3b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
+    0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f,
+    0x72, 0x3a, 0x23, 0x64, 0x38, 0x64, 0x37, 0x64,
+    0x37, 0x3b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
+    0x67, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x3a, 0x31,
+    0x30, 0x70, 0x78, 0x3b, 0x70, 0x61, 0x64, 0x64,
+    0x69, 0x6e, 0x67, 0x2d, 0x72, 0x69, 0x67, 0x68,
+    0x74, 0x3a, 0x31, 0x30, 0x70, 0x78, 0x3b, 0x22,
+    0x20, 0x63, 0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e,
+    0x3d, 0x22, 0x33, 0x22, 0x20, 0x63, 0x6c, 0x61,
+    0x73, 0x73, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74,
+    0x67, 0x72, 0x61, 0x79, 0x22, 0x3e, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x09, 0x3c, 0x70, 0x3e, 0x48, 0x65, 0x72,
+    0x65, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x63, 0x61,
+    0x6e, 0x20, 0x65, 0x64, 0x69, 0x74, 0x20, 0x70,
+    0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
+    0x64, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
+    0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
+    0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c,
+    0x20, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
+    0x20, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69,
+    0x6e, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x66,
+    0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
+    0x6e, 0x73, 0x20, 0x74, 0x6f, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x64, 0x65, 0x66, 0x61, 0x75,
+    0x6c, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65,
+    0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x72, 0x65,
+    0x61, 0x74, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x20,
     0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x63,
     0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
-    0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x20, 0x72,
-    0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x70,
-    0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
-    0x64, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
-    0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
-    0x20, 0x74, 0x6f, 0x0d, 0x0a, 0x09, 0x09, 0x09,
-    0x09, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
-    0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x61,
-    0x6e, 0x64, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
-    0x65, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x74, 0x61,
-    0x72, 0x67, 0x65, 0x74, 0x20, 0x63, 0x6f, 0x6e,
-    0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
-    0x6f, 0x6e, 0x73, 0x2e, 0x3c, 0x70, 0x2f, 0x3e,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x70,
-    0x3e, 0x54, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c,
-    0x6c, 0x79, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
-    0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
-    0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x74,
-    0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x63, 0x6f,
-    0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
-    0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x79, 0x6f, 0x75,
-    0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x74,
-    0x61, 0x6b, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x65,
-    0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x0d,
-    0x0a, 0x09, 0x09, 0x09, 0x09, 0x63, 0x6f, 0x6e,
-    0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
-    0x6f, 0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
-    0x72, 0x65, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65,
-    0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f,
-    0x73, 0x74, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20,
-    0x6e, 0x65, 0x65, 0x64, 0x73, 0x20, 0x61, 0x6e,
-    0x64, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79,
-    0x20, 0x69, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20,
-    0x79, 0x6f, 0x75, 0x72, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73,
-    0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73,
-    0x61, 0x76, 0x65, 0x20, 0x69, 0x74, 0x20, 0x75,
-    0x6e, 0x64, 0x65, 0x72, 0x20, 0x61, 0x20, 0x64,
-    0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,
-    0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x3c, 0x2f,
+    0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x3c, 0x70,
+    0x2f, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x3c, 0x70, 0x3e, 0x54, 0x79, 0x70, 0x69, 0x63,
+    0x61, 0x6c, 0x6c, 0x79, 0x20, 0x77, 0x68, 0x65,
+    0x6e, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
+    0x6e, 0x67, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77,
+    0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20,
+    0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
+    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x79,
+    0x6f, 0x75, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64,
+    0x20, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x61, 0x6e,
+    0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
+    0x67, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x63,
+    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
+    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x61,
+    0x74, 0x20, 0x72, 0x65, 0x73, 0x65, 0x6d, 0x62,
+    0x6c, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
+    0x6d, 0x6f, 0x73, 0x74, 0x20, 0x79, 0x6f, 0x75,
+    0x72, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x20,
+    0x61, 0x6e, 0x64, 0x20, 0x6d, 0x6f, 0x64, 0x69,
+    0x66, 0x79, 0x20, 0x69, 0x74, 0x20, 0x66, 0x6f,
+    0x72, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x09, 0x70, 0x75, 0x72, 0x70,
+    0x6f, 0x73, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64,
+    0x20, 0x73, 0x61, 0x76, 0x65, 0x20, 0x69, 0x74,
+    0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x61,
+    0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
+    0x6e, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e,
+    0x3c, 0x2f, 0x70, 0x3e, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x09, 0x3c, 0x70, 0x3e, 0x3c, 0x62, 0x3e,
+    0x4c, 0x6f, 0x61, 0x64, 0x3c, 0x2f, 0x62, 0x3e,
+    0x20, 0x2d, 0x20, 0x4c, 0x6f, 0x61, 0x64, 0x73,
+    0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
+    0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
+    0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x69, 0x6e,
+    0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
+    0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x3c, 0x2f,
     0x70, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x3c, 0x70, 0x3e, 0x3c, 0x62, 0x3e, 0x4c, 0x6f,
-    0x61, 0x64, 0x3c, 0x2f, 0x62, 0x3e, 0x20, 0x2d,
-    0x20, 0x4c, 0x6f, 0x61, 0x64, 0x73, 0x20, 0x61,
-    0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
+    0x3c, 0x70, 0x3e, 0x3c, 0x62, 0x3e, 0x53, 0x68,
+    0x6f, 0x77, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75,
+    0x6c, 0x74, 0x3c, 0x2f, 0x62, 0x3e, 0x20, 0x2d,
+    0x20, 0x4c, 0x6f, 0x61, 0x64, 0x73, 0x20, 0x74,
+    0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x6d, 0x77,
+    0x61, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x6c,
+    0x75, 0x64, 0x65, 0x64, 0x20, 0x76, 0x65, 0x72,
+    0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20,
+    0x74, 0x68, 0x65, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
     0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66,
-    0x69, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x6f,
+    0x69, 0x6c, 0x65, 0x20, 0x28, 0x69, 0x66, 0x20,
+    0x61, 0x6e, 0x79, 0x29, 0x2c, 0x20, 0x69, 0x6e,
+    0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
+    0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x3c, 0x62,
+    0x72, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x3c, 0x62, 0x3e, 0x4e, 0x6f, 0x74, 0x65, 0x3c,
+    0x2f, 0x62, 0x3e, 0x20, 0x74, 0x68, 0x61, 0x74,
     0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x64, 0x69,
-    0x74, 0x6f, 0x72, 0x2e, 0x3c, 0x2f, 0x70, 0x3e,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x70,
-    0x3e, 0x3c, 0x62, 0x3e, 0x53, 0x68, 0x6f, 0x77,
-    0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
-    0x3c, 0x2f, 0x62, 0x3e, 0x20, 0x2d, 0x20, 0x4c,
-    0x6f, 0x61, 0x64, 0x73, 0x20, 0x74, 0x68, 0x65,
-    0x20, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
-    0x65, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
-    0x65, 0x64, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69,
-    0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
-    0x65, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x63,
+    0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x74,
+    0x65, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e,
+    0x6f, 0x74, 0x20, 0x73, 0x61, 0x76, 0x65, 0x64,
+    0x2e, 0x3c, 0x2f, 0x70, 0x3e, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x3c, 0x70, 0x3e, 0x3c, 0x62,
+    0x3e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3c,
+    0x2f, 0x62, 0x3e, 0x20, 0x2d, 0x20, 0x44, 0x65,
+    0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20,
+    0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x63,
+    0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63,
     0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
     0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x69, 0x6c,
-    0x65, 0x20, 0x28, 0x69, 0x66, 0x20, 0x61, 0x6e,
-    0x79, 0x29, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x6f,
-    0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x64, 0x69,
-    0x74, 0x6f, 0x72, 0x2e, 0x3c, 0x62, 0x72, 0x3e,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x62,
-    0x3e, 0x4e, 0x6f, 0x74, 0x65, 0x3c, 0x2f, 0x62,
-    0x3e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74,
-    0x68, 0x65, 0x20, 0x65, 0x64, 0x69, 0x74, 0x6f,
-    0x72, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
-    0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74,
-    0x20, 0x73, 0x61, 0x76, 0x65, 0x64, 0x2e, 0x3c,
+    0x65, 0x2e, 0x3c, 0x62, 0x72, 0x3e, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x09, 0x3c, 0x62, 0x3e, 0x4e,
+    0x6f, 0x74, 0x65, 0x3c, 0x2f, 0x62, 0x3e, 0x20,
+    0x74, 0x68, 0x61, 0x74, 0x20, 0x66, 0x69, 0x72,
+    0x6d, 0x77, 0x61, 0x72, 0x65, 0x20, 0x69, 0x6e,
+    0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x20, 0x63,
+    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
+    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x69, 0x6c,
+    0x65, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x6e,
+    0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x64, 0x65,
+    0x6c, 0x65, 0x74, 0x65, 0x64, 0x2e, 0x3c, 0x2f,
+    0x70, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x3c, 0x70, 0x3e, 0x3c, 0x62, 0x3e, 0x53, 0x61,
+    0x76, 0x65, 0x3c, 0x2f, 0x62, 0x3e, 0x20, 0x2d,
+    0x20, 0x53, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68,
+    0x65, 0x20, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64,
+    0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x75, 0x6e,
+    0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
+    0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x6f, 0x72,
+    0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d,
+    0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x3c,
     0x2f, 0x70, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09,
-    0x09, 0x3c, 0x70, 0x3e, 0x3c, 0x62, 0x3e, 0x44,
-    0x65, 0x6c, 0x65, 0x74, 0x65, 0x3c, 0x2f, 0x62,
-    0x3e, 0x20, 0x2d, 0x20, 0x44, 0x65, 0x6c, 0x65,
-    0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x63, 0x75,
-    0x73, 0x74, 0x6f, 0x6d, 0x20, 0x63, 0x72, 0x65,
-    0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e,
-    0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
-    0x6f, 0x6e, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e,
-    0x3c, 0x62, 0x72, 0x3e, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x3c, 0x62, 0x3e, 0x4e, 0x6f, 0x74,
-    0x65, 0x3c, 0x2f, 0x62, 0x3e, 0x20, 0x74, 0x68,
-    0x61, 0x74, 0x20, 0x66, 0x69, 0x72, 0x6d, 0x77,
-    0x61, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x6c,
-    0x75, 0x64, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e,
-    0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
-    0x6f, 0x6e, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73,
-    0x20, 0x63, 0x61, 0x6e, 0x20, 0x6e, 0x6f, 0x74,
-    0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65,
-    0x74, 0x65, 0x64, 0x2e, 0x3c, 0x2f, 0x70, 0x3e,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x70,
-    0x3e, 0x3c, 0x62, 0x3e, 0x53, 0x61, 0x76, 0x65,
-    0x3c, 0x2f, 0x62, 0x3e, 0x20, 0x2d, 0x20, 0x53,
-    0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
-    0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x20, 0x66,
-    0x69, 0x6c, 0x65, 0x20, 0x75, 0x6e, 0x64, 0x65,
-    0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x20,
-    0x6e, 0x65, 0x77, 0x20, 0x6f, 0x72, 0x20, 0x74,
-    0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20,
-    0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x3c, 0x2f, 0x70,
-    0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x0d,
-    0x0a, 0x09, 0x09, 0x09, 0x3c, 0x2f, 0x74, 0x64,
-    0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e,
-    0x0d, 0x0a, 0x3c, 0x74, 0x72, 0x3e, 0x0d, 0x0a,
-    0x3c, 0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c,
-    0x65, 0x3d, 0x22, 0x68, 0x65, 0x69, 0x67, 0x68,
-    0x74, 0x3a, 0x33, 0x30, 0x70, 0x78, 0x3b, 0x62,
-    0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
-    0x64, 0x2d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x3a,
-    0x75, 0x72, 0x6c, 0x28, 0x27, 0x2f, 0x72, 0x6f,
-    0x6d, 0x2f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x63,
-    0x75, 0x74, 0x73, 0x2f, 0x72, 0x69, 0x67, 0x68,
-    0x74, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d,
-    0x2e, 0x70, 0x6e, 0x67, 0x27, 0x29, 0x3b, 0x22,
-    0x20, 0x63, 0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e,
-    0x3d, 0x22, 0x33, 0x22, 0x3e, 0x0d, 0x0a, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
-    0x09, 0x09, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b,
+    0x09, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x3c, 0x2f,
+    0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74,
+    0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x72, 0x3e,
+    0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73, 0x74,
+    0x79, 0x6c, 0x65, 0x3d, 0x22, 0x68, 0x65, 0x69,
+    0x67, 0x68, 0x74, 0x3a, 0x33, 0x30, 0x70, 0x78,
+    0x3b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
+    0x75, 0x6e, 0x64, 0x2d, 0x69, 0x6d, 0x61, 0x67,
+    0x65, 0x3a, 0x75, 0x72, 0x6c, 0x28, 0x27, 0x2f,
+    0x72, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x6e, 0x75,
+    0x5f, 0x63, 0x75, 0x74, 0x73, 0x2f, 0x72, 0x69,
+    0x67, 0x68, 0x74, 0x5f, 0x62, 0x6f, 0x74, 0x74,
+    0x6f, 0x6d, 0x2e, 0x70, 0x6e, 0x67, 0x27, 0x29,
+    0x3b, 0x22, 0x20, 0x63, 0x6f, 0x6c, 0x73, 0x70,
+    0x61, 0x6e, 0x3d, 0x22, 0x33, 0x22, 0x3e, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x20, 0x09, 0x09, 0x09, 0x26, 0x6e, 0x62, 0x73,
+    0x70, 0x3b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x3c, 0x2f,
+    0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74,
+    0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x61,
+    0x62, 0x6c, 0x65, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f,
+    0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74,
+    0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x72, 0x3e,
+    0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x2f, 0x3e, 0x0d,
+    0x0a, 0x3c, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c,
+    0x69, 0x6d, 0x67, 0x20, 0x62, 0x6f, 0x72, 0x64,
+    0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x73,
+    0x72, 0x63, 0x3d, 0x22, 0x2f, 0x72, 0x6f, 0x6d,
+    0x2f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x63, 0x75,
+    0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f,
+    0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x2e, 0x70,
+    0x6e, 0x67, 0x22, 0x2f, 0x3e, 0x0d, 0x0a, 0x3c,
+    0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x74,
+    0x64, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d,
+    0x22, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
+    0x2d, 0x74, 0x6f, 0x70, 0x3a, 0x31, 0x30, 0x70,
+    0x78, 0x3b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
+    0x67, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x3a, 0x31,
+    0x30, 0x70, 0x78, 0x3b, 0x6d, 0x61, 0x72, 0x67,
+    0x69, 0x6e, 0x2d, 0x74, 0x6f, 0x70, 0x3a, 0x31,
+    0x30, 0x70, 0x78, 0x3b, 0x22, 0x20, 0x63, 0x6c,
+    0x61, 0x73, 0x73, 0x3d, 0x22, 0x74, 0x65, 0x78,
+    0x74, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3e,
     0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x20, 0x09, 0x09, 0x3c, 0x2f, 0x74, 0x64,
-    0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e,
-    0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x61, 0x62, 0x6c,
-    0x65, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x64,
-    0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e,
-    0x0d, 0x0a, 0x3c, 0x74, 0x72, 0x3e, 0x0d, 0x0a,
-    0x3c, 0x74, 0x64, 0x2f, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x69, 0x6d,
-    0x67, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
-    0x3d, 0x22, 0x30, 0x22, 0x20, 0x73, 0x72, 0x63,
-    0x3d, 0x22, 0x2f, 0x72, 0x6f, 0x6d, 0x2f, 0x6d,
-    0x65, 0x6e, 0x75, 0x5f, 0x63, 0x75, 0x74, 0x73,
-    0x2f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x62, 0x6f,
-    0x74, 0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x6e, 0x67,
-    0x22, 0x2f, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74,
-    0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20,
-    0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x70,
-    0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x74,
-    0x6f, 0x70, 0x3a, 0x31, 0x30, 0x70, 0x78, 0x3b,
-    0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d,
-    0x6c, 0x65, 0x66, 0x74, 0x3a, 0x31, 0x30, 0x70,
-    0x78, 0x3b, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
-    0x2d, 0x74, 0x6f, 0x70, 0x3a, 0x31, 0x30, 0x70,
-    0x78, 0x3b, 0x22, 0x20, 0x63, 0x6c, 0x61, 0x73,
-    0x73, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x6c,
-    0x69, 0x67, 0x68, 0x74, 0x22, 0x3e, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x5a,
-    0x79, 0x6c, 0x69, 0x6e, 0x20, 0x41, 0x53, 0x2c,
-    0x20, 0x41, 0x75, 0x67, 0x6c, 0x65, 0x6e, 0x64,
-    0x73, 0x64, 0x61, 0x6c, 0x65, 0x6e, 0x20, 0x37,
-    0x38, 0x2c, 0x20, 0x4e, 0x2d, 0x34, 0x30, 0x31,
-    0x37, 0x20, 0x53, 0x74, 0x61, 0x76, 0x61, 0x6e,
-    0x67, 0x65, 0x72, 0x2c, 0x20, 0x4e, 0x6f, 0x72,
-    0x77, 0x61, 0x79, 0x20, 0x2d, 0x20, 0x77, 0x77,
-    0x77, 0x2e, 0x7a, 0x79, 0x6c, 0x69, 0x6e, 0x2e,
-    0x63, 0x6f, 0x6d, 0x0d, 0x0a, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x3c, 0x2f, 0x74, 0x64, 0x3e,
-    0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0d,
-    0x0a, 0x3c, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65,
-    0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x62, 0x6f, 0x64,
-    0x79, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x68, 0x74,
-    0x6d, 0x6c, 0x3e, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d,
+    0x09, 0x5a, 0x79, 0x6c, 0x69, 0x6e, 0x20, 0x41,
+    0x53, 0x2c, 0x20, 0x41, 0x75, 0x67, 0x6c, 0x65,
+    0x6e, 0x64, 0x73, 0x64, 0x61, 0x6c, 0x65, 0x6e,
+    0x20, 0x37, 0x38, 0x2c, 0x20, 0x4e, 0x2d, 0x34,
+    0x30, 0x31, 0x37, 0x20, 0x53, 0x74, 0x61, 0x76,
+    0x61, 0x6e, 0x67, 0x65, 0x72, 0x2c, 0x20, 0x4e,
+    0x6f, 0x72, 0x77, 0x61, 0x79, 0x20, 0x2d, 0x20,
+    0x77, 0x77, 0x77, 0x2e, 0x7a, 0x79, 0x6c, 0x69,
+    0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x2f, 0x74,
+    0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x72,
+    0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x61, 0x62,
+    0x6c, 0x65, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x62,
+    0x6f, 0x64, 0x79, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f,
+    0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x09,
+    0x09, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d,
     0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d,
     0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x0d,
-    0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09, 0x0d,
     0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x0d,
-    0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x09,
-    0x09, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x0d,
     0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d,
     0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d,
-    0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x0d, 0x0a, 0x09,
-    0x09, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x09,
-    0x09, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d,
-    0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x0d, 0x0a, 0x09,
-    0x09, 0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x09,
-    0x09, 0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x09,
-    0x09, 0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x0d,
     0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09, 0x0d,
+    0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09, 0x0d,
+    0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x09,
+    0x09, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x09,
+    0x09, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x0d,
+    0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d,
     0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x0d,
-    0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x0d,
-    0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x0d,
     0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x09,
-    0x09, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d,
-    0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d,
-    0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x09, 0x0d, 0x0a,
-    0x09, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a,
-    0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x68,
-    0x75, 0x6e, 0x6b, 0x65, 0x64, 0x20, 0x22, 0x68,
-    0x74, 0x6d, 0x6c, 0x22, 0x0d, 0x0a, 0x77, 0x72,
-    0x69, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e,
-    0x6b, 0x65, 0x64, 0x20, 0x24, 0x62, 0x75, 0x66,
-    0x66, 0x65, 0x72, 0x0d, 0x0a, 0x65, 0x6e, 0x64,
-    0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00,
+    0x0d, 0x0a, 0x09, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
+    0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x20,
+    0x22, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x0d, 0x0a,
+    0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x68,
+    0x75, 0x6e, 0x6b, 0x65, 0x64, 0x20, 0x24, 0x62,
+    0x75, 0x66, 0x66, 0x65, 0x72, 0x0d, 0x0a, 0x65,
+    0x6e, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
+    0x65, 0x64, 0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
     0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x2e,
@@ -23248,7 +23320,7 @@
     0x72, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6d,
     0x70, 0x61, 0x72, 0x65, 0x20, 0x24, 0x66, 0x6f,
     0x72, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
-    0x6e, 0x20, 0x22, 0x50, 0x6f, 0x77, 0x65, 0x72,
+    0x6e, 0x20, 0x22, 0x52, 0x65, 0x6c, 0x61, 0x79,
     0x20, 0x6f, 0x6e, 0x22, 0x5d, 0x3d, 0x3d, 0x30,
     0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x61, 0x70, 0x70,
@@ -23264,8 +23336,8 @@
     0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f,
     0x6d, 0x70, 0x61, 0x72, 0x65, 0x20, 0x24, 0x66,
     0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69,
-    0x6f, 0x6e, 0x20, 0x22, 0x50, 0x6f, 0x77, 0x65,
-    0x72, 0x20, 0x6f, 0x66, 0x66, 0x22, 0x5d, 0x3d,
+    0x6f, 0x6e, 0x20, 0x22, 0x52, 0x65, 0x6c, 0x61,
+    0x79, 0x20, 0x6f, 0x66, 0x66, 0x22, 0x5d, 0x3d,
     0x3d, 0x30, 0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x61,
     0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x63, 0x6f,
@@ -23348,8 +23420,8 @@
     0x69, 0x74, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65,
     0x3d, 0x22, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61,
     0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x76,
-    0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x50, 0x6f,
-    0x77, 0x65, 0x72, 0x20, 0x6f, 0x6e, 0x22, 0x3e,
+    0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x52, 0x65,
+    0x6c, 0x61, 0x79, 0x20, 0x6f, 0x6e, 0x22, 0x3e,
     0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x3c, 0x74, 0x64, 0x20,
     0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x62,
@@ -23362,7 +23434,7 @@
     0x61, 0x6d, 0x65, 0x3d, 0x22, 0x66, 0x6f, 0x72,
     0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
     0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d,
-    0x22, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x6f,
+    0x22, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x20, 0x6f,
     0x66, 0x66, 0x22, 0x3e, 0x3c, 0x2f, 0x74, 0x64,
     0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c,
     0x2f, 0x74, 0x72, 0x3e, 0x3c, 0x2f, 0x74, 0x61,
@@ -24025,8 +24097,8 @@
     0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x74, 0x65,
     0x63, 0x74, 0x65, 0x64, 0x2e, 0x3c, 0x2f, 0x70,
     0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x3c, 0x70, 0x3e, 0x3c, 0x62, 0x3e, 0x50, 0x6f,
-    0x77, 0x65, 0x72, 0x20, 0x6f, 0x6e, 0x3c, 0x2f,
+    0x3c, 0x70, 0x3e, 0x3c, 0x62, 0x3e, 0x52, 0x65,
+    0x6c, 0x61, 0x79, 0x20, 0x6f, 0x6e, 0x3c, 0x2f,
     0x62, 0x3e, 0x20, 0x2d, 0x20, 0x54, 0x75, 0x72,
     0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x5a, 0x59, 0x31,
     0x30, 0x30, 0x30, 0x20, 0x74, 0x61, 0x72, 0x67,
@@ -24034,7 +24106,7 @@
     0x20, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x3c,
     0x2f, 0x70, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x3c, 0x70, 0x3e, 0x3c, 0x62, 0x3e,
-    0x50, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x6f, 0x66,
+    0x52, 0x65, 0x6c, 0x61, 0x79, 0x20, 0x6f, 0x66,
     0x66, 0x3c, 0x2f, 0x62, 0x3e, 0x20, 0x2d, 0x20,
     0x54, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x66, 0x66,
     0x20, 0x5a, 0x59, 0x31, 0x30, 0x30, 0x30, 0x20,
@@ -25768,146 +25840,165 @@
     0x69, 0x67, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69,
     0x6e, 0x67, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
     0x6f, 0x63, 0x64, 0x2e, 0x63, 0x66, 0x67, 0x20,
-    0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
-    0x63, 0x20, 0x74, 0x6f, 0x68, 0x65, 0x78, 0x20,
-    0x7b, 0x61, 0x7d, 0x20, 0x7b, 0x0a, 0x20, 0x20,
-    0x20, 0x73, 0x65, 0x74, 0x20, 0x72, 0x20, 0x22,
-    0x22, 0x0a, 0x20, 0x20, 0x20, 0x77, 0x68, 0x69,
-    0x6c, 0x65, 0x20, 0x31, 0x20, 0x7b, 0x0a, 0x0a,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x73, 0x65,
-    0x74, 0x20, 0x72, 0x65, 0x6d, 0x20, 0x5b, 0x65,
-    0x78, 0x70, 0x72, 0x20, 0x24, 0x61, 0x25, 0x31,
+    0x0a, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x20,
+    0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x20,
+    0x7b, 0x20, 0x76, 0x61, 0x6c, 0x20, 0x6c, 0x69,
+    0x73, 0x74, 0x20, 0x7d, 0x20, 0x7b, 0x0a, 0x09,
+    0x73, 0x65, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20,
+    0x22, 0x22, 0x09, 0x09, 0x09, 0x09, 0x0a, 0x20,
+    0x20, 0x20, 0x20, 0x66, 0x6f, 0x72, 0x65, 0x61,
+    0x63, 0x68, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
+    0x20, 0x24, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x7b,
+    0x0a, 0x20, 0x20, 0x20, 0x20, 0x09, 0x73, 0x65,
+    0x74, 0x20, 0x74, 0x20, 0x24, 0x76, 0x61, 0x6c,
+    0x0a, 0x20, 0x20, 0x20, 0x20, 0x09, 0x61, 0x70,
+    0x70, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x20, 0x24,
+    0x76, 0x61, 0x6c, 0x75, 0x65, 0x0a, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6c, 0x61,
+    0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x72, 0x65,
+    0x73, 0x20, 0x24, 0x74, 0x0a, 0x20, 0x20, 0x20,
+    0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72,
+    0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x24, 0x72,
+    0x65, 0x73, 0x0a, 0x20, 0x7d, 0x09, 0x09, 0x09,
+    0x09, 0x0a, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63,
+    0x20, 0x74, 0x6f, 0x68, 0x65, 0x78, 0x20, 0x7b,
+    0x61, 0x7d, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20,
+    0x73, 0x65, 0x74, 0x20, 0x72, 0x20, 0x22, 0x22,
+    0x0a, 0x20, 0x20, 0x20, 0x77, 0x68, 0x69, 0x6c,
+    0x65, 0x20, 0x31, 0x20, 0x7b, 0x0a, 0x0a, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74,
+    0x20, 0x72, 0x65, 0x6d, 0x20, 0x5b, 0x65, 0x78,
+    0x70, 0x72, 0x20, 0x24, 0x61, 0x25, 0x31, 0x36,
+    0x5d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x73, 0x65, 0x74, 0x20, 0x61, 0x20, 0x5b, 0x65,
+    0x78, 0x70, 0x72, 0x20, 0x24, 0x61, 0x2f, 0x31,
     0x36, 0x5d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x73, 0x65, 0x74, 0x20, 0x61, 0x20, 0x5b,
-    0x65, 0x78, 0x70, 0x72, 0x20, 0x24, 0x61, 0x2f,
-    0x31, 0x36, 0x5d, 0x0a, 0x20, 0x20, 0x20, 0x20,
-    0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x72, 0x20,
-    0x5b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20,
-    0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x22, 0x30,
-    0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
-    0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x22,
-    0x20, 0x24, 0x72, 0x65, 0x6d, 0x5d, 0x24, 0x72,
-    0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69,
-    0x66, 0x20, 0x28, 0x24, 0x61, 0x3d, 0x3d, 0x30,
-    0x29, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x62,
-    0x72, 0x65, 0x61, 0x6b, 0x0a, 0x20, 0x20, 0x20,
-    0x7d, 0x20, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x72,
-    0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x24, 0x72,
-    0x20, 0x0a, 0x7d, 0x0a, 0x0a, 0x23, 0x20, 0x65,
-    0x6e, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x74, 0x65,
-    0x78, 0x74, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x20,
-    0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x7b,
-    0x61, 0x7d, 0x20, 0x7b, 0x0a, 0x09, 0x72, 0x65,
-    0x74, 0x75, 0x72, 0x6e, 0x20, 0x5b, 0x73, 0x74,
-    0x72, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x61, 0x70,
-    0x20, 0x7b, 0x5c, 0x6e, 0x20, 0x3c, 0x62, 0x72,
-    0x2f, 0x3e, 0x20, 0x7b, 0x20, 0x7d, 0x20, 0x7b,
-    0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x7d, 0x20,
-    0x5c, 0x74, 0x20, 0x7b, 0x26, 0x6e, 0x62, 0x73,
-    0x70, 0x3b, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b,
-    0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x6e,
-    0x62, 0x73, 0x70, 0x3b, 0x26, 0x6e, 0x62, 0x73,
-    0x70, 0x3b, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b,
-    0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x6e,
-    0x62, 0x73, 0x70, 0x3b, 0x7d, 0x20, 0x3e, 0x20,
-    0x26, 0x67, 0x74, 0x3b, 0x20, 0x3c, 0x20, 0x26,
-    0x6c, 0x74, 0x3b, 0x20, 0x2f, 0x20, 0x26, 0x23,
-    0x34, 0x37, 0x3b, 0x7d, 0x20, 0x24, 0x61, 0x5d,
-    0x0a, 0x7d, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x20,
-    0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c,
-    0x65, 0x20, 0x7b, 0x61, 0x7d, 0x20, 0x7b, 0x0a,
-    0x09, 0x73, 0x65, 0x74, 0x20, 0x72, 0x65, 0x73,
-    0x75, 0x6c, 0x74, 0x20, 0x22, 0x22, 0x0a, 0x09,
-    0x63, 0x61, 0x74, 0x63, 0x68, 0x20, 0x7b, 0x20,
-    0x0a, 0x09, 0x09, 0x73, 0x65, 0x74, 0x20, 0x66,
-    0x70, 0x20, 0x5b, 0x61, 0x69, 0x6f, 0x2e, 0x6f,
-    0x70, 0x65, 0x6e, 0x20, 0x24, 0x61, 0x20, 0x72,
-    0x5d, 0x0a, 0x09, 0x09, 0x73, 0x65, 0x74, 0x20,
-    0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x5b,
-    0x24, 0x66, 0x70, 0x20, 0x72, 0x65, 0x61, 0x64,
-    0x5d, 0x0a, 0x09, 0x09, 0x24, 0x66, 0x70, 0x20,
-    0x63, 0x6c, 0x6f, 0x73, 0x65, 0x3b, 0x0a, 0x09,
-    0x7d, 0x20, 0x65, 0x72, 0x72, 0x0a, 0x09, 0x72,
-    0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x24, 0x72,
-    0x65, 0x73, 0x75, 0x6c, 0x74, 0x0a, 0x7d, 0x0a,
-    0x0a, 0x70, 0x72, 0x6f, 0x63, 0x20, 0x6c, 0x6f,
-    0x61, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x20, 0x7b,
-    0x61, 0x7d, 0x20, 0x7b, 0x0a, 0x09, 0x72, 0x65,
-    0x74, 0x75, 0x72, 0x6e, 0x20, 0x5b, 0x6c, 0x6f,
-    0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x20,
+    0x20, 0x73, 0x65, 0x74, 0x20, 0x72, 0x20, 0x5b,
+    0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x69,
+    0x6e, 0x64, 0x65, 0x78, 0x20, 0x22, 0x30, 0x31,
+    0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
+    0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x22, 0x20,
+    0x24, 0x72, 0x65, 0x6d, 0x5d, 0x24, 0x72, 0x0a,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66,
+    0x20, 0x28, 0x24, 0x61, 0x3d, 0x3d, 0x30, 0x29,
+    0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x62, 0x72,
+    0x65, 0x61, 0x6b, 0x0a, 0x20, 0x20, 0x20, 0x7d,
+    0x20, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x72, 0x65,
+    0x74, 0x75, 0x72, 0x6e, 0x20, 0x24, 0x72, 0x20,
+    0x0a, 0x7d, 0x0a, 0x0a, 0x23, 0x20, 0x65, 0x6e,
+    0x63, 0x6f, 0x64, 0x65, 0x20, 0x74, 0x65, 0x78,
+    0x74, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x20, 0x65,
+    0x6e, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x7b, 0x61,
+    0x7d, 0x20, 0x7b, 0x0a, 0x09, 0x72, 0x65, 0x74,
+    0x75, 0x72, 0x6e, 0x20, 0x5b, 0x73, 0x74, 0x72,
+    0x69, 0x6e, 0x67, 0x20, 0x6d, 0x61, 0x70, 0x20,
+    0x7b, 0x5c, 0x6e, 0x20, 0x3c, 0x62, 0x72, 0x2f,
+    0x3e, 0x20, 0x7b, 0x20, 0x7d, 0x20, 0x7b, 0x26,
+    0x6e, 0x62, 0x73, 0x70, 0x3b, 0x7d, 0x20, 0x5c,
+    0x74, 0x20, 0x7b, 0x26, 0x6e, 0x62, 0x73, 0x70,
+    0x3b, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26,
+    0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x6e, 0x62,
+    0x73, 0x70, 0x3b, 0x26, 0x6e, 0x62, 0x73, 0x70,
+    0x3b, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26,
+    0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x6e, 0x62,
+    0x73, 0x70, 0x3b, 0x7d, 0x20, 0x3e, 0x20, 0x26,
+    0x67, 0x74, 0x3b, 0x20, 0x3c, 0x20, 0x26, 0x6c,
+    0x74, 0x3b, 0x20, 0x2f, 0x20, 0x26, 0x23, 0x34,
+    0x37, 0x3b, 0x7d, 0x20, 0x24, 0x61, 0x5d, 0x0a,
+    0x7d, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x20, 0x6c,
+    0x6f, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65,
+    0x20, 0x7b, 0x61, 0x7d, 0x20, 0x7b, 0x0a, 0x09,
+    0x73, 0x65, 0x74, 0x20, 0x72, 0x65, 0x73, 0x75,
+    0x6c, 0x74, 0x20, 0x22, 0x22, 0x0a, 0x09, 0x63,
+    0x61, 0x74, 0x63, 0x68, 0x20, 0x7b, 0x20, 0x0a,
+    0x09, 0x09, 0x73, 0x65, 0x74, 0x20, 0x66, 0x70,
+    0x20, 0x5b, 0x61, 0x69, 0x6f, 0x2e, 0x6f, 0x70,
+    0x65, 0x6e, 0x20, 0x24, 0x61, 0x20, 0x72, 0x5d,
+    0x0a, 0x09, 0x09, 0x73, 0x65, 0x74, 0x20, 0x72,
+    0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x5b, 0x24,
+    0x66, 0x70, 0x20, 0x72, 0x65, 0x61, 0x64, 0x5d,
+    0x0a, 0x09, 0x09, 0x24, 0x66, 0x70, 0x20, 0x63,
+    0x6c, 0x6f, 0x73, 0x65, 0x3b, 0x0a, 0x09, 0x7d,
+    0x20, 0x65, 0x72, 0x72, 0x0a, 0x09, 0x72, 0x65,
+    0x74, 0x75, 0x72, 0x6e, 0x20, 0x24, 0x72, 0x65,
+    0x73, 0x75, 0x6c, 0x74, 0x0a, 0x7d, 0x0a, 0x0a,
+    0x70, 0x72, 0x6f, 0x63, 0x20, 0x6c, 0x6f, 0x61,
+    0x64, 0x5f, 0x76, 0x61, 0x72, 0x20, 0x7b, 0x61,
+    0x7d, 0x20, 0x7b, 0x0a, 0x09, 0x72, 0x65, 0x74,
+    0x75, 0x72, 0x6e, 0x20, 0x5b, 0x6c, 0x6f, 0x61,
+    0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x2f,
+    0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73,
+    0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f,
+    0x24, 0x61, 0x5d, 0x0a, 0x7d, 0x0a, 0x70, 0x72,
+    0x6f, 0x63, 0x20, 0x73, 0x61, 0x76, 0x65, 0x5f,
+    0x76, 0x61, 0x72, 0x20, 0x7b, 0x61, 0x20, 0x62,
+    0x7d, 0x20, 0x7b, 0x0a, 0x09, 0x63, 0x61, 0x74,
+    0x63, 0x68, 0x20, 0x7b, 0x20, 0x0a, 0x09, 0x73,
+    0x65, 0x74, 0x20, 0x66, 0x70, 0x20, 0x5b, 0x61,
+    0x69, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x20,
     0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
     0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
-    0x2f, 0x24, 0x61, 0x5d, 0x0a, 0x7d, 0x0a, 0x70,
-    0x72, 0x6f, 0x63, 0x20, 0x73, 0x61, 0x76, 0x65,
-    0x5f, 0x76, 0x61, 0x72, 0x20, 0x7b, 0x61, 0x20,
-    0x62, 0x7d, 0x20, 0x7b, 0x0a, 0x09, 0x63, 0x61,
-    0x74, 0x63, 0x68, 0x20, 0x7b, 0x20, 0x0a, 0x09,
-    0x73, 0x65, 0x74, 0x20, 0x66, 0x70, 0x20, 0x5b,
-    0x61, 0x69, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
+    0x2f, 0x24, 0x61, 0x20, 0x77, 0x5d, 0x0a, 0x09,
+    0x24, 0x66, 0x70, 0x20, 0x70, 0x75, 0x74, 0x73,
+    0x20, 0x2d, 0x6e, 0x6f, 0x6e, 0x65, 0x77, 0x6c,
+    0x69, 0x6e, 0x65, 0x20, 0x24, 0x62, 0x0a, 0x09,
+    0x24, 0x66, 0x70, 0x20, 0x63, 0x6c, 0x6f, 0x73,
+    0x65, 0x3b, 0x0a, 0x09, 0x7d, 0x20, 0x65, 0x72,
+    0x72, 0x0a, 0x7d, 0x0a, 0x0a, 0x23, 0x20, 0x52,
+    0x65, 0x61, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d,
     0x20, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
     0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
-    0x73, 0x2f, 0x24, 0x61, 0x20, 0x77, 0x5d, 0x0a,
-    0x09, 0x24, 0x66, 0x70, 0x20, 0x70, 0x75, 0x74,
-    0x73, 0x20, 0x2d, 0x6e, 0x6f, 0x6e, 0x65, 0x77,
-    0x6c, 0x69, 0x6e, 0x65, 0x20, 0x24, 0x62, 0x0a,
-    0x09, 0x24, 0x66, 0x70, 0x20, 0x63, 0x6c, 0x6f,
-    0x73, 0x65, 0x3b, 0x0a, 0x09, 0x7d, 0x20, 0x65,
-    0x72, 0x72, 0x0a, 0x7d, 0x0a, 0x0a, 0x23, 0x20,
-    0x52, 0x65, 0x61, 0x64, 0x20, 0x66, 0x72, 0x6f,
-    0x6d, 0x20, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
-    0x67, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
-    0x67, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74,
-    0x68, 0x65, 0x6e, 0x20, 0x2f, 0x72, 0x6f, 0x6d,
+    0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68,
+    0x65, 0x6e, 0x20, 0x2f, 0x72, 0x6f, 0x6d, 0x0a,
+    0x70, 0x72, 0x6f, 0x63, 0x20, 0x6c, 0x6f, 0x61,
+    0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
+    0x20, 0x7b, 0x61, 0x7d, 0x20, 0x7b, 0x0a, 0x09,
+    0x73, 0x65, 0x74, 0x20, 0x72, 0x65, 0x73, 0x75,
+    0x6c, 0x74, 0x20, 0x5b, 0x6c, 0x6f, 0x61, 0x64,
+    0x5f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x22, 0x2f,
+    0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73,
+    0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f,
+    0x24, 0x61, 0x22, 0x5d, 0x0a, 0x09, 0x69, 0x66,
+    0x20, 0x7b, 0x5b, 0x73, 0x74, 0x72, 0x69, 0x6e,
+    0x67, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
+    0x20, 0x24, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
+    0x5d, 0x3d, 0x3d, 0x30, 0x7d, 0x20, 0x7b, 0x0a,
+    0x09, 0x09, 0x73, 0x65, 0x74, 0x20, 0x72, 0x65,
+    0x73, 0x75, 0x6c, 0x74, 0x20, 0x5b, 0x6c, 0x6f,
+    0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x20,
+    0x22, 0x2f, 0x72, 0x6f, 0x6d, 0x2f, 0x24, 0x61,
+    0x22, 0x5d, 0x0a, 0x09, 0x7d, 0x0a, 0x09, 0x72,
+    0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x24, 0x72,
+    0x65, 0x73, 0x75, 0x6c, 0x74, 0x0a, 0x7d, 0x0a,
     0x0a, 0x70, 0x72, 0x6f, 0x63, 0x20, 0x6c, 0x6f,
-    0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
-    0x67, 0x20, 0x7b, 0x61, 0x7d, 0x20, 0x7b, 0x0a,
-    0x09, 0x73, 0x65, 0x74, 0x20, 0x72, 0x65, 0x73,
-    0x75, 0x6c, 0x74, 0x20, 0x5b, 0x6c, 0x6f, 0x61,
-    0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x22,
-    0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
-    0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
-    0x2f, 0x24, 0x61, 0x22, 0x5d, 0x0a, 0x09, 0x69,
-    0x66, 0x20, 0x7b, 0x5b, 0x73, 0x74, 0x72, 0x69,
-    0x6e, 0x67, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74,
-    0x68, 0x20, 0x24, 0x72, 0x65, 0x73, 0x75, 0x6c,
-    0x74, 0x5d, 0x3d, 0x3d, 0x30, 0x7d, 0x20, 0x7b,
-    0x0a, 0x09, 0x09, 0x73, 0x65, 0x74, 0x20, 0x72,
-    0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x5b, 0x6c,
-    0x6f, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65,
-    0x20, 0x22, 0x2f, 0x72, 0x6f, 0x6d, 0x2f, 0x24,
-    0x61, 0x22, 0x5d, 0x0a, 0x09, 0x7d, 0x0a, 0x09,
-    0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x24,
-    0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x0a, 0x7d,
-    0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x20, 0x6c,
-    0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67,
-    0x65, 0x74, 0x20, 0x7b, 0x7d, 0x20, 0x7b, 0x0a,
+    0x61, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
+    0x74, 0x20, 0x7b, 0x7d, 0x20, 0x7b, 0x0a, 0x09,
+    0x73, 0x65, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66,
+    0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x22,
+    0x22, 0x0a, 0x09, 0x63, 0x61, 0x74, 0x63, 0x68,
+    0x20, 0x7b, 0x20, 0x0a, 0x09, 0x09, 0x73, 0x65,
+    0x74, 0x20, 0x66, 0x70, 0x20, 0x5b, 0x61, 0x69,
+    0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x20, 0x2f,
+    0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73,
+    0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f,
+    0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x63, 0x64, 0x2e,
+    0x63, 0x66, 0x67, 0x20, 0x72, 0x5d, 0x0a, 0x09,
     0x09, 0x73, 0x65, 0x74, 0x20, 0x63, 0x6f, 0x6e,
     0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x20,
-    0x22, 0x22, 0x0a, 0x09, 0x63, 0x61, 0x74, 0x63,
-    0x68, 0x20, 0x7b, 0x20, 0x0a, 0x09, 0x09, 0x73,
-    0x65, 0x74, 0x20, 0x66, 0x70, 0x20, 0x5b, 0x61,
-    0x69, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x20,
-    0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
-    0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
-    0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x63, 0x64,
-    0x2e, 0x63, 0x66, 0x67, 0x20, 0x72, 0x5d, 0x0a,
-    0x09, 0x09, 0x73, 0x65, 0x74, 0x20, 0x63, 0x6f,
-    0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65,
-    0x20, 0x5b, 0x24, 0x66, 0x70, 0x20, 0x72, 0x65,
-    0x61, 0x64, 0x5d, 0x0a, 0x09, 0x09, 0x24, 0x66,
-    0x70, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x3b,
-    0x0a, 0x09, 0x7d, 0x20, 0x65, 0x72, 0x72, 0x0a,
-    0x09, 0x0a, 0x09, 0x23, 0x20, 0x66, 0x69, 0x73,
-    0x68, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x61,
-    0x72, 0x67, 0x65, 0x74, 0x20, 0x6e, 0x61, 0x6d,
-    0x65, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x20, 0x66,
-    0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x61, 0x72, 0x67,
-    0x65, 0x74, 0x20, 0x22, 0x22, 0x0a, 0x09, 0x73,
-    0x65, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64,
-    0x20, 0x5b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
-    0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x22,
-    0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x74,
-    0x61, 0x72, 0x67, 0x65, 0x74, 0x2f, 0x22, 0x20,
+    0x5b, 0x24, 0x66, 0x70, 0x20, 0x72, 0x65, 0x61,
+    0x64, 0x5d, 0x0a, 0x09, 0x09, 0x24, 0x66, 0x70,
+    0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x3b, 0x0a,
+    0x09, 0x7d, 0x20, 0x65, 0x72, 0x72, 0x0a, 0x09,
+    0x0a, 0x09, 0x23, 0x20, 0x66, 0x69, 0x73, 0x68,
+    0x20, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x61, 0x72,
+    0x67, 0x65, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65,
+    0x0a, 0x09, 0x73, 0x65, 0x74, 0x20, 0x66, 0x6f,
+    0x72, 0x6d, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
+    0x74, 0x20, 0x22, 0x22, 0x0a, 0x09, 0x73, 0x65,
+    0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20,
+    0x5b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20,
+    0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x22, 0x73,
+    0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x22, 0x20,
     0x24, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46,
     0x69, 0x6c, 0x65, 0x5d, 0x0a, 0x09, 0x69, 0x66,
     0x20, 0x7b, 0x24, 0x66, 0x6f, 0x75, 0x6e, 0x64,
@@ -25920,135 +26011,136 @@
     0x6c, 0x65, 0x20, 0x5b, 0x73, 0x74, 0x72, 0x69,
     0x6e, 0x67, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74,
     0x68, 0x20, 0x22, 0x73, 0x63, 0x72, 0x69, 0x70,
-    0x74, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
-    0x2f, 0x22, 0x5d, 0x20, 0x5b, 0x65, 0x78, 0x70,
-    0x72, 0x20, 0x5b, 0x73, 0x74, 0x72, 0x69, 0x6e,
-    0x67, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20,
-    0x5c, 0x6e, 0x20, 0x24, 0x63, 0x6f, 0x6e, 0x66,
-    0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x5d, 0x2d,
-    0x31, 0x5d, 0x5d, 0x0a, 0x09, 0x7d, 0x0a, 0x09,
+    0x74, 0x20, 0x22, 0x5d, 0x20, 0x5b, 0x65, 0x78,
+    0x70, 0x72, 0x20, 0x5b, 0x73, 0x74, 0x72, 0x69,
+    0x6e, 0x67, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74,
+    0x20, 0x5c, 0x6e, 0x20, 0x24, 0x63, 0x6f, 0x6e,
+    0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x5d,
+    0x2d, 0x31, 0x5d, 0x5d, 0x0a, 0x09, 0x7d, 0x0a,
+    0x09, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72,
+    0x6e, 0x20, 0x24, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
+    0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x0a, 0x09,
+    0x09, 0x0a, 0x7d, 0x09, 0x09, 0x09, 0x09, 0x0a,
+    0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x20, 0x74,
+    0x6f, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x61, 0x72,
+    0x65, 0x61, 0x20, 0x7b, 0x61, 0x7d, 0x20, 0x7b,
     0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
-    0x20, 0x24, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74,
-    0x61, 0x72, 0x67, 0x65, 0x74, 0x0a, 0x09, 0x09,
-    0x0a, 0x7d, 0x09, 0x09, 0x09, 0x09, 0x0a, 0x0a,
-    0x0a, 0x70, 0x72, 0x6f, 0x63, 0x20, 0x74, 0x6f,
-    0x5f, 0x74, 0x65, 0x78, 0x74, 0x61, 0x72, 0x65,
-    0x61, 0x20, 0x7b, 0x61, 0x7d, 0x20, 0x7b, 0x0a,
-    0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
-    0x5b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20,
-    0x6d, 0x61, 0x70, 0x20, 0x7b, 0x26, 0x20, 0x26,
-    0x23, 0x33, 0x38, 0x3b, 0x20, 0x3e, 0x20, 0x26,
-    0x67, 0x74, 0x3b, 0x20, 0x3c, 0x20, 0x26, 0x6c,
-    0x74, 0x3b, 0x20, 0x2f, 0x20, 0x26, 0x23, 0x34,
-    0x37, 0x3b, 0x7d, 0x20, 0x24, 0x61, 0x5d, 0x0a,
-    0x7d, 0x09, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63,
-    0x20, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x65,
-    0x78, 0x74, 0x61, 0x72, 0x65, 0x61, 0x20, 0x7b,
-    0x61, 0x7d, 0x20, 0x7b, 0x0a, 0x09, 0x72, 0x65,
-    0x74, 0x75, 0x72, 0x6e, 0x20, 0x5b, 0x73, 0x74,
-    0x72, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x61, 0x70,
-    0x20, 0x7b, 0x26, 0x67, 0x74, 0x3b, 0x20, 0x3e,
-    0x20, 0x26, 0x6c, 0x74, 0x3b, 0x20, 0x3c, 0x20,
-    0x26, 0x23, 0x33, 0x38, 0x3b, 0x20, 0x26, 0x20,
-    0x26, 0x23, 0x34, 0x37, 0x3b, 0x20, 0x2f, 0x7d,
-    0x20, 0x24, 0x61, 0x5d, 0x0a, 0x7d, 0x0a, 0x09,
-    0x0a, 0x70, 0x72, 0x6f, 0x63, 0x20, 0x6c, 0x75,
-    0x6e, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x61, 0x20,
-    0x62, 0x7d, 0x20, 0x7b, 0x0a, 0x09, 0x66, 0x6f,
-    0x72, 0x65, 0x61, 0x63, 0x68, 0x20, 0x65, 0x20,
-    0x24, 0x61, 0x20, 0x7b, 0x0a, 0x09, 0x09, 0x73,
-    0x65, 0x74, 0x20, 0x78, 0x28, 0x24, 0x65, 0x29,
-    0x20, 0x7b, 0x7d, 0x0a, 0x09, 0x7d, 0x0a, 0x20,
-    0x09, 0x66, 0x6f, 0x72, 0x65, 0x61, 0x63, 0x68,
-    0x20, 0x65, 0x20, 0x24, 0x62, 0x20, 0x7b, 0x0a,
-    0x09, 0x09, 0x69, 0x66, 0x20, 0x7b, 0x21, 0x5b,
-    0x69, 0x6e, 0x66, 0x6f, 0x20, 0x65, 0x78, 0x69,
-    0x73, 0x74, 0x73, 0x20, 0x78, 0x28, 0x24, 0x65,
-    0x29, 0x5d, 0x7d, 0x20, 0x7b, 0x0a, 0x20, 0x20,
-    0x20, 0x20, 0x09, 0x09, 0x6c, 0x61, 0x70, 0x70,
-    0x65, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x24, 0x65,
-    0x0a, 0x09, 0x09, 0x7d, 0x0a, 0x09, 0x7d, 0x0a,
-    0x20, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
-    0x20, 0x24, 0x61, 0x0a, 0x7d, 0x0a, 0x20, 0x0a,
-    0x0a, 0x61, 0x64, 0x64, 0x5f, 0x68, 0x65, 0x6c,
-    0x70, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x20, 0x6c,
-    0x73, 0x20, 0x22, 0x3c, 0x64, 0x69, 0x72, 0x65,
-    0x63, 0x74, 0x6f, 0x72, 0x79, 0x3e, 0x20, 0x2d,
-    0x20, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x20, 0x66,
-    0x69, 0x6c, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20,
-    0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
-    0x79, 0x22, 0x0a, 0x61, 0x64, 0x64, 0x5f, 0x68,
-    0x65, 0x6c, 0x70, 0x5f, 0x74, 0x65, 0x78, 0x74,
-    0x20, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x20,
-    0x22, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x73,
+    0x20, 0x5b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
+    0x20, 0x6d, 0x61, 0x70, 0x20, 0x7b, 0x26, 0x20,
+    0x26, 0x23, 0x33, 0x38, 0x3b, 0x20, 0x3e, 0x20,
+    0x26, 0x67, 0x74, 0x3b, 0x20, 0x3c, 0x20, 0x26,
+    0x6c, 0x74, 0x3b, 0x20, 0x2f, 0x20, 0x26, 0x23,
+    0x34, 0x37, 0x3b, 0x7d, 0x20, 0x24, 0x61, 0x5d,
+    0x0a, 0x7d, 0x09, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
+    0x63, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74,
+    0x65, 0x78, 0x74, 0x61, 0x72, 0x65, 0x61, 0x20,
+    0x7b, 0x61, 0x7d, 0x20, 0x7b, 0x0a, 0x09, 0x72,
+    0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x5b, 0x73,
+    0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x61,
+    0x70, 0x20, 0x7b, 0x26, 0x67, 0x74, 0x3b, 0x20,
+    0x3e, 0x20, 0x26, 0x6c, 0x74, 0x3b, 0x20, 0x3c,
+    0x20, 0x26, 0x23, 0x33, 0x38, 0x3b, 0x20, 0x26,
+    0x20, 0x26, 0x23, 0x34, 0x37, 0x3b, 0x20, 0x2f,
+    0x7d, 0x20, 0x24, 0x61, 0x5d, 0x0a, 0x7d, 0x0a,
+    0x09, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x20, 0x6c,
+    0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x61,
+    0x20, 0x62, 0x7d, 0x20, 0x7b, 0x0a, 0x09, 0x66,
+    0x6f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x20, 0x65,
+    0x20, 0x24, 0x61, 0x20, 0x7b, 0x0a, 0x09, 0x09,
+    0x73, 0x65, 0x74, 0x20, 0x78, 0x28, 0x24, 0x65,
+    0x29, 0x20, 0x7b, 0x7d, 0x0a, 0x09, 0x7d, 0x0a,
+    0x20, 0x09, 0x66, 0x6f, 0x72, 0x65, 0x61, 0x63,
+    0x68, 0x20, 0x65, 0x20, 0x24, 0x62, 0x20, 0x7b,
+    0x0a, 0x09, 0x09, 0x69, 0x66, 0x20, 0x7b, 0x21,
+    0x5b, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x65, 0x78,
+    0x69, 0x73, 0x74, 0x73, 0x20, 0x78, 0x28, 0x24,
+    0x65, 0x29, 0x5d, 0x7d, 0x20, 0x7b, 0x0a, 0x20,
+    0x20, 0x20, 0x20, 0x09, 0x09, 0x6c, 0x61, 0x70,
+    0x70, 0x65, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x24,
+    0x65, 0x0a, 0x09, 0x09, 0x7d, 0x0a, 0x09, 0x7d,
+    0x0a, 0x20, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72,
+    0x6e, 0x20, 0x24, 0x61, 0x0a, 0x7d, 0x0a, 0x20,
+    0x0a, 0x0a, 0x61, 0x64, 0x64, 0x5f, 0x68, 0x65,
+    0x6c, 0x70, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x20,
+    0x6c, 0x73, 0x20, 0x22, 0x3c, 0x64, 0x69, 0x72,
+    0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x3e, 0x20,
+    0x2d, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x20,
+    0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x69, 0x6e,
+    0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
+    0x72, 0x79, 0x22, 0x0a, 0x61, 0x64, 0x64, 0x5f,
+    0x68, 0x65, 0x6c, 0x70, 0x5f, 0x74, 0x65, 0x78,
+    0x74, 0x20, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74,
+    0x20, 0x22, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74,
+    0x73, 0x20, 0x5a, 0x59, 0x31, 0x30, 0x30, 0x30,
+    0x20, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x0a, 0x61,
+    0x64, 0x64, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f,
+    0x74, 0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x63,
+    0x20, 0x22, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73,
+    0x20, 0x4d, 0x41, 0x43, 0x20, 0x6e, 0x75, 0x6d,
+    0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x5a,
+    0x59, 0x31, 0x30, 0x30, 0x30, 0x20, 0x75, 0x6e,
+    0x69, 0x74, 0x22, 0x0a, 0x61, 0x64, 0x64, 0x5f,
+    0x68, 0x65, 0x6c, 0x70, 0x5f, 0x74, 0x65, 0x78,
+    0x74, 0x20, 0x69, 0x70, 0x20, 0x22, 0x70, 0x72,
+    0x69, 0x6e, 0x74, 0x20, 0x63, 0x75, 0x72, 0x72,
+    0x65, 0x6e, 0x74, 0x20, 0x49, 0x50, 0x20, 0x6e,
+    0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66,
     0x20, 0x5a, 0x59, 0x31, 0x30, 0x30, 0x30, 0x20,
-    0x75, 0x6e, 0x69, 0x74, 0x22, 0x0a, 0x61, 0x64,
-    0x64, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x74,
-    0x65, 0x78, 0x74, 0x20, 0x6d, 0x61, 0x63, 0x20,
-    0x22, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x20,
-    0x4d, 0x41, 0x43, 0x20, 0x6e, 0x75, 0x6d, 0x62,
-    0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x5a, 0x59,
-    0x31, 0x30, 0x30, 0x30, 0x20, 0x75, 0x6e, 0x69,
-    0x74, 0x22, 0x0a, 0x61, 0x64, 0x64, 0x5f, 0x68,
-    0x65, 0x6c, 0x70, 0x5f, 0x74, 0x65, 0x78, 0x74,
-    0x20, 0x69, 0x70, 0x20, 0x22, 0x70, 0x72, 0x69,
-    0x6e, 0x74, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65,
-    0x6e, 0x74, 0x20, 0x49, 0x50, 0x20, 0x6e, 0x75,
-    0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
-    0x5a, 0x59, 0x31, 0x30, 0x30, 0x30, 0x20, 0x75,
-    0x6e, 0x69, 0x74, 0x22, 0x0a, 0x0a, 0x0a, 0x70,
-    0x72, 0x6f, 0x63, 0x20, 0x7a, 0x79, 0x31, 0x30,
-    0x30, 0x30, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68,
-    0x20, 0x7b, 0x7d, 0x20, 0x7b, 0x0a, 0x09, 0x73,
-    0x65, 0x74, 0x20, 0x74, 0x20, 0x5b, 0x6c, 0x69,
-    0x6e, 0x64, 0x65, 0x78, 0x20, 0x30, 0x20, 0x5b,
-    0x6f, 0x63, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73,
-    0x68, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x5d,
-    0x5d, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72,
-    0x6e, 0x20, 0x24, 0x74, 0x28, 0x62, 0x61, 0x73,
-    0x65, 0x29, 0x0a, 0x7d, 0x0a, 0x20, 0x0a, 0x69,
-    0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
-    0x20, 0x5a, 0x59, 0x31, 0x30, 0x30, 0x30, 0x0a,
-    0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x5f, 0x70,
-    0x6f, 0x72, 0x74, 0x20, 0x32, 0x33, 0x0a, 0x67,
-    0x64, 0x62, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x20,
-    0x33, 0x33, 0x33, 0x33, 0x0a, 0x23, 0x20, 0x31,
-    0x4d, 0x48, 0x7a, 0x20, 0x64, 0x65, 0x66, 0x61,
-    0x75, 0x6c, 0x74, 0x20, 0x73, 0x70, 0x65, 0x65,
-    0x64, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x5f, 0x6b,
-    0x68, 0x7a, 0x20, 0x31, 0x30, 0x30, 0x30, 0x0a,
-    0x0a, 0x23, 0x20, 0x52, 0x75, 0x6e, 0x20, 0x64,
-    0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x73,
-    0x63, 0x72, 0x69, 0x70, 0x74, 0x0a, 0x0a, 0x67,
-    0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x20, 0x73, 0x74,
-    0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x73, 0x74,
-    0x61, 0x74, 0x75, 0x73, 0x0a, 0x73, 0x65, 0x74,
+    0x75, 0x6e, 0x69, 0x74, 0x22, 0x0a, 0x0a, 0x0a,
+    0x70, 0x72, 0x6f, 0x63, 0x20, 0x7a, 0x79, 0x31,
+    0x30, 0x30, 0x30, 0x5f, 0x66, 0x6c, 0x61, 0x73,
+    0x68, 0x20, 0x7b, 0x7d, 0x20, 0x7b, 0x0a, 0x09,
+    0x73, 0x65, 0x74, 0x20, 0x74, 0x20, 0x5b, 0x6c,
+    0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x30, 0x20,
+    0x5b, 0x6f, 0x63, 0x64, 0x5f, 0x66, 0x6c, 0x61,
+    0x73, 0x68, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x73,
+    0x5d, 0x5d, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75,
+    0x72, 0x6e, 0x20, 0x24, 0x74, 0x28, 0x62, 0x61,
+    0x73, 0x65, 0x29, 0x0a, 0x7d, 0x0a, 0x20, 0x0a,
+    0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
+    0x65, 0x20, 0x5a, 0x59, 0x31, 0x30, 0x30, 0x30,
+    0x0a, 0x74, 0x65, 0x6c, 0x6e, 0x65, 0x74, 0x5f,
+    0x70, 0x6f, 0x72, 0x74, 0x20, 0x32, 0x33, 0x0a,
+    0x67, 0x64, 0x62, 0x5f, 0x70, 0x6f, 0x72, 0x74,
+    0x20, 0x33, 0x33, 0x33, 0x33, 0x0a, 0x23, 0x20,
+    0x31, 0x4d, 0x48, 0x7a, 0x20, 0x64, 0x65, 0x66,
+    0x61, 0x75, 0x6c, 0x74, 0x20, 0x73, 0x70, 0x65,
+    0x65, 0x64, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x5f,
+    0x6b, 0x68, 0x7a, 0x20, 0x31, 0x30, 0x30, 0x30,
+    0x0a, 0x0a, 0x23, 0x20, 0x52, 0x75, 0x6e, 0x20,
+    0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20,
+    0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x0a, 0x0a,
+    0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x20, 0x73,
+    0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x73,
+    0x74, 0x61, 0x74, 0x75, 0x73, 0x0a, 0x73, 0x65,
+    0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75,
+    0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
+    0x20, 0x30, 0x0a, 0x0a, 0x23, 0x20, 0x48, 0x65,
+    0x72, 0x65, 0x20, 0x77, 0x65, 0x20, 0x64, 0x6f,
+    0x20, 0x2a, 0x6e, 0x6f, 0x74, 0x2a, 0x20, 0x63,
+    0x61, 0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65,
+    0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x73,
+    0x69, 0x6e, 0x63, 0x65, 0x20, 0x77, 0x65, 0x20,
+    0x77, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x65,
+    0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x26, 0x20,
+    0x6c, 0x69, 0x6e, 0x65, 0x20, 0x6e, 0x75, 0x6d,
+    0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x61,
+    0x70, 0x70, 0x65, 0x61, 0x72, 0x0a, 0x23, 0x20,
+    0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
+    0x6f, 0x67, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70,
+    0x74, 0x20, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
+    0x67, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
+    0x67, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x6f,
+    0x63, 0x64, 0x2e, 0x63, 0x66, 0x67, 0x0a, 0x69,
+    0x6e, 0x69, 0x74, 0x0a, 0x23, 0x20, 0x53, 0x74,
+    0x61, 0x72, 0x74, 0x75, 0x70, 0x20, 0x77, 0x61,
+    0x73, 0x20, 0x4f, 0x4b, 0x0a, 0x73, 0x65, 0x74,
     0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70,
     0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20,
-    0x30, 0x0a, 0x0a, 0x23, 0x20, 0x48, 0x65, 0x72,
-    0x65, 0x20, 0x77, 0x65, 0x20, 0x64, 0x6f, 0x20,
-    0x2a, 0x6e, 0x6f, 0x74, 0x2a, 0x20, 0x63, 0x61,
-    0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20,
-    0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x73, 0x69,
-    0x6e, 0x63, 0x65, 0x20, 0x77, 0x65, 0x20, 0x77,
-    0x61, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20,
-    0x66, 0x69, 0x6c, 0x65, 0x20, 0x26, 0x20, 0x6c,
-    0x69, 0x6e, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62,
-    0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x70,
-    0x70, 0x65, 0x61, 0x72, 0x0a, 0x23, 0x20, 0x69,
-    0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f,
-    0x67, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
-    0x20, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
-    0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
-    0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x63,
-    0x64, 0x2e, 0x63, 0x66, 0x67, 0x0a, 0x69, 0x6e,
-    0x69, 0x74, 0x0a, 0x23, 0x20, 0x53, 0x74, 0x61,
-    0x72, 0x74, 0x75, 0x70, 0x20, 0x77, 0x61, 0x73,
-    0x20, 0x4f, 0x4b, 0x0a, 0x73, 0x65, 0x74, 0x20,
-    0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f,
-    0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x31,
-    0x0a, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x31, 0x0a, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
     0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x2e,
     0x74, 0x63, 0x6c, 0x20, 0x62, 0x79, 0x20, 0x68,
@@ -28115,175 +28207,195 @@
     0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
     0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x63, 0x64,
     0x2e, 0x63, 0x66, 0x67, 0x20, 0x73, 0x63, 0x72,
-    0x69, 0x70, 0x74, 0x20, 0x74, 0x61, 0x72, 0x67,
-    0x65, 0x74, 0x2f, 0x24, 0x66, 0x6f, 0x72, 0x6d,
-    0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x72, 0x65,
-    0x62, 0x6f, 0x6f, 0x74, 0x20, 0x0d, 0x0a, 0x09,
-    0x09, 0x09, 0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x73, 0x65, 0x74,
-    0x20, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x61,
-    0x72, 0x67, 0x65, 0x74, 0x20, 0x5b, 0x6c, 0x6f,
-    0x61, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
-    0x74, 0x5d, 0x20, 0x0d, 0x0a, 0x09, 0x09, 0x09,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x73, 0x65, 0x74,
-    0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x5b,
-    0x6c, 0x73, 0x20, 0x2f, 0x72, 0x6f, 0x6d, 0x2f,
-    0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5d, 0x0d,
+    0x69, 0x70, 0x74, 0x20, 0x24, 0x66, 0x6f, 0x72,
+    0x6d, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
+    0x22, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x72,
+    0x65, 0x62, 0x6f, 0x6f, 0x74, 0x20, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x7d, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x73, 0x65,
+    0x74, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74,
+    0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x5b, 0x6c,
+    0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67,
+    0x65, 0x74, 0x5d, 0x20, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x73, 0x65,
+    0x74, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20,
+    0x5b, 0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64,
+    0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2f,
+    0x20, 0x5b, 0x6c, 0x73, 0x20, 0x2f, 0x72, 0x6f,
+    0x6d, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
+    0x5d, 0x5d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x73,
+    0x65, 0x74, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73,
+    0x20, 0x5b, 0x6c, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
+    0x20, 0x24, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20,
+    0x5b, 0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64,
+    0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2f,
+    0x20, 0x5b, 0x6c, 0x73, 0x20, 0x2f, 0x63, 0x6f,
+    0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x65, 0x74,
+    0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x74, 0x61,
+    0x72, 0x67, 0x65, 0x74, 0x5d, 0x5d, 0x5d, 0x0d,
     0x0a, 0x09, 0x09, 0x09, 0x73, 0x65, 0x74, 0x20,
     0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x5b, 0x6c,
     0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x20, 0x24, 0x66,
-    0x69, 0x6c, 0x65, 0x73, 0x20, 0x5b, 0x6c, 0x73,
-    0x20, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
-    0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
-    0x73, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
-    0x5d, 0x5d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x73,
-    0x65, 0x74, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73,
-    0x20, 0x5b, 0x6c, 0x73, 0x6f, 0x72, 0x74, 0x20,
-    0x24, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5d, 0x0d,
-    0x0a, 0x09, 0x09, 0x09, 0x20, 0x0d, 0x0a, 0x09,
-    0x09, 0x09, 0x69, 0x66, 0x20, 0x7b, 0x5b, 0x73,
-    0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f,
-    0x6d, 0x70, 0x61, 0x72, 0x65, 0x20, 0x24, 0x66,
-    0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69,
-    0x6f, 0x6e, 0x20, 0x22, 0x53, 0x65, 0x6c, 0x65,
-    0x63, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72,
-    0x65, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x5d, 0x21,
-    0x3d, 0x30, 0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x09,
-    0x09, 0x09, 0x09, 0x0d, 0x0a, 0x61, 0x70, 0x70,
-    0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66,
-    0x65, 0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65,
-    0x3e, 0x3c, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x09,
-    0x09, 0x09, 0x09, 0x3c, 0x74, 0x64, 0x20, 0x73,
-    0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x70, 0x61,
-    0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x6f,
-    0x70, 0x3a, 0x31, 0x70, 0x78, 0x3b, 0x22, 0x3e,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x3c,
-    0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x6e,
-    0x61, 0x6d, 0x65, 0x3d, 0x22, 0x66, 0x6f, 0x72,
-    0x6d, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
-    0x22, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x73, 0x65,
-    0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x54,
-    0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x30, 0x0d,
+    0x69, 0x6c, 0x65, 0x73, 0x20, 0x5b, 0x70, 0x72,
+    0x65, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x6f,
+    0x61, 0x72, 0x64, 0x2f, 0x20, 0x5b, 0x6c, 0x73,
+    0x20, 0x2f, 0x72, 0x6f, 0x6d, 0x2f, 0x62, 0x6f,
+    0x61, 0x72, 0x64, 0x5d, 0x5d, 0x5d, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x73, 0x65, 0x74, 0x20, 0x66,
+    0x69, 0x6c, 0x65, 0x73, 0x20, 0x5b, 0x6c, 0x75,
+    0x6e, 0x69, 0x6f, 0x6e, 0x20, 0x24, 0x66, 0x69,
+    0x6c, 0x65, 0x73, 0x20, 0x5b, 0x70, 0x72, 0x65,
+    0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x6f, 0x61,
+    0x72, 0x64, 0x2f, 0x20, 0x5b, 0x6c, 0x73, 0x20,
+    0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
+    0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
+    0x2f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5d, 0x5d,
+    0x5d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x73, 0x65,
+    0x74, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20,
+    0x5b, 0x6c, 0x73, 0x6f, 0x72, 0x74, 0x20, 0x24,
+    0x66, 0x69, 0x6c, 0x65, 0x73, 0x5d, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x20, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x69, 0x66, 0x20, 0x7b, 0x5b, 0x73, 0x74,
+    0x72, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6d,
+    0x70, 0x61, 0x72, 0x65, 0x20, 0x24, 0x66, 0x6f,
+    0x72, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
+    0x6e, 0x20, 0x22, 0x53, 0x65, 0x6c, 0x65, 0x63,
+    0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65,
+    0x6c, 0x6f, 0x61, 0x64, 0x22, 0x5d, 0x21, 0x3d,
+    0x30, 0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x09, 0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65,
+    0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65,
+    0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e,
+    0x3c, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x09, 0x3c, 0x74, 0x64, 0x20, 0x73, 0x74,
+    0x79, 0x6c, 0x65, 0x3d, 0x22, 0x70, 0x61, 0x64,
+    0x64, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x6f, 0x70,
+    0x3a, 0x31, 0x70, 0x78, 0x3b, 0x22, 0x3e, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x73,
+    0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x6e, 0x61,
+    0x6d, 0x65, 0x3d, 0x22, 0x66, 0x6f, 0x72, 0x6d,
+    0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22,
+    0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x73, 0x65, 0x74,
+    0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61,
+    0x72, 0x67, 0x65, 0x74, 0x20, 0x30, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x66,
+    0x6f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x20, 0x69,
+    0x20, 0x24, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20,
+    0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x69, 0x66, 0x20, 0x7b, 0x5b,
+    0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x6d,
+    0x61, 0x74, 0x63, 0x68, 0x20, 0x2a, 0x2e, 0x63,
+    0x66, 0x67, 0x20, 0x24, 0x69, 0x5d, 0x7d, 0x20,
+    0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x0d, 0x0a, 0x61, 0x70,
+    0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66,
+    0x66, 0x65, 0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
+    0x20, 0x09, 0x09, 0x3c, 0x6f, 0x70, 0x74, 0x69,
+    0x6f, 0x6e, 0x20, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x20, 0x09,
+    0x09, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
+    0x20, 0x09, 0x09, 0x69, 0x66, 0x20, 0x7b, 0x5b,
+    0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x63,
+    0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x20, 0x24,
+    0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x61, 0x72,
+    0x67, 0x65, 0x74, 0x20, 0x24, 0x69, 0x5d, 0x3d,
+    0x3d, 0x30, 0x7d, 0x20, 0x7b, 0x20, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x73, 0x65, 0x74, 0x20, 0x66,
+    0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x72, 0x67,
+    0x65, 0x74, 0x20, 0x31, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
+    0x20, 0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e,
+    0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
+    0x20, 0x7b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
+    0x65, 0x64, 0x3d, 0x22, 0x73, 0x65, 0x6c, 0x65,
+    0x63, 0x74, 0x65, 0x64, 0x22, 0x7d, 0x20, 0x0d,
     0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x66, 0x6f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x20,
-    0x69, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x65, 0x73,
-    0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x69, 0x66, 0x20, 0x7b,
-    0x5b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20,
-    0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x2a, 0x2e,
-    0x63, 0x66, 0x67, 0x20, 0x24, 0x69, 0x5d, 0x7d,
-    0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x0d, 0x0a, 0x61,
+    0x20, 0x20, 0x09, 0x09, 0x7d, 0x0d, 0x0a, 0x61,
     0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75,
     0x66, 0x66, 0x65, 0x72, 0x20, 0x7b, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
+    0x20, 0x09, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65,
+    0x3d, 0x22, 0x7d, 0x0d, 0x0a, 0x61, 0x70, 0x70,
+    0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66,
+    0x65, 0x72, 0x20, 0x24, 0x69, 0x0d, 0x0a, 0x61,
+    0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75,
+    0x66, 0x66, 0x65, 0x72, 0x20, 0x7b, 0x22, 0x3e,
+    0x7d, 0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e,
+    0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
+    0x20, 0x24, 0x69, 0x0d, 0x0a, 0x61, 0x70, 0x70,
+    0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66,
+    0x65, 0x72, 0x20, 0x7b, 0x3c, 0x2f, 0x6f, 0x70,
+    0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x0d, 0x0a, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x20, 0x20, 0x09, 0x09, 0x3c, 0x6f, 0x70, 0x74,
-    0x69, 0x6f, 0x6e, 0x20, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x20,
-    0x09, 0x09, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x20, 0x20, 0x09, 0x09, 0x69, 0x66, 0x20, 0x7b,
-    0x5b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20,
-    0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x20,
-    0x24, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x61,
-    0x72, 0x67, 0x65, 0x74, 0x20, 0x24, 0x69, 0x5d,
-    0x3d, 0x3d, 0x30, 0x7d, 0x20, 0x7b, 0x20, 0x0d,
-    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x73, 0x65, 0x74, 0x20,
-    0x66, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x72,
-    0x67, 0x65, 0x74, 0x20, 0x31, 0x0d, 0x0a, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x20, 0x20, 0x09, 0x09, 0x61, 0x70, 0x70, 0x65,
+    0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x7d, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x7d,
+    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x69, 0x66, 0x20, 0x7b, 0x24, 0x66,
+    0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x72, 0x67,
+    0x65, 0x74, 0x3d, 0x3d, 0x30, 0x7d, 0x20, 0x7b,
+    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65,
     0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65,
-    0x72, 0x20, 0x7b, 0x73, 0x65, 0x6c, 0x65, 0x63,
-    0x74, 0x65, 0x64, 0x3d, 0x22, 0x73, 0x65, 0x6c,
-    0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x7d, 0x20,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x20, 0x20, 0x09, 0x09, 0x7d, 0x0d, 0x0a,
-    0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62,
-    0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b, 0x0d,
-    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x20, 0x20, 0x09, 0x09, 0x76, 0x61, 0x6c, 0x75,
-    0x65, 0x3d, 0x22, 0x7d, 0x0d, 0x0a, 0x61, 0x70,
+    0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x20, 0x20, 0x09, 0x09,
+    0x3c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
+    0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
+    0x3d, 0x22, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
+    0x65, 0x64, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x75,
+    0x65, 0x3d, 0x22, 0x22, 0x3e, 0x50, 0x72, 0x65,
+    0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
+    0x65, 0x64, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65,
+    0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63,
+    0x74, 0x69, 0x76, 0x65, 0x3c, 0x2f, 0x6f, 0x70,
+    0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x7d,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x7d, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x0d, 0x0a, 0x61, 0x70,
     0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66,
-    0x66, 0x65, 0x72, 0x20, 0x24, 0x69, 0x0d, 0x0a,
+    0x66, 0x65, 0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x3c, 0x2f, 0x73, 0x65,
+    0x6c, 0x65, 0x63, 0x74, 0x3e, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x3c, 0x2f, 0x74, 0x64, 0x3e,
+    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x74,
+    0x64, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
+    0x22, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x73,
+    0x70, 0x61, 0x63, 0x65, 0x73, 0x6d, 0x61, 0x6c,
+    0x6c, 0x22, 0x3e, 0x26, 0x6e, 0x62, 0x73, 0x70,
+    0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x3c, 0x74, 0x64, 0x3e, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x69,
+    0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70,
+    0x65, 0x3d, 0x22, 0x73, 0x75, 0x62, 0x6d, 0x69,
+    0x74, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
+    0x22, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x63,
+    0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x76, 0x61,
+    0x6c, 0x75, 0x65, 0x3d, 0x22, 0x53, 0x65, 0x6c,
+    0x65, 0x63, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20,
+    0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x3e,
+    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x26, 0x6e,
+    0x62, 0x73, 0x70, 0x3b, 0x26, 0x6e, 0x62, 0x73,
+    0x70, 0x3b, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b,
+    0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x61, 0x20,
+    0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x65, 0x64,
+    0x69, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
+    0x73, 0x2e, 0x74, 0x63, 0x6c, 0x3f, 0x66, 0x6f,
+    0x72, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
+    0x6e, 0x3d, 0x4c, 0x6f, 0x61, 0x64, 0x26, 0x66,
+    0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x6c, 0x65,
+    0x63, 0x74, 0x65, 0x64, 0x3d, 0x7d, 0x0d, 0x0a,
     0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62,
-    0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b, 0x22,
-    0x3e, 0x7d, 0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65,
-    0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65,
-    0x72, 0x20, 0x24, 0x69, 0x0d, 0x0a, 0x61, 0x70,
-    0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66,
-    0x66, 0x65, 0x72, 0x20, 0x7b, 0x3c, 0x2f, 0x6f,
-    0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x7d, 0x0d,
-    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x69, 0x66, 0x20, 0x7b, 0x24,
-    0x66, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x72,
-    0x67, 0x65, 0x74, 0x3d, 0x3d, 0x30, 0x7d, 0x20,
-    0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x0d, 0x0a, 0x61, 0x70, 0x70,
-    0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66,
-    0x65, 0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x20, 0x09,
-    0x09, 0x3c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
-    0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
-    0x64, 0x3d, 0x22, 0x73, 0x65, 0x6c, 0x65, 0x63,
-    0x74, 0x65, 0x64, 0x22, 0x20, 0x76, 0x61, 0x6c,
-    0x75, 0x65, 0x3d, 0x22, 0x22, 0x3e, 0x50, 0x72,
-    0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
-    0x72, 0x65, 0x64, 0x20, 0x74, 0x61, 0x72, 0x67,
-    0x65, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61,
-    0x63, 0x74, 0x69, 0x76, 0x65, 0x3c, 0x2f, 0x6f,
-    0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x7d, 0x0d, 0x0a, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x0d, 0x0a, 0x61,
-    0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75,
-    0x66, 0x66, 0x65, 0x72, 0x20, 0x7b, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x2f, 0x73,
-    0x65, 0x6c, 0x65, 0x63, 0x74, 0x3e, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x09, 0x3c, 0x2f, 0x74, 0x64,
-    0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c,
-    0x74, 0x64, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
-    0x3d, 0x22, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
-    0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x6d, 0x61,
-    0x6c, 0x6c, 0x22, 0x3e, 0x26, 0x6e, 0x62, 0x73,
-    0x70, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x09, 0x3c, 0x74, 0x64, 0x3e,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x3c,
-    0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79,
-    0x70, 0x65, 0x3d, 0x22, 0x73, 0x75, 0x62, 0x6d,
-    0x69, 0x74, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65,
-    0x3d, 0x22, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61,
-    0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x76,
-    0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x53, 0x65,
-    0x6c, 0x65, 0x63, 0x74, 0x20, 0x61, 0x6e, 0x64,
-    0x20, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x22,
-    0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x26,
-    0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x6e, 0x62,
-    0x73, 0x70, 0x3b, 0x26, 0x6e, 0x62, 0x73, 0x70,
-    0x3b, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x0d,
-    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x61,
-    0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x65,
-    0x64, 0x69, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x69,
-    0x67, 0x73, 0x2e, 0x74, 0x63, 0x6c, 0x3f, 0x66,
-    0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69,
-    0x6f, 0x6e, 0x3d, 0x4c, 0x6f, 0x61, 0x64, 0x26,
-    0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x6c,
-    0x65, 0x63, 0x74, 0x65, 0x64, 0x3d, 0x7d, 0x0d,
-    0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20,
-    0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x22,
-    0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2f, 0x24,
+    0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x22, 0x24,
     0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x61, 0x72,
     0x67, 0x65, 0x74, 0x22, 0x0d, 0x0a, 0x61, 0x70,
     0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66,
@@ -29735,7 +29847,7 @@
     0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61,
     0x72, 0x65, 0x20, 0x24, 0x66, 0x6f, 0x72, 0x6d,
     0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
-    0x22, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x6f,
+    0x22, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x20, 0x6f,
     0x6e, 0x22, 0x5d, 0x3d, 0x3d, 0x30, 0x7d, 0x20,
     0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
@@ -29750,8 +29862,8 @@
     0x7b, 0x5b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
     0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
     0x20, 0x24, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61,
-    0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x22, 0x50,
-    0x6f, 0x77, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x66,
+    0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x22, 0x52,
+    0x65, 0x6c, 0x61, 0x79, 0x20, 0x6f, 0x66, 0x66,
     0x22, 0x5d, 0x3d, 0x3d, 0x30, 0x7d, 0x20, 0x7b,
     0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20,
@@ -29866,7 +29978,7 @@
     0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x66, 0x6f,
     0x72, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
     0x6e, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
-    0x3d, 0x22, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x20,
+    0x3d, 0x22, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x20,
     0x6f, 0x6e, 0x22, 0x3e, 0x3c, 0x2f, 0x74, 0x64,
     0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
     0x3c, 0x74, 0x64, 0x20, 0x63, 0x6c, 0x61, 0x73,
@@ -29880,7 +29992,7 @@
     0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x66, 0x6f,
     0x72, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
     0x6e, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
-    0x3d, 0x22, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x20,
+    0x3d, 0x22, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x20,
     0x6f, 0x66, 0x66, 0x22, 0x3e, 0x0d, 0x0a, 0x09,
     0x09, 0x09, 0x09, 0x3c, 0x2f, 0x74, 0x72, 0x3e,
     0x3c, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e,
@@ -30473,122 +30585,122 @@
     0x74, 0x70, 0x75, 0x74, 0x20, 0x63, 0x68, 0x61,
     0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x20, 0x3c, 0x2f,
     0x70, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x3c, 0x70, 0x3e, 0x3c, 0x62, 0x3e, 0x50, 0x6f,
-    0x77, 0x65, 0x72, 0x20, 0x6f, 0x6e, 0x3c, 0x2f,
-    0x62, 0x3e, 0x20, 0x2d, 0x20, 0x50, 0x6f, 0x77,
-    0x65, 0x72, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x61,
-    0x72, 0x67, 0x65, 0x74, 0x2e, 0x3c, 0x2f, 0x70,
-    0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c,
-    0x70, 0x3e, 0x3c, 0x62, 0x3e, 0x50, 0x6f, 0x77,
-    0x65, 0x72, 0x20, 0x6f, 0x66, 0x66, 0x3c, 0x2f,
-    0x62, 0x3e, 0x20, 0x2d, 0x20, 0x50, 0x6f, 0x77,
-    0x65, 0x72, 0x20, 0x6f, 0x66, 0x66, 0x20, 0x74,
-    0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x3c, 0x2f,
+    0x3c, 0x70, 0x3e, 0x3c, 0x62, 0x3e, 0x52, 0x65,
+    0x6c, 0x61, 0x79, 0x20, 0x6f, 0x6e, 0x3c, 0x2f,
+    0x62, 0x3e, 0x20, 0x2d, 0x20, 0x52, 0x65, 0x6c,
+    0x61, 0x79, 0x20, 0x6f, 0x6e, 0x2e, 0x3c, 0x2f,
     0x70, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x3c, 0x70, 0x3e, 0x3c, 0x62, 0x3e, 0x53, 0x65,
-    0x72, 0x69, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d,
-    0x62, 0x65, 0x72, 0x3c, 0x2f, 0x62, 0x3e, 0x20,
-    0x2d, 0x20, 0x41, 0x20, 0x74, 0x61, 0x72, 0x67,
-    0x65, 0x74, 0x20, 0x73, 0x63, 0x72, 0x69, 0x70,
-    0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x75, 0x73,
-    0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73,
-    0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e,
-    0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f,
-    0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
-    0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
-    0x65, 0x2e, 0x20, 0x54, 0x79, 0x70, 0x65, 0x20,
-    0x22, 0x68, 0x65, 0x6c, 0x70, 0x20, 0x70, 0x72,
-    0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
-    0x22, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x6f,
-    0x72, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
+    0x3c, 0x70, 0x3e, 0x3c, 0x62, 0x3e, 0x52, 0x65,
+    0x6c, 0x61, 0x79, 0x20, 0x6f, 0x66, 0x66, 0x3c,
+    0x2f, 0x62, 0x3e, 0x20, 0x2d, 0x20, 0x52, 0x65,
+    0x6c, 0x61, 0x79, 0x20, 0x6f, 0x66, 0x66, 0x2e,
     0x3c, 0x2f, 0x70, 0x3e, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x20, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a,
-    0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64,
-    0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
-    0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x33,
-    0x30, 0x70, 0x78, 0x3b, 0x62, 0x61, 0x63, 0x6b,
-    0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x69,
-    0x6d, 0x61, 0x67, 0x65, 0x3a, 0x75, 0x72, 0x6c,
-    0x28, 0x27, 0x2f, 0x72, 0x6f, 0x6d, 0x2f, 0x6d,
-    0x65, 0x6e, 0x75, 0x5f, 0x63, 0x75, 0x74, 0x73,
-    0x2f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62,
-    0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x6e,
-    0x67, 0x27, 0x29, 0x3b, 0x22, 0x20, 0x63, 0x6f,
-    0x6c, 0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22, 0x33,
-    0x22, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x09, 0x26,
-    0x6e, 0x62, 0x73, 0x70, 0x3b, 0x0d, 0x0a, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
-    0x09, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a,
-    0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x0d,
-    0x0a, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a,
-    0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64,
-    0x2f, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x3e,
-    0x0d, 0x0a, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x62,
-    0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x30,
-    0x22, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x2f,
-    0x72, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x6e, 0x75,
-    0x5f, 0x63, 0x75, 0x74, 0x73, 0x2f, 0x6c, 0x6f,
-    0x67, 0x6f, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f,
-    0x6d, 0x2e, 0x70, 0x6e, 0x67, 0x22, 0x2f, 0x3e,
-    0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d,
-    0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73, 0x74, 0x79,
-    0x6c, 0x65, 0x3d, 0x22, 0x70, 0x61, 0x64, 0x64,
-    0x69, 0x6e, 0x67, 0x2d, 0x74, 0x6f, 0x70, 0x3a,
-    0x31, 0x30, 0x70, 0x78, 0x3b, 0x70, 0x61, 0x64,
-    0x64, 0x69, 0x6e, 0x67, 0x2d, 0x6c, 0x65, 0x66,
-    0x74, 0x3a, 0x31, 0x30, 0x70, 0x78, 0x3b, 0x6d,
-    0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x74, 0x6f,
-    0x70, 0x3a, 0x31, 0x30, 0x70, 0x78, 0x3b, 0x22,
-    0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,
-    0x74, 0x65, 0x78, 0x74, 0x6c, 0x69, 0x67, 0x68,
-    0x74, 0x22, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x5a, 0x79, 0x6c, 0x69,
-    0x6e, 0x20, 0x41, 0x53, 0x2c, 0x20, 0x41, 0x75,
-    0x67, 0x6c, 0x65, 0x6e, 0x64, 0x73, 0x64, 0x61,
-    0x6c, 0x65, 0x6e, 0x20, 0x37, 0x38, 0x2c, 0x20,
-    0x4e, 0x2d, 0x34, 0x30, 0x31, 0x37, 0x20, 0x53,
-    0x74, 0x61, 0x76, 0x61, 0x6e, 0x67, 0x65, 0x72,
-    0x2c, 0x20, 0x4e, 0x6f, 0x72, 0x77, 0x61, 0x79,
-    0x20, 0x2d, 0x20, 0x77, 0x77, 0x77, 0x2e, 0x7a,
-    0x79, 0x6c, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f,
-    0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x0d, 0x0a,
-    0x3c, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0d,
-    0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x09, 0x09, 0x3c, 0x70, 0x3e, 0x3c, 0x62, 0x3e,
+    0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x6e,
+    0x75, 0x6d, 0x62, 0x65, 0x72, 0x3c, 0x2f, 0x62,
+    0x3e, 0x20, 0x2d, 0x20, 0x41, 0x20, 0x74, 0x61,
+    0x72, 0x67, 0x65, 0x74, 0x20, 0x73, 0x63, 0x72,
+    0x69, 0x70, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20,
+    0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73,
+    0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20,
+    0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
+    0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
+    0x6e, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64,
+    0x75, 0x72, 0x65, 0x2e, 0x20, 0x54, 0x79, 0x70,
+    0x65, 0x20, 0x22, 0x68, 0x65, 0x6c, 0x70, 0x20,
+    0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
+    0x6f, 0x6e, 0x22, 0x20, 0x66, 0x6f, 0x72, 0x20,
+    0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x66,
+    0x6f, 0x2e, 0x3c, 0x2f, 0x70, 0x3e, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x3c, 0x2f, 0x74, 0x64, 0x3e,
+    0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0d,
+    0x0a, 0x3c, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c,
+    0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
+    0x3d, 0x22, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
+    0x3a, 0x33, 0x30, 0x70, 0x78, 0x3b, 0x62, 0x61,
+    0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
+    0x2d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x3a, 0x75,
+    0x72, 0x6c, 0x28, 0x27, 0x2f, 0x72, 0x6f, 0x6d,
+    0x2f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x63, 0x75,
+    0x74, 0x73, 0x2f, 0x72, 0x69, 0x67, 0x68, 0x74,
+    0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x2e,
+    0x70, 0x6e, 0x67, 0x27, 0x29, 0x3b, 0x22, 0x20,
+    0x63, 0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e, 0x3d,
+    0x22, 0x33, 0x22, 0x3e, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09,
+    0x09, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x20, 0x09, 0x09, 0x3c, 0x2f, 0x74, 0x64, 0x3e,
+    0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0d,
+    0x0a, 0x3c, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65,
+    0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x64, 0x3e,
+    0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0d,
+    0x0a, 0x3c, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c,
+    0x74, 0x64, 0x2f, 0x3e, 0x0d, 0x0a, 0x3c, 0x74,
+    0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x69, 0x6d, 0x67,
+    0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d,
+    0x22, 0x30, 0x22, 0x20, 0x73, 0x72, 0x63, 0x3d,
+    0x22, 0x2f, 0x72, 0x6f, 0x6d, 0x2f, 0x6d, 0x65,
+    0x6e, 0x75, 0x5f, 0x63, 0x75, 0x74, 0x73, 0x2f,
+    0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x62, 0x6f, 0x74,
+    0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x6e, 0x67, 0x22,
+    0x2f, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x64,
+    0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73,
+    0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x70, 0x61,
+    0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x6f,
+    0x70, 0x3a, 0x31, 0x30, 0x70, 0x78, 0x3b, 0x70,
+    0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x6c,
+    0x65, 0x66, 0x74, 0x3a, 0x31, 0x30, 0x70, 0x78,
+    0x3b, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d,
+    0x74, 0x6f, 0x70, 0x3a, 0x31, 0x30, 0x70, 0x78,
+    0x3b, 0x22, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
+    0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x6c, 0x69,
+    0x67, 0x68, 0x74, 0x22, 0x3e, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x5a, 0x79,
+    0x6c, 0x69, 0x6e, 0x20, 0x41, 0x53, 0x2c, 0x20,
+    0x41, 0x75, 0x67, 0x6c, 0x65, 0x6e, 0x64, 0x73,
+    0x64, 0x61, 0x6c, 0x65, 0x6e, 0x20, 0x37, 0x38,
+    0x2c, 0x20, 0x4e, 0x2d, 0x34, 0x30, 0x31, 0x37,
+    0x20, 0x53, 0x74, 0x61, 0x76, 0x61, 0x6e, 0x67,
+    0x65, 0x72, 0x2c, 0x20, 0x4e, 0x6f, 0x72, 0x77,
+    0x61, 0x79, 0x20, 0x2d, 0x20, 0x77, 0x77, 0x77,
+    0x2e, 0x7a, 0x79, 0x6c, 0x69, 0x6e, 0x2e, 0x63,
+    0x6f, 0x6d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d,
+    0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x0a,
+    0x3c, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e,
+    0x0d, 0x0a, 0x3c, 0x2f, 0x62, 0x6f, 0x64, 0x79,
+    0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d,
+    0x6c, 0x3e, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x0d, 0x0a,
     0x09, 0x09, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a,
     0x09, 0x09, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a,
-    0x09, 0x09, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a,
-    0x09, 0x09, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09,
-    0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09,
-    0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09,
     0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x0d, 0x0a,
     0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a,
-    0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x0d, 0x0a,
-    0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a,
+    0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09,
     0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a,
-    0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a,
     0x09, 0x09, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a,
-    0x09, 0x09, 0x0d, 0x0a, 0x09, 0x0d, 0x0a, 0x09,
-    0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x73,
-    0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x75,
-    0x6e, 0x6b, 0x65, 0x64, 0x20, 0x22, 0x68, 0x74,
-    0x6d, 0x6c, 0x22, 0x0d, 0x0a, 0x77, 0x72, 0x69,
-    0x74, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
-    0x65, 0x64, 0x20, 0x24, 0x62, 0x75, 0x66, 0x66,
-    0x65, 0x72, 0x0d, 0x0a, 0x65, 0x6e, 0x64, 0x5f,
-    0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x0d,
-    0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x09, 0x09, 0x0d, 0x0a, 0x09, 0x0d,
+    0x0a, 0x09, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63,
+    0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x20, 0x22,
+    0x68, 0x74, 0x6d, 0x6c, 0x22, 0x0d, 0x0a, 0x77,
+    0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x75,
+    0x6e, 0x6b, 0x65, 0x64, 0x20, 0x24, 0x62, 0x75,
+    0x66, 0x66, 0x65, 0x72, 0x0d, 0x0a, 0x65, 0x6e,
+    0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65,
+    0x64, 0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
     0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x2e,
     0x74, 0x63, 0x6c, 0x20, 0x62, 0x79, 0x20, 0x68,
@@ -34459,200 +34571,224 @@
     0x73, 0x65, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x6d,
     0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20,
     0x5b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f,
-    0x6e, 0x66, 0x69, 0x67, 0x20, 0x22, 0x74, 0x61,
-    0x72, 0x67, 0x65, 0x74, 0x2f, 0x5b, 0x6c, 0x6f,
-    0x61, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
-    0x74, 0x5d, 0x22, 0x5d, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x73, 0x65, 0x74, 0x20, 0x73, 0x75, 0x70,
-    0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x20,
-    0x5b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20,
-    0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x5b, 0x72,
-    0x61, 0x6e, 0x64, 0x5d, 0x20, 0x30, 0x20, 0x37,
-    0x5d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x73, 0x65,
-    0x74, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6c,
-    0x6f, 0x67, 0x20, 0x22, 0x22, 0x0d, 0x0a, 0x09,
-    0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
-    0x20, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6c, 0x6f,
-    0x67, 0x20, 0x22, 0x56, 0x65, 0x72, 0x73, 0x69,
-    0x6f, 0x6e, 0x3a, 0x20, 0x5b, 0x63, 0x61, 0x70,
-    0x74, 0x75, 0x72, 0x65, 0x20, 0x22, 0x7a, 0x79,
-    0x31, 0x30, 0x30, 0x30, 0x5f, 0x76, 0x65, 0x72,
-    0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7a, 0x79, 0x31,
-    0x30, 0x30, 0x30, 0x22, 0x5d, 0x22, 0x0d, 0x0a,
+    0x6e, 0x66, 0x69, 0x67, 0x20, 0x22, 0x5b, 0x6c,
+    0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67,
+    0x65, 0x74, 0x5d, 0x22, 0x5d, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x73, 0x65, 0x74, 0x20, 0x73, 0x75,
+    0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
+    0x20, 0x5b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
+    0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x5b,
+    0x72, 0x61, 0x6e, 0x64, 0x5d, 0x20, 0x30, 0x20,
+    0x37, 0x5d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x73,
+    0x65, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
+    0x6c, 0x6f, 0x67, 0x20, 0x22, 0x22, 0x0d, 0x0a,
     0x09, 0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e,
     0x64, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6c,
-    0x6f, 0x67, 0x20, 0x22, 0x4f, 0x70, 0x65, 0x6e,
-    0x4f, 0x43, 0x44, 0x20, 0x76, 0x65, 0x72, 0x73,
+    0x6f, 0x67, 0x20, 0x22, 0x56, 0x65, 0x72, 0x73,
     0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x5b, 0x63, 0x61,
     0x70, 0x74, 0x75, 0x72, 0x65, 0x20, 0x22, 0x7a,
     0x79, 0x31, 0x30, 0x30, 0x30, 0x5f, 0x76, 0x65,
-    0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x70,
-    0x65, 0x6e, 0x6f, 0x63, 0x64, 0x22, 0x5d, 0x22,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x61, 0x70, 0x70,
-    0x65, 0x6e, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x6d,
-    0x5f, 0x6c, 0x6f, 0x67, 0x20, 0x22, 0x56, 0x65,
+    0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7a, 0x79,
+    0x31, 0x30, 0x30, 0x30, 0x22, 0x5d, 0x22, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x61, 0x70, 0x70, 0x65,
+    0x6e, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
+    0x6c, 0x6f, 0x67, 0x20, 0x22, 0x4f, 0x70, 0x65,
+    0x6e, 0x4f, 0x43, 0x44, 0x20, 0x76, 0x65, 0x72,
+    0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x5b, 0x63,
+    0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x20, 0x22,
+    0x7a, 0x79, 0x31, 0x30, 0x30, 0x30, 0x5f, 0x76,
+    0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
+    0x70, 0x65, 0x6e, 0x6f, 0x63, 0x64, 0x22, 0x5d,
+    0x22, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x61, 0x70,
+    0x70, 0x65, 0x6e, 0x64, 0x20, 0x66, 0x6f, 0x72,
+    0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x20, 0x22, 0x56,
+    0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64,
+    0x61, 0x74, 0x65, 0x3a, 0x20, 0x5b, 0x63, 0x61,
+    0x70, 0x74, 0x75, 0x72, 0x65, 0x20, 0x22, 0x7a,
+    0x79, 0x31, 0x30, 0x30, 0x30, 0x5f, 0x76, 0x65,
     0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x61,
-    0x74, 0x65, 0x3a, 0x20, 0x5b, 0x63, 0x61, 0x70,
-    0x74, 0x75, 0x72, 0x65, 0x20, 0x22, 0x7a, 0x79,
-    0x31, 0x30, 0x30, 0x30, 0x5f, 0x76, 0x65, 0x72,
-    0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x61, 0x74,
-    0x65, 0x22, 0x5d, 0x22, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20,
-    0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6c, 0x6f, 0x67,
-    0x20, 0x5b, 0x6c, 0x6f, 0x67, 0x5d, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x0d, 0x0a, 0x61, 0x70, 0x70,
-    0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66,
-    0x65, 0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x3c, 0x66, 0x6f, 0x72, 0x6d,
-    0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d,
-    0x22, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
-    0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
-    0x74, 0x63, 0x6c, 0x22, 0x20, 0x6d, 0x65, 0x74,
-    0x68, 0x6f, 0x64, 0x3d, 0x22, 0x50, 0x4f, 0x53,
-    0x54, 0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65,
-    0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e,
-    0x6b, 0x22, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09,
-    0x09, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20,
-    0x54, 0x59, 0x50, 0x45, 0x3d, 0x22, 0x68, 0x69,
-    0x64, 0x64, 0x65, 0x6e, 0x22, 0x20, 0x4e, 0x41,
-    0x4d, 0x45, 0x3d, 0x22, 0x69, 0x64, 0x22, 0x20,
-    0x56, 0x41, 0x4c, 0x55, 0x45, 0x3d, 0x22, 0x7d,
-    0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
-    0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20,
-    0x24, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
-    0x5f, 0x69, 0x64, 0x0d, 0x0a, 0x61, 0x70, 0x70,
-    0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66,
-    0x65, 0x72, 0x20, 0x7b, 0x22, 0x3e, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x09, 0x3c, 0x69, 0x6e, 0x70,
-    0x75, 0x74, 0x20, 0x54, 0x59, 0x50, 0x45, 0x3d,
-    0x22, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22,
-    0x20, 0x4e, 0x41, 0x4d, 0x45, 0x3d, 0x22, 0x73,
-    0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x20,
-    0x56, 0x41, 0x4c, 0x55, 0x45, 0x3d, 0x22, 0x68,
-    0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
-    0x77, 0x2e, 0x7a, 0x79, 0x6c, 0x69, 0x6e, 0x2e,
-    0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x79, 0x31, 0x30,
-    0x30, 0x30, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
-    0x72, 0x74, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22,
-    0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c,
+    0x74, 0x65, 0x22, 0x5d, 0x22, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
+    0x20, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6c, 0x6f,
+    0x67, 0x20, 0x5b, 0x6c, 0x6f, 0x67, 0x5d, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x0d, 0x0a, 0x61, 0x70,
+    0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66,
+    0x66, 0x65, 0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x3c, 0x66, 0x6f, 0x72,
+    0x6d, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
+    0x3d, 0x22, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
+    0x74, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
+    0x2e, 0x74, 0x63, 0x6c, 0x22, 0x20, 0x6d, 0x65,
+    0x74, 0x68, 0x6f, 0x64, 0x3d, 0x22, 0x50, 0x4f,
+    0x53, 0x54, 0x22, 0x20, 0x74, 0x61, 0x72, 0x67,
+    0x65, 0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61,
+    0x6e, 0x6b, 0x22, 0x3e, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x09, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74,
+    0x20, 0x54, 0x59, 0x50, 0x45, 0x3d, 0x22, 0x68,
+    0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x20, 0x4e,
+    0x41, 0x4d, 0x45, 0x3d, 0x22, 0x69, 0x64, 0x22,
+    0x20, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x3d, 0x22,
+    0x7d, 0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e,
+    0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
+    0x20, 0x24, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
+    0x74, 0x5f, 0x69, 0x64, 0x0d, 0x0a, 0x61, 0x70,
+    0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66,
+    0x66, 0x65, 0x72, 0x20, 0x7b, 0x22, 0x3e, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x69, 0x6e,
+    0x70, 0x75, 0x74, 0x20, 0x54, 0x59, 0x50, 0x45,
+    0x3d, 0x22, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
+    0x22, 0x20, 0x4e, 0x41, 0x4d, 0x45, 0x3d, 0x22,
+    0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
+    0x20, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x3d, 0x22,
+    0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77,
+    0x77, 0x77, 0x2e, 0x7a, 0x79, 0x6c, 0x69, 0x6e,
+    0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x79, 0x31,
+    0x30, 0x30, 0x30, 0x5f, 0x73, 0x75, 0x70, 0x70,
+    0x6f, 0x72, 0x74, 0x2e, 0x68, 0x74, 0x6d, 0x6c,
+    0x22, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73,
+    0x69, 0x7a, 0x65, 0x3d, 0x22, 0x35, 0x30, 0x22,
+    0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x73,
+    0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x20,
+    0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x68, 0x69,
+    0x64, 0x64, 0x65, 0x6e, 0x22, 0x20, 0x76, 0x61,
+    0x6c, 0x75, 0x65, 0x3d, 0x22, 0x5a, 0x59, 0x31,
+    0x30, 0x30, 0x30, 0x20, 0x73, 0x75, 0x70, 0x70,
+    0x6f, 0x72, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75,
+    0x65, 0x73, 0x74, 0x22, 0x3e, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x3c, 0x74, 0x61, 0x62, 0x6c,
+    0x65, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x70,
+    0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x35,
+    0x22, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x3c, 0x74, 0x72, 0x3e, 0x3c, 0x74, 0x64, 0x3e,
+    0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20,
+    0x49, 0x44, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c,
+    0x74, 0x64, 0x3e, 0x7d, 0x0d, 0x0a, 0x61, 0x70,
+    0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66,
+    0x66, 0x65, 0x72, 0x20, 0x24, 0x73, 0x75, 0x70,
+    0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x0d,
+    0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20,
+    0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b,
+    0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74,
+    0x72, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x3c, 0x74, 0x72, 0x3e, 0x3c, 0x74, 0x64, 0x3e,
+    0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x20,
+    0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x3c, 0x2f,
+    0x74, 0x64, 0x3e, 0x3c, 0x74, 0x64, 0x3e, 0x3c,
     0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69,
     0x7a, 0x65, 0x3d, 0x22, 0x35, 0x30, 0x22, 0x20,
-    0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x73, 0x75,
-    0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x20, 0x74,
-    0x79, 0x70, 0x65, 0x3d, 0x22, 0x68, 0x69, 0x64,
-    0x64, 0x65, 0x6e, 0x22, 0x20, 0x76, 0x61, 0x6c,
-    0x75, 0x65, 0x3d, 0x22, 0x5a, 0x59, 0x31, 0x30,
-    0x30, 0x30, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f,
-    0x72, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
-    0x73, 0x74, 0x22, 0x3e, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65,
-    0x20, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x70, 0x61,
-    0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x35, 0x22,
-    0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c,
-    0x74, 0x72, 0x3e, 0x3c, 0x74, 0x64, 0x3e, 0x53,
-    0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x49,
-    0x44, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x74,
-    0x64, 0x3e, 0x7d, 0x0d, 0x0a, 0x61, 0x70, 0x70,
-    0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66,
-    0x65, 0x72, 0x20, 0x24, 0x73, 0x75, 0x70, 0x70,
-    0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x0d, 0x0a,
-    0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62,
-    0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b, 0x3c,
-    0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72,
-    0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c,
-    0x74, 0x72, 0x3e, 0x3c, 0x74, 0x64, 0x3e, 0x43,
-    0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x20, 0x70,
-    0x65, 0x72, 0x73, 0x6f, 0x6e, 0x3c, 0x2f, 0x74,
+    0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x6e, 0x61,
+    0x6d, 0x65, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65,
+    0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3e,
+    0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74,
+    0x72, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x3c, 0x74, 0x72, 0x3e, 0x3c, 0x74, 0x64, 0x3e,
+    0x50, 0x68, 0x6f, 0x6e, 0x65, 0x3c, 0x2f, 0x74,
     0x64, 0x3e, 0x3c, 0x74, 0x64, 0x3e, 0x3c, 0x69,
     0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x7a,
     0x65, 0x3d, 0x22, 0x35, 0x30, 0x22, 0x20, 0x6e,
-    0x61, 0x6d, 0x65, 0x3d, 0x22, 0x6e, 0x61, 0x6d,
-    0x65, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d,
-    0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3e, 0x3c,
+    0x61, 0x6d, 0x65, 0x3d, 0x22, 0x70, 0x68, 0x6f,
+    0x6e, 0x65, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65,
+    0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3e,
+    0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74,
+    0x72, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x3c, 0x74, 0x72, 0x3e, 0x3c, 0x74, 0x64, 0x3e,
+    0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3c, 0x2f, 0x74,
+    0x64, 0x3e, 0x3c, 0x74, 0x64, 0x3e, 0x3c, 0x69,
+    0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x7a,
+    0x65, 0x3d, 0x22, 0x35, 0x30, 0x22, 0x20, 0x6e,
+    0x61, 0x6d, 0x65, 0x3d, 0x22, 0x65, 0x6d, 0x61,
+    0x69, 0x6c, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65,
+    0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3e,
+    0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74,
+    0x72, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x3c, 0x74, 0x72, 0x3e, 0x3c, 0x74, 0x64, 0x3e,
+    0x4d, 0x41, 0x43, 0x20, 0x61, 0x64, 0x64, 0x72,
+    0x65, 0x73, 0x73, 0x3c, 0x2f, 0x74, 0x64, 0x3e,
+    0x3c, 0x74, 0x64, 0x3e, 0x3c, 0x69, 0x6e, 0x70,
+    0x75, 0x74, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x3d,
+    0x22, 0x35, 0x30, 0x22, 0x20, 0x6e, 0x61, 0x6d,
+    0x65, 0x3d, 0x22, 0x73, 0x65, 0x72, 0x69, 0x61,
+    0x6c, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d,
+    0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x76,
+    0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x7d, 0x0d,
+    0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20,
+    0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x5b,
+    0x6d, 0x61, 0x63, 0x5d, 0x0d, 0x0a, 0x61, 0x70,
+    0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66,
+    0x66, 0x65, 0x72, 0x20, 0x7b, 0x22, 0x3e, 0x3c,
     0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72,
     0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c,
-    0x74, 0x72, 0x3e, 0x3c, 0x74, 0x64, 0x3e, 0x50,
-    0x68, 0x6f, 0x6e, 0x65, 0x3c, 0x2f, 0x74, 0x64,
-    0x3e, 0x3c, 0x74, 0x64, 0x3e, 0x3c, 0x69, 0x6e,
-    0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x7a, 0x65,
-    0x3d, 0x22, 0x35, 0x30, 0x22, 0x20, 0x6e, 0x61,
-    0x6d, 0x65, 0x3d, 0x22, 0x70, 0x68, 0x6f, 0x6e,
-    0x65, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d,
-    0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3e, 0x3c,
     0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72,
     0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c,
-    0x74, 0x72, 0x3e, 0x3c, 0x74, 0x64, 0x3e, 0x65,
-    0x6d, 0x61, 0x69, 0x6c, 0x3c, 0x2f, 0x74, 0x64,
-    0x3e, 0x3c, 0x74, 0x64, 0x3e, 0x3c, 0x69, 0x6e,
-    0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x7a, 0x65,
-    0x3d, 0x22, 0x35, 0x30, 0x22, 0x20, 0x6e, 0x61,
-    0x6d, 0x65, 0x3d, 0x22, 0x65, 0x6d, 0x61, 0x69,
-    0x6c, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d,
-    0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3e, 0x3c,
-    0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72,
-    0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c,
-    0x74, 0x72, 0x3e, 0x3c, 0x74, 0x64, 0x3e, 0x4d,
-    0x41, 0x43, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65,
-    0x73, 0x73, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c,
-    0x74, 0x64, 0x3e, 0x3c, 0x69, 0x6e, 0x70, 0x75,
-    0x74, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x3d, 0x22,
-    0x35, 0x30, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65,
-    0x3d, 0x22, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
-    0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
-    0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x76, 0x61,
-    0x6c, 0x75, 0x65, 0x3d, 0x22, 0x7d, 0x0d, 0x0a,
-    0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62,
-    0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x5b, 0x6d,
-    0x61, 0x63, 0x5d, 0x0d, 0x0a, 0x61, 0x70, 0x70,
-    0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66,
-    0x65, 0x72, 0x20, 0x7b, 0x22, 0x3e, 0x3c, 0x2f,
-    0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72, 0x3e,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x2f,
-    0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72, 0x3e,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x2f,
-    0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x0d, 0x0a,
+    0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x70, 0x3e,
+    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x53, 0x75,
+    0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x0d, 0x0a,
     0x09, 0x09, 0x09, 0x09, 0x3c, 0x70, 0x3e, 0x0d,
-    0x0a, 0x09, 0x09, 0x09, 0x09, 0x53, 0x75, 0x6d,
-    0x6d, 0x61, 0x72, 0x79, 0x3a, 0x0d, 0x0a, 0x09,
+    0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x69, 0x6e,
+    0x70, 0x75, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65,
+    0x3d, 0x22, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
+    0x79, 0x22, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x3d,
+    0x22, 0x35, 0x30, 0x22, 0x3e, 0x0d, 0x0a, 0x09,
     0x09, 0x09, 0x09, 0x3c, 0x70, 0x3e, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x09, 0x3c, 0x69, 0x6e, 0x70,
-    0x75, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
-    0x22, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
-    0x22, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x3d, 0x22,
-    0x35, 0x30, 0x22, 0x3e, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x3c, 0x70, 0x3e, 0x0d, 0x0a, 0x09,
-    0x09, 0x09, 0x09, 0x44, 0x65, 0x73, 0x63, 0x72,
-    0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x0d,
-    0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x70, 0x3e,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x74,
-    0x65, 0x78, 0x74, 0x61, 0x72, 0x65, 0x61, 0x20,
-    0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
-    0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77,
-    0x3a, 0x61, 0x75, 0x74, 0x6f, 0x3b, 0x66, 0x6f,
-    0x6e, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x3a,
-    0x31, 0x31, 0x70, 0x78, 0x3b, 0x22, 0x20, 0x20,
-    0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x64, 0x65,
-    0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
-    0x6e, 0x22, 0x20, 0x63, 0x6f, 0x6c, 0x73, 0x3d,
-    0x22, 0x35, 0x30, 0x22, 0x20, 0x72, 0x6f, 0x77,
-    0x73, 0x3d, 0x22, 0x34, 0x22, 0x20, 0x74, 0x79,
-    0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74,
-    0x61, 0x72, 0x65, 0x61, 0x22, 0x20, 0x77, 0x72,
-    0x61, 0x70, 0x3d, 0x22, 0x6f, 0x66, 0x66, 0x22,
-    0x3e, 0x3c, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x61,
+    0x09, 0x09, 0x09, 0x09, 0x44, 0x65, 0x73, 0x63,
+    0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
+    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x70,
+    0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c,
+    0x74, 0x65, 0x78, 0x74, 0x61, 0x72, 0x65, 0x61,
+    0x20, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d,
+    0x22, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f,
+    0x77, 0x3a, 0x61, 0x75, 0x74, 0x6f, 0x3b, 0x66,
+    0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65,
+    0x3a, 0x31, 0x31, 0x70, 0x78, 0x3b, 0x22, 0x20,
+    0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x64,
+    0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
+    0x6f, 0x6e, 0x22, 0x20, 0x63, 0x6f, 0x6c, 0x73,
+    0x3d, 0x22, 0x35, 0x30, 0x22, 0x20, 0x72, 0x6f,
+    0x77, 0x73, 0x3d, 0x22, 0x34, 0x22, 0x20, 0x74,
+    0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78,
+    0x74, 0x61, 0x72, 0x65, 0x61, 0x22, 0x20, 0x77,
+    0x72, 0x61, 0x70, 0x3d, 0x22, 0x6f, 0x66, 0x66,
+    0x22, 0x3e, 0x3c, 0x2f, 0x74, 0x65, 0x78, 0x74,
+    0x61, 0x72, 0x65, 0x61, 0x3e, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x3c, 0x70, 0x3e, 0x09, 0x09, 0x09, 0x09,
+    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x4c, 0x6f,
+    0x67, 0x3a, 0x3c, 0x70, 0x3e, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x3c, 0x74, 0x65, 0x78, 0x74,
+    0x61, 0x72, 0x65, 0x61, 0x20, 0x20, 0x73, 0x74,
+    0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6f, 0x76, 0x65,
+    0x72, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x61, 0x75,
+    0x74, 0x6f, 0x3b, 0x66, 0x6f, 0x6e, 0x74, 0x2d,
+    0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x31, 0x70,
+    0x78, 0x3b, 0x22, 0x20, 0x20, 0x6e, 0x61, 0x6d,
+    0x65, 0x3d, 0x22, 0x6c, 0x6f, 0x67, 0x22, 0x20,
+    0x63, 0x6f, 0x6c, 0x73, 0x3d, 0x22, 0x35, 0x30,
+    0x22, 0x20, 0x72, 0x6f, 0x77, 0x73, 0x3d, 0x22,
+    0x35, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d,
+    0x22, 0x74, 0x65, 0x78, 0x74, 0x61, 0x72, 0x65,
+    0x61, 0x22, 0x20, 0x77, 0x72, 0x61, 0x70, 0x3d,
+    0x22, 0x6f, 0x66, 0x66, 0x22, 0x3e, 0x7d, 0x0d,
+    0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20,
+    0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x24,
+    0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6c, 0x6f, 0x67,
+    0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
+    0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20,
+    0x7b, 0x3c, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x61,
     0x72, 0x65, 0x61, 0x3e, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x3c, 0x70, 0x3e, 0x09, 0x09, 0x09, 0x09, 0x0d,
-    0x0a, 0x09, 0x09, 0x09, 0x09, 0x4c, 0x6f, 0x67,
-    0x3a, 0x3c, 0x70, 0x3e, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x3c, 0x74, 0x65, 0x78, 0x74, 0x61,
-    0x72, 0x65, 0x61, 0x20, 0x20, 0x73, 0x74, 0x79,
-    0x6c, 0x65, 0x3d, 0x22, 0x6f, 0x76, 0x65, 0x72,
-    0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x61, 0x75, 0x74,
-    0x6f, 0x3b, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73,
-    0x69, 0x7a, 0x65, 0x3a, 0x31, 0x31, 0x70, 0x78,
-    0x3b, 0x22, 0x20, 0x20, 0x6e, 0x61, 0x6d, 0x65,
-    0x3d, 0x22, 0x6c, 0x6f, 0x67, 0x22, 0x20, 0x63,
+    0x09, 0x09, 0x3c, 0x70, 0x3e, 0x09, 0x09, 0x09,
+    0x09, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x43,
+    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x3c, 0x70,
+    0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c,
+    0x74, 0x65, 0x78, 0x74, 0x61, 0x72, 0x65, 0x61,
+    0x20, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d,
+    0x22, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f,
+    0x77, 0x3a, 0x61, 0x75, 0x74, 0x6f, 0x3b, 0x66,
+    0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65,
+    0x3a, 0x31, 0x31, 0x70, 0x78, 0x3b, 0x22, 0x20,
+    0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x63,
+    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x20, 0x63,
     0x6f, 0x6c, 0x73, 0x3d, 0x22, 0x35, 0x30, 0x22,
     0x20, 0x72, 0x6f, 0x77, 0x73, 0x3d, 0x22, 0x35,
     0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
@@ -34661,155 +34797,159 @@
     0x6f, 0x66, 0x66, 0x22, 0x3e, 0x7d, 0x0d, 0x0a,
     0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62,
     0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x24, 0x66,
-    0x6f, 0x72, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x0d,
-    0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20,
-    0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b,
-    0x3c, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x61, 0x72,
-    0x65, 0x61, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09,
-    0x09, 0x3c, 0x70, 0x3e, 0x09, 0x09, 0x09, 0x09,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x43, 0x6f,
-    0x6e, 0x66, 0x69, 0x67, 0x3a, 0x3c, 0x70, 0x3e,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x74,
-    0x65, 0x78, 0x74, 0x61, 0x72, 0x65, 0x61, 0x20,
-    0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
-    0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77,
-    0x3a, 0x61, 0x75, 0x74, 0x6f, 0x3b, 0x66, 0x6f,
-    0x6e, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x3a,
-    0x31, 0x31, 0x70, 0x78, 0x3b, 0x22, 0x20, 0x20,
-    0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x63, 0x6f,
-    0x6e, 0x66, 0x69, 0x67, 0x22, 0x20, 0x63, 0x6f,
-    0x6c, 0x73, 0x3d, 0x22, 0x35, 0x30, 0x22, 0x20,
-    0x72, 0x6f, 0x77, 0x73, 0x3d, 0x22, 0x35, 0x22,
-    0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74,
-    0x65, 0x78, 0x74, 0x61, 0x72, 0x65, 0x61, 0x22,
-    0x20, 0x77, 0x72, 0x61, 0x70, 0x3d, 0x22, 0x6f,
-    0x66, 0x66, 0x22, 0x3e, 0x7d, 0x0d, 0x0a, 0x61,
-    0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75,
-    0x66, 0x66, 0x65, 0x72, 0x20, 0x24, 0x66, 0x6f,
-    0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
-    0x67, 0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e,
-    0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
-    0x20, 0x7b, 0x3c, 0x2f, 0x74, 0x65, 0x78, 0x74,
-    0x61, 0x72, 0x65, 0x61, 0x3e, 0x0d, 0x0a, 0x09,
-    0x09, 0x09, 0x09, 0x3c, 0x70, 0x3e, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x3c, 0x2f, 0x66, 0x6f, 0x72,
-    0x6d, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x3c,
-    0x70, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x3c,
-    0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x76, 0x61,
-    0x6c, 0x75, 0x65, 0x3d, 0x22, 0x43, 0x72, 0x65,
-    0x61, 0x74, 0x65, 0x73, 0x20, 0x73, 0x75, 0x70,
-    0x70, 0x6f, 0x72, 0x74, 0x20, 0x72, 0x65, 0x71,
-    0x75, 0x65, 0x73, 0x74, 0x22, 0x20, 0x74, 0x79,
-    0x70, 0x65, 0x3d, 0x22, 0x73, 0x75, 0x62, 0x6d,
-    0x69, 0x74, 0x22, 0x2f, 0x3e, 0x3c, 0x2f, 0x74,
-    0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0d,
-    0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x3c, 0x2f, 0x74, 0x64, 0x3e,
-    0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0d,
-    0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09,
+    0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
+    0x69, 0x67, 0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65,
+    0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65,
+    0x72, 0x20, 0x7b, 0x3c, 0x2f, 0x74, 0x65, 0x78,
+    0x74, 0x61, 0x72, 0x65, 0x61, 0x3e, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x09, 0x3c, 0x70, 0x3e, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x3c, 0x2f, 0x66, 0x6f,
+    0x72, 0x6d, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x3c, 0x70, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x76,
+    0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x43, 0x72,
+    0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x73, 0x75,
+    0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x72, 0x65,
+    0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x20, 0x74,
+    0x79, 0x70, 0x65, 0x3d, 0x22, 0x73, 0x75, 0x62,
+    0x6d, 0x69, 0x74, 0x22, 0x2f, 0x3e, 0x3c, 0x2f,
+    0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72, 0x3e,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x3c, 0x2f, 0x74, 0x64,
+    0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e,
+    0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
+    0x09, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x20, 0x09, 0x73, 0x65, 0x74,
+    0x20, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f,
+    0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20,
+    0x5b, 0x66, 0x6f, 0x72, 0x6d, 0x66, 0x65, 0x74,
+    0x63, 0x68, 0x20, 0x74, 0x6f, 0x67, 0x67, 0x6c,
+    0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
+    0x73, 0x5d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x69, 0x66,
+    0x20, 0x7b, 0x5b, 0x73, 0x74, 0x72, 0x69, 0x6e,
+    0x67, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
+    0x20, 0x24, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
+    0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
+    0x5d, 0x3d, 0x3d, 0x30, 0x7d, 0x20, 0x7b, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x20, 0x09, 0x09, 0x73, 0x65, 0x74, 0x20,
+    0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x64,
+    0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x30,
     0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x20, 0x09, 0x73, 0x65, 0x74, 0x20,
-    0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x64,
-    0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x5b,
-    0x66, 0x6f, 0x72, 0x6d, 0x66, 0x65, 0x74, 0x63,
-    0x68, 0x20, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
+    0x09, 0x09, 0x20, 0x09, 0x7d, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
+    0x09, 0x73, 0x65, 0x74, 0x20, 0x73, 0x68, 0x6f,
+    0x77, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
+    0x73, 0x20, 0x5b, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
+    0x76, 0x61, 0x72, 0x20, 0x73, 0x68, 0x6f, 0x77,
     0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
     0x5d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x20, 0x09, 0x69, 0x66, 0x20,
     0x7b, 0x5b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
     0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20,
-    0x24, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f,
-    0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5d,
-    0x3d, 0x3d, 0x30, 0x7d, 0x20, 0x7b, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x20, 0x09, 0x09, 0x73, 0x65, 0x74, 0x20, 0x74,
-    0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x64, 0x65,
-    0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x30, 0x0d,
-    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x20, 0x09, 0x7d, 0x0d, 0x0a, 0x09, 0x09,
+    0x24, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65,
+    0x74, 0x61, 0x69, 0x6c, 0x73, 0x5d, 0x3d, 0x3d,
+    0x30, 0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
-    0x73, 0x65, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x77,
-    0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
-    0x20, 0x5b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x76,
-    0x61, 0x72, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x5f,
-    0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5d,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x20, 0x09, 0x69, 0x66, 0x20, 0x7b,
-    0x5b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20,
-    0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x24,
-    0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x74,
-    0x61, 0x69, 0x6c, 0x73, 0x5d, 0x3d, 0x3d, 0x30,
-    0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09,
-    0x73, 0x65, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x77,
-    0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
-    0x20, 0x30, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x7d, 0x0d,
-    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x20, 0x09, 0x69, 0x66, 0x20, 0x7b, 0x24,
-    0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x64,
-    0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x3d, 0x3d,
-    0x31, 0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
     0x09, 0x73, 0x65, 0x74, 0x20, 0x73, 0x68, 0x6f,
     0x77, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
-    0x73, 0x20, 0x5b, 0x65, 0x78, 0x70, 0x72, 0x20,
-    0x31, 0x2d, 0x24, 0x73, 0x68, 0x6f, 0x77, 0x5f,
-    0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5d,
+    0x73, 0x20, 0x30, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x7d,
     0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x20, 0x09, 0x09, 0x73, 0x61, 0x76,
-    0x65, 0x5f, 0x76, 0x61, 0x72, 0x20, 0x73, 0x68,
+    0x09, 0x09, 0x20, 0x09, 0x69, 0x66, 0x20, 0x7b,
+    0x24, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f,
+    0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x3d,
+    0x3d, 0x31, 0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
+    0x09, 0x09, 0x73, 0x65, 0x74, 0x20, 0x73, 0x68,
     0x6f, 0x77, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
-    0x6c, 0x73, 0x20, 0x24, 0x73, 0x68, 0x6f, 0x77,
+    0x6c, 0x73, 0x20, 0x5b, 0x65, 0x78, 0x70, 0x72,
+    0x20, 0x31, 0x2d, 0x24, 0x73, 0x68, 0x6f, 0x77,
     0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
+    0x5d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x73, 0x61,
+    0x76, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x20, 0x73,
+    0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x74, 0x61,
+    0x69, 0x6c, 0x73, 0x20, 0x24, 0x73, 0x68, 0x6f,
+    0x77, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
+    0x73, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x20, 0x09, 0x7d, 0x0d, 0x0a,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x20, 0x09, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x69, 0x66,
+    0x20, 0x7b, 0x5b, 0x73, 0x74, 0x72, 0x69, 0x6e,
+    0x67, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
+    0x20, 0x24, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
+    0x65, 0x5d, 0x21, 0x3d, 0x30, 0x7d, 0x20, 0x7b,
     0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x20, 0x09, 0x7d, 0x0d, 0x0a, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
-    0x09, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x20, 0x09, 0x09, 0x69, 0x66, 0x20,
-    0x7b, 0x5b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
-    0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20,
-    0x24, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
-    0x5d, 0x21, 0x3d, 0x30, 0x7d, 0x20, 0x7b, 0x0d,
+    0x09, 0x20, 0x09, 0x09, 0x09, 0x0d, 0x0a, 0x61,
+    0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75,
+    0x66, 0x66, 0x65, 0x72, 0x20, 0x7b, 0x0d, 0x0a,
+    0x3c, 0x74, 0x72, 0x20, 0x73, 0x74, 0x79, 0x6c,
+    0x65, 0x3d, 0x22, 0x68, 0x65, 0x69, 0x67, 0x68,
+    0x74, 0x3a, 0x31, 0x30, 0x30, 0x25, 0x3b, 0x22,
+    0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73,
+    0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x68, 0x65,
+    0x69, 0x67, 0x68, 0x74, 0x3a, 0x31, 0x30, 0x30,
+    0x25, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
+    0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x6c,
+    0x6f, 0x72, 0x3a, 0x72, 0x65, 0x64, 0x3b, 0x22,
+    0x20, 0x63, 0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e,
+    0x3d, 0x22, 0x36, 0x22, 0x3e, 0x0d, 0x0a, 0x3c,
+    0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74,
+    0x79, 0x6c, 0x65, 0x3d, 0x22, 0x70, 0x61, 0x64,
+    0x64, 0x69, 0x6e, 0x67, 0x3a, 0x30, 0x70, 0x78,
+    0x3b, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d,
+    0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65,
+    0x3a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73,
+    0x65, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
+    0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x6c,
+    0x6f, 0x72, 0x3a, 0x23, 0x66, 0x66, 0x66, 0x66,
+    0x66, 0x66, 0x3b, 0x77, 0x69, 0x64, 0x74, 0x68,
+    0x3a, 0x31, 0x30, 0x30, 0x25, 0x22, 0x20, 0x63,
+    0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x74, 0x65,
+    0x78, 0x74, 0x67, 0x72, 0x61, 0x79, 0x22, 0x3e,
+    0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73, 0x74,
+    0x79, 0x6c, 0x65, 0x3d, 0x22, 0x77, 0x69, 0x64,
+    0x74, 0x68, 0x3a, 0x32, 0x35, 0x70, 0x78, 0x3b,
+    0x22, 0x3e, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b,
+    0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x7d,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x20, 0x09, 0x09, 0x69, 0x66, 0x20, 0x7b, 0x24,
+    0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x74,
+    0x61, 0x69, 0x6c, 0x73, 0x3d, 0x3d, 0x31, 0x7d,
+    0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x20, 0x09, 0x09, 0x09, 0x61, 0x70, 0x70, 0x65,
+    0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65,
+    0x72, 0x20, 0x3c, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x20, 0x09, 0x09, 0x09, 0x61, 0x70, 0x70,
+    0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66,
+    0x65, 0x72, 0x20, 0x7b, 0x74, 0x64, 0x20, 0x73,
+    0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61,
+    0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
+    0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23,
+    0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x3b, 0x70,
+    0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x6c,
+    0x65, 0x66, 0x74, 0x3a, 0x35, 0x70, 0x78, 0x3b,
+    0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d,
+    0x72, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x35, 0x70,
+    0x78, 0x3b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
+    0x67, 0x2d, 0x74, 0x6f, 0x70, 0x3a, 0x33, 0x70,
+    0x78, 0x3b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
+    0x67, 0x2d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d,
+    0x3a, 0x33, 0x70, 0x78, 0x3b, 0x22, 0x7d, 0x0d,
     0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x20, 0x09, 0x09, 0x09, 0x0d, 0x0a, 0x61, 0x70,
-    0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66,
-    0x66, 0x65, 0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x3c,
-    0x74, 0x72, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
-    0x3d, 0x22, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
-    0x3a, 0x31, 0x30, 0x30, 0x25, 0x3b, 0x22, 0x3e,
-    0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73, 0x74,
-    0x79, 0x6c, 0x65, 0x3d, 0x22, 0x68, 0x65, 0x69,
-    0x67, 0x68, 0x74, 0x3a, 0x31, 0x30, 0x30, 0x25,
-    0x3b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
-    0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f,
-    0x72, 0x3a, 0x72, 0x65, 0x64, 0x3b, 0x22, 0x20,
-    0x63, 0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e, 0x3d,
-    0x22, 0x36, 0x22, 0x3e, 0x0d, 0x0a, 0x3c, 0x74,
-    0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x79,
-    0x6c, 0x65, 0x3d, 0x22, 0x70, 0x61, 0x64, 0x64,
-    0x69, 0x6e, 0x67, 0x3a, 0x30, 0x70, 0x78, 0x3b,
-    0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x63,
-    0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x3a,
-    0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65,
-    0x3b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
-    0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f,
-    0x72, 0x3a, 0x23, 0x66, 0x66, 0x66, 0x66, 0x66,
-    0x66, 0x3b, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a,
-    0x31, 0x30, 0x30, 0x25, 0x22, 0x20, 0x63, 0x6c,
-    0x61, 0x73, 0x73, 0x3d, 0x22, 0x74, 0x65, 0x78,
-    0x74, 0x67, 0x72, 0x61, 0x79, 0x22, 0x3e, 0x0d,
-    0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73, 0x74, 0x79,
-    0x6c, 0x65, 0x3d, 0x22, 0x77, 0x69, 0x64, 0x74,
-    0x68, 0x3a, 0x32, 0x35, 0x70, 0x78, 0x3b, 0x22,
-    0x3e, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c,
-    0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x7d, 0x0d,
-    0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
-    0x09, 0x09, 0x69, 0x66, 0x20, 0x7b, 0x24, 0x73,
-    0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x74, 0x61,
-    0x69, 0x6c, 0x73, 0x3d, 0x3d, 0x31, 0x7d, 0x20,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09,
+    0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20,
+    0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x3e,
+    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
+    0x09, 0x7d, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20,
     0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
     0x09, 0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e,
@@ -34821,356 +34961,343 @@
     0x72, 0x20, 0x7b, 0x74, 0x64, 0x20, 0x73, 0x74,
     0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61, 0x63,
     0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d,
-    0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x64,
-    0x64, 0x64, 0x64, 0x64, 0x64, 0x3b, 0x70, 0x61,
-    0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x6c, 0x65,
-    0x66, 0x74, 0x3a, 0x35, 0x70, 0x78, 0x3b, 0x70,
-    0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x72,
-    0x69, 0x67, 0x68, 0x74, 0x3a, 0x35, 0x70, 0x78,
-    0x3b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
-    0x2d, 0x74, 0x6f, 0x70, 0x3a, 0x33, 0x70, 0x78,
-    0x3b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
-    0x2d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x3a,
-    0x33, 0x70, 0x78, 0x3b, 0x22, 0x7d, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x09,
-    0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62,
-    0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x3e, 0x0d,
+    0x69, 0x6d, 0x61, 0x67, 0x65, 0x3a, 0x75, 0x72,
+    0x6c, 0x28, 0x27, 0x2f, 0x72, 0x6f, 0x6d, 0x2f,
+    0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x63, 0x75, 0x74,
+    0x73, 0x2f, 0x68, 0x5f, 0x74, 0x61, 0x62, 0x5f,
+    0x66, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x6e, 0x67,
+    0x27, 0x29, 0x3b, 0x77, 0x69, 0x64, 0x74, 0x68,
+    0x3a, 0x31, 0x31, 0x30, 0x70, 0x78, 0x3b, 0x68,
+    0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x32, 0x39,
+    0x70, 0x78, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x67,
+    0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x72, 0x65,
+    0x70, 0x65, 0x61, 0x74, 0x3a, 0x20, 0x6e, 0x6f,
+    0x2d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x3b,
+    0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
+    0x6e, 0x64, 0x2d, 0x70, 0x6f, 0x73, 0x69, 0x74,
+    0x69, 0x6f, 0x6e, 0x3a, 0x74, 0x6f, 0x70, 0x20,
+    0x6c, 0x65, 0x66, 0x74, 0x3b, 0x22, 0x7d, 0x0d,
     0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09,
-    0x7d, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b,
+    0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20,
+    0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x3e,
     0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
-    0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
-    0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20,
-    0x3c, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x20, 0x09, 0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65,
+    0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65,
+    0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x3c, 0x61, 0x20,
+    0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6f,
+    0x70, 0x65, 0x6e, 0x6f, 0x63, 0x64, 0x22, 0x20,
+    0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x72,
+    0x61, 0x6d, 0x2f, 0x63, 0x67, 0x69, 0x2f, 0x73,
+    0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74,
+    0x63, 0x6c, 0x3f, 0x74, 0x6f, 0x67, 0x67, 0x6c,
+    0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
+    0x73, 0x3d, 0x31, 0x22, 0x3e, 0x0d, 0x0a, 0x7d,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x69, 0x66, 0x20, 0x7b, 0x24,
+    0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x74,
+    0x61, 0x69, 0x6c, 0x73, 0x3d, 0x3d, 0x31, 0x7d,
+    0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x61, 0x70, 0x70, 0x65,
+    0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65,
+    0x72, 0x20, 0x22, 0x48, 0x69, 0x64, 0x65, 0x20,
+    0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
+    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
     0x09, 0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e,
     0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
-    0x20, 0x7b, 0x74, 0x64, 0x20, 0x73, 0x74, 0x79,
-    0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61, 0x63, 0x6b,
-    0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x69,
-    0x6d, 0x61, 0x67, 0x65, 0x3a, 0x75, 0x72, 0x6c,
-    0x28, 0x27, 0x2f, 0x72, 0x6f, 0x6d, 0x2f, 0x6d,
-    0x65, 0x6e, 0x75, 0x5f, 0x63, 0x75, 0x74, 0x73,
-    0x2f, 0x68, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x66,
-    0x72, 0x65, 0x65, 0x2e, 0x70, 0x6e, 0x67, 0x27,
-    0x29, 0x3b, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a,
-    0x31, 0x31, 0x30, 0x70, 0x78, 0x3b, 0x68, 0x65,
-    0x69, 0x67, 0x68, 0x74, 0x3a, 0x32, 0x39, 0x70,
-    0x78, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
-    0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x72, 0x65, 0x70,
-    0x65, 0x61, 0x74, 0x3a, 0x20, 0x6e, 0x6f, 0x2d,
-    0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x3b, 0x62,
-    0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
-    0x64, 0x2d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
-    0x6f, 0x6e, 0x3a, 0x74, 0x6f, 0x70, 0x20, 0x6c,
-    0x65, 0x66, 0x74, 0x3b, 0x22, 0x7d, 0x0d, 0x0a,
+    0x20, 0x3c, 0x62, 0x72, 0x2f, 0x3e, 0x0d, 0x0a,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x09,
-    0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62,
-    0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x3e, 0x0d,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x7d,
+    0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0d,
     0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20,
+    0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b,
+    0x3c, 0x64, 0x69, 0x76, 0x20, 0x73, 0x74, 0x79,
+    0x6c, 0x65, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x69,
+    0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x72, 0x65, 0x6c,
+    0x61, 0x74, 0x69, 0x76, 0x65, 0x3b, 0x74, 0x6f,
+    0x70, 0x3a, 0x37, 0x70, 0x78, 0x3b, 0x74, 0x65,
+    0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e,
+    0x3a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x3b,
+    0x22, 0x3e, 0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x61, 0x70, 0x70,
+    0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66,
+    0x65, 0x72, 0x20, 0x22, 0x53, 0x68, 0x6f, 0x77,
+    0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
+    0x22, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e,
+    0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
+    0x20, 0x7b, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
     0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x0d, 0x0a, 0x61, 0x70,
+    0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66,
+    0x66, 0x65, 0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x3c,
+    0x2f, 0x61, 0x3e, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
-    0x09, 0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e,
-    0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
-    0x20, 0x7b, 0x0d, 0x0a, 0x3c, 0x61, 0x20, 0x63,
-    0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6f, 0x70,
-    0x65, 0x6e, 0x6f, 0x63, 0x64, 0x22, 0x20, 0x68,
-    0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x72, 0x61,
-    0x6d, 0x2f, 0x63, 0x67, 0x69, 0x2f, 0x73, 0x75,
-    0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74, 0x63,
-    0x6c, 0x3f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
-    0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
-    0x3d, 0x31, 0x22, 0x3e, 0x0d, 0x0a, 0x7d, 0x0d,
-    0x0a, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x69, 0x66, 0x20, 0x7b, 0x24, 0x73,
     0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x74, 0x61,
     0x69, 0x6c, 0x73, 0x3d, 0x3d, 0x31, 0x7d, 0x20,
     0x7b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e,
-    0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
-    0x20, 0x22, 0x48, 0x69, 0x64, 0x65, 0x20, 0x64,
-    0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x0d,
-    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
-    0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
-    0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20,
-    0x3c, 0x62, 0x72, 0x2f, 0x3e, 0x0d, 0x0a, 0x09,
+    0x20, 0x09, 0x09, 0x09, 0x61, 0x70, 0x70, 0x65,
+    0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65,
+    0x72, 0x20, 0x24, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
+    0x6c, 0x65, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x7d, 0x20,
-    0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0d, 0x0a,
+    0x09, 0x20, 0x09, 0x09, 0x7d, 0x0d, 0x0a, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x0d, 0x0a,
     0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62,
     0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b, 0x3c,
-    0x64, 0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c,
-    0x65, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x69, 0x74,
-    0x69, 0x6f, 0x6e, 0x3a, 0x72, 0x65, 0x6c, 0x61,
-    0x74, 0x69, 0x76, 0x65, 0x3b, 0x74, 0x6f, 0x70,
-    0x3a, 0x37, 0x70, 0x78, 0x3b, 0x74, 0x65, 0x78,
-    0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a,
-    0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x3b, 0x22,
-    0x3e, 0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x61, 0x70, 0x70, 0x65,
-    0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65,
-    0x72, 0x20, 0x22, 0x53, 0x68, 0x6f, 0x77, 0x20,
-    0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
-    0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20,
-    0x7b, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x7d,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x0d, 0x0a, 0x61, 0x70, 0x70,
-    0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66,
-    0x65, 0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x3c, 0x2f,
-    0x61, 0x3e, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d,
+    0x2f, 0x74, 0x64, 0x3e, 0x7d, 0x0d, 0x0a, 0x0d,
     0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
-    0x09, 0x69, 0x66, 0x20, 0x7b, 0x24, 0x73, 0x68,
-    0x6f, 0x77, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
-    0x6c, 0x73, 0x3d, 0x3d, 0x31, 0x7d, 0x20, 0x7b,
+    0x69, 0x66, 0x20, 0x7b, 0x24, 0x73, 0x68, 0x6f,
+    0x77, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
+    0x73, 0x21, 0x3d, 0x31, 0x7d, 0x20, 0x7b, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
+    0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20,
+    0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b,
+    0x3c, 0x74, 0x64, 0x3e, 0x26, 0x6e, 0x62, 0x73,
+    0x70, 0x3b, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x7d,
     0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
-    0x09, 0x09, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e,
-    0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
-    0x20, 0x24, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
-    0x65, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x20, 0x09, 0x09, 0x7d, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x20, 0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65,
+    0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65,
+    0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x3c, 0x74, 0x64,
+    0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
+    0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x32, 0x35,
+    0x70, 0x78, 0x3b, 0x22, 0x3e, 0x26, 0x6e, 0x62,
+    0x73, 0x70, 0x3b, 0x3c, 0x2f, 0x74, 0x64, 0x3e,
+    0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x61, 0x62, 0x6c,
+    0x65, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x64,
+    0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e,
+    0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x09,
     0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x20, 0x09, 0x0d, 0x0a, 0x61,
-    0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75,
-    0x66, 0x66, 0x65, 0x72, 0x20, 0x7b, 0x3c, 0x2f,
-    0x74, 0x64, 0x3e, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x69,
-    0x66, 0x20, 0x7b, 0x24, 0x73, 0x68, 0x6f, 0x77,
-    0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
-    0x21, 0x3d, 0x31, 0x7d, 0x20, 0x7b, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09,
-    0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x62,
-    0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x7b, 0x3c,
-    0x74, 0x64, 0x3e, 0x26, 0x6e, 0x62, 0x73, 0x70,
-    0x3b, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x7d, 0x0d,
+    0x20, 0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x0d, 0x0a, 0x61, 0x70,
+    0x70, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66,
+    0x66, 0x65, 0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x3c,
+    0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64,
+    0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
+    0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x33,
+    0x30, 0x70, 0x78, 0x3b, 0x62, 0x61, 0x63, 0x6b,
+    0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x69,
+    0x6d, 0x61, 0x67, 0x65, 0x3a, 0x75, 0x72, 0x6c,
+    0x28, 0x27, 0x2f, 0x72, 0x6f, 0x6d, 0x2f, 0x6d,
+    0x65, 0x6e, 0x75, 0x5f, 0x63, 0x75, 0x74, 0x73,
+    0x2f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f,
+    0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x2e, 0x70,
+    0x6e, 0x67, 0x27, 0x29, 0x3b, 0x62, 0x61, 0x63,
+    0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d,
+    0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x3a, 0x20,
+    0x6e, 0x6f, 0x2d, 0x72, 0x65, 0x70, 0x65, 0x61,
+    0x74, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
+    0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x70, 0x6f, 0x73,
+    0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x74, 0x6f,
+    0x70, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3b,
+    0x22, 0x20, 0x63, 0x6f, 0x6c, 0x73, 0x70, 0x61,
+    0x6e, 0x3d, 0x22, 0x36, 0x22, 0x3e, 0x0d, 0x0a,
+    0x3c, 0x64, 0x69, 0x76, 0x20, 0x73, 0x74, 0x79,
+    0x6c, 0x65, 0x3d, 0x22, 0x77, 0x69, 0x64, 0x74,
+    0x68, 0x3a, 0x35, 0x30, 0x30, 0x70, 0x78, 0x3b,
+    0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
+    0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
+    0x3a, 0x23, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
+    0x3b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a,
+    0x31, 0x30, 0x30, 0x25, 0x3b, 0x22, 0x3e, 0x0d,
     0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
-    0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x20, 0x0d, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e,
-    0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
-    0x20, 0x7b, 0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20,
-    0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x77,
-    0x69, 0x64, 0x74, 0x68, 0x3a, 0x32, 0x35, 0x70,
-    0x78, 0x3b, 0x22, 0x3e, 0x26, 0x6e, 0x62, 0x73,
-    0x70, 0x3b, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d,
-    0x0a, 0x3c, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65,
-    0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x64, 0x3e,
-    0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0d,
-    0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
-    0x7d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x0d, 0x0a, 0x61, 0x70, 0x70,
-    0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66,
-    0x65, 0x72, 0x20, 0x7b, 0x0d, 0x0a, 0x3c, 0x74,
-    0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20,
-    0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x68,
-    0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x33, 0x30,
+    0x09, 0x20, 0x09, 0x09, 0x09, 0x26, 0x6e, 0x62,
+    0x73, 0x70, 0x3b, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x09,
+    0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a,
+    0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c,
+    0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f,
+    0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x0d, 0x0a,
+    0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c,
+    0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
+    0x3d, 0x22, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a,
+    0x36, 0x70, 0x78, 0x3b, 0x22, 0x2f, 0x3e, 0x0d,
+    0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73, 0x74, 0x79,
+    0x6c, 0x65, 0x3d, 0x22, 0x77, 0x69, 0x64, 0x74,
+    0x68, 0x3a, 0x32, 0x34, 0x35, 0x70, 0x78, 0x3b,
+    0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x31,
+    0x30, 0x30, 0x25, 0x22, 0x3e, 0x0d, 0x0a, 0x3c,
+    0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74,
+    0x79, 0x6c, 0x65, 0x3d, 0x22, 0x70, 0x61, 0x64,
+    0x64, 0x69, 0x6e, 0x67, 0x3a, 0x30, 0x70, 0x78,
+    0x3b, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d,
+    0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65,
+    0x3a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73,
+    0x65, 0x3b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
+    0x3a, 0x31, 0x30, 0x30, 0x25, 0x3b, 0x22, 0x3e,
+    0x0d, 0x0a, 0x3c, 0x74, 0x72, 0x3e, 0x0d, 0x0a,
+    0x3c, 0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c,
+    0x65, 0x3d, 0x22, 0x77, 0x69, 0x64, 0x74, 0x68,
+    0x3a, 0x31, 0x30, 0x33, 0x70, 0x78, 0x3b, 0x68,
+    0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x32, 0x39,
     0x70, 0x78, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x67,
     0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x69, 0x6d,
     0x61, 0x67, 0x65, 0x3a, 0x75, 0x72, 0x6c, 0x28,
     0x27, 0x2f, 0x72, 0x6f, 0x6d, 0x2f, 0x6d, 0x65,
     0x6e, 0x75, 0x5f, 0x63, 0x75, 0x74, 0x73, 0x2f,
-    0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x62,
-    0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x6e,
-    0x67, 0x27, 0x29, 0x3b, 0x62, 0x61, 0x63, 0x6b,
-    0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x72,
-    0x65, 0x70, 0x65, 0x61, 0x74, 0x3a, 0x20, 0x6e,
-    0x6f, 0x2d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
-    0x3b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
-    0x75, 0x6e, 0x64, 0x2d, 0x70, 0x6f, 0x73, 0x69,
-    0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x74, 0x6f, 0x70,
-    0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x22,
-    0x20, 0x63, 0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e,
-    0x3d, 0x22, 0x36, 0x22, 0x3e, 0x0d, 0x0a, 0x3c,
+    0x68, 0x5f, 0x74, 0x61, 0x62, 0x32, 0x5f, 0x73,
+    0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x2e,
+    0x70, 0x6e, 0x67, 0x27, 0x29, 0x3b, 0x62, 0x61,
+    0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
+    0x2d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x3a,
+    0x20, 0x6e, 0x6f, 0x2d, 0x72, 0x65, 0x70, 0x65,
+    0x61, 0x74, 0x3b, 0x22, 0x3e, 0x0d, 0x0a, 0x3c,
     0x64, 0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c,
-    0x65, 0x3d, 0x22, 0x77, 0x69, 0x64, 0x74, 0x68,
-    0x3a, 0x35, 0x30, 0x30, 0x70, 0x78, 0x3b, 0x62,
+    0x65, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x69, 0x74,
+    0x69, 0x6f, 0x6e, 0x3a, 0x72, 0x65, 0x6c, 0x61,
+    0x74, 0x69, 0x76, 0x65, 0x3b, 0x74, 0x6f, 0x70,
+    0x3a, 0x37, 0x70, 0x78, 0x3b, 0x3b, 0x66, 0x6f,
+    0x6e, 0x74, 0x2d, 0x77, 0x65, 0x69, 0x67, 0x68,
+    0x74, 0x3a, 0x62, 0x6f, 0x6c, 0x64, 0x3b, 0x74,
+    0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67,
+    0x6e, 0x3a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
+    0x3b, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x31,
+    0x30, 0x30, 0x70, 0x78, 0x3b, 0x22, 0x20, 0x63,
+    0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x74, 0x65,
+    0x78, 0x74, 0x67, 0x72, 0x61, 0x79, 0x22, 0x3e,
+    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x20, 0x20, 0x20, 0x20,
+    0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
+    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x20, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
+    0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d,
+    0x0a, 0x3c, 0x74, 0x64, 0x20, 0x77, 0x69, 0x64,
+    0x74, 0x68, 0x3d, 0x22, 0x34, 0x30, 0x70, 0x78,
+    0x22, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x26,
+    0x6e, 0x62, 0x73, 0x70, 0x3b, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20,
+    0x09, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a,
+    0x3c, 0x74, 0x64, 0x2f, 0x3e, 0x0d, 0x0a, 0x3c,
+    0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74,
+    0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20,
+    0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x68,
+    0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x31, 0x30,
+    0x70, 0x78, 0x3b, 0x77, 0x69, 0x64, 0x74, 0x68,
+    0x3a, 0x32, 0x34, 0x35, 0x70, 0x78, 0x3b, 0x62,
     0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
-    0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a,
-    0x23, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3b,
-    0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x31,
-    0x30, 0x30, 0x25, 0x3b, 0x22, 0x3e, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x20, 0x09, 0x09, 0x09, 0x26, 0x6e, 0x62, 0x73,
-    0x70, 0x3b, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x09, 0x3c,
-    0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f,
-    0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74,
-    0x61, 0x62, 0x6c, 0x65, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x74,
-    0x64, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d,
-    0x22, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x36,
-    0x70, 0x78, 0x3b, 0x22, 0x2f, 0x3e, 0x0d, 0x0a,
+    0x64, 0x2d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x3a,
+    0x75, 0x72, 0x6c, 0x28, 0x27, 0x2f, 0x72, 0x6f,
+    0x6d, 0x2f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x63,
+    0x75, 0x74, 0x73, 0x2f, 0x72, 0x69, 0x67, 0x68,
+    0x74, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x6d,
+    0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x6e, 0x67, 0x27,
+    0x29, 0x3b, 0x22, 0x20, 0x63, 0x6f, 0x6c, 0x73,
+    0x70, 0x61, 0x6e, 0x3d, 0x22, 0x33, 0x22, 0x2f,
+    0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e,
+    0x0d, 0x0a, 0x3c, 0x74, 0x72, 0x3e, 0x0d, 0x0a,
     0x3c, 0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c,
-    0x65, 0x3d, 0x22, 0x77, 0x69, 0x64, 0x74, 0x68,
-    0x3a, 0x32, 0x34, 0x35, 0x70, 0x78, 0x3b, 0x68,
-    0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x31, 0x30,
-    0x30, 0x25, 0x22, 0x3e, 0x0d, 0x0a, 0x3c, 0x74,
-    0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x79,
-    0x6c, 0x65, 0x3d, 0x22, 0x70, 0x61, 0x64, 0x64,
-    0x69, 0x6e, 0x67, 0x3a, 0x30, 0x70, 0x78, 0x3b,
-    0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x63,
-    0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x3a,
-    0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65,
-    0x3b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a,
-    0x31, 0x30, 0x30, 0x25, 0x3b, 0x22, 0x3e, 0x0d,
-    0x0a, 0x3c, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
-    0x3d, 0x22, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a,
-    0x31, 0x30, 0x33, 0x70, 0x78, 0x3b, 0x68, 0x65,
-    0x69, 0x67, 0x68, 0x74, 0x3a, 0x32, 0x39, 0x70,
-    0x78, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
-    0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x69, 0x6d, 0x61,
-    0x67, 0x65, 0x3a, 0x75, 0x72, 0x6c, 0x28, 0x27,
-    0x2f, 0x72, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x6e,
-    0x75, 0x5f, 0x63, 0x75, 0x74, 0x73, 0x2f, 0x68,
-    0x5f, 0x74, 0x61, 0x62, 0x32, 0x5f, 0x73, 0x65,
-    0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x70,
-    0x6e, 0x67, 0x27, 0x29, 0x3b, 0x62, 0x61, 0x63,
-    0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d,
-    0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x3a, 0x20,
-    0x6e, 0x6f, 0x2d, 0x72, 0x65, 0x70, 0x65, 0x61,
-    0x74, 0x3b, 0x22, 0x3e, 0x0d, 0x0a, 0x3c, 0x64,
-    0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
-    0x3d, 0x22, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
-    0x6f, 0x6e, 0x3a, 0x72, 0x65, 0x6c, 0x61, 0x74,
-    0x69, 0x76, 0x65, 0x3b, 0x74, 0x6f, 0x70, 0x3a,
-    0x37, 0x70, 0x78, 0x3b, 0x3b, 0x66, 0x6f, 0x6e,
-    0x74, 0x2d, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
-    0x3a, 0x62, 0x6f, 0x6c, 0x64, 0x3b, 0x74, 0x65,
-    0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e,
-    0x3a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x3b,
-    0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x31, 0x30,
-    0x30, 0x70, 0x78, 0x3b, 0x22, 0x20, 0x63, 0x6c,
-    0x61, 0x73, 0x73, 0x3d, 0x22, 0x74, 0x65, 0x78,
-    0x74, 0x67, 0x72, 0x61, 0x79, 0x22, 0x3e, 0x0d,
-    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x20, 0x20, 0x20, 0x20, 0x44,
-    0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
-    0x74, 0x69, 0x6f, 0x6e, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x20, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d,
-    0x0a, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a,
-    0x3c, 0x74, 0x64, 0x20, 0x77, 0x69, 0x64, 0x74,
-    0x68, 0x3d, 0x22, 0x34, 0x30, 0x70, 0x78, 0x22,
-    0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x26, 0x6e,
-    0x62, 0x73, 0x70, 0x3b, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09,
-    0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x74, 0x64, 0x2f, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f,
-    0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x72,
-    0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73,
-    0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x68, 0x65,
-    0x69, 0x67, 0x68, 0x74, 0x3a, 0x31, 0x30, 0x70,
-    0x78, 0x3b, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a,
-    0x32, 0x34, 0x35, 0x70, 0x78, 0x3b, 0x62, 0x61,
-    0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
-    0x2d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x3a, 0x75,
-    0x72, 0x6c, 0x28, 0x27, 0x2f, 0x72, 0x6f, 0x6d,
-    0x2f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x63, 0x75,
-    0x74, 0x73, 0x2f, 0x72, 0x69, 0x67, 0x68, 0x74,
-    0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x6d, 0x61,
-    0x6c, 0x6c, 0x2e, 0x70, 0x6e, 0x67, 0x27, 0x29,
-    0x3b, 0x22, 0x20, 0x63, 0x6f, 0x6c, 0x73, 0x70,
-    0x61, 0x6e, 0x3d, 0x22, 0x33, 0x22, 0x2f, 0x3e,
-    0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0d,
-    0x0a, 0x3c, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
-    0x3d, 0x22, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
-    0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x6c,
-    0x6f, 0x72, 0x3a, 0x23, 0x64, 0x38, 0x64, 0x37,
-    0x64, 0x37, 0x3b, 0x77, 0x69, 0x64, 0x74, 0x68,
-    0x3a, 0x32, 0x34, 0x35, 0x70, 0x78, 0x3b, 0x70,
-    0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x6c,
-    0x65, 0x66, 0x74, 0x3a, 0x31, 0x30, 0x70, 0x78,
-    0x3b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
-    0x2d, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6d, 0x3a,
-    0x31, 0x30, 0x70, 0x78, 0x3b, 0x6c, 0x69, 0x6e,
-    0x65, 0x2d, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
-    0x3a, 0x31, 0x37, 0x70, 0x78, 0x3b, 0x22, 0x20,
-    0x63, 0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e, 0x3d,
-    0x22, 0x33, 0x22, 0x3e, 0x0d, 0x0a, 0x3c, 0x61,
+    0x65, 0x3d, 0x22, 0x62, 0x61, 0x63, 0x6b, 0x67,
+    0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f,
+    0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x64, 0x38, 0x64,
+    0x37, 0x64, 0x37, 0x3b, 0x77, 0x69, 0x64, 0x74,
+    0x68, 0x3a, 0x32, 0x34, 0x35, 0x70, 0x78, 0x3b,
+    0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d,
+    0x6c, 0x65, 0x66, 0x74, 0x3a, 0x31, 0x30, 0x70,
+    0x78, 0x3b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
+    0x67, 0x2d, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6d,
+    0x3a, 0x31, 0x30, 0x70, 0x78, 0x3b, 0x6c, 0x69,
+    0x6e, 0x65, 0x2d, 0x68, 0x65, 0x69, 0x67, 0x68,
+    0x74, 0x3a, 0x31, 0x37, 0x70, 0x78, 0x3b, 0x22,
+    0x20, 0x63, 0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e,
+    0x3d, 0x22, 0x33, 0x22, 0x3e, 0x0d, 0x0a, 0x3c,
+    0x61, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
+    0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b,
+    0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22,
+    0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77,
+    0x77, 0x77, 0x2e, 0x7a, 0x79, 0x6c, 0x69, 0x6e,
+    0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x79, 0x31,
+    0x30, 0x30, 0x30, 0x2f, 0x5a, 0x59, 0x31, 0x30,
+    0x30, 0x30, 0x5f, 0x51, 0x75, 0x69, 0x63, 0x6b,
+    0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x47,
+    0x75, 0x69, 0x64, 0x65, 0x2e, 0x70, 0x64, 0x66,
+    0x22, 0x3e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x20,
+    0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x4d, 0x61,
+    0x6e, 0x75, 0x61, 0x6c, 0x3c, 0x2f, 0x61, 0x3e,
+    0x0d, 0x0a, 0x3c, 0x62, 0x72, 0x2f, 0x3e, 0x0d,
+    0x0a, 0x3c, 0x61, 0x20, 0x74, 0x61, 0x72, 0x67,
+    0x65, 0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61,
+    0x6e, 0x6b, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66,
+    0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
+    0x2f, 0x77, 0x77, 0x77, 0x2e, 0x7a, 0x79, 0x6c,
+    0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a,
+    0x79, 0x31, 0x30, 0x30, 0x30, 0x2f, 0x6f, 0x70,
+    0x65, 0x6e, 0x6f, 0x63, 0x64, 0x2e, 0x70, 0x64,
+    0x66, 0x22, 0x3e, 0x4f, 0x70, 0x65, 0x6e, 0x4f,
+    0x43, 0x44, 0x20, 0x4d, 0x61, 0x6e, 0x75, 0x61,
+    0x6c, 0x3c, 0x2f, 0x61, 0x3e, 0x0d, 0x0a, 0x3c,
+    0x62, 0x72, 0x2f, 0x3e, 0x0d, 0x0a, 0x3c, 0x61,
     0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3d,
     0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22,
     0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68,
     0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
     0x77, 0x2e, 0x7a, 0x79, 0x6c, 0x69, 0x6e, 0x2e,
     0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x79, 0x31, 0x30,
-    0x30, 0x30, 0x2f, 0x5a, 0x59, 0x31, 0x30, 0x30,
-    0x30, 0x5f, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x5f,
-    0x53, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x47, 0x75,
-    0x69, 0x64, 0x65, 0x2e, 0x70, 0x64, 0x66, 0x22,
-    0x3e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x20, 0x53,
-    0x74, 0x61, 0x72, 0x74, 0x20, 0x4d, 0x61, 0x6e,
-    0x75, 0x61, 0x6c, 0x3c, 0x2f, 0x61, 0x3e, 0x0d,
-    0x0a, 0x3c, 0x62, 0x72, 0x2f, 0x3e, 0x0d, 0x0a,
-    0x3c, 0x61, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65,
-    0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e,
-    0x6b, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d,
-    0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
-    0x77, 0x77, 0x77, 0x2e, 0x7a, 0x79, 0x6c, 0x69,
-    0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x79,
-    0x31, 0x30, 0x30, 0x30, 0x2f, 0x6f, 0x70, 0x65,
-    0x6e, 0x6f, 0x63, 0x64, 0x2e, 0x70, 0x64, 0x66,
-    0x22, 0x3e, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x43,
-    0x44, 0x20, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
-    0x3c, 0x2f, 0x61, 0x3e, 0x0d, 0x0a, 0x3c, 0x62,
-    0x72, 0x2f, 0x3e, 0x0d, 0x0a, 0x3c, 0x61, 0x20,
-    0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3d, 0x22,
-    0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x20,
-    0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74,
-    0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77,
-    0x2e, 0x7a, 0x79, 0x6c, 0x69, 0x6e, 0x2e, 0x63,
-    0x6f, 0x6d, 0x2f, 0x7a, 0x79, 0x31, 0x30, 0x30,
-    0x30, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
-    0x74, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x3e,
-    0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x20,
-    0x5a, 0x79, 0x6c, 0x69, 0x6e, 0x20, 0x41, 0x53,
-    0x3c, 0x2f, 0x61, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f,
-    0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74,
-    0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x72, 0x3e,
+    0x30, 0x30, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
+    0x63, 0x74, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22,
+    0x3e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
+    0x20, 0x5a, 0x79, 0x6c, 0x69, 0x6e, 0x20, 0x41,
+    0x53, 0x3c, 0x2f, 0x61, 0x3e, 0x0d, 0x0a, 0x3c,
+    0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f,
+    0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x72,
+    0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73,
+    0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61,
+    0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
+    0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23,
+    0x64, 0x38, 0x64, 0x37, 0x64, 0x37, 0x3b, 0x68,
+    0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x31, 0x35,
+    0x70, 0x78, 0x3b, 0x22, 0x20, 0x63, 0x6f, 0x6c,
+    0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22, 0x33, 0x22,
+    0x2f, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x72,
+    0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x72, 0x3e, 0x0d,
+    0x0a, 0x3c, 0x74, 0x64, 0x20, 0x63, 0x6f, 0x6c,
+    0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22, 0x33, 0x22,
+    0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x61, 0x62, 0x6c,
+    0x65, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d,
+    0x22, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
+    0x3a, 0x30, 0x70, 0x78, 0x3b, 0x62, 0x6f, 0x72,
+    0x64, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6c, 0x6c,
+    0x61, 0x70, 0x73, 0x65, 0x3a, 0x63, 0x6f, 0x6c,
+    0x6c, 0x61, 0x70, 0x73, 0x65, 0x3b, 0x22, 0x3e,
     0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73, 0x74,
     0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61, 0x63,
     0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d,
     0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x64,
-    0x38, 0x64, 0x37, 0x64, 0x37, 0x3b, 0x68, 0x65,
-    0x69, 0x67, 0x68, 0x74, 0x3a, 0x31, 0x35, 0x70,
-    0x78, 0x3b, 0x22, 0x20, 0x63, 0x6f, 0x6c, 0x73,
-    0x70, 0x61, 0x6e, 0x3d, 0x22, 0x33, 0x22, 0x2f,
-    0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e,
-    0x0d, 0x0a, 0x3c, 0x74, 0x72, 0x3e, 0x0d, 0x0a,
-    0x3c, 0x74, 0x64, 0x20, 0x63, 0x6f, 0x6c, 0x73,
-    0x70, 0x61, 0x6e, 0x3d, 0x22, 0x33, 0x22, 0x3e,
-    0x0d, 0x0a, 0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65,
-    0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
-    0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a,
-    0x30, 0x70, 0x78, 0x3b, 0x62, 0x6f, 0x72, 0x64,
-    0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
-    0x70, 0x73, 0x65, 0x3a, 0x63, 0x6f, 0x6c, 0x6c,
-    0x61, 0x70, 0x73, 0x65, 0x3b, 0x22, 0x3e, 0x0d,
+    0x38, 0x64, 0x37, 0x64, 0x37, 0x3b, 0x77, 0x69,
+    0x64, 0x74, 0x68, 0x3a, 0x31, 0x30, 0x70, 0x78,
+    0x3b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a,
+    0x31, 0x70, 0x78, 0x22, 0x2f, 0x3e, 0x0d, 0x0a,
+    0x3c, 0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c,
+    0x65, 0x3d, 0x22, 0x62, 0x61, 0x63, 0x6b, 0x67,
+    0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f,
+    0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x39, 0x39, 0x39,
+    0x39, 0x39, 0x39, 0x3b, 0x77, 0x69, 0x64, 0x74,
+    0x68, 0x3a, 0x32, 0x32, 0x35, 0x70, 0x78, 0x3b,
+    0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a,
+    0x31, 0x70, 0x78, 0x3b, 0x22, 0x2f, 0x3e, 0x0d,
     0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73, 0x74, 0x79,
     0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61, 0x63, 0x6b,
     0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63,
@@ -35179,164 +35306,149 @@
     0x74, 0x68, 0x3a, 0x31, 0x30, 0x70, 0x78, 0x3b,
     0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x31,
     0x70, 0x78, 0x22, 0x2f, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
-    0x3d, 0x22, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
-    0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x6c,
-    0x6f, 0x72, 0x3a, 0x23, 0x39, 0x39, 0x39, 0x39,
-    0x39, 0x39, 0x3b, 0x77, 0x69, 0x64, 0x74, 0x68,
-    0x3a, 0x32, 0x32, 0x35, 0x70, 0x78, 0x3b, 0x20,
+    0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x0d,
+    0x0a, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a,
+    0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c,
+    0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64,
+    0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
+    0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
+    0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
+    0x3a, 0x23, 0x64, 0x38, 0x64, 0x37, 0x64, 0x37,
+    0x3b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a,
+    0x31, 0x35, 0x70, 0x78, 0x3b, 0x22, 0x20, 0x63,
+    0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22,
+    0x33, 0x22, 0x2f, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f,
+    0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x72,
+    0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
     0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x31,
-    0x70, 0x78, 0x3b, 0x22, 0x2f, 0x3e, 0x0d, 0x0a,
+    0x30, 0x30, 0x25, 0x3b, 0x22, 0x3e, 0x0d, 0x0a,
     0x3c, 0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c,
-    0x65, 0x3d, 0x22, 0x62, 0x61, 0x63, 0x6b, 0x67,
-    0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f,
-    0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x64, 0x38, 0x64,
-    0x37, 0x64, 0x37, 0x3b, 0x77, 0x69, 0x64, 0x74,
-    0x68, 0x3a, 0x31, 0x30, 0x70, 0x78, 0x3b, 0x68,
-    0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x31, 0x70,
-    0x78, 0x22, 0x2f, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f,
-    0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x0d, 0x0a,
+    0x65, 0x3d, 0x22, 0x68, 0x65, 0x69, 0x67, 0x68,
+    0x74, 0x3a, 0x31, 0x30, 0x30, 0x25, 0x3b, 0x62,
+    0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
+    0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a,
+    0x23, 0x64, 0x38, 0x64, 0x37, 0x64, 0x37, 0x3b,
+    0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d,
+    0x6c, 0x65, 0x66, 0x74, 0x3a, 0x31, 0x30, 0x70,
+    0x78, 0x3b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
+    0x67, 0x2d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3a,
+    0x31, 0x30, 0x70, 0x78, 0x3b, 0x22, 0x20, 0x63,
+    0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22,
+    0x33, 0x22, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
+    0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x67, 0x72,
+    0x61, 0x79, 0x22, 0x3e, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x63,
+    0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x69, 0x6e,
+    0x67, 0x20, 0x5a, 0x79, 0x6c, 0x69, 0x6e, 0x20,
+    0x77, 0x69, 0x74, 0x68, 0x20, 0x71, 0x75, 0x65,
+    0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x20,
+    0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x66,
+    0x69, 0x6c, 0x6c, 0x20, 0x69, 0x6e, 0x20, 0x61,
+    0x6e, 0x64, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69,
+    0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66,
+    0x6f, 0x72, 0x6d, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x6c, 0x6c,
+    0x6f, 0x77, 0x20, 0x75, 0x73, 0x20, 0x74, 0x69,
+    0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65,
+    0x76, 0x69, 0x65, 0x77, 0x20, 0x74, 0x68, 0x65,
+    0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
+    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64,
+    0x20, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x20,
+    0x62, 0x79, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c,
+    0x20, 0x69, 0x66, 0x20, 0x70, 0x6f, 0x73, 0x73,
+    0x69, 0x62, 0x6c, 0x65, 0x2e, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x3c, 0x70, 0x2f, 0x3e, 0x20,
+    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x4e, 0x6f,
+    0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
+    0x79, 0x6f, 0x75, 0x20, 0x63, 0x61, 0x6e, 0x20,
+    0x73, 0x65, 0x65, 0x20, 0x70, 0x72, 0x65, 0x63,
+    0x69, 0x73, 0x65, 0x6c, 0x79, 0x20, 0x77, 0x68,
+    0x61, 0x74, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72,
+    0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69,
+    0x73, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
+    0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x5a,
+    0x79, 0x6c, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20,
+    0x74, 0x68, 0x65, 0x0d, 0x0a, 0x09, 0x09, 0x09,
+    0x09, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x20, 0x74,
+    0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x20, 0x61,
+    0x6e, 0x64, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20,
+    0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x66,
+    0x69, 0x6c, 0x65, 0x73, 0x2e, 0x0d, 0x0a, 0x09,
+    0x09, 0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09, 0x09,
     0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c,
     0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74,
     0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20,
-    0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62,
-    0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
-    0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a,
-    0x23, 0x64, 0x38, 0x64, 0x37, 0x64, 0x37, 0x3b,
-    0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x31,
-    0x35, 0x70, 0x78, 0x3b, 0x22, 0x20, 0x63, 0x6f,
-    0x6c, 0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22, 0x33,
-    0x22, 0x2f, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74,
-    0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x72, 0x20,
     0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x68,
-    0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x31, 0x30,
-    0x30, 0x25, 0x3b, 0x22, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
-    0x3d, 0x22, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
-    0x3a, 0x31, 0x30, 0x30, 0x25, 0x3b, 0x62, 0x61,
-    0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
-    0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23,
-    0x64, 0x38, 0x64, 0x37, 0x64, 0x37, 0x3b, 0x70,
-    0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x6c,
-    0x65, 0x66, 0x74, 0x3a, 0x31, 0x30, 0x70, 0x78,
-    0x3b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
-    0x2d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x31,
-    0x30, 0x70, 0x78, 0x3b, 0x22, 0x20, 0x63, 0x6f,
-    0x6c, 0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22, 0x33,
-    0x22, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
-    0x22, 0x74, 0x65, 0x78, 0x74, 0x67, 0x72, 0x61,
-    0x79, 0x22, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09,
-    0x09, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x42,
-    0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x63, 0x6f,
-    0x6e, 0x74, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67,
-    0x20, 0x5a, 0x79, 0x6c, 0x69, 0x6e, 0x20, 0x77,
-    0x69, 0x74, 0x68, 0x20, 0x71, 0x75, 0x65, 0x73,
-    0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x20, 0x70,
-    0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x66, 0x69,
-    0x6c, 0x6c, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x6e,
-    0x64, 0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
-    0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x6f,
-    0x72, 0x6d, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x61, 0x6e, 0x64, 0x20, 0x61, 0x6c, 0x6c, 0x6f,
-    0x77, 0x20, 0x75, 0x73, 0x20, 0x74, 0x69, 0x6d,
-    0x65, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x76,
-    0x69, 0x65, 0x77, 0x20, 0x74, 0x68, 0x65, 0x20,
-    0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
-    0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20,
-    0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x20, 0x62,
-    0x79, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20,
-    0x69, 0x66, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69,
-    0x62, 0x6c, 0x65, 0x2e, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x3c, 0x70, 0x2f, 0x3e, 0x20, 0x0d,
-    0x0a, 0x09, 0x09, 0x09, 0x09, 0x4e, 0x6f, 0x74,
-    0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x79,
-    0x6f, 0x75, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x73,
-    0x65, 0x65, 0x20, 0x70, 0x72, 0x65, 0x63, 0x69,
-    0x73, 0x65, 0x6c, 0x79, 0x20, 0x77, 0x68, 0x61,
-    0x74, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
-    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73,
-    0x20, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
-    0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x5a, 0x79,
-    0x6c, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74,
-    0x68, 0x65, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
-    0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x20, 0x74, 0x68,
-    0x65, 0x20, 0x6c, 0x6f, 0x67, 0x20, 0x61, 0x6e,
-    0x64, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x63,
-    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x66, 0x69,
-    0x6c, 0x65, 0x73, 0x2e, 0x0d, 0x0a, 0x09, 0x09,
-    0x09, 0x09, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x3c,
+    0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x33, 0x30,
+    0x70, 0x78, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x67,
+    0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x69, 0x6d,
+    0x61, 0x67, 0x65, 0x3a, 0x75, 0x72, 0x6c, 0x28,
+    0x27, 0x2f, 0x72, 0x6f, 0x6d, 0x2f, 0x6d, 0x65,
+    0x6e, 0x75, 0x5f, 0x63, 0x75, 0x74, 0x73, 0x2f,
+    0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x6f,
+    0x74, 0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x6e, 0x67,
+    0x27, 0x29, 0x3b, 0x22, 0x20, 0x63, 0x6f, 0x6c,
+    0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22, 0x33, 0x22,
+    0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x20, 0x09, 0x09, 0x09, 0x26, 0x6e,
+    0x62, 0x73, 0x70, 0x3b, 0x0d, 0x0a, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09,
+    0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c,
+    0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f,
+    0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x0d, 0x0a,
+    0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c,
+    0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74,
+    0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x2f,
+    0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x3e, 0x0d,
+    0x0a, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x62, 0x6f,
+    0x72, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22,
+    0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x2f, 0x72,
+    0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x6e, 0x75, 0x5f,
+    0x63, 0x75, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x67,
+    0x6f, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d,
+    0x2e, 0x70, 0x6e, 0x67, 0x22, 0x2f, 0x3e, 0x0d,
+    0x0a, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a,
+    0x3c, 0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c,
+    0x65, 0x3d, 0x22, 0x70, 0x61, 0x64, 0x64, 0x69,
+    0x6e, 0x67, 0x2d, 0x74, 0x6f, 0x70, 0x3a, 0x31,
+    0x30, 0x70, 0x78, 0x3b, 0x70, 0x61, 0x64, 0x64,
+    0x69, 0x6e, 0x67, 0x2d, 0x6c, 0x65, 0x66, 0x74,
+    0x3a, 0x31, 0x30, 0x70, 0x78, 0x3b, 0x6d, 0x61,
+    0x72, 0x67, 0x69, 0x6e, 0x2d, 0x74, 0x6f, 0x70,
+    0x3a, 0x31, 0x30, 0x70, 0x78, 0x3b, 0x22, 0x20,
+    0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x74,
+    0x65, 0x78, 0x74, 0x6c, 0x69, 0x67, 0x68, 0x74,
+    0x22, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09,
+    0x09, 0x09, 0x09, 0x5a, 0x79, 0x6c, 0x69, 0x6e,
+    0x20, 0x41, 0x53, 0x2c, 0x20, 0x41, 0x75, 0x67,
+    0x6c, 0x65, 0x6e, 0x64, 0x73, 0x64, 0x61, 0x6c,
+    0x65, 0x6e, 0x20, 0x37, 0x38, 0x2c, 0x20, 0x4e,
+    0x2d, 0x34, 0x30, 0x31, 0x37, 0x20, 0x53, 0x74,
+    0x61, 0x76, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x2c,
+    0x20, 0x4e, 0x6f, 0x72, 0x77, 0x61, 0x79, 0x20,
+    0x2d, 0x20, 0x77, 0x77, 0x77, 0x2e, 0x7a, 0x79,
+    0x6c, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x0d,
+    0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x3c,
     0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f,
-    0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x72,
-    0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x20, 0x73,
-    0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x68, 0x65,
-    0x69, 0x67, 0x68, 0x74, 0x3a, 0x33, 0x30, 0x70,
-    0x78, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
-    0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x69, 0x6d, 0x61,
-    0x67, 0x65, 0x3a, 0x75, 0x72, 0x6c, 0x28, 0x27,
-    0x2f, 0x72, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x6e,
-    0x75, 0x5f, 0x63, 0x75, 0x74, 0x73, 0x2f, 0x72,
-    0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x6f, 0x74,
-    0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x6e, 0x67, 0x27,
-    0x29, 0x3b, 0x22, 0x20, 0x63, 0x6f, 0x6c, 0x73,
-    0x70, 0x61, 0x6e, 0x3d, 0x22, 0x33, 0x22, 0x3e,
-    0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x20, 0x09, 0x09, 0x09, 0x26, 0x6e, 0x62,
-    0x73, 0x70, 0x3b, 0x0d, 0x0a, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x09, 0x09, 0x20, 0x09, 0x09, 0x3c,
-    0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f,
     0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74,
     0x61, 0x62, 0x6c, 0x65, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f,
-    0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x72,
-    0x3e, 0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x2f, 0x3e,
-    0x0d, 0x0a, 0x3c, 0x74, 0x64, 0x3e, 0x0d, 0x0a,
-    0x3c, 0x69, 0x6d, 0x67, 0x20, 0x62, 0x6f, 0x72,
-    0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x20,
-    0x73, 0x72, 0x63, 0x3d, 0x22, 0x2f, 0x72, 0x6f,
-    0x6d, 0x2f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x63,
-    0x75, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x6f,
-    0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x2e,
-    0x70, 0x6e, 0x67, 0x22, 0x2f, 0x3e, 0x0d, 0x0a,
-    0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x74, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
-    0x3d, 0x22, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
-    0x67, 0x2d, 0x74, 0x6f, 0x70, 0x3a, 0x31, 0x30,
-    0x70, 0x78, 0x3b, 0x70, 0x61, 0x64, 0x64, 0x69,
-    0x6e, 0x67, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x3a,
-    0x31, 0x30, 0x70, 0x78, 0x3b, 0x6d, 0x61, 0x72,
-    0x67, 0x69, 0x6e, 0x2d, 0x74, 0x6f, 0x70, 0x3a,
-    0x31, 0x30, 0x70, 0x78, 0x3b, 0x22, 0x20, 0x63,
-    0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x74, 0x65,
-    0x78, 0x74, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x22,
-    0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x09, 0x09, 0x09,
-    0x09, 0x09, 0x5a, 0x79, 0x6c, 0x69, 0x6e, 0x20,
-    0x41, 0x53, 0x2c, 0x20, 0x41, 0x75, 0x67, 0x6c,
-    0x65, 0x6e, 0x64, 0x73, 0x64, 0x61, 0x6c, 0x65,
-    0x6e, 0x20, 0x37, 0x38, 0x2c, 0x20, 0x4e, 0x2d,
-    0x34, 0x30, 0x31, 0x37, 0x20, 0x53, 0x74, 0x61,
-    0x76, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x2c, 0x20,
-    0x4e, 0x6f, 0x72, 0x77, 0x61, 0x79, 0x20, 0x2d,
-    0x20, 0x77, 0x77, 0x77, 0x2e, 0x7a, 0x79, 0x6c,
-    0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x0d, 0x0a,
-    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x3c, 0x2f,
-    0x74, 0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74,
-    0x72, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x74, 0x61,
-    0x62, 0x6c, 0x65, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f,
-    0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0d, 0x0a, 0x3c,
-    0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0d, 0x0a,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x09,
-    0x0d, 0x0a, 0x09, 0x0d, 0x0a, 0x09, 0x0d, 0x0a,
-    0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x73, 0x74, 0x61,
-    0x72, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
-    0x65, 0x64, 0x20, 0x22, 0x68, 0x74, 0x6d, 0x6c,
-    0x22, 0x0d, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65,
-    0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64,
-    0x20, 0x24, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
-    0x0d, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68,
-    0x75, 0x6e, 0x6b, 0x65, 0x64, 0x0d, 0x0a, 0x0d,
-    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0d, 0x0a,
+    0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x09,
+    0x09, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x09,
+    0x09, 0x0d, 0x0a, 0x09, 0x0d, 0x0a, 0x09, 0x0d,
+    0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x73, 0x74,
+    0x61, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e,
+    0x6b, 0x65, 0x64, 0x20, 0x22, 0x68, 0x74, 0x6d,
+    0x6c, 0x22, 0x0d, 0x0a, 0x77, 0x72, 0x69, 0x74,
+    0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65,
+    0x64, 0x20, 0x24, 0x62, 0x75, 0x66, 0x66, 0x65,
+    0x72, 0x0d, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x63,
+    0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
     0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x2e,
     0x74, 0x63, 0x6c, 0x20, 0x62, 0x79, 0x20, 0x68,
@@ -44393,6 +44505,42 @@
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x0d, 0x0a, 0x23,
+    0x20, 0x4f, 0x6c, 0x69, 0x6d, 0x65, 0x78, 0x20,
+    0x4c, 0x50, 0x43, 0x32, 0x33, 0x37, 0x38, 0x53,
+    0x54, 0x4b, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x20,
+    0x62, 0x6f, 0x61, 0x72, 0x64, 0x0d, 0x0a, 0x23,
+    0x0d, 0x0a, 0x23, 0x20, 0x68, 0x74, 0x74, 0x70,
+    0x3a, 0x2f, 0x2f, 0x6f, 0x6c, 0x69, 0x6d, 0x65,
+    0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65,
+    0x76, 0x2f, 0x6c, 0x70, 0x63, 0x2d, 0x32, 0x33,
+    0x37, 0x38, 0x73, 0x74, 0x6b, 0x2e, 0x68, 0x74,
+    0x6d, 0x6c, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x23,
+    0x20, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x3a,
+    0x20, 0x53, 0x74, 0x65, 0x6e, 0x2c, 0x20, 0x64,
+    0x65, 0x62, 0x69, 0x61, 0x6e, 0x40, 0x73, 0x61,
+    0x6e, 0x73, 0x79, 0x73, 0x2d, 0x65, 0x6c, 0x65,
+    0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x2e,
+    0x63, 0x6f, 0x6d, 0x0d, 0x0a, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20,
+    0x5b, 0x66, 0x69, 0x6e, 0x64, 0x20, 0x74, 0x61,
+    0x72, 0x67, 0x65, 0x74, 0x2f, 0x6c, 0x70, 0x63,
+    0x32, 0x33, 0x37, 0x38, 0x2e, 0x63, 0x66, 0x67,
+    0x5d, 0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x0d, 0x0a, 0x23, 0x20, 0x4f, 0x6c, 0x69,
     0x6d, 0x65, 0x78, 0x20, 0x4c, 0x50, 0x43, 0x2d,
     0x48, 0x32, 0x31, 0x34, 0x38, 0x20, 0x65, 0x76,
@@ -44453,6 +44601,22 @@
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x4f, 0x6c, 0x69,
+    0x6d, 0x65, 0x78, 0x20, 0x53, 0x54, 0x4d, 0x33,
+    0x32, 0x2d, 0x48, 0x31, 0x30, 0x33, 0x20, 0x65,
+    0x76, 0x61, 0x6c, 0x20, 0x62, 0x6f, 0x61, 0x72,
+    0x64, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x23, 0x20,
+    0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f,
+    0x6c, 0x69, 0x6d, 0x65, 0x78, 0x2e, 0x63, 0x6f,
+    0x6d, 0x2f, 0x64, 0x65, 0x76, 0x2f, 0x73, 0x74,
+    0x6d, 0x33, 0x32, 0x2d, 0x68, 0x31, 0x30, 0x33,
+    0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x0d, 0x0a, 0x23,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x73, 0x6f, 0x75, 0x72,
+    0x63, 0x65, 0x20, 0x5b, 0x66, 0x69, 0x6e, 0x64,
+    0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2f,
+    0x73, 0x74, 0x6d, 0x33, 0x32, 0x2e, 0x63, 0x66,
+    0x67, 0x5d, 0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x20, 0x54, 0x68, 0x65, 0x20, 0x4f, 0x6c,
     0x69, 0x6d, 0x65, 0x78, 0x20, 0x50, 0x49, 0x43,
     0x2d, 0x50, 0x33, 0x32, 0x4d, 0x58, 0x20, 0x68,
@@ -44977,34 +45141,34 @@
     0x6e, 0x61, 0x6e, 0x64, 0x20, 0x77, 0x72, 0x69,
     0x74, 0x65, 0x20, 0x30, 0x20, 0x75, 0x62, 0x6f,
     0x6f, 0x74, 0x2e, 0x62, 0x69, 0x6e, 0x20, 0x30,
-    0x0d, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74,
-    0x20, 0x72, 0x75, 0x6e, 0x0d, 0x0a, 0x0d, 0x0a,
-    0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x70, 0x72, 0x6f,
-    0x63, 0x20, 0x73, 0x68, 0x65, 0x65, 0x76, 0x61,
-    0x70, 0x6c, 0x75, 0x67, 0x5f, 0x6c, 0x6f, 0x61,
-    0x64, 0x5f, 0x75, 0x62, 0x6f, 0x6f, 0x74, 0x20,
-    0x7b, 0x20, 0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x0d,
-    0x0a, 0x09, 0x23, 0x20, 0x6c, 0x6f, 0x61, 0x64,
-    0x20, 0x75, 0x2d, 0x42, 0x6f, 0x6f, 0x74, 0x20,
-    0x69, 0x6e, 0x74, 0x6f, 0x20, 0x52, 0x41, 0x4d,
-    0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x78, 0x65,
-    0x63, 0x75, 0x74, 0x65, 0x20, 0x69, 0x74, 0x0d,
-    0x0a, 0x09, 0x73, 0x68, 0x65, 0x65, 0x76, 0x61,
-    0x70, 0x6c, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x69,
-    0x74, 0x0d, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x64,
-    0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x2f,
-    0x74, 0x6d, 0x70, 0x2f, 0x75, 0x62, 0x6f, 0x6f,
-    0x74, 0x2e, 0x65, 0x6c, 0x66, 0x0d, 0x0a, 0x09,
-    0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x69,
-    0x6d, 0x61, 0x67, 0x65, 0x20, 0x75, 0x62, 0x6f,
+    0x20, 0x6f, 0x6f, 0x62, 0x5f, 0x73, 0x6f, 0x66,
+    0x74, 0x65, 0x63, 0x63, 0x0d, 0x0a, 0x09, 0x72,
+    0x65, 0x73, 0x75, 0x6d, 0x65, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x70, 0x72,
+    0x6f, 0x63, 0x20, 0x73, 0x68, 0x65, 0x65, 0x76,
+    0x61, 0x70, 0x6c, 0x75, 0x67, 0x5f, 0x6c, 0x6f,
+    0x61, 0x64, 0x5f, 0x75, 0x62, 0x6f, 0x6f, 0x74,
+    0x20, 0x7b, 0x20, 0x7d, 0x20, 0x7b, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x09, 0x23, 0x20, 0x6c, 0x6f, 0x61,
+    0x64, 0x20, 0x75, 0x2d, 0x42, 0x6f, 0x6f, 0x74,
+    0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x52, 0x41,
+    0x4d, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x78,
+    0x65, 0x63, 0x75, 0x74, 0x65, 0x20, 0x69, 0x74,
+    0x0d, 0x0a, 0x09, 0x73, 0x68, 0x65, 0x65, 0x76,
+    0x61, 0x70, 0x6c, 0x75, 0x67, 0x5f, 0x69, 0x6e,
+    0x69, 0x74, 0x0d, 0x0a, 0x09, 0x6c, 0x6f, 0x61,
+    0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20,
+    0x2f, 0x74, 0x6d, 0x70, 0x2f, 0x75, 0x62, 0x6f,
     0x6f, 0x74, 0x2e, 0x65, 0x6c, 0x66, 0x0d, 0x0a,
-    0x09, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x20,
-    0x30, 0x78, 0x30, 0x30, 0x36, 0x30, 0x30, 0x30,
-    0x30, 0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x7d, 0x0d,
-    0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f,
+    0x69, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x75, 0x62,
+    0x6f, 0x6f, 0x74, 0x2e, 0x65, 0x6c, 0x66, 0x0d,
+    0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
+    0x20, 0x30, 0x78, 0x30, 0x30, 0x36, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x7d,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69,
     0x73, 0x20, 0x61, 0x6e, 0x20, 0x53, 0x54, 0x4d,
     0x33, 0x32, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x20,
@@ -45030,19 +45194,11 @@
     0x32, 0x46, 0x31, 0x30, 0x33, 0x56, 0x42, 0x54,
     0x36, 0x20, 0x63, 0x68, 0x69, 0x70, 0x20, 0x6f,
     0x6e, 0x20, 0x69, 0x74, 0x2e, 0x0d, 0x0a, 0x0d,
-    0x0a, 0x23, 0x20, 0x4d, 0x79, 0x20, 0x74, 0x65,
-    0x73, 0x74, 0x20, 0x62, 0x6f, 0x61, 0x72, 0x64,
-    0x20, 0x68, 0x61, 0x73, 0x20, 0x61, 0x20, 0x22,
-    0x52, 0x65, 0x76, 0x31, 0x22, 0x20, 0x74, 0x61,
-    0x70, 0x20, 0x69, 0x64, 0x2e, 0x0d, 0x0a, 0x73,
-    0x65, 0x74, 0x20, 0x42, 0x53, 0x54, 0x41, 0x50,
-    0x49, 0x44, 0x20, 0x30, 0x78, 0x31, 0x36, 0x34,
-    0x31, 0x30, 0x30, 0x34, 0x31, 0x0d, 0x0a, 0x73,
-    0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x5b, 0x66,
-    0x69, 0x6e, 0x64, 0x20, 0x74, 0x61, 0x72, 0x67,
-    0x65, 0x74, 0x2f, 0x73, 0x74, 0x6d, 0x33, 0x32,
-    0x2e, 0x63, 0x66, 0x67, 0x5d, 0x0d, 0x0a, 0x0d,
-    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20,
+    0x5b, 0x66, 0x69, 0x6e, 0x64, 0x20, 0x74, 0x61,
+    0x72, 0x67, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x6d,
+    0x33, 0x32, 0x2e, 0x63, 0x66, 0x67, 0x5d, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x0d, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
@@ -45061,8 +45217,8 @@
     0x0a, 0x6a, 0x74, 0x61, 0x67, 0x5f, 0x72, 0x65,
     0x73, 0x65, 0x74, 0x20, 0x30, 0x20, 0x30, 0x0d,
     0x0a, 0x0d, 0x0a, 0x65, 0x6e, 0x64, 0x73, 0x74,
-    0x61, 0x74, 0x65, 0x20, 0x49, 0x44, 0x4c, 0x45,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00,
+    0x61, 0x74, 0x65, 0x20, 0x52, 0x55, 0x4e, 0x2f,
+    0x49, 0x44, 0x4c, 0x45, 0x0d, 0x0a, 0x0d, 0x0a,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x20, 0x54, 0x68, 0x61, 0x6e, 0x6b, 0x73,
@@ -50173,44 +50329,73 @@
     0xe0, 0x8d, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x23, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
-    0x61, 0x63, 0x65, 0x20, 0x41, 0x52, 0x4d, 0x2d,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x4f, 0x6c, 0x69,
+    0x6d, 0x65, 0x78, 0x20, 0x41, 0x52, 0x4d, 0x2d,
     0x4a, 0x54, 0x41, 0x47, 0x2d, 0x45, 0x57, 0x0d,
-    0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
-    0x63, 0x65, 0x20, 0x61, 0x72, 0x6d, 0x2d, 0x6a,
-    0x74, 0x61, 0x67, 0x2d, 0x65, 0x77, 0x0d, 0x0a,
+    0x0a, 0x23, 0x0d, 0x0a, 0x23, 0x20, 0x68, 0x74,
+    0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77,
+    0x2e, 0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78, 0x2e,
+    0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x76, 0x2f,
+    0x61, 0x72, 0x6d, 0x2d, 0x6a, 0x74, 0x61, 0x67,
+    0x2d, 0x65, 0x77, 0x2e, 0x68, 0x74, 0x6d, 0x6c,
+    0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x0d, 0x0a, 0x69,
+    0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
+    0x20, 0x61, 0x72, 0x6d, 0x2d, 0x6a, 0x74, 0x61,
+    0x67, 0x2d, 0x65, 0x77, 0x0d, 0x0a, 0x0d, 0x0a,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x23, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
-    0x63, 0x65, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65,
-    0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x66, 0x74,
-    0x32, 0x32, 0x33, 0x32, 0x0d, 0x0a, 0x66, 0x74,
-    0x32, 0x32, 0x33, 0x32, 0x5f, 0x64, 0x65, 0x76,
-    0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
-    0x20, 0x22, 0x4f, 0x6c, 0x69, 0x6d, 0x65, 0x78,
-    0x20, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x43, 0x44,
-    0x20, 0x4a, 0x54, 0x41, 0x47, 0x20, 0x41, 0x22,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x4f, 0x6c, 0x69,
+    0x6d, 0x65, 0x78, 0x20, 0x41, 0x52, 0x4d, 0x2d,
+    0x55, 0x53, 0x42, 0x2d, 0x4f, 0x43, 0x44, 0x0d,
+    0x0a, 0x23, 0x0d, 0x0a, 0x23, 0x20, 0x68, 0x74,
+    0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77,
+    0x2e, 0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78, 0x2e,
+    0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x76, 0x2f,
+    0x61, 0x72, 0x6d, 0x2d, 0x75, 0x73, 0x62, 0x2d,
+    0x6f, 0x63, 0x64, 0x2e, 0x68, 0x74, 0x6d, 0x6c,
+    0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x0d, 0x0a, 0x69,
+    0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
+    0x20, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32, 0x0d,
+    0x0a, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32, 0x5f,
+    0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64,
+    0x65, 0x73, 0x63, 0x20, 0x22, 0x4f, 0x6c, 0x69,
+    0x6d, 0x65, 0x78, 0x20, 0x4f, 0x70, 0x65, 0x6e,
+    0x4f, 0x43, 0x44, 0x20, 0x4a, 0x54, 0x41, 0x47,
+    0x20, 0x41, 0x22, 0x0d, 0x0a, 0x66, 0x74, 0x32,
+    0x32, 0x33, 0x32, 0x5f, 0x6c, 0x61, 0x79, 0x6f,
+    0x75, 0x74, 0x20, 0x22, 0x6f, 0x6c, 0x69, 0x6d,
+    0x65, 0x78, 0x2d, 0x6a, 0x74, 0x61, 0x67, 0x22,
     0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32,
-    0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x20,
-    0x22, 0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78, 0x2d,
-    0x6a, 0x74, 0x61, 0x67, 0x22, 0x0d, 0x0a, 0x66,
-    0x74, 0x32, 0x32, 0x33, 0x32, 0x5f, 0x76, 0x69,
-    0x64, 0x5f, 0x70, 0x69, 0x64, 0x20, 0x30, 0x78,
-    0x31, 0x35, 0x42, 0x41, 0x20, 0x30, 0x78, 0x30,
-    0x30, 0x30, 0x33, 0x0d, 0x0a, 0x00, 0x00, 0x00,
+    0x5f, 0x76, 0x69, 0x64, 0x5f, 0x70, 0x69, 0x64,
+    0x20, 0x30, 0x78, 0x31, 0x35, 0x42, 0x41, 0x20,
+    0x30, 0x78, 0x30, 0x30, 0x30, 0x33, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x23, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
-    0x63, 0x65, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x56, 0x61, 0x72,
+    0x69, 0x6f, 0x75, 0x73, 0x20, 0x41, 0x74, 0x6d,
+    0x65, 0x6c, 0x20, 0x41, 0x54, 0x39, 0x31, 0x52,
+    0x4d, 0x39, 0x32, 0x30, 0x30, 0x20, 0x62, 0x6f,
+    0x61, 0x72, 0x64, 0x73, 0x0d, 0x0a, 0x23, 0x0d,
+    0x0a, 0x23, 0x20, 0x54, 0x4f, 0x44, 0x4f, 0x3a,
+    0x20, 0x55, 0x52, 0x4c, 0x3f, 0x0d, 0x0a, 0x23,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65,
     0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x61, 0x74,
     0x39, 0x31, 0x72, 0x6d, 0x39, 0x32, 0x30, 0x30,
     0x0d, 0x0a, 0x61, 0x74, 0x39, 0x31, 0x72, 0x6d,
     0x39, 0x32, 0x30, 0x30, 0x5f, 0x64, 0x65, 0x76,
     0x69, 0x63, 0x65, 0x20, 0x72, 0x65, 0x61, 0x5f,
-    0x65, 0x63, 0x72, 0x0d, 0x0a, 0x00, 0x00, 0x00,
-    0x23, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
-    0x63, 0x65, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65,
+    0x65, 0x63, 0x72, 0x0d, 0x0a, 0x0d, 0x0a, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x41, 0x78, 0x69,
+    0x6f, 0x6d, 0x20, 0x61, 0x78, 0x6d, 0x30, 0x34,
+    0x33, 0x32, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x23,
+    0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
+    0x77, 0x77, 0x77, 0x2e, 0x61, 0x78, 0x6d, 0x61,
+    0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x0d, 0x0a, 0x23,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65,
     0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x66, 0x74,
     0x32, 0x32, 0x33, 0x32, 0x0d, 0x0a, 0x66, 0x74,
     0x32, 0x32, 0x33, 0x32, 0x5f, 0x64, 0x65, 0x76,
@@ -50228,9 +50413,8 @@
     0x30, 0x31, 0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x43, 0x61, 0x6c,
-    0x61, 0x6f, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x43, 0x41, 0x4c,
+    0x41, 0x4f, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65,
     0x6d, 0x73, 0x20, 0x55, 0x53, 0x42, 0x2d, 0x41,
     0x39, 0x32, 0x36, 0x30, 0x2d, 0x43, 0x30, 0x31,
     0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x23, 0x20, 0x68,
@@ -50238,31 +50422,35 @@
     0x77, 0x2e, 0x63, 0x61, 0x6c, 0x61, 0x6f, 0x2d,
     0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2e,
     0x63, 0x6f, 0x6d, 0x2f, 0x0d, 0x0a, 0x23, 0x0d,
-    0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
-    0x63, 0x65, 0x20, 0x66, 0x74, 0x32, 0x32, 0x33,
-    0x32, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33,
-    0x32, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
-    0x20, 0x6a, 0x74, 0x61, 0x67, 0x6b, 0x65, 0x79,
-    0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32,
-    0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
-    0x64, 0x65, 0x73, 0x63, 0x20, 0x22, 0x55, 0x53,
-    0x42, 0x2d, 0x41, 0x39, 0x32, 0x36, 0x30, 0x22,
-    0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32,
-    0x5f, 0x76, 0x69, 0x64, 0x5f, 0x70, 0x69, 0x64,
-    0x20, 0x30, 0x78, 0x30, 0x34, 0x30, 0x33, 0x20,
-    0x30, 0x78, 0x36, 0x30, 0x31, 0x30, 0x0d, 0x0a,
-    0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x69,
-    0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
-    0x2f, 0x63, 0x61, 0x6c, 0x61, 0x6f, 0x2d, 0x75,
-    0x73, 0x62, 0x2d, 0x61, 0x39, 0x32, 0x36, 0x30,
-    0x2e, 0x63, 0x66, 0x67, 0x0d, 0x0a, 0x73, 0x63,
-    0x72, 0x69, 0x70, 0x74, 0x20, 0x74, 0x61, 0x72,
-    0x67, 0x65, 0x74, 0x2f, 0x61, 0x74, 0x39, 0x31,
-    0x73, 0x61, 0x6d, 0x39, 0x32, 0x36, 0x30, 0x6d,
-    0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x2e, 0x63,
-    0x66, 0x67, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00,
-    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x43, 0x61, 0x6c,
-    0x61, 0x6f, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65,
+    0x0a, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
+    0x66, 0x61, 0x63, 0x65, 0x20, 0x66, 0x74, 0x32,
+    0x32, 0x33, 0x32, 0x0d, 0x0a, 0x66, 0x74, 0x32,
+    0x32, 0x33, 0x32, 0x5f, 0x6c, 0x61, 0x79, 0x6f,
+    0x75, 0x74, 0x20, 0x6a, 0x74, 0x61, 0x67, 0x6b,
+    0x65, 0x79, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32,
+    0x33, 0x32, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
+    0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x20, 0x22,
+    0x55, 0x53, 0x42, 0x2d, 0x41, 0x39, 0x32, 0x36,
+    0x30, 0x20, 0x41, 0x22, 0x0d, 0x0a, 0x66, 0x74,
+    0x32, 0x32, 0x33, 0x32, 0x5f, 0x76, 0x69, 0x64,
+    0x5f, 0x70, 0x69, 0x64, 0x20, 0x30, 0x78, 0x30,
+    0x34, 0x30, 0x33, 0x20, 0x30, 0x78, 0x36, 0x30,
+    0x31, 0x30, 0x0d, 0x0a, 0x73, 0x63, 0x72, 0x69,
+    0x70, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72,
+    0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x61, 0x6c,
+    0x61, 0x6f, 0x2d, 0x75, 0x73, 0x62, 0x2d, 0x61,
+    0x39, 0x32, 0x36, 0x30, 0x2e, 0x63, 0x66, 0x67,
+    0x0d, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
+    0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2f,
+    0x61, 0x74, 0x39, 0x31, 0x73, 0x61, 0x6d, 0x39,
+    0x32, 0x36, 0x30, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
+    0x61, 0x6c, 0x2e, 0x63, 0x66, 0x67, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x43, 0x41, 0x4c,
+    0x41, 0x4f, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65,
     0x6d, 0x73, 0x20, 0x55, 0x53, 0x42, 0x2d, 0x41,
     0x39, 0x32, 0x36, 0x30, 0x2d, 0x43, 0x30, 0x32,
     0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x23, 0x20, 0x68,
@@ -50270,31 +50458,35 @@
     0x77, 0x2e, 0x63, 0x61, 0x6c, 0x61, 0x6f, 0x2d,
     0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2e,
     0x63, 0x6f, 0x6d, 0x2f, 0x0d, 0x0a, 0x23, 0x0d,
-    0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
-    0x63, 0x65, 0x20, 0x66, 0x74, 0x32, 0x32, 0x33,
-    0x32, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33,
-    0x32, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
-    0x20, 0x6a, 0x74, 0x61, 0x67, 0x6b, 0x65, 0x79,
-    0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32,
-    0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
-    0x64, 0x65, 0x73, 0x63, 0x20, 0x22, 0x55, 0x53,
-    0x42, 0x2d, 0x41, 0x39, 0x32, 0x36, 0x30, 0x20,
-    0x41, 0x22, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32,
-    0x33, 0x32, 0x5f, 0x76, 0x69, 0x64, 0x5f, 0x70,
-    0x69, 0x64, 0x20, 0x30, 0x78, 0x30, 0x34, 0x30,
-    0x33, 0x20, 0x30, 0x78, 0x36, 0x30, 0x30, 0x31,
+    0x0a, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
+    0x66, 0x61, 0x63, 0x65, 0x20, 0x66, 0x74, 0x32,
+    0x32, 0x33, 0x32, 0x0d, 0x0a, 0x66, 0x74, 0x32,
+    0x32, 0x33, 0x32, 0x5f, 0x6c, 0x61, 0x79, 0x6f,
+    0x75, 0x74, 0x20, 0x6a, 0x74, 0x61, 0x67, 0x6b,
+    0x65, 0x79, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32,
+    0x33, 0x32, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
+    0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x20, 0x22,
+    0x55, 0x53, 0x42, 0x2d, 0x41, 0x39, 0x32, 0x36,
+    0x30, 0x20, 0x41, 0x22, 0x0d, 0x0a, 0x66, 0x74,
+    0x32, 0x32, 0x33, 0x32, 0x5f, 0x76, 0x69, 0x64,
+    0x5f, 0x70, 0x69, 0x64, 0x20, 0x30, 0x78, 0x30,
+    0x34, 0x30, 0x33, 0x20, 0x30, 0x78, 0x36, 0x30,
+    0x30, 0x31, 0x0d, 0x0a, 0x73, 0x63, 0x72, 0x69,
+    0x70, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72,
+    0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x61, 0x6c,
+    0x61, 0x6f, 0x2d, 0x75, 0x73, 0x62, 0x2d, 0x61,
+    0x39, 0x32, 0x36, 0x30, 0x2e, 0x63, 0x66, 0x67,
     0x0d, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
-    0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
-    0x63, 0x65, 0x2f, 0x63, 0x61, 0x6c, 0x61, 0x6f,
-    0x2d, 0x75, 0x73, 0x62, 0x2d, 0x61, 0x39, 0x32,
-    0x36, 0x30, 0x2e, 0x63, 0x66, 0x67, 0x0d, 0x0a,
-    0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x74,
-    0x61, 0x72, 0x67, 0x65, 0x74, 0x2f, 0x61, 0x74,
-    0x39, 0x31, 0x73, 0x61, 0x6d, 0x39, 0x32, 0x36,
-    0x30, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c,
-    0x2e, 0x63, 0x66, 0x67, 0x0d, 0x0a, 0x00, 0x00,
-    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x43, 0x61, 0x6c,
-    0x61, 0x6f, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65,
+    0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2f,
+    0x61, 0x74, 0x39, 0x31, 0x73, 0x61, 0x6d, 0x39,
+    0x32, 0x36, 0x30, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
+    0x61, 0x6c, 0x2e, 0x63, 0x66, 0x67, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x43, 0x41, 0x4c,
+    0x41, 0x4f, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65,
     0x6d, 0x73, 0x20, 0x55, 0x53, 0x42, 0x2d, 0x41,
     0x39, 0x32, 0x36, 0x30, 0x20, 0x63, 0x6f, 0x6d,
     0x6d, 0x6f, 0x6e, 0x20, 0x2d, 0x43, 0x30, 0x31,
@@ -50311,128 +50503,244 @@
     0x67, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x61,
     0x6c, 0x61, 0x6f, 0x2d, 0x75, 0x73, 0x62, 0x2d,
     0x61, 0x39, 0x32, 0x36, 0x30, 0x2d, 0x63, 0x30,
-    0x32, 0x2e, 0x63, 0x66, 0x67, 0x0d, 0x0a, 0x23,
-    0x0d, 0x0a, 0x23, 0x20, 0x6e, 0x6f, 0x74, 0x65,
-    0x3a, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6d, 0x75,
-    0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20,
-    0x61, 0x6e, 0x20, 0x6f, 0x70, 0x65, 0x6e, 0x6f,
-    0x63, 0x64, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69,
-    0x6f, 0x6e, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65,
-    0x20, 0x6a, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x70,
-    0x65, 0x65, 0x64, 0x20, 0x73, 0x65, 0x74, 0x73,
-    0x20, 0x74, 0x77, 0x6f, 0x20, 0x76, 0x61, 0x6c,
-    0x75, 0x65, 0x73, 0x0d, 0x0a, 0x23, 0x20, 0x20,
-    0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x72, 0x75,
-    0x6e, 0x6b, 0x20, 0x76, 0x65, 0x72, 0x20, 0x36,
-    0x30, 0x36, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61,
-    0x69, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
-    0x66, 0x69, 0x78, 0x20, 0x66, 0x6f, 0x72, 0x20,
-    0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x61, 0x72,
-    0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x20,
-    0x69, 0x73, 0x73, 0x75, 0x65, 0x20, 0x77, 0x68,
-    0x69, 0x63, 0x68, 0x20, 0x63, 0x61, 0x6e, 0x0d,
-    0x0a, 0x23, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x32, 0x2e, 0x63, 0x66, 0x67, 0x2e, 0x0d, 0x0a,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x4e, 0x6f, 0x74,
+    0x65, 0x3a, 0x20, 0x59, 0x6f, 0x75, 0x20, 0x6d,
+    0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65,
+    0x20, 0x61, 0x6e, 0x20, 0x4f, 0x70, 0x65, 0x6e,
+    0x4f, 0x43, 0x44, 0x20, 0x76, 0x65, 0x72, 0x73,
+    0x69, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x65, 0x72,
+    0x65, 0x20, 0x6a, 0x74, 0x61, 0x67, 0x5f, 0x73,
+    0x70, 0x65, 0x65, 0x64, 0x20, 0x73, 0x65, 0x74,
+    0x73, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x76, 0x61,
+    0x6c, 0x75, 0x65, 0x73, 0x2e, 0x0d, 0x0a, 0x23,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74,
+    0x72, 0x75, 0x6e, 0x6b, 0x20, 0x72, 0x36, 0x30,
+    0x36, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
+    0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
+    0x69, 0x78, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
+    0x68, 0x69, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74,
+    0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x69,
+    0x73, 0x73, 0x75, 0x65, 0x20, 0x77, 0x68, 0x69,
+    0x63, 0x68, 0x20, 0x63, 0x61, 0x6e, 0x0d, 0x0a,
+    0x23, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
     0x62, 0x65, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x20,
     0x69, 0x66, 0x20, 0x6a, 0x74, 0x61, 0x67, 0x5f,
     0x73, 0x70, 0x65, 0x65, 0x64, 0x20, 0x64, 0x6f,
     0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73,
     0x65, 0x74, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x73,
     0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x20,
-    0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x0d, 0x0a,
-    0x23, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x5f,
-    0x73, 0x70, 0x65, 0x65, 0x64, 0x20, 0x31, 0x32,
-    0x30, 0x30, 0x20, 0x30, 0x0d, 0x0a, 0x6a, 0x74,
-    0x61, 0x67, 0x5f, 0x6e, 0x73, 0x72, 0x73, 0x74,
-    0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x20, 0x32,
-    0x30, 0x30, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67,
-    0x5f, 0x6e, 0x74, 0x72, 0x73, 0x74, 0x5f, 0x64,
-    0x65, 0x6c, 0x61, 0x79, 0x20, 0x32, 0x30, 0x30,
+    0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x0d,
+    0x0a, 0x23, 0x0d, 0x0a, 0x0d, 0x0a, 0x6a, 0x74,
+    0x61, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
+    0x20, 0x31, 0x32, 0x30, 0x30, 0x20, 0x30, 0x0d,
+    0x0a, 0x6a, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x73,
+    0x72, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61,
+    0x79, 0x20, 0x32, 0x30, 0x30, 0x0d, 0x0a, 0x6a,
+    0x74, 0x61, 0x67, 0x5f, 0x6e, 0x74, 0x72, 0x73,
+    0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x20,
+    0x32, 0x30, 0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x41, 0x6d, 0x6f,
+    0x6e, 0x74, 0x65, 0x63, 0x20, 0x43, 0x68, 0x61,
+    0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x20, 0x50,
+    0x4f, 0x44, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x23,
+    0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
+    0x77, 0x77, 0x77, 0x2e, 0x61, 0x6d, 0x6f, 0x6e,
+    0x74, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
+    0x63, 0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f,
+    0x6e, 0x2e, 0x73, 0x68, 0x74, 0x6d, 0x6c, 0x0d,
+    0x0a, 0x23, 0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x6e,
+    0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20,
+    0x70, 0x61, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x0d,
+    0x0a, 0x70, 0x61, 0x72, 0x70, 0x6f, 0x72, 0x74,
+    0x5f, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x63,
+    0x68, 0x61, 0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e,
     0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x44, 0x75, 0x6d,
+    0x6d, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72,
+    0x66, 0x61, 0x63, 0x65, 0x20, 0x28, 0x66, 0x6f,
+    0x72, 0x20, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
+    0x67, 0x20, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73,
+    0x65, 0x73, 0x29, 0x0d, 0x0a, 0x23, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
+    0x61, 0x63, 0x65, 0x20, 0x64, 0x75, 0x6d, 0x6d,
+    0x79, 0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x23, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
-    0x63, 0x65, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65,
-    0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x70, 0x61,
-    0x72, 0x70, 0x6f, 0x72, 0x74, 0x0d, 0x0a, 0x70,
-    0x61, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63,
-    0x61, 0x62, 0x6c, 0x65, 0x20, 0x63, 0x68, 0x61,
-    0x6d, 0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x0d, 0x0a,
-    0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
-    0x65, 0x20, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x0d,
-    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x23, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
-    0x61, 0x63, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x66,
-    0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
-    0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
-    0x65, 0x20, 0x54, 0x69, 0x6e, 0x43, 0x61, 0x6e,
-    0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x20, 0x46, 0x54,
-    0x32, 0x32, 0x33, 0x32, 0x20, 0x42, 0x61, 0x73,
-    0x65, 0x64, 0x20, 0x46, 0x6c, 0x79, 0x73, 0x77,
-    0x61, 0x74, 0x74, 0x65, 0x72, 0x0d, 0x0a, 0x23,
-    0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
-    0x77, 0x77, 0x77, 0x2e, 0x74, 0x69, 0x6e, 0x63,
-    0x61, 0x6e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e,
-    0x63, 0x6f, 0x6d, 0x0d, 0x0a, 0x0d, 0x0a, 0x23,
-    0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
-    0x65, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
-    0x66, 0x61, 0x63, 0x65, 0x20, 0x66, 0x74, 0x32,
-    0x32, 0x33, 0x32, 0x0d, 0x0a, 0x66, 0x74, 0x32,
-    0x32, 0x33, 0x32, 0x5f, 0x64, 0x65, 0x76, 0x69,
-    0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x20,
-    0x22, 0x46, 0x6c, 0x79, 0x73, 0x77, 0x61, 0x74,
-    0x74, 0x65, 0x72, 0x22, 0x0d, 0x0a, 0x66, 0x74,
-    0x32, 0x32, 0x33, 0x32, 0x5f, 0x6c, 0x61, 0x79,
-    0x6f, 0x75, 0x74, 0x20, 0x22, 0x66, 0x6c, 0x79,
-    0x73, 0x77, 0x61, 0x74, 0x74, 0x65, 0x72, 0x22,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x54, 0x69, 0x6e,
+    0x43, 0x61, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x73,
+    0x20, 0x46, 0x6c, 0x79, 0x73, 0x77, 0x61, 0x74,
+    0x74, 0x65, 0x72, 0x0d, 0x0a, 0x23, 0x0d, 0x0a,
+    0x23, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
+    0x2f, 0x77, 0x77, 0x77, 0x2e, 0x74, 0x69, 0x6e,
+    0x63, 0x61, 0x6e, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
+    0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f,
+    0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x68, 0x70,
+    0x3f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
+    0x69, 0x64, 0x3d, 0x31, 0x36, 0x31, 0x33, 0x34,
+    0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x0d, 0x0a, 0x69,
+    0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
+    0x20, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32, 0x0d,
+    0x0a, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32, 0x5f,
+    0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64,
+    0x65, 0x73, 0x63, 0x20, 0x22, 0x46, 0x6c, 0x79,
+    0x73, 0x77, 0x61, 0x74, 0x74, 0x65, 0x72, 0x20,
+    0x41, 0x22, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32,
+    0x33, 0x32, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75,
+    0x74, 0x20, 0x22, 0x66, 0x6c, 0x79, 0x73, 0x77,
+    0x61, 0x74, 0x74, 0x65, 0x72, 0x22, 0x0d, 0x0a,
+    0x66, 0x74, 0x32, 0x32, 0x33, 0x32, 0x5f, 0x76,
+    0x69, 0x64, 0x5f, 0x70, 0x69, 0x64, 0x20, 0x30,
+    0x78, 0x30, 0x34, 0x30, 0x33, 0x20, 0x30, 0x78,
+    0x36, 0x30, 0x31, 0x30, 0x0d, 0x0a, 0x6a, 0x74,
+    0x61, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
+    0x20, 0x31, 0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x0d, 0x0a, 0x23,
+    0x20, 0x49, 0x63, 0x65, 0x42, 0x65, 0x61, 0x72,
+    0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
+    0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0d, 0x0a,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x68, 0x74, 0x74,
+    0x70, 0x3a, 0x2f, 0x2f, 0x73, 0x65, 0x63, 0x74,
+    0x69, 0x6f, 0x6e, 0x35, 0x2e, 0x63, 0x68, 0x2f,
+    0x69, 0x63, 0x65, 0x62, 0x65, 0x61, 0x72, 0x0d,
+    0x0a, 0x23, 0x0d, 0x0a, 0x23, 0x20, 0x41, 0x75,
+    0x74, 0x68, 0x6f, 0x72, 0x3a, 0x20, 0x53, 0x74,
+    0x65, 0x6e, 0x2c, 0x20, 0x64, 0x65, 0x62, 0x69,
+    0x61, 0x6e, 0x40, 0x73, 0x61, 0x6e, 0x73, 0x79,
+    0x73, 0x2d, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72,
+    0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d,
+    0x0d, 0x0a, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x0d,
+    0x0a, 0x23, 0x0d, 0x0a, 0x23, 0x20, 0x41, 0x64,
+    0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x2f,
+    0x65, 0x74, 0x63, 0x2f, 0x75, 0x64, 0x65, 0x76,
+    0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x64,
+    0x2f, 0x34, 0x35, 0x2d, 0x69, 0x63, 0x65, 0x62,
+    0x65, 0x61, 0x72, 0x2e, 0x72, 0x75, 0x6c, 0x65,
+    0x73, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x23, 0x42,
+    0x55, 0x53, 0x21, 0x3d, 0x22, 0x75, 0x73, 0x62,
+    0x22, 0x2c, 0x20, 0x41, 0x43, 0x54, 0x49, 0x4f,
+    0x4e, 0x21, 0x3d, 0x22, 0x61, 0x64, 0x64, 0x22,
+    0x2c, 0x20, 0x53, 0x55, 0x42, 0x53, 0x59, 0x53,
+    0x54, 0x45, 0x4d, 0x21, 0x3d, 0x3d, 0x22, 0x75,
+    0x73, 0x62, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
+    0x65, 0x22, 0x2c, 0x20, 0x47, 0x4f, 0x54, 0x4f,
+    0x3d, 0x22, 0x6b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
+    0x6f, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
+    0x5f, 0x65, 0x6e, 0x64, 0x22, 0x0d, 0x0a, 0x23,
+    0x0d, 0x0a, 0x23, 0x53, 0x59, 0x53, 0x46, 0x53,
+    0x7b, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
+    0x63, 0x74, 0x7d, 0x3d, 0x3d, 0x22, 0x63, 0x31,
+    0x34, 0x30, 0x22, 0x2c, 0x20, 0x53, 0x59, 0x53,
+    0x46, 0x53, 0x7b, 0x69, 0x64, 0x56, 0x65, 0x6e,
+    0x64, 0x6f, 0x72, 0x7d, 0x3d, 0x3d, 0x22, 0x30,
+    0x34, 0x30, 0x33, 0x22, 0x2c, 0x20, 0x4d, 0x4f,
+    0x44, 0x45, 0x3d, 0x22, 0x36, 0x36, 0x36, 0x22,
+    0x2c, 0x20, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x3d,
+    0x22, 0x75, 0x73, 0x62, 0x22, 0x0d, 0x0a, 0x23,
+    0x53, 0x59, 0x53, 0x46, 0x53, 0x7b, 0x69, 0x64,
+    0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x7d,
+    0x3d, 0x3d, 0x22, 0x63, 0x31, 0x34, 0x31, 0x22,
+    0x2c, 0x20, 0x53, 0x59, 0x53, 0x46, 0x53, 0x7b,
+    0x69, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
+    0x7d, 0x3d, 0x3d, 0x22, 0x30, 0x34, 0x30, 0x33,
+    0x22, 0x2c, 0x20, 0x4d, 0x4f, 0x44, 0x45, 0x3d,
+    0x22, 0x36, 0x36, 0x36, 0x22, 0x2c, 0x20, 0x47,
+    0x52, 0x4f, 0x55, 0x50, 0x3d, 0x22, 0x75, 0x73,
+    0x62, 0x22, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x23,
+    0x4c, 0x41, 0x42, 0x45, 0x4c, 0x3d, 0x22, 0x6b,
+    0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
+    0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x6e,
+    0x64, 0x22, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
+    0x63, 0x65, 0x20, 0x66, 0x74, 0x32, 0x32, 0x33,
+    0x32, 0x0d, 0x0a, 0x23, 0x66, 0x74, 0x32, 0x32,
+    0x33, 0x32, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
+    0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x20, 0x22,
+    0x22, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33,
+    0x32, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
+    0x20, 0x69, 0x63, 0x65, 0x62, 0x65, 0x61, 0x72,
     0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32,
     0x5f, 0x76, 0x69, 0x64, 0x5f, 0x70, 0x69, 0x64,
     0x20, 0x30, 0x78, 0x30, 0x34, 0x30, 0x33, 0x20,
-    0x30, 0x78, 0x36, 0x30, 0x31, 0x30, 0x0d, 0x0a,
-    0x6a, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x70, 0x65,
-    0x65, 0x64, 0x20, 0x31, 0x0d, 0x0a, 0x00, 0x00,
+    0x30, 0x78, 0x63, 0x31, 0x34, 0x30, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x23, 0x20, 0x6a, 0x6c, 0x69, 0x6e, 0x6b, 0x20,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x53, 0x65, 0x67,
+    0x67, 0x65, 0x72, 0x20, 0x4a, 0x2d, 0x4c, 0x69,
+    0x6e, 0x6b, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x23,
+    0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
+    0x77, 0x77, 0x77, 0x2e, 0x73, 0x65, 0x67, 0x67,
+    0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a,
+    0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x68, 0x74, 0x6d,
+    0x6c, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x0d, 0x0a,
     0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
-    0x65, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
-    0x66, 0x61, 0x63, 0x65, 0x20, 0x6a, 0x6c, 0x69,
-    0x6e, 0x6b, 0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00,
+    0x65, 0x20, 0x6a, 0x6c, 0x69, 0x6e, 0x6b, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x41, 0x6d, 0x6f,
+    0x6e, 0x74, 0x65, 0x63, 0x20, 0x4a, 0x54, 0x41,
+    0x47, 0x6b, 0x65, 0x79, 0x2d, 0x74, 0x69, 0x6e,
+    0x79, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x23, 0x20,
+    0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77,
+    0x77, 0x77, 0x2e, 0x61, 0x6d, 0x6f, 0x6e, 0x74,
+    0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a,
+    0x74, 0x61, 0x67, 0x6b, 0x65, 0x79, 0x2d, 0x74,
+    0x69, 0x6e, 0x79, 0x2e, 0x73, 0x68, 0x74, 0x6d,
+    0x6c, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x23, 0x20, 0x54, 0x68, 0x65, 0x20, 0x4a, 0x54,
+    0x41, 0x47, 0x6b, 0x65, 0x79, 0x2d, 0x74, 0x69,
+    0x6e, 0x79, 0x20, 0x75, 0x73, 0x65, 0x73, 0x20,
+    0x65, 0x78, 0x61, 0x63, 0x74, 0x6c, 0x79, 0x20,
+    0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65,
+    0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20,
+    0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4a,
+    0x54, 0x41, 0x47, 0x6b, 0x65, 0x79, 0x2e, 0x0d,
+    0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20,
+    0x5b, 0x66, 0x69, 0x6e, 0x64, 0x20, 0x69, 0x6e,
+    0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
+    0x6a, 0x74, 0x61, 0x67, 0x6b, 0x65, 0x79, 0x2e,
+    0x63, 0x66, 0x67, 0x5d, 0x0d, 0x0a, 0x0d, 0x0a,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x41, 0x6d, 0x6f,
+    0x6e, 0x74, 0x65, 0x63, 0x20, 0x4a, 0x54, 0x41,
+    0x47, 0x6b, 0x65, 0x79, 0x0d, 0x0a, 0x23, 0x0d,
+    0x0a, 0x23, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a,
+    0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x61, 0x6d,
+    0x6f, 0x6e, 0x74, 0x65, 0x63, 0x2e, 0x63, 0x6f,
+    0x6d, 0x2f, 0x6a, 0x74, 0x61, 0x67, 0x6b, 0x65,
+    0x79, 0x2e, 0x73, 0x68, 0x74, 0x6d, 0x6c, 0x0d,
+    0x0a, 0x23, 0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x6e,
+    0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20,
+    0x66, 0x74, 0x32, 0x32, 0x33, 0x32, 0x0d, 0x0a,
+    0x66, 0x74, 0x32, 0x32, 0x33, 0x32, 0x5f, 0x64,
+    0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65,
+    0x73, 0x63, 0x20, 0x22, 0x41, 0x6d, 0x6f, 0x6e,
+    0x74, 0x65, 0x63, 0x20, 0x4a, 0x54, 0x41, 0x47,
+    0x6b, 0x65, 0x79, 0x20, 0x41, 0x22, 0x0d, 0x0a,
+    0x66, 0x74, 0x32, 0x32, 0x33, 0x32, 0x5f, 0x6c,
+    0x61, 0x79, 0x6f, 0x75, 0x74, 0x20, 0x6a, 0x74,
+    0x61, 0x67, 0x6b, 0x65, 0x79, 0x0d, 0x0a, 0x66,
+    0x74, 0x32, 0x32, 0x33, 0x32, 0x5f, 0x76, 0x69,
+    0x64, 0x5f, 0x70, 0x69, 0x64, 0x20, 0x30, 0x78,
+    0x30, 0x34, 0x30, 0x33, 0x20, 0x30, 0x78, 0x63,
+    0x66, 0x66, 0x38, 0x0d, 0x0a, 0x0d, 0x0a, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x23, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
-    0x63, 0x65, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65,
-    0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x66, 0x74,
-    0x32, 0x32, 0x33, 0x32, 0x0d, 0x0a, 0x66, 0x74,
-    0x32, 0x32, 0x33, 0x32, 0x5f, 0x64, 0x65, 0x76,
-    0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
-    0x20, 0x22, 0x41, 0x6d, 0x6f, 0x6e, 0x74, 0x65,
-    0x63, 0x20, 0x4a, 0x54, 0x41, 0x47, 0x6b, 0x65,
-    0x79, 0x22, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32,
-    0x33, 0x32, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75,
-    0x74, 0x20, 0x6a, 0x74, 0x61, 0x67, 0x6b, 0x65,
-    0x79, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33,
-    0x32, 0x5f, 0x76, 0x69, 0x64, 0x5f, 0x70, 0x69,
-    0x64, 0x20, 0x30, 0x78, 0x30, 0x34, 0x30, 0x33,
-    0x20, 0x30, 0x78, 0x63, 0x66, 0x66, 0x38, 0x0d,
-    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x23, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
-    0x63, 0x65, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65,
-    0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x66, 0x74,
-    0x32, 0x32, 0x33, 0x32, 0x0d, 0x0a, 0x66, 0x74,
-    0x32, 0x32, 0x33, 0x32, 0x5f, 0x64, 0x65, 0x76,
-    0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
-    0x20, 0x22, 0x41, 0x6d, 0x6f, 0x6e, 0x74, 0x65,
-    0x63, 0x20, 0x4a, 0x54, 0x41, 0x47, 0x6b, 0x65,
-    0x79, 0x20, 0x41, 0x22, 0x0d, 0x0a, 0x66, 0x74,
-    0x32, 0x32, 0x33, 0x32, 0x5f, 0x6c, 0x61, 0x79,
-    0x6f, 0x75, 0x74, 0x20, 0x6a, 0x74, 0x61, 0x67,
-    0x6b, 0x65, 0x79, 0x0d, 0x0a, 0x66, 0x74, 0x32,
-    0x32, 0x33, 0x32, 0x5f, 0x76, 0x69, 0x64, 0x5f,
-    0x70, 0x69, 0x64, 0x20, 0x30, 0x78, 0x30, 0x34,
-    0x30, 0x33, 0x20, 0x30, 0x78, 0x63, 0x66, 0x66,
-    0x38, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x20, 0x66, 0x74, 0x64, 0x69, 0x20, 0x69,
     0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
     0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6c,
@@ -50457,8 +50765,23 @@
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x23, 0x20, 0x66, 0x74, 0x64, 0x69, 0x20, 0x69,
-    0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x4c, 0x75, 0x6d,
+    0x69, 0x6e, 0x61, 0x72, 0x79, 0x20, 0x4d, 0x69,
+    0x63, 0x72, 0x6f, 0x20, 0x53, 0x74, 0x65, 0x6c,
+    0x6c, 0x61, 0x72, 0x69, 0x73, 0x20, 0x4c, 0x4d,
+    0x33, 0x53, 0x38, 0x31, 0x31, 0x20, 0x45, 0x76,
+    0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
+    0x20, 0x4b, 0x69, 0x74, 0x0d, 0x0a, 0x23, 0x0d,
+    0x0a, 0x23, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a,
+    0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x6c, 0x75,
+    0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x6d, 0x69,
+    0x63, 0x72, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
+    0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
+    0x2f, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72,
+    0x69, 0x73, 0x5f, 0x38, 0x31, 0x31, 0x5f, 0x65,
+    0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
+    0x6e, 0x5f, 0x6b, 0x69, 0x74, 0x73, 0x2e, 0x68,
+    0x74, 0x6d, 0x6c, 0x0d, 0x0a, 0x23, 0x0d, 0x0a,
     0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
     0x61, 0x63, 0x65, 0x20, 0x66, 0x74, 0x32, 0x32,
     0x33, 0x32, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32,
@@ -50473,42 +50796,71 @@
     0x6d, 0x33, 0x73, 0x38, 0x31, 0x31, 0x0d, 0x0a,
     0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x23, 0x20, 0x66, 0x74, 0x64, 0x69, 0x20, 0x69,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x4c, 0x75, 0x6d,
+    0x69, 0x6e, 0x61, 0x72, 0x79, 0x20, 0x4d, 0x69,
+    0x63, 0x72, 0x6f, 0x20, 0x53, 0x74, 0x65, 0x6c,
+    0x6c, 0x61, 0x72, 0x69, 0x73, 0x20, 0x4c, 0x4d,
+    0x33, 0x53, 0x38, 0x31, 0x31, 0x20, 0x45, 0x76,
+    0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
+    0x20, 0x4b, 0x69, 0x74, 0x0d, 0x0a, 0x23, 0x0d,
+    0x0a, 0x23, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a,
+    0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x6c, 0x75,
+    0x6d, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x6d, 0x69,
+    0x63, 0x72, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
+    0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
+    0x2f, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72,
+    0x69, 0x73, 0x5f, 0x38, 0x31, 0x31, 0x5f, 0x65,
+    0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
+    0x6e, 0x5f, 0x6b, 0x69, 0x74, 0x73, 0x2e, 0x68,
+    0x74, 0x6d, 0x6c, 0x0d, 0x0a, 0x23, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
+    0x61, 0x63, 0x65, 0x20, 0x66, 0x74, 0x32, 0x32,
+    0x33, 0x32, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32,
+    0x33, 0x32, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
+    0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x20, 0x22,
+    0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x69,
+    0x73, 0x20, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
+    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x42, 0x6f, 0x61,
+    0x72, 0x64, 0x20, 0x41, 0x22, 0x0d, 0x0a, 0x66,
+    0x74, 0x32, 0x32, 0x33, 0x32, 0x5f, 0x6c, 0x61,
+    0x79, 0x6f, 0x75, 0x74, 0x20, 0x65, 0x76, 0x62,
+    0x5f, 0x6c, 0x6d, 0x33, 0x73, 0x38, 0x31, 0x31,
+    0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32,
+    0x5f, 0x76, 0x69, 0x64, 0x5f, 0x70, 0x69, 0x64,
+    0x20, 0x30, 0x78, 0x30, 0x34, 0x30, 0x33, 0x20,
+    0x30, 0x78, 0x62, 0x63, 0x64, 0x39, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x4f, 0x6c, 0x69,
+    0x6d, 0x65, 0x78, 0x20, 0x41, 0x52, 0x4d, 0x2d,
+    0x55, 0x53, 0x42, 0x2d, 0x4f, 0x43, 0x44, 0x0d,
+    0x0a, 0x23, 0x0d, 0x0a, 0x23, 0x20, 0x68, 0x74,
+    0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77,
+    0x2e, 0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78, 0x2e,
+    0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x76, 0x2f,
+    0x61, 0x72, 0x6d, 0x2d, 0x75, 0x73, 0x62, 0x2d,
+    0x6f, 0x63, 0x64, 0x2e, 0x68, 0x74, 0x6d, 0x6c,
+    0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x0d, 0x0a, 0x69,
     0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
-    0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x66,
-    0x74, 0x64, 0x69, 0x20, 0x64, 0x72, 0x69, 0x76,
-    0x65, 0x72, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65,
-    0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x66, 0x74,
-    0x32, 0x32, 0x33, 0x32, 0x0d, 0x0a, 0x66, 0x74,
-    0x32, 0x32, 0x33, 0x32, 0x5f, 0x64, 0x65, 0x76,
-    0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
-    0x20, 0x22, 0x53, 0x74, 0x65, 0x6c, 0x6c, 0x61,
-    0x72, 0x69, 0x73, 0x20, 0x45, 0x76, 0x61, 0x6c,
-    0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x42,
-    0x6f, 0x61, 0x72, 0x64, 0x20, 0x41, 0x22, 0x0d,
+    0x20, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32, 0x0d,
     0x0a, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32, 0x5f,
-    0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x20, 0x65,
-    0x76, 0x62, 0x5f, 0x6c, 0x6d, 0x33, 0x73, 0x38,
-    0x31, 0x31, 0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00,
+    0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64,
+    0x65, 0x73, 0x63, 0x20, 0x22, 0x4f, 0x6c, 0x69,
+    0x6d, 0x65, 0x78, 0x20, 0x4f, 0x70, 0x65, 0x6e,
+    0x4f, 0x43, 0x44, 0x20, 0x4a, 0x54, 0x41, 0x47,
+    0x20, 0x41, 0x22, 0x0d, 0x0a, 0x66, 0x74, 0x32,
+    0x32, 0x33, 0x32, 0x5f, 0x6c, 0x61, 0x79, 0x6f,
+    0x75, 0x74, 0x20, 0x6f, 0x6c, 0x69, 0x6d, 0x65,
+    0x78, 0x2d, 0x6a, 0x74, 0x61, 0x67, 0x0d, 0x0a,
+    0x66, 0x74, 0x32, 0x32, 0x33, 0x32, 0x5f, 0x76,
+    0x69, 0x64, 0x5f, 0x70, 0x69, 0x64, 0x20, 0x30,
+    0x78, 0x31, 0x35, 0x62, 0x61, 0x20, 0x30, 0x78,
+    0x30, 0x30, 0x30, 0x33, 0x0d, 0x0a, 0x0d, 0x0a,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
-    0x65, 0x20, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32,
-    0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32,
-    0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
-    0x64, 0x65, 0x73, 0x63, 0x20, 0x22, 0x4f, 0x6c,
-    0x69, 0x6d, 0x65, 0x78, 0x20, 0x4f, 0x70, 0x65,
-    0x6e, 0x4f, 0x43, 0x44, 0x20, 0x4a, 0x54, 0x41,
-    0x47, 0x22, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32,
-    0x33, 0x32, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75,
-    0x74, 0x20, 0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78,
-    0x2d, 0x6a, 0x74, 0x61, 0x67, 0x0d, 0x0a, 0x66,
-    0x74, 0x32, 0x32, 0x33, 0x32, 0x5f, 0x76, 0x69,
-    0x64, 0x5f, 0x70, 0x69, 0x64, 0x20, 0x30, 0x78,
-    0x31, 0x35, 0x62, 0x61, 0x20, 0x30, 0x78, 0x30,
-    0x30, 0x30, 0x33, 0x0d, 0x0a, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x20, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45,
     0x4e, 0x43, 0x45, 0x3a, 0x20, 0x20, 0x68, 0x74,
     0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77,
@@ -50533,82 +50885,107 @@
     0x30, 0x78, 0x31, 0x35, 0x62, 0x61, 0x20, 0x30,
     0x78, 0x30, 0x30, 0x30, 0x34, 0x0d, 0x0a, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x23, 0x23, 0x0d, 0x0a, 0x23, 0x20, 0x4f, 0x6c,
-    0x69, 0x6d, 0x65, 0x78, 0x20, 0x4a, 0x54, 0x41,
-    0x47, 0x20, 0x54, 0x49, 0x4e, 0x59, 0x20, 0x55,
-    0x53, 0x42, 0x20, 0x44, 0x65, 0x62, 0x75, 0x67,
-    0x67, 0x65, 0x72, 0x0d, 0x0a, 0x23, 0x20, 0x4c,
-    0x69, 0x6e, 0x75, 0x78, 0x20, 0x55, 0x53, 0x42,
-    0x20, 0x74, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x74,
-    0x6f, 0x20, 0x73, 0x65, 0x65, 0x20, 0x74, 0x68,
-    0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
-    0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
-    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74,
-    0x68, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65,
-    0x20, 0x27, 0x41, 0x27, 0x20, 0x61, 0x73, 0x20,
-    0x69, 0x6e, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65,
-    0x74, 0x2f, 0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78,
-    0x2d, 0x6a, 0x74, 0x61, 0x67, 0x2d, 0x74, 0x69,
-    0x6e, 0x79, 0x2e, 0x63, 0x66, 0x67, 0x2c, 0x0d,
-    0x0a, 0x23, 0x20, 0x62, 0x75, 0x74, 0x20, 0x57,
-    0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0x73,
-    0x74, 0x69, 0x6c, 0x6c, 0x20, 0x6e, 0x65, 0x65,
-    0x64, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x27,
-    0x41, 0x27, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73,
-    0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65,
-    0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
-    0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4c, 0x69,
-    0x6e, 0x75, 0x78, 0x20, 0x75, 0x73, 0x65, 0x72,
-    0x73, 0x2e, 0x0d, 0x0a, 0x23, 0x23, 0x0d, 0x0a,
-    0x0d, 0x0a, 0x23, 0x20, 0x52, 0x45, 0x46, 0x45,
-    0x52, 0x45, 0x4e, 0x43, 0x45, 0x3a, 0x20, 0x20,
-    0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77,
-    0x77, 0x77, 0x2e, 0x6f, 0x6c, 0x69, 0x6d, 0x65,
-    0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65,
-    0x76, 0x2f, 0x61, 0x72, 0x6d, 0x2d, 0x75, 0x73,
-    0x62, 0x2d, 0x74, 0x69, 0x6e, 0x79, 0x2e, 0x68,
-    0x74, 0x6d, 0x6c, 0x0d, 0x0a, 0x69, 0x6e, 0x74,
-    0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x66,
-    0x74, 0x32, 0x32, 0x33, 0x32, 0x0d, 0x0a, 0x66,
-    0x74, 0x32, 0x32, 0x33, 0x32, 0x5f, 0x64, 0x65,
-    0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73,
-    0x63, 0x20, 0x22, 0x4f, 0x6c, 0x69, 0x6d, 0x65,
-    0x78, 0x20, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x43,
-    0x44, 0x20, 0x4a, 0x54, 0x41, 0x47, 0x20, 0x54,
-    0x49, 0x4e, 0x59, 0x22, 0x0d, 0x0a, 0x66, 0x74,
-    0x32, 0x32, 0x33, 0x32, 0x5f, 0x6c, 0x61, 0x79,
-    0x6f, 0x75, 0x74, 0x20, 0x6f, 0x6c, 0x69, 0x6d,
-    0x65, 0x78, 0x2d, 0x6a, 0x74, 0x61, 0x67, 0x0d,
-    0x0a, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32, 0x5f,
-    0x76, 0x69, 0x64, 0x5f, 0x70, 0x69, 0x64, 0x20,
-    0x30, 0x78, 0x31, 0x35, 0x62, 0x61, 0x20, 0x30,
-    0x78, 0x30, 0x30, 0x30, 0x34, 0x0d, 0x0a, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x4f, 0x6c, 0x69,
+    0x6d, 0x65, 0x78, 0x20, 0x41, 0x52, 0x4d, 0x2d,
+    0x55, 0x53, 0x42, 0x2d, 0x54, 0x49, 0x4e, 0x59,
+    0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x23, 0x20, 0x68,
+    0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
+    0x77, 0x2e, 0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78,
+    0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x76,
+    0x2f, 0x61, 0x72, 0x6d, 0x2d, 0x75, 0x73, 0x62,
+    0x2d, 0x74, 0x69, 0x6e, 0x79, 0x2e, 0x68, 0x74,
+    0x6d, 0x6c, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
+    0x63, 0x65, 0x20, 0x66, 0x74, 0x32, 0x32, 0x33,
+    0x32, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33,
+    0x32, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
+    0x5f, 0x64, 0x65, 0x73, 0x63, 0x20, 0x22, 0x4f,
+    0x6c, 0x69, 0x6d, 0x65, 0x78, 0x20, 0x4f, 0x70,
+    0x65, 0x6e, 0x4f, 0x43, 0x44, 0x20, 0x4a, 0x54,
+    0x41, 0x47, 0x20, 0x54, 0x49, 0x4e, 0x59, 0x20,
+    0x41, 0x22, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32,
+    0x33, 0x32, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75,
+    0x74, 0x20, 0x6f, 0x6c, 0x69, 0x6d, 0x65, 0x78,
+    0x2d, 0x6a, 0x74, 0x61, 0x67, 0x0d, 0x0a, 0x66,
+    0x74, 0x32, 0x32, 0x33, 0x32, 0x5f, 0x76, 0x69,
+    0x64, 0x5f, 0x70, 0x69, 0x64, 0x20, 0x30, 0x78,
+    0x31, 0x35, 0x62, 0x61, 0x20, 0x30, 0x78, 0x30,
+    0x30, 0x30, 0x34, 0x0d, 0x0a, 0x0d, 0x0a, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x23, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
-    0x63, 0x65, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65,
-    0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x66, 0x74,
-    0x32, 0x32, 0x33, 0x32, 0x0d, 0x0a, 0x66, 0x74,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x4a, 0x6f, 0x65,
+    0x72, 0x6e, 0x20, 0x4b, 0x61, 0x69, 0x70, 0x66,
+    0x27, 0x73, 0x20, 0x4f, 0x4f, 0x43, 0x44, 0x4c,
+    0x69, 0x6e, 0x6b, 0x0d, 0x0a, 0x23, 0x0d, 0x0a,
+    0x23, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
+    0x2f, 0x77, 0x77, 0x77, 0x2e, 0x6a, 0x6f, 0x65,
+    0x72, 0x6e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
+    0x2e, 0x64, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
+    0x72, 0x65, 0x78, 0x78, 0x32, 0x2f, 0x63, 0x6d,
+    0x73, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e,
+    0x70, 0x68, 0x70, 0x3f, 0x70, 0x61, 0x67, 0x65,
+    0x3d, 0x31, 0x32, 0x36, 0x0d, 0x0a, 0x23, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
+    0x66, 0x61, 0x63, 0x65, 0x20, 0x66, 0x74, 0x32,
+    0x32, 0x33, 0x32, 0x0d, 0x0a, 0x66, 0x74, 0x32,
+    0x32, 0x33, 0x32, 0x5f, 0x64, 0x65, 0x76, 0x69,
+    0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x20,
+    0x22, 0x4f, 0x4f, 0x43, 0x44, 0x4c, 0x69, 0x6e,
+    0x6b, 0x20, 0x41, 0x22, 0x0d, 0x0a, 0x66, 0x74,
+    0x32, 0x32, 0x33, 0x32, 0x5f, 0x6c, 0x61, 0x79,
+    0x6f, 0x75, 0x74, 0x20, 0x6f, 0x6f, 0x63, 0x64,
+    0x6c, 0x69, 0x6e, 0x6b, 0x0d, 0x0a, 0x66, 0x74,
     0x32, 0x32, 0x33, 0x32, 0x5f, 0x76, 0x69, 0x64,
     0x5f, 0x70, 0x69, 0x64, 0x20, 0x30, 0x78, 0x30,
-    0x34, 0x30, 0x33, 0x20, 0x30, 0x78, 0x36, 0x30,
-    0x31, 0x30, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32,
-    0x33, 0x32, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
-    0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x20, 0x22,
-    0x44, 0x75, 0x61, 0x6c, 0x20, 0x52, 0x53, 0x32,
-    0x33, 0x32, 0x22, 0x0d, 0x0a, 0x66, 0x74, 0x32,
-    0x32, 0x33, 0x32, 0x5f, 0x6c, 0x61, 0x79, 0x6f,
-    0x75, 0x74, 0x20, 0x22, 0x6f, 0x6f, 0x63, 0x64,
-    0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x0d, 0x0a, 0x66,
-    0x74, 0x32, 0x32, 0x33, 0x32, 0x5f, 0x6c, 0x61,
-    0x74, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x32, 0x0d,
-    0x0a, 0x23, 0x20, 0x36, 0x2f, 0x28, 0x31, 0x2b,
-    0x6e, 0x29, 0x20, 0x4d, 0x68, 0x7a, 0x20, 0x54,
-    0x43, 0x4c, 0x4b, 0x0d, 0x0a, 0x6a, 0x74, 0x61,
-    0x67, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x20,
-    0x31, 0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00,
+    0x34, 0x30, 0x33, 0x20, 0x30, 0x78, 0x62, 0x61,
+    0x66, 0x38, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67,
+    0x5f, 0x6b, 0x68, 0x7a, 0x20, 0x35, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x48, 0x75, 0x62,
+    0x65, 0x72, 0x74, 0x20, 0x48, 0x6f, 0x65, 0x67,
+    0x6c, 0x27, 0x73, 0x20, 0x55, 0x53, 0x42, 0x20,
+    0x74, 0x6f, 0x20, 0x4a, 0x54, 0x41, 0x47, 0x0d,
+    0x0a, 0x23, 0x0d, 0x0a, 0x23, 0x20, 0x68, 0x74,
+    0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77,
+    0x2e, 0x68, 0x73, 0x2d, 0x61, 0x75, 0x67, 0x73,
+    0x62, 0x75, 0x72, 0x67, 0x2e, 0x64, 0x65, 0x2f,
+    0x7e, 0x68, 0x68, 0x6f, 0x65, 0x67, 0x6c, 0x2f,
+    0x70, 0x72, 0x6f, 0x6a, 0x2f, 0x75, 0x73, 0x62,
+    0x6a, 0x74, 0x61, 0x67, 0x2f, 0x75, 0x73, 0x62,
+    0x6a, 0x74, 0x61, 0x67, 0x2e, 0x68, 0x74, 0x6d,
+    0x6c, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
+    0x65, 0x20, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32,
+    0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32,
+    0x5f, 0x76, 0x69, 0x64, 0x5f, 0x70, 0x69, 0x64,
+    0x20, 0x30, 0x78, 0x30, 0x34, 0x30, 0x33, 0x20,
+    0x30, 0x78, 0x36, 0x30, 0x31, 0x30, 0x0d, 0x0a,
+    0x66, 0x74, 0x32, 0x32, 0x33, 0x32, 0x5f, 0x64,
+    0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65,
+    0x73, 0x63, 0x20, 0x22, 0x44, 0x75, 0x61, 0x6c,
+    0x20, 0x52, 0x53, 0x32, 0x33, 0x32, 0x20, 0x41,
+    0x22, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33,
+    0x32, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
+    0x20, 0x22, 0x6f, 0x6f, 0x63, 0x64, 0x6c, 0x69,
+    0x6e, 0x6b, 0x22, 0x0d, 0x0a, 0x66, 0x74, 0x32,
+    0x32, 0x33, 0x32, 0x5f, 0x6c, 0x61, 0x74, 0x65,
+    0x6e, 0x63, 0x79, 0x20, 0x32, 0x0d, 0x0a, 0x23,
+    0x20, 0x36, 0x2f, 0x28, 0x31, 0x2b, 0x6e, 0x29,
+    0x20, 0x4d, 0x68, 0x7a, 0x20, 0x54, 0x43, 0x4c,
+    0x4b, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x5f,
+    0x73, 0x70, 0x65, 0x65, 0x64, 0x20, 0x31, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x50, 0x61, 0x72,
+    0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x20, 0x70, 0x6f,
+    0x72, 0x74, 0x20, 0x77, 0x69, 0x67, 0x67, 0x6c,
+    0x65, 0x72, 0x20, 0x28, 0x6d, 0x61, 0x6e, 0x79,
+    0x20, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x20,
+    0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
+    0x65, 0x29, 0x20, 0x6f, 0x6e, 0x20, 0x70, 0x6f,
+    0x72, 0x74, 0x20, 0x30, 0x78, 0x63, 0x38, 0x62,
+    0x38, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x0d, 0x0a,
     0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
     0x65, 0x20, 0x70, 0x61, 0x72, 0x70, 0x6f, 0x72,
     0x74, 0x0d, 0x0a, 0x70, 0x61, 0x72, 0x70, 0x6f,
@@ -50618,125 +50995,292 @@
     0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x69,
     0x67, 0x67, 0x6c, 0x65, 0x72, 0x0d, 0x0a, 0x6a,
     0x74, 0x61, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x65,
-    0x64, 0x20, 0x30, 0x0d, 0x0a, 0x00, 0x00, 0x00,
+    0x64, 0x20, 0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x58, 0x69, 0x6c,
+    0x69, 0x6e, 0x78, 0x20, 0x50, 0x61, 0x72, 0x61,
+    0x6c, 0x6c, 0x65, 0x6c, 0x20, 0x43, 0x61, 0x62,
+    0x6c, 0x65, 0x20, 0x49, 0x49, 0x49, 0x20, 0x27,
+    0x44, 0x4c, 0x43, 0x20, 0x35, 0x27, 0x20, 0x28,
+    0x61, 0x6e, 0x64, 0x20, 0x76, 0x61, 0x72, 0x69,
+    0x6f, 0x75, 0x73, 0x20, 0x63, 0x6c, 0x6f, 0x6e,
+    0x65, 0x73, 0x29, 0x0d, 0x0a, 0x23, 0x0d, 0x0a,
+    0x23, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
+    0x2f, 0x77, 0x77, 0x77, 0x2e, 0x78, 0x69, 0x6c,
+    0x69, 0x6e, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
+    0x69, 0x74, 0x70, 0x2f, 0x78, 0x69, 0x6c, 0x69,
+    0x6e, 0x78, 0x34, 0x2f, 0x64, 0x61, 0x74, 0x61,
+    0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x70, 0x61,
+    0x63, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64,
+    0x69, 0x78, 0x62, 0x2e, 0x68, 0x74, 0x6d, 0x6c,
+    0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x0d, 0x0a, 0x69,
+    0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
+    0x20, 0x70, 0x61, 0x72, 0x70, 0x6f, 0x72, 0x74,
+    0x0d, 0x0a, 0x70, 0x61, 0x72, 0x70, 0x6f, 0x72,
+    0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x2f,
+    0x64, 0x65, 0x76, 0x2f, 0x70, 0x61, 0x72, 0x70,
+    0x6f, 0x72, 0x74, 0x30, 0x0d, 0x0a, 0x70, 0x61,
+    0x72, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x61,
+    0x62, 0x6c, 0x65, 0x20, 0x64, 0x6c, 0x63, 0x35,
+    0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x5f, 0x73,
+    0x70, 0x65, 0x65, 0x64, 0x20, 0x30, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x52, 0x61, 0x69,
+    0x73, 0x6f, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x20,
+    0x52, 0x4c, 0x69, 0x6e, 0x6b, 0x0d, 0x0a, 0x23,
+    0x0d, 0x0a, 0x23, 0x20, 0x68, 0x74, 0x74, 0x70,
+    0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x6d,
+    0x63, 0x75, 0x2d, 0x72, 0x61, 0x69, 0x73, 0x6f,
+    0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x6f,
+    0x6d, 0x2f, 0x7e, 0x72, 0x6c, 0x69, 0x6e, 0x6b,
+    0x2d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65,
+    0x72, 0x2d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
+    0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x5f, 0x6d, 0x69,
+    0x63, 0x72, 0x6f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
+    0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x5f, 0x5f,
+    0x74, 0x6f, 0x6f, 0x6c, 0x7e, 0x74, 0x6f, 0x6f,
+    0x6c, 0x5f, 0x5f, 0x54, 0x30, 0x31, 0x38, 0x3a,
+    0x34, 0x63, 0x6e, 0x39, 0x7a, 0x69, 0x7a, 0x34,
+    0x62, 0x6e, 0x78, 0x36, 0x2e, 0x68, 0x74, 0x6d,
+    0x6c, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x0d, 0x0a,
     0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
-    0x65, 0x20, 0x70, 0x61, 0x72, 0x70, 0x6f, 0x72,
-    0x74, 0x0d, 0x0a, 0x70, 0x61, 0x72, 0x70, 0x6f,
-    0x72, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x20,
-    0x2f, 0x64, 0x65, 0x76, 0x2f, 0x70, 0x61, 0x72,
-    0x70, 0x6f, 0x72, 0x74, 0x30, 0x0d, 0x0a, 0x70,
-    0x61, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63,
-    0x61, 0x62, 0x6c, 0x65, 0x20, 0x64, 0x6c, 0x63,
-    0x35, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x5f,
-    0x73, 0x70, 0x65, 0x65, 0x64, 0x20, 0x30, 0x0d,
-    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x65, 0x20, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x23, 0x20, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x20,
-    0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
-    0x65, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
-    0x66, 0x61, 0x63, 0x65, 0x20, 0x72, 0x6c, 0x69,
-    0x6e, 0x6b, 0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
-    0x65, 0x20, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32,
-    0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32,
-    0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x20,
-    0x73, 0x68, 0x65, 0x65, 0x76, 0x61, 0x70, 0x6c,
-    0x75, 0x67, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32,
-    0x33, 0x32, 0x5f, 0x76, 0x69, 0x64, 0x5f, 0x70,
-    0x69, 0x64, 0x20, 0x30, 0x78, 0x30, 0x34, 0x30,
-    0x33, 0x20, 0x30, 0x78, 0x36, 0x30, 0x31, 0x30,
-    0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x5f, 0x6b,
-    0x68, 0x7a, 0x20, 0x33, 0x30, 0x30, 0x30, 0x0d,
-    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x23, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
-    0x63, 0x65, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65,
-    0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x66, 0x74,
-    0x32, 0x32, 0x33, 0x32, 0x0d, 0x0a, 0x66, 0x74,
-    0x32, 0x32, 0x33, 0x32, 0x5f, 0x64, 0x65, 0x76,
-    0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
-    0x20, 0x22, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
-    0x79, 0x7a, 0x65, 0x72, 0x20, 0x41, 0x22, 0x0d,
-    0x0a, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32, 0x5f,
-    0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x20, 0x73,
-    0x69, 0x67, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
-    0x72, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33,
-    0x32, 0x5f, 0x76, 0x69, 0x64, 0x5f, 0x70, 0x69,
-    0x64, 0x20, 0x30, 0x78, 0x30, 0x34, 0x30, 0x33,
-    0x20, 0x30, 0x78, 0x62, 0x63, 0x61, 0x30, 0x0d,
-    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x23, 0x20, 0x66, 0x74, 0x64, 0x69, 0x20, 0x69,
-    0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
-    0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
-    0x61, 0x63, 0x65, 0x20, 0x66, 0x74, 0x32, 0x32,
-    0x33, 0x32, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32,
-    0x33, 0x32, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
-    0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x20, 0x22,
-    0x53, 0x54, 0x4d, 0x33, 0x32, 0x2d, 0x50, 0x65,
-    0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
-    0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x20, 0x41,
-    0x22, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x4d, 0x61, 0x72,
+    0x76, 0x65, 0x6c, 0x20, 0x53, 0x68, 0x65, 0x65,
+    0x76, 0x61, 0x50, 0x6c, 0x75, 0x67, 0x20, 0x44,
+    0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65,
+    0x6e, 0x74, 0x20, 0x4b, 0x69, 0x74, 0x0d, 0x0a,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x68, 0x74, 0x74,
+    0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e,
+    0x6d, 0x61, 0x72, 0x76, 0x65, 0x6c, 0x6c, 0x2e,
+    0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x64,
+    0x75, 0x63, 0x74, 0x73, 0x2f, 0x65, 0x6d, 0x62,
+    0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x72,
+    0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73,
+    0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
+    0x65, 0x72, 0x2f, 0x6b, 0x69, 0x72, 0x6b, 0x77,
+    0x6f, 0x6f, 0x64, 0x2f, 0x73, 0x68, 0x65, 0x65,
+    0x76, 0x61, 0x70, 0x6c, 0x75, 0x67, 0x2e, 0x6a,
+    0x73, 0x70, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
+    0x63, 0x65, 0x20, 0x66, 0x74, 0x32, 0x32, 0x33,
+    0x32, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33,
     0x32, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
-    0x20, 0x73, 0x74, 0x6d, 0x33, 0x32, 0x73, 0x74,
-    0x69, 0x63, 0x6b, 0x0d, 0x0a, 0x66, 0x74, 0x32,
+    0x20, 0x73, 0x68, 0x65, 0x65, 0x76, 0x61, 0x70,
+    0x6c, 0x75, 0x67, 0x0d, 0x0a, 0x66, 0x74, 0x32,
     0x32, 0x33, 0x32, 0x5f, 0x76, 0x69, 0x64, 0x5f,
-    0x70, 0x69, 0x64, 0x20, 0x30, 0x78, 0x30, 0x36,
-    0x34, 0x30, 0x20, 0x30, 0x78, 0x30, 0x30, 0x32,
-    0x64, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x70, 0x69, 0x64, 0x20, 0x30, 0x78, 0x39, 0x65,
+    0x38, 0x38, 0x20, 0x30, 0x78, 0x39, 0x65, 0x38,
+    0x66, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33,
+    0x32, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
+    0x5f, 0x64, 0x65, 0x73, 0x63, 0x20, 0x22, 0x53,
+    0x68, 0x65, 0x65, 0x76, 0x61, 0x50, 0x6c, 0x75,
+    0x67, 0x20, 0x4a, 0x54, 0x41, 0x47, 0x4b, 0x65,
+    0x79, 0x20, 0x46, 0x54, 0x32, 0x32, 0x33, 0x32,
+    0x44, 0x20, 0x42, 0x22, 0x0d, 0x0a, 0x6a, 0x74,
+    0x61, 0x67, 0x5f, 0x6b, 0x68, 0x7a, 0x20, 0x33,
+    0x30, 0x30, 0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x58, 0x76, 0x65,
+    0x72, 0x76, 0x65, 0x20, 0x53, 0x69, 0x67, 0x6e,
+    0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x20, 0x54,
+    0x6f, 0x6f, 0x6c, 0x20, 0x28, 0x44, 0x54, 0x2d,
+    0x55, 0x53, 0x42, 0x2d, 0x53, 0x54, 0x29, 0x0d,
+    0x0a, 0x23, 0x0d, 0x0a, 0x23, 0x20, 0x68, 0x74,
+    0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77,
+    0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x79,
+    0x7a, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
+    0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
+    0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
+    0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x6f, 0x6f,
+    0x6c, 0x73, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61,
+    0x6c, 0x79, 0x7a, 0x65, 0x72, 0x2d, 0x74, 0x6f,
+    0x6f, 0x6c, 0x2d, 0x64, 0x74, 0x2d, 0x75, 0x73,
+    0x62, 0x2d, 0x73, 0x74, 0x2e, 0x68, 0x74, 0x6d,
+    0x6c, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x0d, 0x0a,
     0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
     0x65, 0x20, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32,
     0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32,
     0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
-    0x64, 0x65, 0x73, 0x63, 0x20, 0x22, 0x53, 0x54,
-    0x52, 0x39, 0x2d, 0x63, 0x6f, 0x6d, 0x53, 0x74,
-    0x69, 0x63, 0x6b, 0x20, 0x41, 0x22, 0x0d, 0x0a,
-    0x66, 0x74, 0x32, 0x32, 0x33, 0x32, 0x5f, 0x6c,
-    0x61, 0x79, 0x6f, 0x75, 0x74, 0x20, 0x63, 0x6f,
-    0x6d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x0d, 0x0a,
-    0x66, 0x74, 0x32, 0x32, 0x33, 0x32, 0x5f, 0x76,
-    0x69, 0x64, 0x5f, 0x70, 0x69, 0x64, 0x20, 0x30,
-    0x78, 0x30, 0x36, 0x34, 0x30, 0x20, 0x30, 0x78,
-    0x30, 0x30, 0x32, 0x63, 0x0d, 0x0a, 0x00, 0x00,
+    0x64, 0x65, 0x73, 0x63, 0x20, 0x22, 0x53, 0x69,
+    0x67, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72,
+    0x20, 0x41, 0x22, 0x0d, 0x0a, 0x66, 0x74, 0x32,
+    0x32, 0x33, 0x32, 0x5f, 0x6c, 0x61, 0x79, 0x6f,
+    0x75, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61,
+    0x6c, 0x79, 0x7a, 0x65, 0x72, 0x0d, 0x0a, 0x66,
+    0x74, 0x32, 0x32, 0x33, 0x32, 0x5f, 0x76, 0x69,
+    0x64, 0x5f, 0x70, 0x69, 0x64, 0x20, 0x30, 0x78,
+    0x30, 0x34, 0x30, 0x33, 0x20, 0x30, 0x78, 0x62,
+    0x63, 0x61, 0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x23, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
-    0x63, 0x65, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x48, 0x69, 0x74,
+    0x65, 0x78, 0x20, 0x53, 0x54, 0x4d, 0x33, 0x32,
+    0x2d, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
+    0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x69, 0x63,
+    0x6b, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x23, 0x20,
+    0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77,
+    0x77, 0x77, 0x2e, 0x68, 0x69, 0x74, 0x65, 0x78,
+    0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64,
+    0x65, 0x78, 0x2e, 0x70, 0x68, 0x70, 0x3f, 0x69,
+    0x64, 0x3d, 0x33, 0x34, 0x30, 0x0d, 0x0a, 0x23,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65,
     0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x66, 0x74,
     0x32, 0x32, 0x33, 0x32, 0x0d, 0x0a, 0x66, 0x74,
     0x32, 0x32, 0x33, 0x32, 0x5f, 0x64, 0x65, 0x76,
     0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
-    0x20, 0x22, 0x54, 0x75, 0x72, 0x74, 0x65, 0x6c,
-    0x69, 0x7a, 0x65, 0x72, 0x20, 0x4a, 0x54, 0x41,
-    0x47, 0x2f, 0x52, 0x53, 0x32, 0x33, 0x32, 0x20,
-    0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x20,
-    0x41, 0x22, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32,
-    0x33, 0x32, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75,
-    0x74, 0x20, 0x74, 0x75, 0x72, 0x74, 0x65, 0x6c,
-    0x69, 0x7a, 0x65, 0x72, 0x32, 0x0d, 0x0a, 0x66,
+    0x20, 0x22, 0x53, 0x54, 0x4d, 0x33, 0x32, 0x2d,
+    0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
+    0x6e, 0x63, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b,
+    0x20, 0x41, 0x22, 0x0d, 0x0a, 0x66, 0x74, 0x32,
+    0x32, 0x33, 0x32, 0x5f, 0x6c, 0x61, 0x79, 0x6f,
+    0x75, 0x74, 0x20, 0x73, 0x74, 0x6d, 0x33, 0x32,
+    0x73, 0x74, 0x69, 0x63, 0x6b, 0x0d, 0x0a, 0x66,
     0x74, 0x32, 0x32, 0x33, 0x32, 0x5f, 0x76, 0x69,
     0x64, 0x5f, 0x70, 0x69, 0x64, 0x20, 0x30, 0x78,
-    0x30, 0x34, 0x30, 0x33, 0x20, 0x30, 0x78, 0x62,
-    0x64, 0x63, 0x38, 0x0d, 0x0a, 0x00, 0x00, 0x00,
+    0x30, 0x36, 0x34, 0x30, 0x20, 0x30, 0x78, 0x30,
+    0x30, 0x32, 0x64, 0x0d, 0x0a, 0x0d, 0x0a, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x55, 0x53, 0x42,
-    0x70, 0x72, 0x6f, 0x67, 0x0d, 0x0a, 0x23, 0x0d,
-    0x0a, 0x23, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a,
-    0x2f, 0x2f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64,
-    0x65, 0x64, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
-    0x63, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x2f,
-    0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x68,
-    0x70, 0x3f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69,
-    0x64, 0x3d, 0x31, 0x33, 0x35, 0x0d, 0x0a, 0x23,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65,
-    0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x75, 0x73,
-    0x62, 0x70, 0x72, 0x6f, 0x67, 0x0d, 0x0a, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x48, 0x69, 0x74,
+    0x65, 0x78, 0x20, 0x53, 0x54, 0x52, 0x39, 0x2d,
+    0x63, 0x6f, 0x6d, 0x53, 0x74, 0x69, 0x63, 0x6b,
+    0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x23, 0x20, 0x68,
+    0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
+    0x77, 0x2e, 0x68, 0x69, 0x74, 0x65, 0x78, 0x2e,
+    0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x65,
+    0x78, 0x2e, 0x70, 0x68, 0x70, 0x3f, 0x69, 0x64,
+    0x3d, 0x33, 0x38, 0x33, 0x0d, 0x0a, 0x23, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
+    0x66, 0x61, 0x63, 0x65, 0x20, 0x66, 0x74, 0x32,
+    0x32, 0x33, 0x32, 0x0d, 0x0a, 0x66, 0x74, 0x32,
+    0x32, 0x33, 0x32, 0x5f, 0x64, 0x65, 0x76, 0x69,
+    0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x20,
+    0x22, 0x53, 0x54, 0x52, 0x39, 0x2d, 0x63, 0x6f,
+    0x6d, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x20, 0x41,
+    0x22, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33,
+    0x32, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
+    0x20, 0x63, 0x6f, 0x6d, 0x73, 0x74, 0x69, 0x63,
+    0x6b, 0x0d, 0x0a, 0x66, 0x74, 0x32, 0x32, 0x33,
+    0x32, 0x5f, 0x76, 0x69, 0x64, 0x5f, 0x70, 0x69,
+    0x64, 0x20, 0x30, 0x78, 0x30, 0x36, 0x34, 0x30,
+    0x20, 0x30, 0x78, 0x30, 0x30, 0x32, 0x63, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x65, 0x67, 0x6e,
+    0x69, 0x74, 0x65, 0x20, 0x54, 0x75, 0x72, 0x74,
+    0x65, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x20, 0x32,
+    0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x23, 0x20, 0x68,
+    0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
+    0x77, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e,
+    0x75, 0x74, 0x2e, 0x64, 0x65, 0x2f, 0x65, 0x6e,
+    0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
+    0x65, 0x2f, 0x74, 0x75, 0x72, 0x74, 0x65, 0x6c,
+    0x69, 0x7a, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x64,
+    0x65, 0x78, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x0d,
+    0x0a, 0x23, 0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x6e,
+    0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20,
+    0x66, 0x74, 0x32, 0x32, 0x33, 0x32, 0x0d, 0x0a,
+    0x66, 0x74, 0x32, 0x32, 0x33, 0x32, 0x5f, 0x64,
+    0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65,
+    0x73, 0x63, 0x20, 0x22, 0x54, 0x75, 0x72, 0x74,
+    0x65, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x20, 0x4a,
+    0x54, 0x41, 0x47, 0x2f, 0x52, 0x53, 0x32, 0x33,
+    0x32, 0x20, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65,
+    0x72, 0x20, 0x41, 0x22, 0x0d, 0x0a, 0x66, 0x74,
+    0x32, 0x32, 0x33, 0x32, 0x5f, 0x6c, 0x61, 0x79,
+    0x6f, 0x75, 0x74, 0x20, 0x74, 0x75, 0x72, 0x74,
+    0x65, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x32, 0x0d,
+    0x0a, 0x66, 0x74, 0x32, 0x32, 0x33, 0x32, 0x5f,
+    0x76, 0x69, 0x64, 0x5f, 0x70, 0x69, 0x64, 0x20,
+    0x30, 0x78, 0x30, 0x34, 0x30, 0x33, 0x20, 0x30,
+    0x78, 0x62, 0x64, 0x63, 0x38, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x45, 0x6d, 0x62,
+    0x65, 0x64, 0x64, 0x65, 0x64, 0x20, 0x50, 0x72,
+    0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x20, 0x55,
+    0x53, 0x42, 0x70, 0x72, 0x6f, 0x67, 0x0d, 0x0a,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x68, 0x74, 0x74,
+    0x70, 0x3a, 0x2f, 0x2f, 0x65, 0x6d, 0x62, 0x65,
+    0x64, 0x64, 0x65, 0x64, 0x2d, 0x70, 0x72, 0x6f,
+    0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x6e, 0x65,
+    0x74, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e,
+    0x70, 0x68, 0x70, 0x3f, 0x70, 0x61, 0x67, 0x65,
+    0x5f, 0x69, 0x64, 0x3d, 0x31, 0x33, 0x35, 0x0d,
+    0x0a, 0x23, 0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x6e,
+    0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20,
+    0x75, 0x73, 0x62, 0x70, 0x72, 0x6f, 0x67, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x56, 0x65, 0x72,
+    0x73, 0x61, 0x6c, 0x6f, 0x6f, 0x6e, 0x20, 0x4c,
+    0x69, 0x6e, 0x6b, 0x20, 0x2d, 0x2d, 0x20, 0x56,
+    0x53, 0x4c, 0x4c, 0x69, 0x6e, 0x6b, 0x0d, 0x0a,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x68, 0x74, 0x74,
+    0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e,
+    0x73, 0x69, 0x6d, 0x6f, 0x6e, 0x71, 0x69, 0x61,
+    0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e,
+    0x2f, 0x56, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x6f,
+    0x6f, 0x6e, 0x0d, 0x0a, 0x23, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
+    0x63, 0x65, 0x20, 0x76, 0x73, 0x6c, 0x6c, 0x69,
+    0x6e, 0x6b, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x76,
+    0x73, 0x6c, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75,
+    0x73, 0x62, 0x5f, 0x76, 0x69, 0x64, 0x09, 0x09,
+    0x30, 0x78, 0x30, 0x33, 0x45, 0x42, 0x0d, 0x0a,
+    0x23, 0x76, 0x73, 0x6c, 0x6c, 0x69, 0x6e, 0x6b,
+    0x5f, 0x75, 0x73, 0x62, 0x5f, 0x70, 0x69, 0x64,
+    0x09, 0x09, 0x30, 0x78, 0x32, 0x31, 0x30, 0x33,
+    0x0d, 0x0a, 0x23, 0x76, 0x73, 0x6c, 0x6c, 0x69,
+    0x6e, 0x6b, 0x5f, 0x75, 0x73, 0x62, 0x5f, 0x62,
+    0x75, 0x6c, 0x6b, 0x69, 0x6e, 0x09, 0x30, 0x78,
+    0x30, 0x32, 0x0d, 0x0a, 0x23, 0x76, 0x73, 0x6c,
+    0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x73, 0x62,
+    0x5f, 0x62, 0x75, 0x6c, 0x6b, 0x6f, 0x75, 0x74,
+    0x09, 0x30, 0x78, 0x30, 0x32, 0x0d, 0x0a, 0x23,
+    0x76, 0x73, 0x6c, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
+    0x75, 0x73, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65,
+    0x72, 0x66, 0x61, 0x63, 0x65, 0x09, 0x30, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x76, 0x73, 0x6c, 0x6c, 0x69,
+    0x6e, 0x6b, 0x5f, 0x75, 0x73, 0x62, 0x5f, 0x76,
+    0x69, 0x64, 0x09, 0x09, 0x30, 0x78, 0x30, 0x34,
+    0x38, 0x33, 0x0d, 0x0a, 0x76, 0x73, 0x6c, 0x6c,
+    0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x73, 0x62, 0x5f,
+    0x70, 0x69, 0x64, 0x09, 0x09, 0x30, 0x78, 0x35,
+    0x37, 0x34, 0x30, 0x0d, 0x0a, 0x76, 0x73, 0x6c,
+    0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x73, 0x62,
+    0x5f, 0x62, 0x75, 0x6c, 0x6b, 0x69, 0x6e, 0x09,
+    0x30, 0x78, 0x30, 0x32, 0x0d, 0x0a, 0x76, 0x73,
+    0x6c, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x73,
+    0x62, 0x5f, 0x62, 0x75, 0x6c, 0x6b, 0x6f, 0x75,
+    0x74, 0x09, 0x30, 0x78, 0x30, 0x33, 0x0d, 0x0a,
+    0x76, 0x73, 0x6c, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
+    0x75, 0x73, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65,
+    0x72, 0x66, 0x61, 0x63, 0x65, 0x09, 0x31, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x23, 0x20, 0x76, 0x73, 0x6c,
+    0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x6d, 0x6f, 0x64,
+    0x65, 0x2c, 0x20, 0x64, 0x6d, 0x61, 0x20, 0x6f,
+    0x72, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
+    0x0d, 0x0a, 0x23, 0x20, 0x66, 0x6f, 0x72, 0x20,
+    0x6c, 0x6f, 0x77, 0x20, 0x6a, 0x74, 0x61, 0x67,
+    0x5f, 0x6b, 0x68, 0x7a, 0x2c, 0x20, 0x75, 0x73,
+    0x65, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
+    0x0d, 0x0a, 0x23, 0x20, 0x66, 0x6f, 0x72, 0x20,
+    0x68, 0x69, 0x67, 0x68, 0x20, 0x6a, 0x74, 0x61,
+    0x67, 0x5f, 0x6b, 0x68, 0x7a, 0x2c, 0x20, 0x75,
+    0x73, 0x65, 0x20, 0x64, 0x6d, 0x61, 0x0d, 0x0a,
+    0x23, 0x76, 0x73, 0x6c, 0x6c, 0x69, 0x6e, 0x6b,
+    0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x20, 0x64, 0x6d,
+    0x61, 0x0d, 0x0a, 0x76, 0x73, 0x6c, 0x6c, 0x69,
+    0x6e, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x20,
+    0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x0d, 0x0a,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a,
     0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
     0x00, 0x00, 0x02, 0x17, 0x00, 0x00, 0x00, 0x1e,
@@ -53617,6 +54161,506 @@
     0x72, 0x65, 0x61, 0x2d, 0x62, 0x61, 0x63, 0x6b,
     0x75, 0x70, 0x20, 0x31, 0x0d, 0x0a, 0x0d, 0x0a,
     0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x6a, 0x74,
+    0x61, 0x67, 0x5f, 0x6b, 0x68, 0x7a, 0x20, 0x34,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x0d, 0x0a, 0x23, 0x20,
+    0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3a, 0x20,
+    0x20, 0x20, 0x20, 0x41, 0x74, 0x6d, 0x65, 0x6c,
+    0x20, 0x41, 0x54, 0x39, 0x31, 0x53, 0x41, 0x4d,
+    0x39, 0x32, 0x36, 0x30, 0x0d, 0x0a, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b, 0x69, 0x6e,
+    0x66, 0x6f, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74,
+    0x73, 0x20, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
+    0x4d, 0x45, 0x5d, 0x20, 0x7d, 0x20, 0x7b, 0x09,
+    0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74,
+    0x20, 0x20, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e,
+    0x41, 0x4d, 0x45, 0x20, 0x24, 0x43, 0x48, 0x49,
+    0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x20, 0x20,
+    0x20, 0x0d, 0x0a, 0x7d, 0x20, 0x65, 0x6c, 0x73,
+    0x65, 0x20, 0x7b, 0x09, 0x20, 0x0d, 0x0a, 0x20,
+    0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x20, 0x5f,
+    0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45,
+    0x20, 0x61, 0x74, 0x39, 0x31, 0x73, 0x61, 0x6d,
+    0x39, 0x32, 0x36, 0x30, 0x0d, 0x0a, 0x7d, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x69, 0x66, 0x20, 0x7b, 0x20,
+    0x5b, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x65, 0x78,
+    0x69, 0x73, 0x74, 0x73, 0x20, 0x45, 0x4e, 0x44,
+    0x49, 0x41, 0x4e, 0x5d, 0x20, 0x7d, 0x20, 0x7b,
+    0x09, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65,
+    0x74, 0x20, 0x20, 0x5f, 0x45, 0x4e, 0x44, 0x49,
+    0x41, 0x4e, 0x20, 0x24, 0x45, 0x4e, 0x44, 0x49,
+    0x41, 0x4e, 0x20, 0x20, 0x20, 0x20, 0x0d, 0x0a,
+    0x7d, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b,
+    0x09, 0x20, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73,
+    0x65, 0x74, 0x20, 0x20, 0x5f, 0x45, 0x4e, 0x44,
+    0x49, 0x41, 0x4e, 0x20, 0x6c, 0x69, 0x74, 0x74,
+    0x6c, 0x65, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b, 0x69,
+    0x6e, 0x66, 0x6f, 0x20, 0x65, 0x78, 0x69, 0x73,
+    0x74, 0x73, 0x20, 0x43, 0x50, 0x55, 0x54, 0x41,
+    0x50, 0x49, 0x44, 0x20, 0x5d, 0x20, 0x7d, 0x20,
+    0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65,
+    0x74, 0x20, 0x5f, 0x43, 0x50, 0x55, 0x54, 0x41,
+    0x50, 0x49, 0x44, 0x20, 0x24, 0x43, 0x50, 0x55,
+    0x54, 0x41, 0x50, 0x49, 0x44, 0x0d, 0x0a, 0x7d,
+    0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0d,
+    0x0a, 0x20, 0x20, 0x23, 0x20, 0x66, 0x6f, 0x72,
+    0x63, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x72,
+    0x72, 0x6f, 0x72, 0x20, 0x74, 0x69, 0x6c, 0x6c,
+    0x20, 0x77, 0x65, 0x20, 0x67, 0x65, 0x74, 0x20,
+    0x61, 0x20, 0x67, 0x6f, 0x6f, 0x64, 0x20, 0x6e,
+    0x75, 0x6d, 0x62, 0x65, 0x72, 0x0d, 0x0a, 0x20,
+    0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x5f, 0x43,
+    0x50, 0x55, 0x54, 0x41, 0x50, 0x49, 0x44, 0x20,
+    0x30, 0x78, 0x30, 0x37, 0x39, 0x32, 0x36, 0x30,
+    0x33, 0x66, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x63,
+    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x74, 0x72,
+    0x73, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73,
+    0x72, 0x73, 0x74, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x6a, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x73,
+    0x72, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61,
+    0x79, 0x20, 0x32, 0x30, 0x30, 0x0d, 0x0a, 0x6a,
+    0x74, 0x61, 0x67, 0x5f, 0x6e, 0x74, 0x72, 0x73,
+    0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x20,
+    0x32, 0x30, 0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x6a, 0x74, 0x61, 0x67, 0x20, 0x6e, 0x65,
+    0x77, 0x74, 0x61, 0x70, 0x20, 0x24, 0x5f, 0x43,
+    0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20,
+    0x63, 0x70, 0x75, 0x20, 0x2d, 0x69, 0x72, 0x6c,
+    0x65, 0x6e, 0x20, 0x34, 0x20, 0x2d, 0x69, 0x72,
+    0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x20,
+    0x30, 0x78, 0x31, 0x20, 0x2d, 0x69, 0x72, 0x6d,
+    0x61, 0x73, 0x6b, 0x20, 0x30, 0x78, 0x66, 0x20,
+    0x2d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
+    0x64, 0x2d, 0x69, 0x64, 0x20, 0x24, 0x5f, 0x43,
+    0x50, 0x55, 0x54, 0x41, 0x50, 0x49, 0x44, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x0d, 0x0a, 0x23, 0x20, 0x54,
+    0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x63, 0x6f,
+    0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
+    0x69, 0x6f, 0x6e, 0x0d, 0x0a, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x0d, 0x0a, 0x0d, 0x0a, 0x73,
+    0x65, 0x74, 0x20, 0x5f, 0x54, 0x41, 0x52, 0x47,
+    0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x5b,
+    0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x22,
+    0x25, 0x73, 0x2e, 0x63, 0x70, 0x75, 0x22, 0x20,
+    0x24, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
+    0x4d, 0x45, 0x5d, 0x0d, 0x0a, 0x74, 0x61, 0x72,
+    0x67, 0x65, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61,
+    0x74, 0x65, 0x20, 0x24, 0x5f, 0x54, 0x41, 0x52,
+    0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20,
+    0x61, 0x72, 0x6d, 0x39, 0x32, 0x36, 0x65, 0x6a,
+    0x73, 0x20, 0x2d, 0x65, 0x6e, 0x64, 0x69, 0x61,
+    0x6e, 0x20, 0x24, 0x5f, 0x45, 0x4e, 0x44, 0x49,
+    0x41, 0x4e, 0x20, 0x2d, 0x63, 0x68, 0x61, 0x69,
+    0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
+    0x6f, 0x6e, 0x20, 0x24, 0x5f, 0x54, 0x41, 0x52,
+    0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20,
+    0x2d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
+    0x20, 0x61, 0x72, 0x6d, 0x39, 0x32, 0x36, 0x65,
+    0x6a, 0x73, 0x0d, 0x0a, 0x0d, 0x0a, 0x24, 0x5f,
+    0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41,
+    0x4d, 0x45, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x6b,
+    0x65, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20,
+    0x68, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x23, 0x20, 0x49, 0x6e, 0x74, 0x65,
+    0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x72, 0x61,
+    0x6d, 0x31, 0x20, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
+    0x79, 0x0d, 0x0a, 0x24, 0x5f, 0x54, 0x41, 0x52,
+    0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20,
+    0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
+    0x65, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d,
+    0x61, 0x72, 0x65, 0x61, 0x2d, 0x76, 0x69, 0x72,
+    0x74, 0x20, 0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72,
+    0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d, 0x70,
+    0x68, 0x79, 0x73, 0x20, 0x30, 0x78, 0x30, 0x30,
+    0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x2d,
+    0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65,
+    0x61, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x30,
+    0x78, 0x31, 0x30, 0x30, 0x30, 0x20, 0x2d, 0x77,
+    0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61,
+    0x2d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x20,
+    0x31, 0x0d, 0x0a, 0x0d, 0x0a, 0x73, 0x63, 0x61,
+    0x6e, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x0d,
+    0x0a, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
+    0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x63, 0x6f,
+    0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x20,
+    0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x72,
+    0x65, 0x73, 0x65, 0x74, 0x2d, 0x64, 0x65, 0x61,
+    0x73, 0x73, 0x65, 0x72, 0x74, 0x2d, 0x70, 0x6f,
+    0x73, 0x74, 0x20, 0x7b, 0x61, 0x74, 0x39, 0x31,
+    0x73, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x69, 0x74,
+    0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x23,
+    0x20, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x63,
+    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
+    0x74, 0x69, 0x6f, 0x6e, 0x0d, 0x0a, 0x23, 0x66,
+    0x6c, 0x61, 0x73, 0x68, 0x20, 0x62, 0x61, 0x6e,
+    0x6b, 0x20, 0x63, 0x66, 0x69, 0x20, 0x3c, 0x62,
+    0x61, 0x73, 0x65, 0x3e, 0x20, 0x3c, 0x73, 0x69,
+    0x7a, 0x65, 0x3e, 0x20, 0x3c, 0x63, 0x68, 0x69,
+    0x70, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3e,
+    0x20, 0x3c, 0x62, 0x75, 0x73, 0x20, 0x77, 0x69,
+    0x64, 0x74, 0x68, 0x3e, 0x20, 0x3c, 0x74, 0x61,
+    0x72, 0x67, 0x65, 0x74, 0x23, 0x3e, 0x0d, 0x0a,
+    0x66, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x62, 0x61,
+    0x6e, 0x6b, 0x20, 0x63, 0x66, 0x69, 0x20, 0x30,
+    0x78, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x20, 0x30, 0x78, 0x30, 0x31, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x20, 0x32, 0x20, 0x32,
+    0x20, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
+    0x54, 0x4e, 0x41, 0x4d, 0x45, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x20,
+    0x61, 0x74, 0x39, 0x31, 0x73, 0x61, 0x6d, 0x5f,
+    0x69, 0x6e, 0x69, 0x74, 0x20, 0x7b, 0x20, 0x7d,
+    0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x0d, 0x0a, 0x09,
+    0x23, 0x20, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73,
+    0x65, 0x74, 0x20, 0x63, 0x68, 0x69, 0x70, 0x20,
+    0x72, 0x75, 0x6e, 0x73, 0x20, 0x61, 0x74, 0x20,
+    0x33, 0x32, 0x6b, 0x68, 0x7a, 0x0d, 0x0a, 0x09,
+    0x6a, 0x74, 0x61, 0x67, 0x5f, 0x6b, 0x68, 0x7a,
+    0x20, 0x38, 0x0d, 0x0a, 0x09, 0x68, 0x61, 0x6c,
+    0x74, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
+    0x30, 0x78, 0x66, 0x66, 0x66, 0x66, 0x66, 0x64,
+    0x30, 0x38, 0x20, 0x30, 0x78, 0x61, 0x35, 0x30,
+    0x30, 0x30, 0x35, 0x30, 0x31, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0x20,
+    0x52, 0x53, 0x54, 0x43, 0x5f, 0x4d, 0x52, 0x20,
+    0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
+    0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x72, 0x65,
+    0x73, 0x65, 0x74, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
+    0x77, 0x20, 0x30, 0x78, 0x66, 0x66, 0x66, 0x66,
+    0x66, 0x64, 0x34, 0x34, 0x20, 0x30, 0x78, 0x30,
+    0x30, 0x30, 0x30, 0x38, 0x30, 0x30, 0x30, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x23, 0x20, 0x57, 0x44, 0x54, 0x5f, 0x4d, 0x52,
+    0x20, 0x3a, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62,
+    0x6c, 0x65, 0x20, 0x77, 0x61, 0x74, 0x63, 0x68,
+    0x64, 0x6f, 0x67, 0x0d, 0x0a, 0x0d, 0x0a, 0x09,
+    0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x66, 0x66,
+    0x66, 0x66, 0x66, 0x63, 0x32, 0x30, 0x20, 0x30,
+    0x78, 0x30, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30,
+    0x31, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x23, 0x20, 0x43, 0x4b, 0x47, 0x52,
+    0x5f, 0x4d, 0x4f, 0x52, 0x20, 0x3a, 0x20, 0x65,
+    0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x68,
+    0x65, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x6f,
+    0x73, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x6f,
+    0x72, 0x0d, 0x0a, 0x09, 0x73, 0x6c, 0x65, 0x65,
+    0x70, 0x20, 0x32, 0x30, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0x20,
+    0x77, 0x61, 0x69, 0x74, 0x20, 0x32, 0x30, 0x20,
+    0x6d, 0x73, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x20, 0x30, 0x78, 0x66, 0x66, 0x66, 0x66, 0x66,
+    0x63, 0x33, 0x30, 0x20, 0x30, 0x78, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23,
+    0x20, 0x50, 0x4d, 0x43, 0x5f, 0x4d, 0x43, 0x4b,
+    0x52, 0x20, 0x3a, 0x20, 0x73, 0x77, 0x69, 0x74,
+    0x63, 0x68, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61,
+    0x69, 0x6e, 0x20, 0x6f, 0x73, 0x63, 0x69, 0x6c,
+    0x6c, 0x61, 0x74, 0x6f, 0x72, 0x0d, 0x0a, 0x09,
+    0x73, 0x6c, 0x65, 0x65, 0x70, 0x20, 0x31, 0x30,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x23, 0x20, 0x77, 0x61, 0x69, 0x74,
+    0x20, 0x31, 0x30, 0x20, 0x6d, 0x73, 0x0d, 0x0a,
+    0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x66,
+    0x66, 0x66, 0x66, 0x66, 0x63, 0x32, 0x38, 0x20,
+    0x30, 0x78, 0x32, 0x30, 0x36, 0x30, 0x62, 0x66,
+    0x30, 0x39, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x23, 0x20, 0x43, 0x4b, 0x47,
+    0x52, 0x5f, 0x50, 0x4c, 0x4c, 0x41, 0x52, 0x3a,
+    0x20, 0x53, 0x65, 0x74, 0x20, 0x50, 0x4c, 0x4c,
+    0x41, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
+    0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x31,
+    0x39, 0x38, 0x2c, 0x36, 0x35, 0x36, 0x4d, 0x48,
+    0x7a, 0x0d, 0x0a, 0x09, 0x73, 0x6c, 0x65, 0x65,
+    0x70, 0x20, 0x32, 0x30, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0x20,
+    0x77, 0x61, 0x69, 0x74, 0x20, 0x32, 0x30, 0x20,
+    0x6d, 0x73, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x20, 0x30, 0x78, 0x66, 0x66, 0x66, 0x66, 0x66,
+    0x63, 0x33, 0x30, 0x20, 0x30, 0x78, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23,
+    0x20, 0x50, 0x4d, 0x43, 0x5f, 0x4d, 0x43, 0x4b,
+    0x52, 0x20, 0x3a, 0x20, 0x53, 0x65, 0x6c, 0x65,
+    0x63, 0x74, 0x20, 0x70, 0x72, 0x65, 0x73, 0x63,
+    0x61, 0x6c, 0x65, 0x72, 0x0d, 0x0a, 0x09, 0x73,
+    0x6c, 0x65, 0x65, 0x70, 0x20, 0x31, 0x30, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x23, 0x20, 0x77, 0x61, 0x69, 0x74, 0x20,
+    0x31, 0x30, 0x20, 0x6d, 0x73, 0x0d, 0x0a, 0x09,
+    0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x66, 0x66,
+    0x66, 0x66, 0x66, 0x63, 0x33, 0x30, 0x20, 0x30,
+    0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30,
+    0x32, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x23, 0x20, 0x50, 0x4d, 0x43, 0x5f,
+    0x4d, 0x43, 0x4b, 0x52, 0x20, 0x3a, 0x20, 0x43,
+    0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x66, 0x72, 0x6f,
+    0x6d, 0x20, 0x50, 0x4c, 0x4c, 0x41, 0x20, 0x69,
+    0x73, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
+    0x65, 0x64, 0x0d, 0x0a, 0x09, 0x73, 0x6c, 0x65,
+    0x65, 0x70, 0x20, 0x31, 0x30, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23,
+    0x20, 0x77, 0x61, 0x69, 0x74, 0x20, 0x31, 0x30,
+    0x20, 0x6d, 0x73, 0x0d, 0x0a, 0x0d, 0x0a, 0x09,
+    0x23, 0x20, 0x4e, 0x6f, 0x77, 0x20, 0x72, 0x75,
+    0x6e, 0x20, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x79,
+    0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x61,
+    0x73, 0x74, 0x2e, 0x2e, 0x2e, 0x20, 0x69, 0x65,
+    0x3a, 0x20, 0x31, 0x30, 0x6d, 0x68, 0x7a, 0x21,
+    0x0d, 0x0a, 0x09, 0x6a, 0x74, 0x61, 0x67, 0x5f,
+    0x6b, 0x68, 0x7a, 0x20, 0x31, 0x30, 0x30, 0x30,
+    0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0x20, 0x49,
+    0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x20,
+    0x4a, 0x54, 0x41, 0x47, 0x20, 0x53, 0x70, 0x65,
+    0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x36, 0x20,
+    0x4d, 0x48, 0x7a, 0x0d, 0x0a, 0x09, 0x61, 0x72,
+    0x6d, 0x37, 0x5f, 0x39, 0x20, 0x64, 0x63, 0x63,
+    0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
+    0x64, 0x73, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c,
+    0x65, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x23, 0x20, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
+    0x20, 0x66, 0x61, 0x73, 0x74, 0x65, 0x72, 0x20,
+    0x44, 0x43, 0x43, 0x20, 0x64, 0x6f, 0x77, 0x6e,
+    0x6c, 0x6f, 0x61, 0x64, 0x73, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78,
+    0x66, 0x66, 0x66, 0x66, 0x65, 0x63, 0x30, 0x30,
+    0x20, 0x30, 0x78, 0x30, 0x61, 0x30, 0x61, 0x30,
+    0x61, 0x30, 0x61, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x23, 0x20, 0x53, 0x4d,
+    0x43, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x30,
+    0x20, 0x3a, 0x20, 0x53, 0x65, 0x74, 0x75, 0x70,
+    0x20, 0x53, 0x4d, 0x43, 0x20, 0x66, 0x6f, 0x72,
+    0x20, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x20, 0x4e,
+    0x4f, 0x52, 0x20, 0x46, 0x6c, 0x61, 0x73, 0x68,
+    0x20, 0x4a, 0x53, 0x32, 0x38, 0x46, 0x31, 0x32,
+    0x38, 0x50, 0x33, 0x30, 0x54, 0x38, 0x35, 0x20,
+    0x31, 0x32, 0x38, 0x4d, 0x42, 0x69, 0x74, 0x0d,
+    0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78,
+    0x66, 0x66, 0x66, 0x66, 0x65, 0x63, 0x30, 0x34,
+    0x20, 0x30, 0x78, 0x30, 0x62, 0x30, 0x62, 0x30,
+    0x62, 0x30, 0x62, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x23, 0x20, 0x53, 0x4d,
+    0x43, 0x5f, 0x50, 0x55, 0x4c, 0x53, 0x45, 0x30,
+    0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30,
+    0x78, 0x66, 0x66, 0x66, 0x66, 0x65, 0x63, 0x30,
+    0x38, 0x20, 0x30, 0x78, 0x30, 0x30, 0x31, 0x36,
+    0x30, 0x30, 0x31, 0x36, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0x20, 0x53,
+    0x4d, 0x43, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45,
+    0x30, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
+    0x30, 0x78, 0x66, 0x66, 0x66, 0x66, 0x65, 0x63,
+    0x30, 0x63, 0x20, 0x30, 0x78, 0x30, 0x30, 0x31,
+    0x36, 0x31, 0x30, 0x30, 0x33, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0x20,
+    0x53, 0x4d, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
+    0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x66, 0x6c,
+    0x61, 0x73, 0x68, 0x20, 0x70, 0x72, 0x6f, 0x62,
+    0x65, 0x20, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x23, 0x20, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
+    0x66, 0x79, 0x20, 0x66, 0x6c, 0x61, 0x73, 0x68,
+    0x20, 0x62, 0x61, 0x6e, 0x6b, 0x20, 0x30, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
+    0x30, 0x78, 0x66, 0x66, 0x66, 0x66, 0x66, 0x38,
+    0x37, 0x30, 0x20, 0x30, 0x78, 0x66, 0x66, 0x66,
+    0x66, 0x30, 0x30, 0x30, 0x30, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0x20,
+    0x50, 0x49, 0x4f, 0x5f, 0x41, 0x53, 0x52, 0x20,
+    0x3a, 0x20, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
+    0x20, 0x70, 0x65, 0x72, 0x69, 0x70, 0x68, 0x65,
+    0x72, 0x61, 0x6c, 0x20, 0x66, 0x75, 0x6e, 0x63,
+    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72,
+    0x20, 0x44, 0x31, 0x35, 0x2e, 0x2e, 0x44, 0x33,
+    0x31, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
+    0x30, 0x78, 0x66, 0x66, 0x66, 0x66, 0x66, 0x38,
+    0x30, 0x34, 0x20, 0x30, 0x78, 0x66, 0x66, 0x66,
+    0x66, 0x30, 0x30, 0x30, 0x30, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0x20,
+    0x50, 0x49, 0x4f, 0x5f, 0x50, 0x44, 0x52, 0x20,
+    0x3a, 0x20, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
+    0x65, 0x20, 0x50, 0x49, 0x4f, 0x20, 0x66, 0x75,
+    0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66,
+    0x6f, 0x72, 0x20, 0x44, 0x31, 0x35, 0x2e, 0x2e,
+    0x44, 0x33, 0x31, 0x0d, 0x0a, 0x0d, 0x0a, 0x09,
+    0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x66, 0x66,
+    0x66, 0x66, 0x65, 0x66, 0x31, 0x63, 0x20, 0x30,
+    0x78, 0x32, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x23, 0x20, 0x45, 0x42, 0x49, 0x5f,
+    0x43, 0x53, 0x41, 0x20, 0x3a, 0x20, 0x41, 0x73,
+    0x73, 0x69, 0x67, 0x6e, 0x20, 0x45, 0x42, 0x49,
+    0x20, 0x43, 0x68, 0x69, 0x70, 0x20, 0x53, 0x65,
+    0x6c, 0x65, 0x63, 0x74, 0x20, 0x31, 0x20, 0x74,
+    0x6f, 0x20, 0x53, 0x44, 0x52, 0x41, 0x4d, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
+    0x30, 0x78, 0x66, 0x66, 0x66, 0x66, 0x65, 0x61,
+    0x30, 0x38, 0x20, 0x30, 0x78, 0x38, 0x35, 0x32,
+    0x32, 0x37, 0x32, 0x35, 0x39, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0x20,
+    0x53, 0x44, 0x52, 0x41, 0x4d, 0x43, 0x5f, 0x43,
+    0x52, 0x20, 0x3a, 0x20, 0x43, 0x6f, 0x6e, 0x66,
+    0x69, 0x67, 0x75, 0x72, 0x65, 0x20, 0x53, 0x44,
+    0x52, 0x41, 0x4d, 0x20, 0x28, 0x32, 0x20, 0x78,
+    0x20, 0x53, 0x61, 0x6d, 0x73, 0x75, 0x6e, 0x67,
+    0x20, 0x4b, 0x34, 0x53, 0x35, 0x36, 0x31, 0x36,
+    0x33, 0x32, 0x48, 0x2d, 0x55, 0x43, 0x37, 0x35,
+    0x20, 0x3a, 0x20, 0x34, 0x4d, 0x20, 0x78, 0x20,
+    0x31, 0x36, 0x42, 0x69, 0x74, 0x20, 0x78, 0x20,
+    0x34, 0x20, 0x42, 0x61, 0x6e, 0x6b, 0x73, 0x29,
+    0x0d, 0x0a, 0x09, 0x23, 0x6d, 0x77, 0x77, 0x20,
+    0x30, 0x78, 0x66, 0x66, 0x66, 0x66, 0x65, 0x61,
+    0x30, 0x38, 0x20, 0x30, 0x78, 0x38, 0x35, 0x32,
+    0x32, 0x37, 0x32, 0x35, 0x34, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0x20,
+    0x53, 0x44, 0x52, 0x41, 0x4d, 0x43, 0x5f, 0x43,
+    0x52, 0x20, 0x3a, 0x20, 0x43, 0x6f, 0x6e, 0x66,
+    0x69, 0x67, 0x75, 0x72, 0x65, 0x20, 0x53, 0x44,
+    0x52, 0x41, 0x4d, 0x20, 0x28, 0x32, 0x20, 0x78,
+    0x20, 0x53, 0x61, 0x6d, 0x73, 0x75, 0x6e, 0x67,
+    0x20, 0x4b, 0x34, 0x53, 0x36, 0x34, 0x31, 0x36,
+    0x33, 0x32, 0x48, 0x2d, 0x55, 0x43, 0x37, 0x35,
+    0x20, 0x3a, 0x20, 0x31, 0x4d, 0x20, 0x78, 0x20,
+    0x31, 0x36, 0x42, 0x69, 0x74, 0x20, 0x78, 0x20,
+    0x34, 0x20, 0x42, 0x61, 0x6e, 0x6b, 0x73, 0x29,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x20, 0x30, 0x78, 0x66, 0x66, 0x66, 0x66, 0x65,
+    0x61, 0x30, 0x30, 0x20, 0x30, 0x78, 0x31, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x23,
+    0x20, 0x53, 0x44, 0x52, 0x41, 0x4d, 0x43, 0x5f,
+    0x4d, 0x52, 0x20, 0x3a, 0x20, 0x69, 0x73, 0x73,
+    0x75, 0x65, 0x20, 0x61, 0x20, 0x4e, 0x4f, 0x50,
+    0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
+    0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30,
+    0x78, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x20, 0x30, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
+    0x77, 0x20, 0x30, 0x78, 0x66, 0x66, 0x66, 0x66,
+    0x65, 0x61, 0x30, 0x30, 0x20, 0x30, 0x78, 0x32,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x23, 0x20, 0x53, 0x44, 0x52, 0x41, 0x4d, 0x43,
+    0x5f, 0x4d, 0x52, 0x20, 0x3a, 0x20, 0x69, 0x73,
+    0x73, 0x75, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x27,
+    0x41, 0x6c, 0x6c, 0x20, 0x42, 0x61, 0x6e, 0x6b,
+    0x73, 0x20, 0x50, 0x72, 0x65, 0x63, 0x68, 0x61,
+    0x72, 0x67, 0x65, 0x27, 0x20, 0x63, 0x6f, 0x6d,
+    0x6d, 0x61, 0x6e, 0x64, 0x0d, 0x0a, 0x09, 0x6d,
+    0x77, 0x77, 0x20, 0x30, 0x78, 0x32, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x30, 0x0d,
+    0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78,
+    0x66, 0x66, 0x66, 0x66, 0x65, 0x61, 0x30, 0x30,
+    0x20, 0x30, 0x78, 0x34, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x23, 0x20, 0x53, 0x44,
+    0x52, 0x41, 0x4d, 0x43, 0x5f, 0x4d, 0x52, 0x20,
+    0x3a, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x20,
+    0x38, 0x20, 0x78, 0x20, 0x27, 0x41, 0x75, 0x74,
+    0x6f, 0x2d, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
+    0x68, 0x27, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
+    0x6e, 0x64, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x20, 0x30, 0x78, 0x32, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x20, 0x30, 0x0d, 0x0a, 0x09,
+    0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x66, 0x66,
+    0x66, 0x66, 0x65, 0x61, 0x30, 0x30, 0x20, 0x30,
+    0x78, 0x34, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x20, 0x30, 0x78, 0x32, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x20, 0x30, 0x0d, 0x0a, 0x09,
+    0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x66, 0x66,
+    0x66, 0x66, 0x65, 0x61, 0x30, 0x30, 0x20, 0x30,
+    0x78, 0x34, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x20, 0x30, 0x78, 0x32, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x20, 0x30, 0x0d, 0x0a, 0x09,
+    0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x66, 0x66,
+    0x66, 0x66, 0x65, 0x61, 0x30, 0x30, 0x20, 0x30,
+    0x78, 0x34, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x20, 0x30, 0x78, 0x32, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x20, 0x30, 0x0d, 0x0a, 0x09,
+    0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x66, 0x66,
+    0x66, 0x66, 0x65, 0x61, 0x30, 0x30, 0x20, 0x30,
+    0x78, 0x34, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x20, 0x30, 0x78, 0x32, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x20, 0x30, 0x0d, 0x0a, 0x09,
+    0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x66, 0x66,
+    0x66, 0x66, 0x65, 0x61, 0x30, 0x30, 0x20, 0x30,
+    0x78, 0x34, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x20, 0x30, 0x78, 0x32, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x20, 0x30, 0x0d, 0x0a, 0x09,
+    0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x66, 0x66,
+    0x66, 0x66, 0x65, 0x61, 0x30, 0x30, 0x20, 0x30,
+    0x78, 0x34, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x20, 0x30, 0x78, 0x32, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x20, 0x30, 0x0d, 0x0a, 0x09,
+    0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x66, 0x66,
+    0x66, 0x66, 0x65, 0x61, 0x30, 0x30, 0x20, 0x30,
+    0x78, 0x34, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x20, 0x30, 0x78, 0x32, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x20, 0x30, 0x0d, 0x0a, 0x09,
+    0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x66, 0x66,
+    0x66, 0x66, 0x65, 0x61, 0x30, 0x30, 0x20, 0x30,
+    0x78, 0x33, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x23, 0x20, 0x53, 0x44, 0x52, 0x41,
+    0x4d, 0x43, 0x5f, 0x4d, 0x52, 0x20, 0x3a, 0x20,
+    0x69, 0x73, 0x73, 0x75, 0x65, 0x20, 0x61, 0x20,
+    0x27, 0x4c, 0x6f, 0x61, 0x64, 0x20, 0x4d, 0x6f,
+    0x64, 0x65, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73,
+    0x74, 0x65, 0x72, 0x27, 0x20, 0x63, 0x6f, 0x6d,
+    0x6d, 0x61, 0x6e, 0x64, 0x0d, 0x0a, 0x09, 0x6d,
+    0x77, 0x77, 0x20, 0x30, 0x78, 0x32, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x30, 0x0d,
+    0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78,
+    0x66, 0x66, 0x66, 0x66, 0x65, 0x61, 0x30, 0x30,
+    0x20, 0x30, 0x78, 0x30, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x23, 0x20, 0x53, 0x44,
+    0x52, 0x41, 0x4d, 0x43, 0x5f, 0x4d, 0x52, 0x20,
+    0x3a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
+    0x20, 0x6d, 0x6f, 0x64, 0x65, 0x0d, 0x0a, 0x09,
+    0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x32, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x30,
+    0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30,
+    0x78, 0x66, 0x66, 0x66, 0x66, 0x65, 0x61, 0x30,
+    0x34, 0x20, 0x30, 0x78, 0x35, 0x64, 0x32, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
+    0x20, 0x20, 0x20, 0x20, 0x20, 0x23, 0x20, 0x53,
+    0x44, 0x52, 0x41, 0x4d, 0x43, 0x5f, 0x54, 0x52,
+    0x20, 0x3a, 0x20, 0x53, 0x65, 0x74, 0x20, 0x72,
+    0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x20, 0x74,
+    0x69, 0x6d, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x75,
+    0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x31, 0x35,
+    0x75, 0x73, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x20, 0x43, 0x69, 0x72, 0x72, 0x75, 0x73,
     0x20, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x20, 0x45,
     0x50, 0x39, 0x33, 0x30, 0x31, 0x20, 0x70, 0x72,
@@ -55521,7 +56565,275 @@
     0x73, 0x74, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x69,
     0x73, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x20,
     0x30, 0x20, 0x30, 0x0d, 0x0a, 0x00, 0x00, 0x00,
+    0x23, 0x20, 0x4e, 0x58, 0x50, 0x20, 0x4c, 0x50,
+    0x43, 0x32, 0x31, 0x30, 0x33, 0x20, 0x41, 0x52,
+    0x4d, 0x37, 0x54, 0x44, 0x4d, 0x49, 0x2d, 0x53,
+    0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x33, 0x32,
+    0x6b, 0x42, 0x20, 0x46, 0x6c, 0x61, 0x73, 0x68,
+    0x20, 0x61, 0x6e, 0x64, 0x20, 0x38, 0x6b, 0x42,
+    0x20, 0x53, 0x52, 0x41, 0x4d, 0x2c, 0x20, 0x63,
+    0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x77,
+    0x69, 0x74, 0x68, 0x20, 0x31, 0x32, 0x4d, 0x48,
+    0x7a, 0x20, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61,
+    0x6c, 0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x66, 0x20,
+    0x7b, 0x20, 0x5b, 0x69, 0x6e, 0x66, 0x6f, 0x20,
+    0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x20, 0x43,
+    0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x5d,
+    0x20, 0x7d, 0x20, 0x7b, 0x09, 0x0d, 0x0a, 0x20,
+    0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x5f, 0x43,
+    0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20,
+    0x24, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d,
+    0x45, 0x0d, 0x0a, 0x7d, 0x20, 0x65, 0x6c, 0x73,
+    0x65, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20,
+    0x73, 0x65, 0x74, 0x20, 0x5f, 0x43, 0x48, 0x49,
+    0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x6c, 0x70,
+    0x63, 0x32, 0x31, 0x30, 0x33, 0x0d, 0x0a, 0x7d,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x66, 0x20, 0x7b,
+    0x20, 0x5b, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x65,
+    0x78, 0x69, 0x73, 0x74, 0x73, 0x20, 0x45, 0x4e,
+    0x44, 0x49, 0x41, 0x4e, 0x5d, 0x20, 0x7d, 0x20,
+    0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65,
+    0x74, 0x20, 0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41,
+    0x4e, 0x20, 0x24, 0x45, 0x4e, 0x44, 0x49, 0x41,
+    0x4e, 0x0d, 0x0a, 0x7d, 0x20, 0x65, 0x6c, 0x73,
+    0x65, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20,
+    0x73, 0x65, 0x74, 0x20, 0x5f, 0x45, 0x4e, 0x44,
+    0x49, 0x41, 0x4e, 0x20, 0x6c, 0x69, 0x74, 0x74,
+    0x6c, 0x65, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b, 0x69,
+    0x6e, 0x66, 0x6f, 0x20, 0x65, 0x78, 0x69, 0x73,
+    0x74, 0x73, 0x20, 0x43, 0x50, 0x55, 0x54, 0x41,
+    0x50, 0x49, 0x44, 0x20, 0x5d, 0x20, 0x7d, 0x20,
+    0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65,
+    0x74, 0x20, 0x5f, 0x43, 0x50, 0x55, 0x54, 0x41,
+    0x50, 0x49, 0x44, 0x20, 0x24, 0x43, 0x50, 0x55,
+    0x54, 0x41, 0x50, 0x49, 0x44, 0x0d, 0x0a, 0x7d,
+    0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0d,
+    0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20,
+    0x5f, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50, 0x49,
+    0x44, 0x20, 0x30, 0x78, 0x34, 0x66, 0x31, 0x66,
+    0x30, 0x66, 0x30, 0x66, 0x20, 0x0d, 0x0a, 0x7d,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x20, 0x4c, 0x50,
+    0x43, 0x32, 0x30, 0x30, 0x30, 0x20, 0x2d, 0x3e,
+    0x20, 0x53, 0x52, 0x53, 0x54, 0x20, 0x63, 0x61,
+    0x75, 0x73, 0x65, 0x73, 0x20, 0x54, 0x52, 0x53,
+    0x54, 0x0d, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74,
+    0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20,
+    0x74, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x64,
+    0x5f, 0x73, 0x72, 0x73, 0x74, 0x20, 0x73, 0x72,
+    0x73, 0x74, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x73,
+    0x5f, 0x74, 0x72, 0x73, 0x74, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x6a, 0x74, 0x61, 0x67, 0x20, 0x6e, 0x65,
+    0x77, 0x74, 0x61, 0x70, 0x20, 0x24, 0x5f, 0x43,
+    0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20,
+    0x63, 0x70, 0x75, 0x20, 0x2d, 0x69, 0x72, 0x6c,
+    0x65, 0x6e, 0x20, 0x34, 0x20, 0x2d, 0x69, 0x72,
+    0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x20,
+    0x30, 0x78, 0x31, 0x20, 0x2d, 0x69, 0x72, 0x6d,
+    0x61, 0x73, 0x6b, 0x20, 0x30, 0x78, 0x66, 0x20,
+    0x2d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
+    0x64, 0x2d, 0x69, 0x64, 0x20, 0x24, 0x5f, 0x43,
+    0x50, 0x55, 0x54, 0x41, 0x50, 0x49, 0x44, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x73, 0x65, 0x74, 0x20, 0x5f,
+    0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41,
+    0x4d, 0x45, 0x20, 0x5b, 0x66, 0x6f, 0x72, 0x6d,
+    0x61, 0x74, 0x20, 0x22, 0x25, 0x73, 0x2e, 0x63,
+    0x70, 0x75, 0x22, 0x20, 0x24, 0x5f, 0x43, 0x48,
+    0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x5d, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
+    0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
+    0x20, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
+    0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x61, 0x72,
+    0x6d, 0x37, 0x74, 0x64, 0x6d, 0x69, 0x20, 0x2d,
+    0x65, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x20, 0x24,
+    0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x20,
+    0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2d, 0x70,
+    0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20,
+    0x24, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
+    0x4e, 0x41, 0x4d, 0x45, 0x20, 0x2d, 0x76, 0x61,
+    0x72, 0x69, 0x61, 0x6e, 0x74, 0x20, 0x61, 0x72,
+    0x6d, 0x37, 0x74, 0x64, 0x6d, 0x69, 0x2d, 0x73,
+    0x5f, 0x72, 0x34, 0x0d, 0x0a, 0x0d, 0x0a, 0x23,
+    0x20, 0x38, 0x6b, 0x42, 0x20, 0x6f, 0x66, 0x20,
+    0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
+    0x20, 0x53, 0x52, 0x41, 0x4d, 0x0d, 0x0a, 0x24,
+    0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x4e,
+    0x41, 0x4d, 0x45, 0x20, 0x63, 0x6f, 0x6e, 0x66,
+    0x69, 0x67, 0x75, 0x72, 0x65, 0x20, 0x2d, 0x77,
+    0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61,
+    0x2d, 0x76, 0x69, 0x72, 0x74, 0x20, 0x30, 0x20,
+    0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72,
+    0x65, 0x61, 0x2d, 0x70, 0x68, 0x79, 0x73, 0x20,
+    0x30, 0x78, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b,
+    0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d, 0x73, 0x69,
+    0x7a, 0x65, 0x20, 0x30, 0x78, 0x32, 0x30, 0x30,
+    0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d,
+    0x61, 0x72, 0x65, 0x61, 0x2d, 0x62, 0x61, 0x63,
+    0x6b, 0x75, 0x70, 0x20, 0x30, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x23, 0x20, 0x33, 0x32, 0x6b, 0x42, 0x20,
+    0x6f, 0x66, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72,
+    0x6e, 0x61, 0x6c, 0x20, 0x46, 0x6c, 0x61, 0x73,
+    0x68, 0x2c, 0x20, 0x63, 0x6f, 0x72, 0x65, 0x20,
+    0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x20,
+    0x77, 0x69, 0x74, 0x68, 0x20, 0x31, 0x32, 0x4d,
+    0x48, 0x7a, 0x20, 0x63, 0x72, 0x79, 0x73, 0x74,
+    0x61, 0x6c, 0x0d, 0x0a, 0x23, 0x20, 0x66, 0x6c,
+    0x61, 0x73, 0x68, 0x20, 0x62, 0x61, 0x6e, 0x6b,
+    0x20, 0x6c, 0x70, 0x63, 0x32, 0x30, 0x30, 0x30,
+    0x20, 0x3c, 0x62, 0x61, 0x73, 0x65, 0x3e, 0x20,
+    0x3c, 0x73, 0x69, 0x7a, 0x65, 0x3e, 0x20, 0x30,
+    0x20, 0x30, 0x20, 0x3c, 0x74, 0x61, 0x72, 0x67,
+    0x65, 0x74, 0x23, 0x3e, 0x20, 0x3c, 0x76, 0x61,
+    0x72, 0x69, 0x61, 0x6e, 0x74, 0x3e, 0x20, 0x3c,
+    0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x3e, 0x20, 0x5b,
+    0x63, 0x61, 0x6c, 0x63, 0x5f, 0x63, 0x68, 0x65,
+    0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5d, 0x0d, 0x0a,
+    0x66, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x62, 0x61,
+    0x6e, 0x6b, 0x20, 0x6c, 0x70, 0x63, 0x32, 0x30,
+    0x30, 0x30, 0x20, 0x30, 0x78, 0x30, 0x20, 0x30,
+    0x78, 0x38, 0x30, 0x30, 0x30, 0x20, 0x30, 0x20,
+    0x30, 0x20, 0x30, 0x20, 0x6c, 0x70, 0x63, 0x32,
+    0x30, 0x30, 0x30, 0x5f, 0x76, 0x32, 0x20, 0x31,
+    0x32, 0x30, 0x30, 0x30, 0x20, 0x63, 0x61, 0x6c,
+    0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
+    0x75, 0x6d, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x4c, 0x50, 0x43, 0x2d, 0x32, 0x31, 0x32,
+    0x34, 0x20, 0x43, 0x50, 0x55, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b, 0x69,
+    0x6e, 0x66, 0x6f, 0x20, 0x65, 0x78, 0x69, 0x73,
+    0x74, 0x73, 0x20, 0x43, 0x48, 0x49, 0x50, 0x4e,
+    0x41, 0x4d, 0x45, 0x5d, 0x20, 0x7d, 0x20, 0x7b,
+    0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74,
+    0x20, 0x20, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e,
+    0x41, 0x4d, 0x45, 0x20, 0x24, 0x43, 0x48, 0x49,
+    0x50, 0x4e, 0x41, 0x4d, 0x45, 0x0d, 0x0a, 0x7d,
+    0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0d,
+    0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20,
+    0x20, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
+    0x4d, 0x45, 0x20, 0x6c, 0x70, 0x63, 0x32, 0x31,
+    0x32, 0x34, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b, 0x69,
+    0x6e, 0x66, 0x6f, 0x20, 0x65, 0x78, 0x69, 0x73,
+    0x74, 0x73, 0x20, 0x45, 0x4e, 0x44, 0x49, 0x41,
+    0x4e, 0x5d, 0x20, 0x7d, 0x20, 0x7b, 0x0d, 0x0a,
+    0x20, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x20,
+    0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x20,
+    0x24, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x0d,
+    0x0a, 0x7d, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20,
+    0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65,
+    0x74, 0x20, 0x20, 0x5f, 0x45, 0x4e, 0x44, 0x49,
+    0x41, 0x4e, 0x20, 0x6c, 0x69, 0x74, 0x74, 0x6c,
+    0x65, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b, 0x69, 0x6e,
+    0x66, 0x6f, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74,
+    0x73, 0x20, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50,
+    0x49, 0x44, 0x20, 0x5d, 0x20, 0x7d, 0x20, 0x7b,
+    0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74,
+    0x20, 0x5f, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50,
+    0x49, 0x44, 0x20, 0x24, 0x43, 0x50, 0x55, 0x54,
+    0x41, 0x50, 0x49, 0x44, 0x0d, 0x0a, 0x7d, 0x20,
+    0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0d, 0x0a,
+    0x20, 0x20, 0x23, 0x20, 0x66, 0x6f, 0x72, 0x63,
+    0x65, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x72, 0x72,
+    0x6f, 0x72, 0x20, 0x74, 0x69, 0x6c, 0x6c, 0x20,
+    0x77, 0x65, 0x20, 0x67, 0x65, 0x74, 0x20, 0x61,
+    0x20, 0x67, 0x6f, 0x6f, 0x64, 0x20, 0x6e, 0x75,
+    0x6d, 0x62, 0x65, 0x72, 0x0d, 0x0a, 0x20, 0x20,
+    0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x5f, 0x43,
+    0x50, 0x55, 0x54, 0x41, 0x50, 0x49, 0x44, 0x20,
+    0x30, 0x78, 0x34, 0x66, 0x31, 0x66, 0x30, 0x66,
+    0x30, 0x66, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x23, 0x75, 0x73, 0x65, 0x20,
+    0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64,
+    0x20, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65,
+    0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x20, 0x6f,
+    0x72, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
+    0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63,
+    0x61, 0x6e, 0x27, 0x74, 0x20, 0x73, 0x65, 0x74,
+    0x20, 0x54, 0x52, 0x53, 0x54, 0x2f, 0x53, 0x52,
+    0x53, 0x54, 0x20, 0x73, 0x65, 0x70, 0x61, 0x72,
+    0x61, 0x74, 0x65, 0x6c, 0x79, 0x0d, 0x0a, 0x72,
+    0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
+    0x66, 0x69, 0x67, 0x20, 0x74, 0x72, 0x73, 0x74,
+    0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x72, 0x73,
+    0x74, 0x20, 0x73, 0x72, 0x73, 0x74, 0x5f, 0x70,
+    0x75, 0x6c, 0x6c, 0x73, 0x5f, 0x74, 0x72, 0x73,
+    0x74, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x5f,
+    0x6e, 0x73, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x65,
+    0x6c, 0x61, 0x79, 0x20, 0x31, 0x30, 0x0d, 0x0a,
+    0x6a, 0x74, 0x61, 0x67, 0x5f, 0x6b, 0x68, 0x7a,
+    0x20, 0x31, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x23, 0x6a, 0x74, 0x61, 0x67, 0x20, 0x73,
+    0x63, 0x61, 0x6e, 0x20, 0x63, 0x68, 0x61, 0x69,
+    0x6e, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x20,
+    0x6e, 0x65, 0x77, 0x74, 0x61, 0x70, 0x20, 0x24,
+    0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d,
+    0x45, 0x20, 0x63, 0x70, 0x75, 0x20, 0x2d, 0x69,
+    0x72, 0x6c, 0x65, 0x6e, 0x20, 0x34, 0x20, 0x2d,
+    0x69, 0x72, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
+    0x65, 0x20, 0x30, 0x78, 0x31, 0x20, 0x2d, 0x69,
+    0x72, 0x6d, 0x61, 0x73, 0x6b, 0x20, 0x30, 0x78,
+    0x66, 0x20, 0x2d, 0x65, 0x78, 0x70, 0x65, 0x63,
+    0x74, 0x65, 0x64, 0x2d, 0x69, 0x64, 0x20, 0x24,
+    0x5f, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50, 0x49,
+    0x44, 0x0d, 0x0a, 0x0d, 0x0a, 0x73, 0x65, 0x74,
+    0x20, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
+    0x4e, 0x41, 0x4d, 0x45, 0x20, 0x5b, 0x66, 0x6f,
+    0x72, 0x6d, 0x61, 0x74, 0x20, 0x22, 0x25, 0x73,
+    0x2e, 0x63, 0x70, 0x75, 0x22, 0x20, 0x24, 0x5f,
+    0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45,
+    0x5d, 0x0d, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
+    0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
+    0x20, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
+    0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x61, 0x72,
+    0x6d, 0x37, 0x74, 0x64, 0x6d, 0x69, 0x20, 0x2d,
+    0x65, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x20, 0x24,
+    0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x20,
+    0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2d, 0x70,
+    0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20,
+    0x24, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
+    0x4e, 0x41, 0x4d, 0x45, 0x20, 0x2d, 0x76, 0x61,
+    0x72, 0x69, 0x61, 0x6e, 0x74, 0x20, 0x61, 0x72,
+    0x6d, 0x37, 0x74, 0x64, 0x6d, 0x69, 0x2d, 0x73,
+    0x5f, 0x72, 0x34, 0x0d, 0x0a, 0x0d, 0x0a, 0x24,
+    0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x4e,
+    0x41, 0x4d, 0x45, 0x20, 0x63, 0x6f, 0x6e, 0x66,
+    0x69, 0x67, 0x75, 0x72, 0x65, 0x20, 0x2d, 0x77,
+    0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61,
+    0x2d, 0x76, 0x69, 0x72, 0x74, 0x20, 0x30, 0x20,
+    0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72,
+    0x65, 0x61, 0x2d, 0x70, 0x68, 0x79, 0x73, 0x20,
+    0x30, 0x78, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b,
+    0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d, 0x73, 0x69,
+    0x7a, 0x65, 0x20, 0x30, 0x78, 0x34, 0x30, 0x30,
+    0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d,
+    0x61, 0x72, 0x65, 0x61, 0x2d, 0x62, 0x61, 0x63,
+    0x6b, 0x75, 0x70, 0x20, 0x30, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x23, 0x66, 0x6c, 0x61, 0x73,
+    0x68, 0x20, 0x62, 0x61, 0x6e, 0x6b, 0x20, 0x3c,
+    0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x3e, 0x20,
+    0x3c, 0x62, 0x61, 0x73, 0x65, 0x3e, 0x20, 0x3c,
+    0x73, 0x69, 0x7a, 0x65, 0x3e, 0x20, 0x3c, 0x63,
+    0x68, 0x69, 0x70, 0x5f, 0x77, 0x69, 0x64, 0x74,
+    0x68, 0x3e, 0x20, 0x3c, 0x62, 0x75, 0x73, 0x5f,
+    0x77, 0x69, 0x64, 0x74, 0x68, 0x3e, 0x0d, 0x0a,
+    0x66, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x62, 0x61,
+    0x6e, 0x6b, 0x20, 0x6c, 0x70, 0x63, 0x32, 0x30,
+    0x30, 0x30, 0x20, 0x30, 0x78, 0x30, 0x20, 0x30,
+    0x78, 0x34, 0x30, 0x30, 0x30, 0x30, 0x20, 0x30,
+    0x20, 0x30, 0x20, 0x30, 0x20, 0x6c, 0x70, 0x63,
+    0x32, 0x30, 0x30, 0x30, 0x5f, 0x76, 0x31, 0x20,
+    0x31, 0x34, 0x37, 0x34, 0x35, 0x20, 0x63, 0x61,
+    0x6c, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
+    0x73, 0x75, 0x6d, 0x0d, 0x0a, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x4c, 0x50, 0x43, 0x2d, 0x32, 0x31, 0x32,
     0x39, 0x20, 0x43, 0x50, 0x55, 0x0d, 0x0a, 0x0d,
     0x0a, 0x0d, 0x0a, 0x69, 0x66, 0x20, 0x7b, 0x20,
     0x5b, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x65, 0x78,
@@ -55649,218 +56961,234 @@
     0x61, 0x6c, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63,
     0x6b, 0x73, 0x75, 0x6d, 0x0d, 0x0a, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b, 0x69, 0x6e,
-    0x66, 0x6f, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74,
-    0x73, 0x20, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
-    0x4d, 0x45, 0x5d, 0x20, 0x7d, 0x20, 0x7b, 0x09,
-    0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74,
-    0x20, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
-    0x4d, 0x45, 0x20, 0x24, 0x43, 0x48, 0x49, 0x50,
-    0x4e, 0x41, 0x4d, 0x45, 0x0d, 0x0a, 0x7d, 0x20,
-    0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0d, 0x0a,
+    0x23, 0x20, 0x55, 0x73, 0x65, 0x20, 0x52, 0x43,
+    0x4c, 0x4b, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x52,
+    0x43, 0x4c, 0x4b, 0x20, 0x69, 0x73, 0x20, 0x6e,
+    0x6f, 0x74, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c,
+    0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x61, 0x6c,
+    0x6c, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x74,
+    0x6f, 0x20, 0x35, 0x30, 0x30, 0x6b, 0x48, 0x7a,
+    0x2e, 0x20, 0x0d, 0x0a, 0x23, 0x20, 0x0d, 0x0a,
+    0x23, 0x20, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
+    0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6e, 0x20, 0x63,
+    0x61, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x79,
+    0x6f, 0x75, 0x20, 0x6d, 0x69, 0x67, 0x68, 0x74,
+    0x20, 0x62, 0x65, 0x20, 0x61, 0x62, 0x6c, 0x65,
+    0x20, 0x74, 0x6f, 0x20, 0x65, 0x65, 0x6b, 0x20,
+    0x74, 0x68, 0x69, 0x73, 0x20, 0x75, 0x70, 0x20,
+    0x74, 0x6f, 0x20, 0x32, 0x30, 0x30, 0x30, 0x6b,
+    0x48, 0x7a, 0x2e, 0x0d, 0x0a, 0x6a, 0x74, 0x61,
+    0x67, 0x5f, 0x72, 0x63, 0x6c, 0x6b, 0x20, 0x35,
+    0x30, 0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x66,
+    0x20, 0x7b, 0x20, 0x5b, 0x69, 0x6e, 0x66, 0x6f,
+    0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x20,
+    0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45,
+    0x5d, 0x20, 0x7d, 0x20, 0x7b, 0x09, 0x0d, 0x0a,
     0x20, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x5f,
     0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45,
-    0x20, 0x6c, 0x70, 0x63, 0x32, 0x31, 0x34, 0x38,
-    0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x69,
-    0x66, 0x20, 0x7b, 0x20, 0x5b, 0x69, 0x6e, 0x66,
-    0x6f, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
-    0x20, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x5d,
-    0x20, 0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20,
+    0x20, 0x24, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
+    0x4d, 0x45, 0x0d, 0x0a, 0x7d, 0x20, 0x65, 0x6c,
+    0x73, 0x65, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20,
+    0x20, 0x73, 0x65, 0x74, 0x20, 0x5f, 0x43, 0x48,
+    0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x6c,
+    0x70, 0x63, 0x32, 0x31, 0x34, 0x38, 0x0d, 0x0a,
+    0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x66, 0x20,
+    0x7b, 0x20, 0x5b, 0x69, 0x6e, 0x66, 0x6f, 0x20,
+    0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x20, 0x45,
+    0x4e, 0x44, 0x49, 0x41, 0x4e, 0x5d, 0x20, 0x7d,
+    0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73,
+    0x65, 0x74, 0x20, 0x5f, 0x45, 0x4e, 0x44, 0x49,
+    0x41, 0x4e, 0x20, 0x24, 0x45, 0x4e, 0x44, 0x49,
+    0x41, 0x4e, 0x0d, 0x0a, 0x7d, 0x20, 0x65, 0x6c,
+    0x73, 0x65, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20,
     0x20, 0x73, 0x65, 0x74, 0x20, 0x5f, 0x45, 0x4e,
-    0x44, 0x49, 0x41, 0x4e, 0x20, 0x24, 0x45, 0x4e,
-    0x44, 0x49, 0x41, 0x4e, 0x0d, 0x0a, 0x7d, 0x20,
-    0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0d, 0x0a,
-    0x20, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x5f,
-    0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x20, 0x6c,
-    0x69, 0x74, 0x74, 0x6c, 0x65, 0x0d, 0x0a, 0x7d,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x66, 0x20, 0x7b,
-    0x20, 0x5b, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x65,
-    0x78, 0x69, 0x73, 0x74, 0x73, 0x20, 0x43, 0x50,
-    0x55, 0x54, 0x41, 0x50, 0x49, 0x44, 0x20, 0x5d,
-    0x20, 0x7d, 0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20,
-    0x20, 0x73, 0x65, 0x74, 0x20, 0x5f, 0x43, 0x50,
-    0x55, 0x54, 0x41, 0x50, 0x49, 0x44, 0x20, 0x24,
-    0x43, 0x50, 0x55, 0x54, 0x41, 0x50, 0x49, 0x44,
-    0x0d, 0x0a, 0x7d, 0x20, 0x65, 0x6c, 0x73, 0x65,
+    0x44, 0x49, 0x41, 0x4e, 0x20, 0x6c, 0x69, 0x74,
+    0x74, 0x6c, 0x65, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b,
+    0x69, 0x6e, 0x66, 0x6f, 0x20, 0x65, 0x78, 0x69,
+    0x73, 0x74, 0x73, 0x20, 0x43, 0x50, 0x55, 0x54,
+    0x41, 0x50, 0x49, 0x44, 0x20, 0x5d, 0x20, 0x7d,
     0x20, 0x7b, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73,
     0x65, 0x74, 0x20, 0x5f, 0x43, 0x50, 0x55, 0x54,
-    0x41, 0x50, 0x49, 0x44, 0x20, 0x30, 0x78, 0x34,
-    0x66, 0x31, 0x66, 0x30, 0x66, 0x30, 0x66, 0x0d,
-    0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x6a, 0x74,
-    0x61, 0x67, 0x5f, 0x6e, 0x73, 0x72, 0x73, 0x74,
-    0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x20, 0x32,
-    0x30, 0x30, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67,
-    0x5f, 0x6e, 0x74, 0x72, 0x73, 0x74, 0x5f, 0x64,
+    0x41, 0x50, 0x49, 0x44, 0x20, 0x24, 0x43, 0x50,
+    0x55, 0x54, 0x41, 0x50, 0x49, 0x44, 0x0d, 0x0a,
+    0x7d, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b,
+    0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74,
+    0x20, 0x5f, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50,
+    0x49, 0x44, 0x20, 0x30, 0x78, 0x34, 0x66, 0x31,
+    0x66, 0x30, 0x66, 0x30, 0x66, 0x0d, 0x0a, 0x7d,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67,
+    0x5f, 0x6e, 0x73, 0x72, 0x73, 0x74, 0x5f, 0x64,
     0x65, 0x6c, 0x61, 0x79, 0x20, 0x32, 0x30, 0x30,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x20, 0x4e, 0x4f,
-    0x54, 0x45, 0x21, 0x21, 0x21, 0x20, 0x4c, 0x50,
-    0x43, 0x73, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20,
-    0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x70, 0x75,
-    0x6c, 0x6c, 0x65, 0x64, 0x20, 0x77, 0x68, 0x69,
-    0x6c, 0x65, 0x20, 0x52, 0x54, 0x43, 0x4b, 0x20,
-    0x69, 0x73, 0x20, 0x6c, 0x6f, 0x77, 0x2e, 0x20,
-    0x30, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x74,
-    0x69, 0x76, 0x61, 0x74, 0x65, 0x0d, 0x0a, 0x23,
-    0x20, 0x4a, 0x54, 0x41, 0x47, 0x2c, 0x20, 0x70,
-    0x6f, 0x77, 0x65, 0x72, 0x2d, 0x6f, 0x6e, 0x20,
-    0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x69, 0x73,
-    0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x6e, 0x6f,
-    0x75, 0x67, 0x68, 0x2c, 0x20, 0x69, 0x2e, 0x65,
-    0x2e, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e, 0x65,
-    0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65,
-    0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x0d,
-    0x0a, 0x23, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74,
-    0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20,
-    0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x62,
-    0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x61,
-    0x6c, 0x6b, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
-    0x65, 0x20, 0x4c, 0x50, 0x43, 0x32, 0x31, 0x34,
-    0x38, 0x2c, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63,
-    0x68, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74,
-    0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c,
-    0x65, 0x2e, 0x0d, 0x0a, 0x0d, 0x0a, 0x72, 0x65,
-    0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
-    0x69, 0x67, 0x20, 0x74, 0x72, 0x73, 0x74, 0x5f,
-    0x61, 0x6e, 0x64, 0x5f, 0x73, 0x72, 0x73, 0x74,
-    0x20, 0x73, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x75,
-    0x6c, 0x6c, 0x73, 0x5f, 0x74, 0x72, 0x73, 0x74,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67,
-    0x20, 0x6e, 0x65, 0x77, 0x74, 0x61, 0x70, 0x20,
-    0x24, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
-    0x4d, 0x45, 0x20, 0x63, 0x70, 0x75, 0x20, 0x2d,
-    0x69, 0x72, 0x6c, 0x65, 0x6e, 0x20, 0x34, 0x20,
-    0x2d, 0x69, 0x72, 0x63, 0x61, 0x70, 0x74, 0x75,
-    0x72, 0x65, 0x20, 0x30, 0x78, 0x31, 0x20, 0x2d,
-    0x69, 0x72, 0x6d, 0x61, 0x73, 0x6b, 0x20, 0x30,
-    0x78, 0x66, 0x20, 0x2d, 0x65, 0x78, 0x70, 0x65,
-    0x63, 0x74, 0x65, 0x64, 0x2d, 0x69, 0x64, 0x20,
-    0x24, 0x5f, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50,
-    0x49, 0x44, 0x0d, 0x0a, 0x0d, 0x0a, 0x73, 0x65,
-    0x74, 0x20, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
-    0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x5b, 0x66,
-    0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x22, 0x25,
-    0x73, 0x2e, 0x63, 0x70, 0x75, 0x22, 0x20, 0x24,
-    0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d,
-    0x45, 0x5d, 0x0d, 0x0a, 0x0d, 0x0a, 0x74, 0x61,
-    0x72, 0x67, 0x65, 0x74, 0x20, 0x63, 0x72, 0x65,
-    0x61, 0x74, 0x65, 0x20, 0x24, 0x5f, 0x54, 0x41,
-    0x52, 0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45,
-    0x20, 0x61, 0x72, 0x6d, 0x37, 0x74, 0x64, 0x6d,
-    0x69, 0x20, 0x2d, 0x65, 0x6e, 0x64, 0x69, 0x61,
-    0x6e, 0x20, 0x24, 0x5f, 0x45, 0x4e, 0x44, 0x49,
-    0x41, 0x4e, 0x20, 0x2d, 0x63, 0x68, 0x61, 0x69,
-    0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
-    0x6f, 0x6e, 0x20, 0x24, 0x5f, 0x54, 0x41, 0x52,
-    0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20,
-    0x2d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
-    0x20, 0x61, 0x72, 0x6d, 0x37, 0x74, 0x64, 0x6d,
-    0x69, 0x2d, 0x73, 0x5f, 0x72, 0x34, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x5f, 0x6e,
+    0x74, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c,
+    0x61, 0x79, 0x20, 0x32, 0x30, 0x30, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x23, 0x20, 0x4e, 0x4f, 0x54, 0x45,
+    0x21, 0x21, 0x21, 0x20, 0x4c, 0x50, 0x43, 0x73,
+    0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x72, 0x65,
+    0x73, 0x65, 0x74, 0x20, 0x70, 0x75, 0x6c, 0x6c,
+    0x65, 0x64, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65,
+    0x20, 0x52, 0x54, 0x43, 0x4b, 0x20, 0x69, 0x73,
+    0x20, 0x6c, 0x6f, 0x77, 0x2e, 0x20, 0x30, 0x20,
+    0x74, 0x6f, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76,
+    0x61, 0x74, 0x65, 0x0d, 0x0a, 0x23, 0x20, 0x4a,
+    0x54, 0x41, 0x47, 0x2c, 0x20, 0x70, 0x6f, 0x77,
+    0x65, 0x72, 0x2d, 0x6f, 0x6e, 0x20, 0x72, 0x65,
+    0x73, 0x65, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e,
+    0x6f, 0x74, 0x20, 0x65, 0x6e, 0x6f, 0x75, 0x67,
+    0x68, 0x2c, 0x20, 0x69, 0x2e, 0x65, 0x2e, 0x20,
+    0x79, 0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65, 0x64,
+    0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66,
+    0x6f, 0x72, 0x6d, 0x20, 0x61, 0x0d, 0x0a, 0x23,
+    0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x62,
+    0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x62, 0x65,
+    0x69, 0x6e, 0x67, 0x20, 0x61, 0x62, 0x6c, 0x65,
+    0x20, 0x74, 0x6f, 0x20, 0x74, 0x61, 0x6c, 0x6b,
+    0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20,
+    0x4c, 0x50, 0x43, 0x32, 0x31, 0x34, 0x38, 0x2c,
+    0x20, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x20,
+    0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x70,
+    0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x2e,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x72, 0x65, 0x73, 0x65,
+    0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
+    0x20, 0x74, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x6e,
+    0x64, 0x5f, 0x73, 0x72, 0x73, 0x74, 0x20, 0x73,
+    0x72, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x6c, 0x6c,
+    0x73, 0x5f, 0x74, 0x72, 0x73, 0x74, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x20, 0x6e,
+    0x65, 0x77, 0x74, 0x61, 0x70, 0x20, 0x24, 0x5f,
+    0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45,
+    0x20, 0x63, 0x70, 0x75, 0x20, 0x2d, 0x69, 0x72,
+    0x6c, 0x65, 0x6e, 0x20, 0x34, 0x20, 0x2d, 0x69,
+    0x72, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
+    0x20, 0x30, 0x78, 0x31, 0x20, 0x2d, 0x69, 0x72,
+    0x6d, 0x61, 0x73, 0x6b, 0x20, 0x30, 0x78, 0x66,
+    0x20, 0x2d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
+    0x65, 0x64, 0x2d, 0x69, 0x64, 0x20, 0x24, 0x5f,
+    0x43, 0x50, 0x55, 0x54, 0x41, 0x50, 0x49, 0x44,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x73, 0x65, 0x74, 0x20,
+    0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x4e,
+    0x41, 0x4d, 0x45, 0x20, 0x5b, 0x66, 0x6f, 0x72,
+    0x6d, 0x61, 0x74, 0x20, 0x22, 0x25, 0x73, 0x2e,
+    0x63, 0x70, 0x75, 0x22, 0x20, 0x24, 0x5f, 0x43,
+    0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x5d,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x74, 0x61, 0x72, 0x67,
+    0x65, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
+    0x65, 0x20, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47,
+    0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x61,
+    0x72, 0x6d, 0x37, 0x74, 0x64, 0x6d, 0x69, 0x20,
+    0x2d, 0x65, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x20,
+    0x24, 0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e,
+    0x20, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2d,
+    0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
+    0x20, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
+    0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x2d, 0x76,
+    0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x20, 0x61,
+    0x72, 0x6d, 0x37, 0x74, 0x64, 0x6d, 0x69, 0x2d,
+    0x73, 0x5f, 0x72, 0x34, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x24, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
+    0x4e, 0x41, 0x4d, 0x45, 0x20, 0x63, 0x6f, 0x6e,
+    0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x20, 0x2d,
+    0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65,
+    0x61, 0x2d, 0x76, 0x69, 0x72, 0x74, 0x20, 0x30,
+    0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61,
+    0x72, 0x65, 0x61, 0x2d, 0x70, 0x68, 0x79, 0x73,
+    0x20, 0x30, 0x78, 0x34, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72,
+    0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d, 0x73,
+    0x69, 0x7a, 0x65, 0x20, 0x30, 0x78, 0x34, 0x30,
+    0x30, 0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b,
+    0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d, 0x62, 0x61,
+    0x63, 0x6b, 0x75, 0x70, 0x20, 0x30, 0x0d, 0x0a,
     0x0d, 0x0a, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47,
     0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x63,
     0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
-    0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61,
-    0x72, 0x65, 0x61, 0x2d, 0x76, 0x69, 0x72, 0x74,
-    0x20, 0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b,
-    0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d, 0x70, 0x68,
-    0x79, 0x73, 0x20, 0x30, 0x78, 0x34, 0x30, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x2d, 0x77,
-    0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61,
-    0x2d, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x30, 0x78,
-    0x34, 0x30, 0x30, 0x30, 0x20, 0x2d, 0x77, 0x6f,
-    0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d,
-    0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x20, 0x30,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x24, 0x5f, 0x54, 0x41,
-    0x52, 0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45,
-    0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
-    0x72, 0x65, 0x20, 0x2d, 0x65, 0x76, 0x65, 0x6e,
-    0x74, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x2d,
-    0x69, 0x6e, 0x69, 0x74, 0x20, 0x7b, 0x0d, 0x0a,
-    0x09, 0x23, 0x20, 0x46, 0x6f, 0x72, 0x63, 0x65,
-    0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20,
-    0x69, 0x6e, 0x74, 0x6f, 0x20, 0x41, 0x52, 0x4d,
-    0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x0d,
-    0x0a, 0x09, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72,
-    0x65, 0x73, 0x65, 0x74, 0x5f, 0x68, 0x61, 0x6c,
-    0x74, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x23, 0x20,
-    0x44, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x72,
-    0x65, 0x6d, 0x61, 0x70, 0x20, 0x30, 0x78, 0x30,
-    0x30, 0x30, 0x30, 0x2d, 0x30, 0x78, 0x30, 0x30,
-    0x32, 0x30, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e,
-    0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x62,
-    0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
-    0x6c, 0x61, 0x73, 0x68, 0x20, 0x28, 0x69, 0x2e,
-    0x65, 0x2e, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63,
-    0x74, 0x0d, 0x0a, 0x09, 0x23, 0x20, 0x22, 0x55,
-    0x73, 0x65, 0x72, 0x20, 0x46, 0x6c, 0x61, 0x73,
-    0x68, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x20,
-    0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x6e,
-    0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x20,
-    0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x20,
-    0x61, 0x72, 0x65, 0x20, 0x5f, 0x6e, 0x6f, 0x74,
-    0x5f, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x70, 0x70,
-    0x65, 0x64, 0x2c, 0x0d, 0x0a, 0x09, 0x23, 0x20,
-    0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x73, 0x69,
-    0x64, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x66, 0x6c,
-    0x61, 0x73, 0x68, 0x20, 0x69, 0x6e, 0x73, 0x74,
-    0x65, 0x61, 0x64, 0x29, 0x2e, 0x0d, 0x0a, 0x09,
-    0x23, 0x0d, 0x0a, 0x09, 0x23, 0x20, 0x53, 0x65,
-    0x65, 0x20, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
-    0x6e, 0x20, 0x37, 0x2e, 0x31, 0x20, 0x6f, 0x6e,
-    0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x33, 0x32,
-    0x20, 0x28, 0x22, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
-    0x79, 0x20, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
-    0x67, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
-    0x6c, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
-    0x65, 0x72, 0x22, 0x29, 0x20, 0x69, 0x6e, 0x0d,
-    0x0a, 0x09, 0x23, 0x20, 0x22, 0x55, 0x4d, 0x31,
-    0x30, 0x31, 0x33, 0x39, 0x3a, 0x20, 0x56, 0x6f,
-    0x6c, 0x75, 0x6d, 0x65, 0x20, 0x31, 0x3a, 0x20,
-    0x4c, 0x50, 0x43, 0x32, 0x31, 0x34, 0x78, 0x20,
-    0x55, 0x73, 0x65, 0x72, 0x20, 0x4d, 0x61, 0x6e,
-    0x75, 0x61, 0x6c, 0x22, 0x2c, 0x20, 0x52, 0x65,
-    0x76, 0x2e, 0x20, 0x30, 0x32, 0x20, 0x2d, 0x2d,
-    0x20, 0x32, 0x35, 0x20, 0x4a, 0x75, 0x6c, 0x79,
-    0x20, 0x32, 0x30, 0x30, 0x36, 0x2e, 0x0d, 0x0a,
-    0x09, 0x23, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a,
-    0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x73, 0x74,
-    0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x69, 0x63,
-    0x73, 0x2e, 0x6e, 0x78, 0x70, 0x2e, 0x63, 0x6f,
-    0x6d, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
-    0x74, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
-    0x6e, 0x74, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72,
-    0x6f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
-    0x6c, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x64, 0x66,
-    0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61,
-    0x6e, 0x75, 0x61, 0x6c, 0x2e, 0x6c, 0x70, 0x63,
-    0x32, 0x31, 0x34, 0x31, 0x2e, 0x6c, 0x70, 0x63,
-    0x32, 0x31, 0x34, 0x32, 0x2e, 0x6c, 0x70, 0x63,
-    0x32, 0x31, 0x34, 0x34, 0x2e, 0x6c, 0x70, 0x63,
-    0x32, 0x31, 0x34, 0x36, 0x2e, 0x6c, 0x70, 0x63,
-    0x32, 0x31, 0x34, 0x38, 0x2e, 0x70, 0x64, 0x66,
-    0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x62, 0x20, 0x30,
-    0x78, 0x45, 0x30, 0x31, 0x46, 0x43, 0x30, 0x34,
-    0x30, 0x20, 0x30, 0x78, 0x30, 0x31, 0x0d, 0x0a,
-    0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x20, 0x66,
+    0x20, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20,
+    0x72, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x69, 0x6e,
+    0x69, 0x74, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x23,
+    0x20, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x20, 0x74,
+    0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x69, 0x6e,
+    0x74, 0x6f, 0x20, 0x41, 0x52, 0x4d, 0x20, 0x73,
+    0x74, 0x61, 0x74, 0x65, 0x2e, 0x0d, 0x0a, 0x09,
+    0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x73,
+    0x65, 0x74, 0x5f, 0x68, 0x61, 0x6c, 0x74, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x09, 0x23, 0x20, 0x44, 0x6f,
+    0x20, 0x6e, 0x6f, 0x74, 0x20, 0x72, 0x65, 0x6d,
+    0x61, 0x70, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
+    0x30, 0x2d, 0x30, 0x78, 0x30, 0x30, 0x32, 0x30,
+    0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x79, 0x74,
+    0x68, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x75, 0x74,
+    0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x61,
+    0x73, 0x68, 0x20, 0x28, 0x69, 0x2e, 0x65, 0x2e,
+    0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x0d,
+    0x0a, 0x09, 0x23, 0x20, 0x22, 0x55, 0x73, 0x65,
+    0x72, 0x20, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x20,
+    0x4d, 0x6f, 0x64, 0x65, 0x22, 0x20, 0x77, 0x68,
+    0x65, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65,
+    0x72, 0x72, 0x75, 0x70, 0x74, 0x20, 0x76, 0x65,
+    0x63, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x61, 0x72,
+    0x65, 0x20, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x20,
+    0x72, 0x65, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
+    0x2c, 0x0d, 0x0a, 0x09, 0x23, 0x20, 0x61, 0x6e,
+    0x64, 0x20, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65,
+    0x20, 0x69, 0x6e, 0x20, 0x66, 0x6c, 0x61, 0x73,
+    0x68, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61,
+    0x64, 0x29, 0x2e, 0x0d, 0x0a, 0x09, 0x23, 0x0d,
+    0x0a, 0x09, 0x23, 0x20, 0x53, 0x65, 0x65, 0x20,
+    0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
+    0x37, 0x2e, 0x31, 0x20, 0x6f, 0x6e, 0x20, 0x70,
+    0x61, 0x67, 0x65, 0x20, 0x33, 0x32, 0x20, 0x28,
+    0x22, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x20,
+    0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x20,
+    0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x20,
+    0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
+    0x22, 0x29, 0x20, 0x69, 0x6e, 0x0d, 0x0a, 0x09,
+    0x23, 0x20, 0x22, 0x55, 0x4d, 0x31, 0x30, 0x31,
+    0x33, 0x39, 0x3a, 0x20, 0x56, 0x6f, 0x6c, 0x75,
+    0x6d, 0x65, 0x20, 0x31, 0x3a, 0x20, 0x4c, 0x50,
+    0x43, 0x32, 0x31, 0x34, 0x78, 0x20, 0x55, 0x73,
+    0x65, 0x72, 0x20, 0x4d, 0x61, 0x6e, 0x75, 0x61,
+    0x6c, 0x22, 0x2c, 0x20, 0x52, 0x65, 0x76, 0x2e,
+    0x20, 0x30, 0x32, 0x20, 0x2d, 0x2d, 0x20, 0x32,
+    0x35, 0x20, 0x4a, 0x75, 0x6c, 0x79, 0x20, 0x32,
+    0x30, 0x30, 0x36, 0x2e, 0x0d, 0x0a, 0x09, 0x23,
+    0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
+    0x77, 0x77, 0x77, 0x2e, 0x73, 0x74, 0x61, 0x6e,
+    0x64, 0x61, 0x72, 0x64, 0x69, 0x63, 0x73, 0x2e,
+    0x6e, 0x78, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
+    0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2f,
+    0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
+    0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x63,
+    0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
+    0x72, 0x73, 0x2f, 0x70, 0x64, 0x66, 0x2f, 0x75,
+    0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x75,
+    0x61, 0x6c, 0x2e, 0x6c, 0x70, 0x63, 0x32, 0x31,
+    0x34, 0x31, 0x2e, 0x6c, 0x70, 0x63, 0x32, 0x31,
+    0x34, 0x32, 0x2e, 0x6c, 0x70, 0x63, 0x32, 0x31,
+    0x34, 0x34, 0x2e, 0x6c, 0x70, 0x63, 0x32, 0x31,
+    0x34, 0x36, 0x2e, 0x6c, 0x70, 0x63, 0x32, 0x31,
+    0x34, 0x38, 0x2e, 0x70, 0x64, 0x66, 0x0d, 0x0a,
+    0x09, 0x6d, 0x77, 0x62, 0x20, 0x30, 0x78, 0x45,
+    0x30, 0x31, 0x46, 0x43, 0x30, 0x34, 0x30, 0x20,
+    0x30, 0x78, 0x30, 0x31, 0x0d, 0x0a, 0x7d, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x23, 0x20, 0x66, 0x6c, 0x61,
+    0x73, 0x68, 0x20, 0x62, 0x61, 0x6e, 0x6b, 0x20,
+    0x6c, 0x70, 0x63, 0x32, 0x30, 0x30, 0x30, 0x20,
+    0x3c, 0x62, 0x61, 0x73, 0x65, 0x3e, 0x20, 0x3c,
+    0x73, 0x69, 0x7a, 0x65, 0x3e, 0x20, 0x30, 0x20,
+    0x30, 0x20, 0x3c, 0x74, 0x61, 0x72, 0x67, 0x65,
+    0x74, 0x23, 0x3e, 0x20, 0x3c, 0x76, 0x61, 0x72,
+    0x69, 0x61, 0x6e, 0x74, 0x3e, 0x20, 0x3c, 0x63,
+    0x6c, 0x6f, 0x63, 0x6b, 0x3e, 0x20, 0x5b, 0x63,
+    0x61, 0x6c, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63,
+    0x6b, 0x73, 0x75, 0x6d, 0x5d, 0x0d, 0x0a, 0x66,
     0x6c, 0x61, 0x73, 0x68, 0x20, 0x62, 0x61, 0x6e,
     0x6b, 0x20, 0x6c, 0x70, 0x63, 0x32, 0x30, 0x30,
-    0x30, 0x20, 0x3c, 0x62, 0x61, 0x73, 0x65, 0x3e,
-    0x20, 0x3c, 0x73, 0x69, 0x7a, 0x65, 0x3e, 0x20,
-    0x30, 0x20, 0x30, 0x20, 0x3c, 0x74, 0x61, 0x72,
-    0x67, 0x65, 0x74, 0x23, 0x3e, 0x20, 0x3c, 0x76,
-    0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x3e, 0x20,
-    0x3c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x3e, 0x20,
-    0x5b, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x63, 0x68,
-    0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5d, 0x0d,
-    0x0a, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x62,
-    0x61, 0x6e, 0x6b, 0x20, 0x6c, 0x70, 0x63, 0x32,
-    0x30, 0x30, 0x30, 0x20, 0x30, 0x78, 0x30, 0x20,
-    0x30, 0x78, 0x37, 0x64, 0x30, 0x30, 0x30, 0x20,
-    0x30, 0x20, 0x30, 0x20, 0x30, 0x20, 0x6c, 0x70,
-    0x63, 0x32, 0x30, 0x30, 0x30, 0x5f, 0x76, 0x32,
-    0x20, 0x31, 0x34, 0x37, 0x36, 0x35, 0x0d, 0x0a,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x30, 0x20, 0x30, 0x78, 0x30, 0x20, 0x30, 0x78,
+    0x37, 0x64, 0x30, 0x30, 0x30, 0x20, 0x30, 0x20,
+    0x30, 0x20, 0x30, 0x20, 0x6c, 0x70, 0x63, 0x32,
+    0x30, 0x30, 0x30, 0x5f, 0x76, 0x32, 0x20, 0x31,
+    0x34, 0x37, 0x36, 0x35, 0x0d, 0x0a, 0x00, 0x00,
     0x23, 0x20, 0x32, 0x4d, 0x48, 0x7a, 0x0d, 0x0a,
     0x6a, 0x74, 0x61, 0x67, 0x5f, 0x6b, 0x68, 0x7a,
     0x20, 0x32, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x73,
@@ -56017,6 +57345,454 @@
     0x78, 0x69, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x20, 0x4e, 0x58, 0x50, 0x20, 0x4c, 0x50,
+    0x43, 0x32, 0x33, 0x37, 0x38, 0x20, 0x41, 0x52,
+    0x4d, 0x37, 0x54, 0x44, 0x4d, 0x49, 0x2d, 0x53,
+    0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x35, 0x31,
+    0x32, 0x6b, 0x42, 0x20, 0x46, 0x6c, 0x61, 0x73,
+    0x68, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x33, 0x32,
+    0x6b, 0x42, 0x20, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
+    0x20, 0x4f, 0x6e, 0x2d, 0x43, 0x68, 0x69, 0x70,
+    0x20, 0x53, 0x52, 0x41, 0x4d, 0x20, 0x28, 0x35,
+    0x38, 0x6b, 0x42, 0x20, 0x74, 0x6f, 0x74, 0x61,
+    0x6c, 0x29, 0x2c, 0x20, 0x63, 0x6c, 0x6f, 0x63,
+    0x6b, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68,
+    0x20, 0x34, 0x4d, 0x48, 0x7a, 0x20, 0x69, 0x6e,
+    0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x52,
+    0x43, 0x20, 0x6f, 0x73, 0x63, 0x69, 0x6c, 0x6c,
+    0x61, 0x74, 0x6f, 0x72, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b, 0x69, 0x6e,
+    0x66, 0x6f, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74,
+    0x73, 0x20, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
+    0x4d, 0x45, 0x5d, 0x20, 0x7d, 0x20, 0x7b, 0x0d,
+    0x0a, 0x09, 0x73, 0x65, 0x74, 0x20, 0x20, 0x5f,
+    0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45,
+    0x20, 0x24, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
+    0x4d, 0x45, 0x0d, 0x0a, 0x7d, 0x20, 0x65, 0x6c,
+    0x73, 0x65, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x73,
+    0x65, 0x74, 0x20, 0x20, 0x5f, 0x43, 0x48, 0x49,
+    0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x6c, 0x70,
+    0x63, 0x32, 0x33, 0x37, 0x38, 0x0d, 0x0a, 0x7d,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x69, 0x66, 0x20, 0x7b,
+    0x20, 0x5b, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x65,
+    0x78, 0x69, 0x73, 0x74, 0x73, 0x20, 0x45, 0x4e,
+    0x44, 0x49, 0x41, 0x4e, 0x5d, 0x20, 0x7d, 0x20,
+    0x7b, 0x0d, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x20,
+    0x20, 0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e,
+    0x20, 0x24, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e,
+    0x0d, 0x0a, 0x7d, 0x20, 0x65, 0x6c, 0x73, 0x65,
+    0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x73, 0x65, 0x74,
+    0x20, 0x20, 0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41,
+    0x4e, 0x20, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65,
+    0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x69,
+    0x66, 0x20, 0x7b, 0x20, 0x5b, 0x69, 0x6e, 0x66,
+    0x6f, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
+    0x20, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50, 0x49,
+    0x44, 0x20, 0x5d, 0x20, 0x7d, 0x20, 0x7b, 0x0d,
+    0x0a, 0x09, 0x73, 0x65, 0x74, 0x20, 0x5f, 0x43,
+    0x50, 0x55, 0x54, 0x41, 0x50, 0x49, 0x44, 0x20,
+    0x24, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50, 0x49,
+    0x44, 0x0d, 0x0a, 0x7d, 0x20, 0x65, 0x6c, 0x73,
+    0x65, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x73, 0x65,
+    0x74, 0x20, 0x5f, 0x43, 0x50, 0x55, 0x54, 0x41,
+    0x50, 0x49, 0x44, 0x20, 0x30, 0x78, 0x34, 0x66,
+    0x31, 0x66, 0x30, 0x66, 0x30, 0x66, 0x0d, 0x0a,
+    0x7d, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x64, 0x65,
+    0x6c, 0x61, 0x79, 0x73, 0x20, 0x6f, 0x6e, 0x20,
+    0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x6c, 0x69,
+    0x6e, 0x65, 0x73, 0x0d, 0x0a, 0x6a, 0x74, 0x61,
+    0x67, 0x5f, 0x6e, 0x73, 0x72, 0x73, 0x74, 0x5f,
+    0x64, 0x65, 0x6c, 0x61, 0x79, 0x20, 0x32, 0x30,
+    0x30, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x5f,
+    0x6e, 0x74, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x65,
+    0x6c, 0x61, 0x79, 0x20, 0x32, 0x30, 0x30, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x23, 0x20, 0x4c, 0x50, 0x43,
+    0x32, 0x30, 0x30, 0x30, 0x20, 0x2d, 0x3e, 0x20,
+    0x53, 0x52, 0x53, 0x54, 0x20, 0x63, 0x61, 0x75,
+    0x73, 0x65, 0x73, 0x20, 0x54, 0x52, 0x53, 0x54,
+    0x0d, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
+    0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x74,
+    0x72, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
+    0x73, 0x72, 0x73, 0x74, 0x20, 0x73, 0x72, 0x73,
+    0x74, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x73, 0x5f,
+    0x74, 0x72, 0x73, 0x74, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x6a, 0x74, 0x61, 0x67, 0x20, 0x6e, 0x65, 0x77,
+    0x74, 0x61, 0x70, 0x20, 0x24, 0x5f, 0x43, 0x48,
+    0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x63,
+    0x70, 0x75, 0x20, 0x2d, 0x69, 0x72, 0x6c, 0x65,
+    0x6e, 0x20, 0x34, 0x20, 0x2d, 0x69, 0x72, 0x63,
+    0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x20, 0x30,
+    0x78, 0x31, 0x20, 0x2d, 0x69, 0x72, 0x6d, 0x61,
+    0x73, 0x6b, 0x20, 0x30, 0x78, 0x66, 0x20, 0x2d,
+    0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
+    0x2d, 0x69, 0x64, 0x20, 0x24, 0x5f, 0x43, 0x50,
+    0x55, 0x54, 0x41, 0x50, 0x49, 0x44, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x73, 0x65, 0x74, 0x20, 0x5f, 0x54,
+    0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d,
+    0x45, 0x20, 0x5b, 0x66, 0x6f, 0x72, 0x6d, 0x61,
+    0x74, 0x20, 0x22, 0x25, 0x73, 0x2e, 0x63, 0x70,
+    0x75, 0x22, 0x20, 0x24, 0x5f, 0x43, 0x48, 0x49,
+    0x50, 0x4e, 0x41, 0x4d, 0x45, 0x5d, 0x0d, 0x0a,
+    0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x63,
+    0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x24, 0x5f,
+    0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41,
+    0x4d, 0x45, 0x20, 0x61, 0x72, 0x6d, 0x37, 0x74,
+    0x64, 0x6d, 0x69, 0x20, 0x2d, 0x65, 0x6e, 0x64,
+    0x69, 0x61, 0x6e, 0x20, 0x24, 0x5f, 0x45, 0x4e,
+    0x44, 0x49, 0x41, 0x4e, 0x20, 0x2d, 0x63, 0x68,
+    0x61, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x69,
+    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x24, 0x5f, 0x54,
+    0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d,
+    0x45, 0x20, 0x2d, 0x76, 0x61, 0x72, 0x69, 0x61,
+    0x6e, 0x74, 0x20, 0x61, 0x72, 0x6d, 0x37, 0x74,
+    0x64, 0x6d, 0x69, 0x2d, 0x73, 0x5f, 0x72, 0x34,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x20, 0x4c, 0x50,
+    0x43, 0x32, 0x33, 0x37, 0x38, 0x20, 0x68, 0x61,
+    0x73, 0x20, 0x33, 0x32, 0x6b, 0x42, 0x20, 0x6f,
+    0x66, 0x20, 0x53, 0x52, 0x41, 0x4d, 0x20, 0x6f,
+    0x6e, 0x20, 0x69, 0x74, 0x73, 0x20, 0x6d, 0x61,
+    0x69, 0x6e, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65,
+    0x6d, 0x20, 0x62, 0x75, 0x73, 0x20, 0x28, 0x73,
+    0x6f, 0x2d, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64,
+    0x20, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x4f,
+    0x6e, 0x2d, 0x43, 0x68, 0x69, 0x70, 0x20, 0x53,
+    0x52, 0x41, 0x4d, 0x29, 0x0d, 0x0a, 0x24, 0x5f,
+    0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41,
+    0x4d, 0x45, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
+    0x67, 0x75, 0x72, 0x65, 0x20, 0x2d, 0x77, 0x6f,
+    0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d,
+    0x76, 0x69, 0x72, 0x74, 0x20, 0x30, 0x20, 0x2d,
+    0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65,
+    0x61, 0x2d, 0x70, 0x68, 0x79, 0x73, 0x20, 0x30,
+    0x78, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d,
+    0x61, 0x72, 0x65, 0x61, 0x2d, 0x73, 0x69, 0x7a,
+    0x65, 0x20, 0x30, 0x78, 0x38, 0x30, 0x30, 0x30,
+    0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61,
+    0x72, 0x65, 0x61, 0x2d, 0x62, 0x61, 0x63, 0x6b,
+    0x75, 0x70, 0x20, 0x30, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x24, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
+    0x4e, 0x41, 0x4d, 0x45, 0x20, 0x63, 0x6f, 0x6e,
+    0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x20, 0x2d,
+    0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x65,
+    0x73, 0x65, 0x74, 0x2d, 0x69, 0x6e, 0x69, 0x74,
+    0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x23, 0x20, 0x46,
+    0x6f, 0x72, 0x63, 0x65, 0x20, 0x74, 0x61, 0x72,
+    0x67, 0x65, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x6f,
+    0x20, 0x41, 0x52, 0x4d, 0x20, 0x73, 0x74, 0x61,
+    0x74, 0x65, 0x0d, 0x0a, 0x09, 0x73, 0x6f, 0x66,
+    0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
+    0x68, 0x61, 0x6c, 0x74, 0x0d, 0x0a, 0x09, 0x23,
+    0x64, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x72,
+    0x65, 0x6d, 0x61, 0x70, 0x20, 0x30, 0x78, 0x30,
+    0x30, 0x30, 0x30, 0x2d, 0x30, 0x78, 0x30, 0x30,
+    0x32, 0x30, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e,
+    0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x62,
+    0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
+    0x6c, 0x61, 0x73, 0x68, 0x0d, 0x0a, 0x09, 0x6d,
+    0x77, 0x62, 0x20, 0x30, 0x78, 0x45, 0x30, 0x31,
+    0x46, 0x43, 0x30, 0x34, 0x30, 0x20, 0x30, 0x78,
+    0x30, 0x31, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x23, 0x20, 0x4c, 0x50, 0x43, 0x32, 0x33,
+    0x37, 0x38, 0x20, 0x68, 0x61, 0x73, 0x20, 0x35,
+    0x31, 0x32, 0x6b, 0x42, 0x20, 0x6f, 0x66, 0x20,
+    0x46, 0x4c, 0x41, 0x53, 0x48, 0x2c, 0x20, 0x62,
+    0x75, 0x74, 0x20, 0x75, 0x70, 0x70, 0x65, 0x72,
+    0x20, 0x38, 0x6b, 0x42, 0x20, 0x61, 0x72, 0x65,
+    0x20, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65,
+    0x64, 0x20, 0x62, 0x79, 0x20, 0x62, 0x6f, 0x6f,
+    0x74, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e,
+    0x0d, 0x0a, 0x23, 0x20, 0x41, 0x66, 0x74, 0x65,
+    0x72, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20,
+    0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x69, 0x70,
+    0x20, 0x75, 0x73, 0x65, 0x73, 0x20, 0x69, 0x74,
+    0x73, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
+    0x61, 0x6c, 0x20, 0x34, 0x4d, 0x48, 0x7a, 0x20,
+    0x52, 0x43, 0x20, 0x6f, 0x73, 0x63, 0x69, 0x6c,
+    0x6c, 0x61, 0x74, 0x6f, 0x72, 0x0d, 0x0a, 0x23,
+    0x66, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x62, 0x61,
+    0x6e, 0x6b, 0x20, 0x6c, 0x70, 0x63, 0x32, 0x30,
+    0x30, 0x30, 0x20, 0x3c, 0x62, 0x61, 0x73, 0x65,
+    0x3e, 0x20, 0x3c, 0x73, 0x69, 0x7a, 0x65, 0x3e,
+    0x20, 0x30, 0x20, 0x30, 0x20, 0x3c, 0x74, 0x61,
+    0x72, 0x67, 0x65, 0x74, 0x23, 0x3e, 0x20, 0x3c,
+    0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x3e,
+    0x0d, 0x0a, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x20,
+    0x62, 0x61, 0x6e, 0x6b, 0x20, 0x6c, 0x70, 0x63,
+    0x32, 0x30, 0x30, 0x30, 0x20, 0x30, 0x78, 0x30,
+    0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x37, 0x44,
+    0x30, 0x30, 0x30, 0x20, 0x30, 0x20, 0x30, 0x20,
+    0x30, 0x20, 0x6c, 0x70, 0x63, 0x32, 0x30, 0x30,
+    0x30, 0x5f, 0x76, 0x32, 0x20, 0x34, 0x30, 0x30,
+    0x30, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x63,
+    0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x23, 0x20, 0x34, 0x4d, 0x48,
+    0x7a, 0x20, 0x2f, 0x20, 0x36, 0x20, 0x3d, 0x20,
+    0x36, 0x36, 0x36, 0x6b, 0x48, 0x7a, 0x2c, 0x20,
+    0x73, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x35,
+    0x30, 0x30, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67,
+    0x5f, 0x6b, 0x68, 0x7a, 0x20, 0x35, 0x30, 0x30,
+    0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x23, 0x20, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e,
+    0x67, 0x20, 0x66, 0x65, 0x65, 0x65, 0x64, 0x62,
+    0x61, 0x63, 0x6b, 0x20, 0x77, 0x61, 0x6e, 0x74,
+    0x65, 0x64, 0x21, 0x0d, 0x0a, 0x73, 0x65, 0x74,
+    0x20, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
+    0x4d, 0x45, 0x20, 0x6c, 0x70, 0x63, 0x32, 0x34,
+    0x37, 0x38, 0x0d, 0x0a, 0x73, 0x65, 0x74, 0x20,
+    0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x20,
+    0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x0d, 0x0a,
+    0x73, 0x65, 0x74, 0x20, 0x5f, 0x43, 0x50, 0x55,
+    0x54, 0x41, 0x50, 0x49, 0x44, 0x20, 0x30, 0x78,
+    0x34, 0x66, 0x31, 0x66, 0x30, 0x66, 0x30, 0x66,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x20, 0x55, 0x73,
+    0x65, 0x20, 0x52, 0x43, 0x4c, 0x4b, 0x2e, 0x20,
+    0x49, 0x66, 0x20, 0x52, 0x43, 0x4c, 0x4b, 0x20,
+    0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61,
+    0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
+    0x20, 0x66, 0x61, 0x6c, 0x6c, 0x20, 0x62, 0x61,
+    0x63, 0x6b, 0x20, 0x74, 0x6f, 0x20, 0x35, 0x30,
+    0x30, 0x6b, 0x48, 0x7a, 0x2e, 0x20, 0x0d, 0x0a,
+    0x23, 0x20, 0x0d, 0x0a, 0x23, 0x20, 0x44, 0x65,
+    0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20,
+    0x6f, 0x6e, 0x20, 0x63, 0x61, 0x62, 0x6c, 0x69,
+    0x6e, 0x67, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6d,
+    0x69, 0x67, 0x68, 0x74, 0x20, 0x62, 0x65, 0x20,
+    0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20,
+    0x65, 0x65, 0x6b, 0x20, 0x74, 0x68, 0x69, 0x73,
+    0x20, 0x75, 0x70, 0x20, 0x74, 0x6f, 0x20, 0x32,
+    0x30, 0x30, 0x30, 0x6b, 0x48, 0x7a, 0x2e, 0x0d,
+    0x0a, 0x6a, 0x74, 0x61, 0x67, 0x5f, 0x72, 0x63,
+    0x6c, 0x6b, 0x20, 0x35, 0x30, 0x30, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67, 0x5f, 0x6e,
+    0x73, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c,
+    0x61, 0x79, 0x20, 0x32, 0x30, 0x30, 0x0d, 0x0a,
+    0x6a, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x74, 0x72,
+    0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
+    0x20, 0x32, 0x30, 0x30, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x23, 0x75, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6d,
+    0x62, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x6f, 0x6e,
+    0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
+    0x63, 0x65, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x74,
+    0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x20, 0x74,
+    0x68, 0x61, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x27,
+    0x74, 0x20, 0x73, 0x65, 0x74, 0x20, 0x54, 0x52,
+    0x53, 0x54, 0x2f, 0x53, 0x52, 0x53, 0x54, 0x20,
+    0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65,
+    0x6c, 0x79, 0x0d, 0x0a, 0x72, 0x65, 0x73, 0x65,
+    0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
+    0x20, 0x74, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x6e,
+    0x64, 0x5f, 0x73, 0x72, 0x73, 0x74, 0x20, 0x73,
+    0x72, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x6c, 0x6c,
+    0x73, 0x5f, 0x74, 0x72, 0x73, 0x74, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67,
+    0x20, 0x6e, 0x65, 0x77, 0x74, 0x61, 0x70, 0x20,
+    0x24, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
+    0x4d, 0x45, 0x20, 0x63, 0x70, 0x75, 0x20, 0x2d,
+    0x69, 0x72, 0x6c, 0x65, 0x6e, 0x20, 0x34, 0x20,
+    0x2d, 0x69, 0x72, 0x63, 0x61, 0x70, 0x74, 0x75,
+    0x72, 0x65, 0x20, 0x30, 0x78, 0x31, 0x20, 0x2d,
+    0x69, 0x72, 0x6d, 0x61, 0x73, 0x6b, 0x20, 0x30,
+    0x78, 0x66, 0x20, 0x2d, 0x65, 0x78, 0x70, 0x65,
+    0x63, 0x74, 0x65, 0x64, 0x2d, 0x69, 0x64, 0x20,
+    0x24, 0x5f, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50,
+    0x49, 0x44, 0x0d, 0x0a, 0x0d, 0x0a, 0x73, 0x65,
+    0x74, 0x20, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
+    0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x5b, 0x66,
+    0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x22, 0x25,
+    0x73, 0x2e, 0x63, 0x70, 0x75, 0x22, 0x20, 0x24,
+    0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d,
+    0x45, 0x5d, 0x0d, 0x0a, 0x74, 0x61, 0x72, 0x67,
+    0x65, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
+    0x65, 0x20, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47,
+    0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x61,
+    0x72, 0x6d, 0x37, 0x74, 0x64, 0x6d, 0x69, 0x20,
+    0x2d, 0x65, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x20,
+    0x24, 0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e,
+    0x20, 0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2d,
+    0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
+    0x20, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
+    0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x2d, 0x76,
+    0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x20, 0x61,
+    0x72, 0x6d, 0x37, 0x74, 0x64, 0x6d, 0x69, 0x2d,
+    0x73, 0x5f, 0x72, 0x34, 0x0d, 0x0a, 0x24, 0x5f,
+    0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41,
+    0x4d, 0x45, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
+    0x67, 0x75, 0x72, 0x65, 0x20, 0x2d, 0x77, 0x6f,
+    0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d,
+    0x76, 0x69, 0x72, 0x74, 0x20, 0x30, 0x20, 0x2d,
+    0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65,
+    0x61, 0x2d, 0x70, 0x68, 0x79, 0x73, 0x20, 0x30,
+    0x78, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d,
+    0x61, 0x72, 0x65, 0x61, 0x2d, 0x73, 0x69, 0x7a,
+    0x65, 0x20, 0x30, 0x78, 0x34, 0x30, 0x30, 0x30,
+    0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61,
+    0x72, 0x65, 0x61, 0x2d, 0x62, 0x61, 0x63, 0x6b,
+    0x75, 0x70, 0x20, 0x30, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47,
+    0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x63,
+    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
+    0x20, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20,
+    0x72, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x69, 0x6e,
+    0x69, 0x74, 0x20, 0x7b, 0x0d, 0x0a, 0x09, 0x23,
+    0x20, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x20, 0x74,
+    0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x69, 0x6e,
+    0x74, 0x6f, 0x20, 0x41, 0x52, 0x4d, 0x20, 0x73,
+    0x74, 0x61, 0x74, 0x65, 0x0d, 0x0a, 0x09, 0x73,
+    0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65,
+    0x74, 0x5f, 0x68, 0x61, 0x6c, 0x74, 0x0d, 0x0a,
+    0x09, 0x23, 0x20, 0x46, 0x49, 0x58, 0x21, 0x21,
+    0x21, 0x21, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c,
+    0x64, 0x20, 0x77, 0x65, 0x20, 0x72, 0x65, 0x6d,
+    0x61, 0x70, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
+    0x61, 0x6e, 0x67, 0x65, 0x20, 0x62, 0x65, 0x6c,
+    0x6f, 0x77, 0x3f, 0x3f, 0x3f, 0x20, 0x49, 0x73,
+    0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x70,
+    0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65,
+    0x20, 0x74, 0x6f, 0x0d, 0x0a, 0x09, 0x23, 0x20,
+    0x43, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x20, 0x66,
+    0x72, 0x6f, 0x6d, 0x20, 0x4c, 0x50, 0x43, 0x32,
+    0x31, 0x34, 0x38, 0x2e, 0x0d, 0x0a, 0x09, 0x23,
+    0x64, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x72,
+    0x65, 0x6d, 0x61, 0x70, 0x20, 0x30, 0x78, 0x30,
+    0x30, 0x30, 0x30, 0x2d, 0x30, 0x78, 0x30, 0x30,
+    0x32, 0x30, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e,
+    0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x62,
+    0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
+    0x6c, 0x61, 0x73, 0x68, 0x0d, 0x0a, 0x09, 0x6d,
+    0x77, 0x62, 0x20, 0x30, 0x78, 0x45, 0x30, 0x31,
+    0x46, 0x43, 0x30, 0x34, 0x30, 0x20, 0x30, 0x78,
+    0x30, 0x31, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x66, 0x6c, 0x61, 0x73, 0x68,
+    0x20, 0x62, 0x61, 0x6e, 0x6b, 0x20, 0x6c, 0x70,
+    0x63, 0x32, 0x30, 0x30, 0x30, 0x20, 0x30, 0x78,
+    0x30, 0x20, 0x30, 0x78, 0x37, 0x44, 0x30, 0x30,
+    0x30, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x20,
+    0x6c, 0x70, 0x63, 0x32, 0x30, 0x30, 0x30, 0x5f,
+    0x76, 0x32, 0x20, 0x31, 0x32, 0x30, 0x30, 0x30,
+    0x20, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x63, 0x68,
+    0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x0d, 0x0a,
+    0x23, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x76,
+    0x72, 0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x20, 0x20,
+    0x73, 0x65, 0x74, 0x20, 0x20, 0x5f, 0x43, 0x48,
+    0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x61,
+    0x76, 0x72, 0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73,
+    0x65, 0x74, 0x20, 0x20, 0x5f, 0x45, 0x4e, 0x44,
+    0x49, 0x41, 0x4e, 0x20, 0x6c, 0x69, 0x74, 0x74,
+    0x6c, 0x65, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x20,
+    0x6a, 0x74, 0x61, 0x67, 0x20, 0x73, 0x70, 0x65,
+    0x65, 0x64, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67,
+    0x5f, 0x6b, 0x68, 0x7a, 0x20, 0x34, 0x35, 0x30,
+    0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x72, 0x65, 0x73,
+    0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
+    0x67, 0x20, 0x20, 0x73, 0x72, 0x73, 0x74, 0x5f,
+    0x6f, 0x6e, 0x6c, 0x79, 0x0d, 0x0a, 0x6a, 0x74,
+    0x61, 0x67, 0x5f, 0x6e, 0x73, 0x72, 0x73, 0x74,
+    0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x20, 0x31,
+    0x30, 0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x6a,
+    0x74, 0x61, 0x67, 0x20, 0x73, 0x63, 0x61, 0x6e,
+    0x20, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x0d, 0x0a,
+    0x69, 0x66, 0x20, 0x7b, 0x20, 0x5b, 0x69, 0x6e,
+    0x66, 0x6f, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74,
+    0x73, 0x20, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50,
+    0x49, 0x44, 0x20, 0x5d, 0x20, 0x7d, 0x20, 0x7b,
+    0x0d, 0x0a, 0x20, 0x20, 0x20, 0x73, 0x65, 0x74,
+    0x20, 0x5f, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50,
+    0x49, 0x44, 0x20, 0x24, 0x43, 0x50, 0x55, 0x54,
+    0x41, 0x50, 0x49, 0x44, 0x0d, 0x0a, 0x7d, 0x20,
+    0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0d, 0x0a,
+    0x20, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x5f,
+    0x43, 0x50, 0x55, 0x54, 0x41, 0x50, 0x49, 0x44,
+    0x20, 0x30, 0x78, 0x38, 0x39, 0x37, 0x30, 0x32,
+    0x30, 0x33, 0x46, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a,
+    0x6a, 0x74, 0x61, 0x67, 0x20, 0x6e, 0x65, 0x77,
+    0x74, 0x61, 0x70, 0x20, 0x24, 0x5f, 0x43, 0x48,
+    0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x63,
+    0x70, 0x75, 0x20, 0x2d, 0x69, 0x72, 0x6c, 0x65,
+    0x6e, 0x20, 0x34, 0x20, 0x2d, 0x69, 0x72, 0x63,
+    0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x20, 0x30,
+    0x78, 0x31, 0x20, 0x2d, 0x69, 0x72, 0x6d, 0x61,
+    0x73, 0x6b, 0x20, 0x30, 0x78, 0x66, 0x20, 0x2d,
+    0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
+    0x2d, 0x69, 0x64, 0x20, 0x24, 0x5f, 0x43, 0x50,
+    0x55, 0x54, 0x41, 0x50, 0x49, 0x44, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x73, 0x65, 0x74, 0x20, 0x5f, 0x54,
+    0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d,
+    0x45, 0x20, 0x5b, 0x66, 0x6f, 0x72, 0x6d, 0x61,
+    0x74, 0x20, 0x22, 0x25, 0x73, 0x2e, 0x63, 0x70,
+    0x75, 0x22, 0x20, 0x24, 0x5f, 0x43, 0x48, 0x49,
+    0x50, 0x4e, 0x41, 0x4d, 0x45, 0x5d, 0x0d, 0x0a,
+    0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x63,
+    0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x24, 0x5f,
+    0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41,
+    0x4d, 0x45, 0x20, 0x61, 0x76, 0x72, 0x20, 0x2d,
+    0x65, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x20, 0x24,
+    0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x20,
+    0x2d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2d, 0x70,
+    0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20,
+    0x24, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
+    0x4e, 0x41, 0x4d, 0x45, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x23, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
+    0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x63, 0x6f,
+    0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x20,
+    0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72,
+    0x65, 0x61, 0x2d, 0x76, 0x69, 0x72, 0x74, 0x20,
+    0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d,
+    0x61, 0x72, 0x65, 0x61, 0x2d, 0x70, 0x68, 0x79,
+    0x73, 0x20, 0x30, 0x78, 0x32, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x20, 0x2d, 0x77, 0x6f,
+    0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d,
+    0x73, 0x69, 0x7a, 0x65, 0x20, 0x31, 0x36, 0x33,
+    0x38, 0x34, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b,
+    0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d, 0x62, 0x61,
+    0x63, 0x6b, 0x75, 0x70, 0x20, 0x30, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x20,
+    0x62, 0x61, 0x6e, 0x6b, 0x20, 0x61, 0x76, 0x72,
+    0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30,
+    0x20, 0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x74,
+    0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x69, 0x74,
+    0x2c, 0x20, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
+    0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65,
+    0x20, 0x6c, 0x69, 0x6b, 0x65, 0x3a, 0x0d, 0x0a,
+    0x23, 0x69, 0x6e, 0x69, 0x74, 0x0d, 0x0a, 0x23,
+    0x6a, 0x74, 0x61, 0x67, 0x5f, 0x6b, 0x68, 0x7a,
+    0x20, 0x34, 0x35, 0x30, 0x30, 0x0d, 0x0a, 0x23,
+    0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x69, 0x6e,
+    0x69, 0x74, 0x0d, 0x0a, 0x23, 0x76, 0x65, 0x72,
+    0x69, 0x66, 0x79, 0x5f, 0x69, 0x72, 0x63, 0x61,
+    0x70, 0x74, 0x75, 0x72, 0x65, 0x20, 0x64, 0x69,
+    0x73, 0x61, 0x62, 0x6c, 0x65, 0x0d, 0x0a, 0x23,
+    0x0d, 0x0a, 0x23, 0x68, 0x61, 0x6c, 0x74, 0x0d,
+    0x0a, 0x23, 0x77, 0x61, 0x69, 0x74, 0x20, 0x68,
+    0x61, 0x6c, 0x74, 0x0d, 0x0a, 0x23, 0x70, 0x6f,
+    0x6c, 0x6c, 0x0d, 0x0a, 0x23, 0x61, 0x76, 0x72,
+    0x20, 0x6d, 0x61, 0x73, 0x73, 0x5f, 0x65, 0x72,
+    0x61, 0x73, 0x65, 0x20, 0x30, 0x0d, 0x0a, 0x23,
+    0x66, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x77, 0x72,
+    0x69, 0x74, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67,
+    0x65, 0x20, 0x45, 0x3a, 0x2f, 0x56, 0x65, 0x72,
+    0x73, 0x61, 0x6c, 0x6f, 0x6f, 0x6e, 0x2f, 0x53,
+    0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2f,
+    0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x50, 0x52,
+    0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x41, 0x47,
+    0x45, 0x4e, 0x54, 0x2e, 0x68, 0x65, 0x78, 0x0d,
+    0x0a, 0x23, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20,
+    0x72, 0x75, 0x6e, 0x0d, 0x0a, 0x23, 0x73, 0x68,
+    0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x0d, 0x0a,
+    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x46, 0x6f, 0x72,
+    0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x6e,
+    0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
+    0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20,
+    0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66,
+    0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
+    0x6e, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2c,
+    0x20, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x61, 0x20,
+    0x6c, 0x6f, 0x6f, 0x6b, 0x20, 0x61, 0x74, 0x3a,
+    0x0d, 0x0a, 0x23, 0x20, 0x6f, 0x70, 0x65, 0x6e,
+    0x6f, 0x63, 0x64, 0x2e, 0x74, 0x65, 0x78, 0x69,
+    0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x48, 0x69, 0x6c, 0x73, 0x63, 0x68, 0x65,
     0x72, 0x20, 0x6e, 0x65, 0x74, 0x58, 0x20, 0x35,
     0x30, 0x30, 0x20, 0x43, 0x50, 0x55, 0x0d, 0x0a,
@@ -56282,12 +58058,13 @@
     0x2e, 0x6a, 0x72, 0x63, 0x20, 0x33, 0x32, 0x20,
     0x30, 0x78, 0x61, 0x33, 0x30, 0x30, 0x32, 0x31,
     0x30, 0x38, 0x20, 0x20, 0x2d, 0x65, 0x6e, 0x64,
-    0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x49, 0x44,
-    0x4c, 0x45, 0x0d, 0x0a, 0x09, 0x69, 0x72, 0x73,
-    0x63, 0x61, 0x6e, 0x20, 0x6f, 0x6d, 0x61, 0x70,
-    0x33, 0x2e, 0x6a, 0x72, 0x63, 0x20, 0x30, 0x78,
-    0x33, 0x46, 0x20, 0x2d, 0x65, 0x6e, 0x64, 0x73,
-    0x74, 0x61, 0x74, 0x65, 0x20, 0x49, 0x44, 0x4c,
+    0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x52, 0x55,
+    0x4e, 0x2f, 0x49, 0x44, 0x4c, 0x45, 0x0d, 0x0a,
+    0x09, 0x69, 0x72, 0x73, 0x63, 0x61, 0x6e, 0x20,
+    0x6f, 0x6d, 0x61, 0x70, 0x33, 0x2e, 0x6a, 0x72,
+    0x63, 0x20, 0x30, 0x78, 0x33, 0x46, 0x20, 0x2d,
+    0x65, 0x6e, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65,
+    0x20, 0x52, 0x55, 0x4e, 0x2f, 0x49, 0x44, 0x4c,
     0x45, 0x0d, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x74,
     0x65, 0x73, 0x74, 0x20, 0x31, 0x30, 0x0d, 0x0a,
     0x09, 0x70, 0x75, 0x74, 0x73, 0x20, 0x22, 0x43,
@@ -56296,7 +58073,6 @@
     0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
     0x22, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a, 0x0d, 0x0a,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x54, 0x49, 0x20, 0x4f, 0x4d, 0x41, 0x50,
     0x35, 0x39, 0x31, 0x32, 0x20, 0x64, 0x75, 0x61,
     0x6c, 0x20, 0x63, 0x6f, 0x72, 0x65, 0x20, 0x70,
@@ -58444,87 +60220,107 @@
     0x30, 0x30, 0x30, 0x38, 0x0d, 0x0a, 0x20, 0x20,
     0x23, 0x20, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
     0x6e, 0x20, 0x32, 0x36, 0x2e, 0x36, 0x2e, 0x32,
-    0x0d, 0x0a, 0x20, 0x20, 0x23, 0x20, 0x4d, 0x65,
-    0x64, 0x69, 0x75, 0x6d, 0x20, 0x44, 0x65, 0x6e,
-    0x73, 0x69, 0x74, 0x79, 0x20, 0x52, 0x65, 0x76,
-    0x41, 0x0d, 0x0a, 0x20, 0x20, 0x73, 0x65, 0x74,
-    0x20, 0x5f, 0x42, 0x53, 0x54, 0x41, 0x50, 0x49,
-    0x44, 0x20, 0x30, 0x78, 0x30, 0x36, 0x34, 0x31,
+    0x0d, 0x0a, 0x20, 0x20, 0x23, 0x20, 0x4c, 0x6f,
+    0x77, 0x20, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74,
+    0x79, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
+    0x73, 0x2c, 0x20, 0x52, 0x65, 0x76, 0x20, 0x41,
+    0x0d, 0x0a, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20,
+    0x5f, 0x42, 0x53, 0x54, 0x41, 0x50, 0x49, 0x44,
+    0x31, 0x20, 0x30, 0x78, 0x30, 0x36, 0x34, 0x31,
+    0x32, 0x30, 0x34, 0x31, 0x0d, 0x0a, 0x20, 0x20,
+    0x23, 0x20, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d,
+    0x20, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79,
+    0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
+    0x2c, 0x20, 0x52, 0x65, 0x76, 0x20, 0x41, 0x0d,
+    0x0a, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20, 0x5f,
+    0x42, 0x53, 0x54, 0x41, 0x50, 0x49, 0x44, 0x32,
+    0x20, 0x30, 0x78, 0x30, 0x36, 0x34, 0x31, 0x30,
+    0x30, 0x34, 0x31, 0x0d, 0x0a, 0x20, 0x20, 0x23,
+    0x20, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x20,
+    0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x20,
+    0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2c,
+    0x20, 0x52, 0x65, 0x76, 0x20, 0x42, 0x20, 0x61,
+    0x6e, 0x64, 0x20, 0x52, 0x65, 0x76, 0x20, 0x5a,
+    0x0d, 0x0a, 0x20, 0x20, 0x73, 0x65, 0x74, 0x20,
+    0x5f, 0x42, 0x53, 0x54, 0x41, 0x50, 0x49, 0x44,
+    0x33, 0x20, 0x30, 0x78, 0x31, 0x36, 0x34, 0x31,
     0x30, 0x30, 0x34, 0x31, 0x0d, 0x0a, 0x20, 0x20,
-    0x23, 0x20, 0x52, 0x65, 0x76, 0x20, 0x42, 0x20,
-    0x61, 0x6e, 0x64, 0x20, 0x52, 0x65, 0x76, 0x20,
-    0x5a, 0x0d, 0x0a, 0x20, 0x20, 0x73, 0x65, 0x74,
-    0x20, 0x5f, 0x42, 0x53, 0x54, 0x41, 0x50, 0x49,
-    0x44, 0x20, 0x30, 0x78, 0x31, 0x36, 0x34, 0x31,
-    0x30, 0x30, 0x34, 0x31, 0x0d, 0x0a, 0x20, 0x20,
-    0x23, 0x20, 0x48, 0x69, 0x67, 0x68, 0x20, 0x44,
-    0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x20, 0x44,
+    0x23, 0x20, 0x48, 0x69, 0x67, 0x68, 0x20, 0x64,
+    0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x20, 0x64,
     0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2c, 0x20,
     0x52, 0x65, 0x76, 0x20, 0x41, 0x0d, 0x0a, 0x20,
     0x20, 0x73, 0x65, 0x74, 0x20, 0x5f, 0x42, 0x53,
-    0x54, 0x41, 0x50, 0x49, 0x44, 0x20, 0x30, 0x78,
-    0x30, 0x36, 0x34, 0x31, 0x34, 0x30, 0x34, 0x31,
-    0x0d, 0x0a, 0x7d, 0x20, 0x20, 0x20, 0x0d, 0x0a,
-    0x6a, 0x74, 0x61, 0x67, 0x20, 0x6e, 0x65, 0x77,
-    0x74, 0x61, 0x70, 0x20, 0x24, 0x5f, 0x43, 0x48,
-    0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x62,
-    0x73, 0x20, 0x20, 0x2d, 0x69, 0x72, 0x6c, 0x65,
-    0x6e, 0x20, 0x35, 0x20, 0x2d, 0x69, 0x72, 0x63,
-    0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x20, 0x30,
-    0x78, 0x31, 0x20, 0x2d, 0x69, 0x72, 0x6d, 0x61,
-    0x73, 0x6b, 0x20, 0x30, 0x78, 0x31, 0x20, 0x2d,
-    0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
-    0x2d, 0x69, 0x64, 0x20, 0x24, 0x5f, 0x42, 0x53,
-    0x54, 0x41, 0x50, 0x49, 0x44, 0x0d, 0x0a, 0x0d,
-    0x0a, 0x73, 0x65, 0x74, 0x20, 0x5f, 0x54, 0x41,
-    0x52, 0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45,
-    0x20, 0x5b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
-    0x20, 0x22, 0x25, 0x73, 0x2e, 0x63, 0x70, 0x75,
-    0x22, 0x20, 0x24, 0x5f, 0x43, 0x48, 0x49, 0x50,
-    0x4e, 0x41, 0x4d, 0x45, 0x5d, 0x0d, 0x0a, 0x74,
-    0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x63, 0x72,
-    0x65, 0x61, 0x74, 0x65, 0x20, 0x24, 0x5f, 0x54,
-    0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d,
-    0x45, 0x20, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x78,
-    0x5f, 0x6d, 0x33, 0x20, 0x2d, 0x65, 0x6e, 0x64,
-    0x69, 0x61, 0x6e, 0x20, 0x24, 0x5f, 0x45, 0x4e,
-    0x44, 0x49, 0x41, 0x4e, 0x20, 0x2d, 0x63, 0x68,
-    0x61, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x69,
-    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x24, 0x5f, 0x54,
-    0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d,
-    0x45, 0x0d, 0x0a, 0x0d, 0x0a, 0x24, 0x5f, 0x54,
-    0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d,
-    0x45, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
-    0x75, 0x72, 0x65, 0x20, 0x2d, 0x77, 0x6f, 0x72,
-    0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d, 0x76,
-    0x69, 0x72, 0x74, 0x20, 0x30, 0x20, 0x2d, 0x77,
+    0x54, 0x41, 0x50, 0x49, 0x44, 0x34, 0x20, 0x30,
+    0x78, 0x30, 0x36, 0x34, 0x31, 0x34, 0x30, 0x34,
+    0x31, 0x0d, 0x0a, 0x7d, 0x20, 0x20, 0x20, 0x0d,
+    0x0a, 0x6a, 0x74, 0x61, 0x67, 0x20, 0x6e, 0x65,
+    0x77, 0x74, 0x61, 0x70, 0x20, 0x24, 0x5f, 0x43,
+    0x48, 0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x20,
+    0x62, 0x73, 0x20, 0x20, 0x2d, 0x69, 0x72, 0x6c,
+    0x65, 0x6e, 0x20, 0x35, 0x20, 0x2d, 0x69, 0x72,
+    0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x20,
+    0x30, 0x78, 0x31, 0x20, 0x2d, 0x69, 0x72, 0x6d,
+    0x61, 0x73, 0x6b, 0x20, 0x30, 0x78, 0x31, 0x20,
+    0x2d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
+    0x64, 0x2d, 0x69, 0x64, 0x20, 0x24, 0x5f, 0x42,
+    0x53, 0x54, 0x41, 0x50, 0x49, 0x44, 0x31, 0x20,
+    0x2d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
+    0x64, 0x2d, 0x69, 0x64, 0x20, 0x24, 0x5f, 0x42,
+    0x53, 0x54, 0x41, 0x50, 0x49, 0x44, 0x32, 0x20,
+    0x2d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
+    0x64, 0x2d, 0x69, 0x64, 0x20, 0x24, 0x5f, 0x42,
+    0x53, 0x54, 0x41, 0x50, 0x49, 0x44, 0x33, 0x20,
+    0x2d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
+    0x64, 0x2d, 0x69, 0x64, 0x20, 0x24, 0x5f, 0x42,
+    0x53, 0x54, 0x41, 0x50, 0x49, 0x44, 0x34, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x73, 0x65, 0x74, 0x20, 0x5f,
+    0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41,
+    0x4d, 0x45, 0x20, 0x5b, 0x66, 0x6f, 0x72, 0x6d,
+    0x61, 0x74, 0x20, 0x22, 0x25, 0x73, 0x2e, 0x63,
+    0x70, 0x75, 0x22, 0x20, 0x24, 0x5f, 0x43, 0x48,
+    0x49, 0x50, 0x4e, 0x41, 0x4d, 0x45, 0x5d, 0x0d,
+    0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20,
+    0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x24,
+    0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x4e,
+    0x41, 0x4d, 0x45, 0x20, 0x63, 0x6f, 0x72, 0x74,
+    0x65, 0x78, 0x5f, 0x6d, 0x33, 0x20, 0x2d, 0x65,
+    0x6e, 0x64, 0x69, 0x61, 0x6e, 0x20, 0x24, 0x5f,
+    0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x20, 0x2d,
+    0x63, 0x68, 0x61, 0x69, 0x6e, 0x2d, 0x70, 0x6f,
+    0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x24,
+    0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x4e,
+    0x41, 0x4d, 0x45, 0x0d, 0x0a, 0x0d, 0x0a, 0x24,
+    0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x4e,
+    0x41, 0x4d, 0x45, 0x20, 0x63, 0x6f, 0x6e, 0x66,
+    0x69, 0x67, 0x75, 0x72, 0x65, 0x20, 0x2d, 0x77,
     0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61,
-    0x2d, 0x70, 0x68, 0x79, 0x73, 0x20, 0x30, 0x78,
-    0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x2d, 0x76, 0x69, 0x72, 0x74, 0x20, 0x30, 0x20,
+    0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72,
+    0x65, 0x61, 0x2d, 0x70, 0x68, 0x79, 0x73, 0x20,
+    0x30, 0x78, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b,
+    0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d, 0x73, 0x69,
+    0x7a, 0x65, 0x20, 0x31, 0x36, 0x33, 0x38, 0x34,
     0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61,
-    0x72, 0x65, 0x61, 0x2d, 0x73, 0x69, 0x7a, 0x65,
-    0x20, 0x31, 0x36, 0x33, 0x38, 0x34, 0x20, 0x2d,
-    0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65,
-    0x61, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
-    0x20, 0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x66, 0x6c,
-    0x61, 0x73, 0x68, 0x20, 0x62, 0x61, 0x6e, 0x6b,
-    0x20, 0x73, 0x74, 0x6d, 0x33, 0x32, 0x78, 0x20,
-    0x30, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x20,
-    0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x20, 0x46,
-    0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20,
-    0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
-    0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75,
-    0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
-    0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
-    0x69, 0x6f, 0x6e, 0x20, 0x66, 0x69, 0x6c, 0x65,
-    0x73, 0x2c, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x20,
-    0x61, 0x20, 0x6c, 0x6f, 0x6f, 0x6b, 0x20, 0x61,
-    0x74, 0x3a, 0x0d, 0x0a, 0x23, 0x20, 0x6f, 0x70,
-    0x65, 0x6e, 0x6f, 0x63, 0x64, 0x2e, 0x74, 0x65,
-    0x78, 0x69, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00,
+    0x72, 0x65, 0x61, 0x2d, 0x62, 0x61, 0x63, 0x6b,
+    0x75, 0x70, 0x20, 0x30, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x66, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x62, 0x61,
+    0x6e, 0x6b, 0x20, 0x73, 0x74, 0x6d, 0x33, 0x32,
+    0x78, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x20,
+    0x30, 0x20, 0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x23,
+    0x20, 0x46, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72,
+    0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
+    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62,
+    0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20,
+    0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
+    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x69,
+    0x6c, 0x65, 0x73, 0x2c, 0x20, 0x74, 0x61, 0x6b,
+    0x65, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x6f, 0x6b,
+    0x20, 0x61, 0x74, 0x3a, 0x0d, 0x0a, 0x23, 0x20,
+    0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x63, 0x64, 0x2e,
+    0x74, 0x65, 0x78, 0x69, 0x0d, 0x0a, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x20, 0x48, 0x69, 0x74, 0x65, 0x78, 0x20,
     0x73, 0x74, 0x6d, 0x33, 0x32, 0x20, 0x70, 0x65,
     0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
@@ -60044,403 +61840,399 @@
     0x24, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
     0x4d, 0x45, 0x5d, 0x0d, 0x0a, 0x6a, 0x74, 0x61,
     0x67, 0x20, 0x6e, 0x65, 0x77, 0x74, 0x61, 0x70,
-    0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20,
-    0x24, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e, 0x41,
-    0x4d, 0x45, 0x20, 0x63, 0x70, 0x75, 0x20, 0x2d,
-    0x69, 0x72, 0x6c, 0x65, 0x6e, 0x20, 0x34, 0x20,
-    0x2d, 0x69, 0x72, 0x63, 0x61, 0x70, 0x74, 0x75,
-    0x72, 0x65, 0x20, 0x30, 0x78, 0x31, 0x20, 0x2d,
-    0x69, 0x72, 0x6d, 0x61, 0x73, 0x6b, 0x20, 0x30,
-    0x78, 0x66, 0x20, 0x2d, 0x65, 0x78, 0x70, 0x65,
-    0x63, 0x74, 0x65, 0x64, 0x2d, 0x69, 0x64, 0x20,
-    0x24, 0x5f, 0x43, 0x50, 0x55, 0x54, 0x41, 0x50,
-    0x49, 0x44, 0x0d, 0x0a, 0x0d, 0x0a, 0x6a, 0x74,
-    0x61, 0x67, 0x5f, 0x6e, 0x73, 0x72, 0x73, 0x74,
-    0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x20, 0x32,
-    0x30, 0x30, 0x0d, 0x0a, 0x6a, 0x74, 0x61, 0x67,
-    0x5f, 0x6e, 0x74, 0x72, 0x73, 0x74, 0x5f, 0x64,
-    0x65, 0x6c, 0x61, 0x79, 0x20, 0x30, 0x0d, 0x0a,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x23, 0x23, 0x23,
+    0x20, 0x24, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x4e,
+    0x41, 0x4d, 0x45, 0x20, 0x63, 0x70, 0x75, 0x20,
+    0x2d, 0x69, 0x72, 0x6c, 0x65, 0x6e, 0x20, 0x34,
+    0x20, 0x2d, 0x69, 0x72, 0x63, 0x61, 0x70, 0x74,
+    0x75, 0x72, 0x65, 0x20, 0x30, 0x78, 0x31, 0x20,
+    0x2d, 0x69, 0x72, 0x6d, 0x61, 0x73, 0x6b, 0x20,
+    0x30, 0x78, 0x66, 0x20, 0x2d, 0x65, 0x78, 0x70,
+    0x65, 0x63, 0x74, 0x65, 0x64, 0x2d, 0x69, 0x64,
+    0x20, 0x24, 0x5f, 0x43, 0x50, 0x55, 0x54, 0x41,
+    0x50, 0x49, 0x44, 0x0d, 0x0a, 0x0d, 0x0a, 0x6a,
+    0x74, 0x61, 0x67, 0x5f, 0x6e, 0x73, 0x72, 0x73,
+    0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x20,
+    0x32, 0x30, 0x30, 0x0d, 0x0a, 0x6a, 0x74, 0x61,
+    0x67, 0x5f, 0x6e, 0x74, 0x72, 0x73, 0x74, 0x5f,
+    0x64, 0x65, 0x6c, 0x61, 0x79, 0x20, 0x30, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x23, 0x23,
     0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
     0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
-    0x23, 0x23, 0x0d, 0x0a, 0x23, 0x20, 0x54, 0x61,
-    0x72, 0x67, 0x65, 0x74, 0x20, 0x63, 0x6f, 0x6e,
-    0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
-    0x6f, 0x6e, 0x0d, 0x0a, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x23, 0x0d, 0x0a, 0x23, 0x20, 0x54,
+    0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x63, 0x6f,
+    0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
+    0x69, 0x6f, 0x6e, 0x0d, 0x0a, 0x23, 0x23, 0x23,
     0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
     0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
-    0x23, 0x23, 0x0d, 0x0a, 0x0d, 0x0a, 0x74, 0x61,
-    0x72, 0x67, 0x65, 0x74, 0x20, 0x63, 0x72, 0x65,
-    0x61, 0x74, 0x65, 0x20, 0x24, 0x5f, 0x54, 0x41,
-    0x52, 0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45,
-    0x20, 0x61, 0x72, 0x6d, 0x39, 0x32, 0x36, 0x65,
-    0x6a, 0x73, 0x20, 0x2d, 0x65, 0x6e, 0x64, 0x69,
-    0x61, 0x6e, 0x20, 0x24, 0x5f, 0x45, 0x4e, 0x44,
-    0x49, 0x41, 0x4e, 0x20, 0x2d, 0x63, 0x68, 0x61,
-    0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x69, 0x74,
-    0x69, 0x6f, 0x6e, 0x20, 0x24, 0x5f, 0x54, 0x41,
-    0x52, 0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45,
-    0x20, 0x2d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
-    0x74, 0x20, 0x61, 0x72, 0x6d, 0x39, 0x32, 0x36,
-    0x65, 0x6a, 0x73, 0x0d, 0x0a, 0x24, 0x5f, 0x54,
+    0x23, 0x23, 0x23, 0x0d, 0x0a, 0x0d, 0x0a, 0x74,
+    0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x63, 0x72,
+    0x65, 0x61, 0x74, 0x65, 0x20, 0x24, 0x5f, 0x54,
     0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d,
-    0x45, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
-    0x75, 0x72, 0x65, 0x20, 0x2d, 0x65, 0x76, 0x65,
-    0x6e, 0x74, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74,
-    0x2d, 0x69, 0x6e, 0x69, 0x74, 0x20, 0x7b, 0x0d,
-    0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78,
-    0x39, 0x30, 0x36, 0x30, 0x30, 0x31, 0x30, 0x34,
-    0x20, 0x30, 0x78, 0x33, 0x33, 0x33, 0x31, 0x33,
-    0x33, 0x33, 0x33, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
-    0x77, 0x20, 0x30, 0x78, 0x41, 0x30, 0x37, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x20, 0x30, 0x78, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x20,
-    0x20, 0x23, 0x20, 0x45, 0x6e, 0x61, 0x62, 0x6c,
-    0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x65,
-    0x6d, 0x6f, 0x72, 0x79, 0x20, 0x63, 0x6f, 0x6e,
-    0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
+    0x45, 0x20, 0x61, 0x72, 0x6d, 0x39, 0x32, 0x36,
+    0x65, 0x6a, 0x73, 0x20, 0x2d, 0x65, 0x6e, 0x64,
+    0x69, 0x61, 0x6e, 0x20, 0x24, 0x5f, 0x45, 0x4e,
+    0x44, 0x49, 0x41, 0x4e, 0x20, 0x2d, 0x63, 0x68,
+    0x61, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x69,
+    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x24, 0x5f, 0x54,
+    0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d,
+    0x45, 0x20, 0x2d, 0x76, 0x61, 0x72, 0x69, 0x61,
+    0x6e, 0x74, 0x20, 0x61, 0x72, 0x6d, 0x39, 0x32,
+    0x36, 0x65, 0x6a, 0x73, 0x0d, 0x0a, 0x24, 0x5f,
+    0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x4e, 0x41,
+    0x4d, 0x45, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
+    0x67, 0x75, 0x72, 0x65, 0x20, 0x2d, 0x65, 0x76,
+    0x65, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x73, 0x65,
+    0x74, 0x2d, 0x69, 0x6e, 0x69, 0x74, 0x20, 0x7b,
     0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30,
-    0x78, 0x41, 0x30, 0x37, 0x30, 0x30, 0x30, 0x32,
-    0x34, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30,
-    0x30, 0x30, 0x30, 0x36, 0x20, 0x20, 0x23, 0x20,
-    0x53, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20,
-    0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x20,
-    0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x20,
-    0x36, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
+    0x78, 0x39, 0x30, 0x36, 0x30, 0x30, 0x31, 0x30,
+    0x34, 0x20, 0x30, 0x78, 0x33, 0x33, 0x33, 0x31,
+    0x33, 0x33, 0x33, 0x33, 0x0d, 0x0a, 0x09, 0x6d,
+    0x77, 0x77, 0x20, 0x30, 0x78, 0x41, 0x30, 0x37,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x30, 0x78,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31,
+    0x20, 0x20, 0x23, 0x20, 0x45, 0x6e, 0x61, 0x62,
+    0x6c, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
+    0x65, 0x6d, 0x6f, 0x72, 0x79, 0x20, 0x63, 0x6f,
+    0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
+    0x2e, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
     0x30, 0x78, 0x41, 0x30, 0x37, 0x30, 0x30, 0x30,
-    0x32, 0x38, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x31, 0x20, 0x20, 0x23,
-    0x20, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
-    0x30, 0x78, 0x41, 0x30, 0x37, 0x30, 0x30, 0x30,
-    0x33, 0x30, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x31, 0x20, 0x20, 0x23,
+    0x32, 0x34, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x36, 0x20, 0x20, 0x23,
     0x20, 0x53, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65,
-    0x20, 0x70, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72,
-    0x67, 0x65, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f,
-    0x64, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
-    0x30, 0x78, 0x41, 0x30, 0x37, 0x30, 0x30, 0x30,
-    0x33, 0x34, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x34, 0x20, 0x20, 0x23,
-    0x20, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20,
-    0x74, 0x6f, 0x20, 0x70, 0x72, 0x65, 0x63, 0x68,
-    0x61, 0x72, 0x67, 0x65, 0x20, 0x63, 0x6f, 0x6d,
-    0x6d, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x65, 0x72,
-    0x69, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x31,
-    0x36, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x20,
-    0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x0d, 0x0a,
-    0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x41,
-    0x30, 0x37, 0x30, 0x30, 0x30, 0x33, 0x43, 0x20,
-    0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
-    0x30, 0x31, 0x20, 0x20, 0x23, 0x20, 0x74, 0x41,
-    0x50, 0x52, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x20, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
+    0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
+    0x20, 0x36, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
     0x20, 0x30, 0x78, 0x41, 0x30, 0x37, 0x30, 0x30,
-    0x30, 0x34, 0x30, 0x20, 0x30, 0x78, 0x30, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x20, 0x20,
-    0x23, 0x20, 0x74, 0x44, 0x41, 0x4c, 0x0d, 0x0a,
-    0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x41,
-    0x30, 0x37, 0x30, 0x30, 0x30, 0x34, 0x34, 0x20,
-    0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
-    0x30, 0x31, 0x20, 0x20, 0x23, 0x20, 0x74, 0x57,
-    0x52, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
-    0x30, 0x78, 0x41, 0x30, 0x37, 0x30, 0x30, 0x30,
-    0x34, 0x38, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x36, 0x20, 0x20, 0x23,
-    0x20, 0x74, 0x52, 0x43, 0x20, 0x33, 0x32, 0x20,
-    0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x63, 0x79,
-    0x63, 0x6c, 0x65, 0x73, 0x20, 0x20, 0x0d, 0x0a,
-    0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x41,
-    0x30, 0x37, 0x30, 0x30, 0x30, 0x34, 0x43, 0x20,
-    0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
-    0x30, 0x36, 0x20, 0x20, 0x23, 0x20, 0x74, 0x52,
-    0x46, 0x43, 0x20, 0x33, 0x32, 0x20, 0x63, 0x6c,
-    0x6f, 0x63, 0x6b, 0x20, 0x63, 0x79, 0x63, 0x6c,
-    0x65, 0x73, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x30, 0x32, 0x38, 0x20, 0x30, 0x78, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x20, 0x20,
+    0x23, 0x20, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
     0x20, 0x30, 0x78, 0x41, 0x30, 0x37, 0x30, 0x30,
-    0x30, 0x35, 0x34, 0x20, 0x30, 0x78, 0x30, 0x30,
+    0x30, 0x33, 0x30, 0x20, 0x30, 0x78, 0x30, 0x30,
     0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x20, 0x20,
-    0x23, 0x20, 0x74, 0x52, 0x52, 0x44, 0x0d, 0x0a,
-    0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x41,
-    0x30, 0x37, 0x30, 0x30, 0x30, 0x35, 0x38, 0x20,
-    0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
-    0x30, 0x31, 0x20, 0x20, 0x23, 0x20, 0x74, 0x4d,
-    0x52, 0x44, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x23, 0x20, 0x53, 0x65, 0x74, 0x20, 0x74, 0x68,
+    0x65, 0x20, 0x70, 0x72, 0x65, 0x63, 0x68, 0x61,
+    0x72, 0x67, 0x65, 0x20, 0x70, 0x65, 0x72, 0x69,
+    0x6f, 0x64, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
     0x20, 0x30, 0x78, 0x41, 0x30, 0x37, 0x30, 0x30,
-    0x31, 0x30, 0x30, 0x20, 0x30, 0x78, 0x30, 0x30,
-    0x30, 0x30, 0x34, 0x32, 0x38, 0x30, 0x20, 0x20,
-    0x23, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
-    0x63, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
-    0x20, 0x30, 0x20, 0x28, 0x63, 0x73, 0x34, 0x29,
-    0x20, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
-    0x30, 0x78, 0x41, 0x30, 0x37, 0x30, 0x30, 0x31,
-    0x32, 0x30, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
-    0x30, 0x34, 0x32, 0x38, 0x30, 0x20, 0x20, 0x23,
-    0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
-    0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20,
-    0x31, 0x20, 0x28, 0x63, 0x73, 0x35, 0x29, 0x0d,
+    0x30, 0x33, 0x34, 0x20, 0x30, 0x78, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x20, 0x20,
+    0x23, 0x20, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
+    0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x65, 0x63,
+    0x68, 0x61, 0x72, 0x67, 0x65, 0x20, 0x63, 0x6f,
+    0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x65,
+    0x72, 0x69, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20,
+    0x31, 0x36, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
+    0x20, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x0d,
     0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78,
-    0x41, 0x30, 0x37, 0x30, 0x30, 0x31, 0x34, 0x30,
-    0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x34,
-    0x32, 0x38, 0x30, 0x20, 0x20, 0x23, 0x20, 0x44,
-    0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x20, 0x43,
-    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x32, 0x20,
-    0x28, 0x63, 0x73, 0x36, 0x29, 0x0d, 0x0a, 0x09,
-    0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x41, 0x30,
-    0x37, 0x30, 0x30, 0x31, 0x36, 0x30, 0x20, 0x30,
-    0x78, 0x30, 0x30, 0x30, 0x30, 0x34, 0x32, 0x38,
-    0x30, 0x20, 0x20, 0x23, 0x20, 0x44, 0x79, 0x6e,
-    0x61, 0x6d, 0x69, 0x63, 0x20, 0x43, 0x6f, 0x6e,
-    0x66, 0x69, 0x67, 0x20, 0x33, 0x20, 0x28, 0x63,
-    0x73, 0x37, 0x29, 0x0d, 0x0a, 0x09, 0x23, 0x0d,
+    0x41, 0x30, 0x37, 0x30, 0x30, 0x30, 0x33, 0x43,
+    0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x31, 0x20, 0x20, 0x23, 0x20, 0x74,
+    0x41, 0x50, 0x52, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
+    0x77, 0x20, 0x30, 0x78, 0x41, 0x30, 0x37, 0x30,
+    0x30, 0x30, 0x34, 0x30, 0x20, 0x30, 0x78, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x35, 0x20,
+    0x20, 0x23, 0x20, 0x74, 0x44, 0x41, 0x4c, 0x0d,
     0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78,
-    0x41, 0x30, 0x37, 0x30, 0x30, 0x31, 0x30, 0x34,
+    0x41, 0x30, 0x37, 0x30, 0x30, 0x30, 0x34, 0x34,
     0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30,
-    0x32, 0x30, 0x33, 0x20, 0x20, 0x23, 0x20, 0x43,
-    0x41, 0x53, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x6e,
-    0x63, 0x79, 0x20, 0x69, 0x73, 0x20, 0x32, 0x20,
-    0x61, 0x74, 0x20, 0x31, 0x30, 0x30, 0x20, 0x4d,
-    0x48, 0x7a, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x30, 0x30, 0x31, 0x20, 0x20, 0x23, 0x20, 0x74,
+    0x57, 0x52, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
     0x20, 0x30, 0x78, 0x41, 0x30, 0x37, 0x30, 0x30,
-    0x31, 0x32, 0x34, 0x20, 0x30, 0x78, 0x30, 0x30,
-    0x30, 0x30, 0x30, 0x32, 0x30, 0x33, 0x20, 0x20,
-    0x23, 0x20, 0x43, 0x41, 0x53, 0x20, 0x6c, 0x61,
-    0x74, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x69, 0x73,
-    0x20, 0x32, 0x20, 0x61, 0x74, 0x20, 0x31, 0x30,
-    0x30, 0x20, 0x4d, 0x48, 0x7a, 0x0d, 0x0a, 0x09,
-    0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x41, 0x30,
-    0x37, 0x30, 0x30, 0x31, 0x34, 0x34, 0x20, 0x30,
-    0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x30,
-    0x33, 0x20, 0x20, 0x23, 0x20, 0x43, 0x41, 0x53,
-    0x20, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
-    0x20, 0x69, 0x73, 0x20, 0x32, 0x20, 0x61, 0x74,
-    0x20, 0x31, 0x30, 0x30, 0x20, 0x4d, 0x48, 0x7a,
+    0x30, 0x34, 0x38, 0x20, 0x30, 0x78, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x36, 0x20, 0x20,
+    0x23, 0x20, 0x74, 0x52, 0x43, 0x20, 0x33, 0x32,
+    0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x63,
+    0x79, 0x63, 0x6c, 0x65, 0x73, 0x20, 0x20, 0x0d,
+    0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78,
+    0x41, 0x30, 0x37, 0x30, 0x30, 0x30, 0x34, 0x43,
+    0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x36, 0x20, 0x20, 0x23, 0x20, 0x74,
+    0x52, 0x46, 0x43, 0x20, 0x33, 0x32, 0x20, 0x63,
+    0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x63, 0x79, 0x63,
+    0x6c, 0x65, 0x73, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
+    0x77, 0x20, 0x30, 0x78, 0x41, 0x30, 0x37, 0x30,
+    0x30, 0x30, 0x35, 0x34, 0x20, 0x30, 0x78, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x20,
+    0x20, 0x23, 0x20, 0x74, 0x52, 0x52, 0x44, 0x0d,
+    0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78,
+    0x41, 0x30, 0x37, 0x30, 0x30, 0x30, 0x35, 0x38,
+    0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x31, 0x20, 0x20, 0x23, 0x20, 0x74,
+    0x4d, 0x52, 0x44, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
+    0x77, 0x20, 0x30, 0x78, 0x41, 0x30, 0x37, 0x30,
+    0x30, 0x31, 0x30, 0x30, 0x20, 0x30, 0x78, 0x30,
+    0x30, 0x30, 0x30, 0x34, 0x32, 0x38, 0x30, 0x20,
+    0x20, 0x23, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d,
+    0x69, 0x63, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69,
+    0x67, 0x20, 0x30, 0x20, 0x28, 0x63, 0x73, 0x34,
+    0x29, 0x20, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x20, 0x30, 0x78, 0x41, 0x30, 0x37, 0x30, 0x30,
+    0x31, 0x32, 0x30, 0x20, 0x30, 0x78, 0x30, 0x30,
+    0x30, 0x30, 0x34, 0x32, 0x38, 0x30, 0x20, 0x20,
+    0x23, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
+    0x63, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
+    0x20, 0x31, 0x20, 0x28, 0x63, 0x73, 0x35, 0x29,
     0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30,
-    0x78, 0x41, 0x30, 0x37, 0x30, 0x30, 0x31, 0x36,
+    0x78, 0x41, 0x30, 0x37, 0x30, 0x30, 0x31, 0x34,
+    0x30, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30,
+    0x34, 0x32, 0x38, 0x30, 0x20, 0x20, 0x23, 0x20,
+    0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x20,
+    0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x32,
+    0x20, 0x28, 0x63, 0x73, 0x36, 0x29, 0x0d, 0x0a,
+    0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x41,
+    0x30, 0x37, 0x30, 0x30, 0x31, 0x36, 0x30, 0x20,
+    0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x34, 0x32,
+    0x38, 0x30, 0x20, 0x20, 0x23, 0x20, 0x44, 0x79,
+    0x6e, 0x61, 0x6d, 0x69, 0x63, 0x20, 0x43, 0x6f,
+    0x6e, 0x66, 0x69, 0x67, 0x20, 0x33, 0x20, 0x28,
+    0x63, 0x73, 0x37, 0x29, 0x0d, 0x0a, 0x09, 0x23,
+    0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30,
+    0x78, 0x41, 0x30, 0x37, 0x30, 0x30, 0x31, 0x30,
     0x34, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30,
     0x30, 0x32, 0x30, 0x33, 0x20, 0x20, 0x23, 0x20,
     0x43, 0x41, 0x53, 0x20, 0x6c, 0x61, 0x74, 0x65,
     0x6e, 0x63, 0x79, 0x20, 0x69, 0x73, 0x20, 0x32,
     0x20, 0x61, 0x74, 0x20, 0x31, 0x30, 0x30, 0x20,
-    0x4d, 0x48, 0x7a, 0x0d, 0x0a, 0x09, 0x23, 0x0d,
-    0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78,
-    0x41, 0x30, 0x37, 0x30, 0x30, 0x30, 0x32, 0x30,
-    0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30,
-    0x31, 0x30, 0x33, 0x20, 0x20, 0x23, 0x20, 0x69,
-    0x73, 0x73, 0x75, 0x65, 0x20, 0x53, 0x44, 0x52,
-    0x41, 0x4d, 0x20, 0x50, 0x41, 0x4c, 0x4c, 0x20,
-    0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x0d,
-    0x0a, 0x09, 0x23, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
+    0x4d, 0x48, 0x7a, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
     0x77, 0x20, 0x30, 0x78, 0x41, 0x30, 0x37, 0x30,
-    0x30, 0x30, 0x32, 0x34, 0x20, 0x30, 0x78, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x20,
-    0x20, 0x23, 0x20, 0x53, 0x65, 0x74, 0x20, 0x74,
-    0x68, 0x65, 0x20, 0x72, 0x65, 0x66, 0x72, 0x65,
-    0x73, 0x68, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74,
-    0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65,
-    0x20, 0x61, 0x73, 0x20, 0x73, 0x6d, 0x61, 0x6c,
-    0x6c, 0x20, 0x61, 0x73, 0x20, 0x70, 0x6f, 0x73,
-    0x73, 0x69, 0x62, 0x6c, 0x65, 0x0d, 0x0a, 0x09,
-    0x23, 0x0d, 0x0a, 0x09, 0x23, 0x20, 0x41, 0x64,
-    0x64, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x64,
-    0x75, 0x6d, 0x6d, 0x79, 0x20, 0x77, 0x72, 0x69,
-    0x74, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x67,
-    0x69, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
-    0x53, 0x44, 0x52, 0x41, 0x4d, 0x20, 0x74, 0x69,
-    0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65,
-    0x74, 0x74, 0x6c, 0x65, 0x2c, 0x20, 0x69, 0x74,
-    0x20, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x20, 0x74,
-    0x77, 0x6f, 0x0d, 0x0a, 0x09, 0x23, 0x20, 0x41,
-    0x48, 0x42, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
-    0x20, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x2c,
-    0x20, 0x68, 0x65, 0x72, 0x65, 0x20, 0x77, 0x65,
-    0x20, 0x70, 0x6f, 0x6b, 0x65, 0x20, 0x69, 0x6e,
-    0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x62,
-    0x75, 0x67, 0x67, 0x65, 0x72, 0x20, 0x66, 0x6c,
-    0x61, 0x67, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73,
-    0x20, 0x6c, 0x65, 0x74, 0x73, 0x0d, 0x0a, 0x09,
-    0x23, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6f,
-    0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x6b,
-    0x6e, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x61, 0x74,
-    0x20, 0x77, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20,
-    0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64,
-    0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x0d,
-    0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78,
-    0x41, 0x30, 0x39, 0x30, 0x30, 0x30, 0x30, 0x30,
-    0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30,
-    0x30, 0x30, 0x32, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
-    0x77, 0x20, 0x30, 0x78, 0x41, 0x30, 0x39, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x20, 0x30, 0x78, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x0d,
-    0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78,
-    0x41, 0x30, 0x39, 0x30, 0x30, 0x30, 0x30, 0x30,
-    0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30,
-    0x30, 0x30, 0x32, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
-    0x77, 0x20, 0x30, 0x78, 0x41, 0x30, 0x39, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x20, 0x30, 0x78, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x0d,
-    0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78,
-    0x41, 0x30, 0x39, 0x30, 0x30, 0x30, 0x30, 0x30,
-    0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30,
-    0x30, 0x30, 0x32, 0x0d, 0x0a, 0x09, 0x23, 0x0d,
-    0x0a, 0x09, 0x6d, 0x64, 0x77, 0x20, 0x30, 0x78,
-    0x41, 0x30, 0x39, 0x30, 0x30, 0x30, 0x30, 0x30,
-    0x20, 0x0d, 0x0a, 0x09, 0x6d, 0x64, 0x77, 0x20,
-    0x30, 0x78, 0x41, 0x30, 0x39, 0x30, 0x30, 0x30,
-    0x30, 0x30, 0x20, 0x0d, 0x0a, 0x09, 0x6d, 0x64,
-    0x77, 0x20, 0x30, 0x78, 0x41, 0x30, 0x39, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x20, 0x0d, 0x0a, 0x09,
-    0x6d, 0x64, 0x77, 0x20, 0x30, 0x78, 0x41, 0x30,
-    0x39, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x0d,
-    0x0a, 0x09, 0x6d, 0x64, 0x77, 0x20, 0x30, 0x78,
-    0x41, 0x30, 0x39, 0x30, 0x30, 0x30, 0x30, 0x30,
-    0x20, 0x0d, 0x0a, 0x09, 0x23, 0x0d, 0x0a, 0x09,
-    0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x41, 0x30,
-    0x37, 0x30, 0x30, 0x30, 0x32, 0x34, 0x20, 0x30,
-    0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33,
-    0x30, 0x20, 0x23, 0x20, 0x53, 0x65, 0x74, 0x20,
+    0x30, 0x31, 0x32, 0x34, 0x20, 0x30, 0x78, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x32, 0x30, 0x33, 0x20,
+    0x20, 0x23, 0x20, 0x43, 0x41, 0x53, 0x20, 0x6c,
+    0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x69,
+    0x73, 0x20, 0x32, 0x20, 0x61, 0x74, 0x20, 0x31,
+    0x30, 0x30, 0x20, 0x4d, 0x48, 0x7a, 0x0d, 0x0a,
+    0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x41,
+    0x30, 0x37, 0x30, 0x30, 0x31, 0x34, 0x34, 0x20,
+    0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32,
+    0x30, 0x33, 0x20, 0x20, 0x23, 0x20, 0x43, 0x41,
+    0x53, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
+    0x79, 0x20, 0x69, 0x73, 0x20, 0x32, 0x20, 0x61,
+    0x74, 0x20, 0x31, 0x30, 0x30, 0x20, 0x4d, 0x48,
+    0x7a, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
+    0x30, 0x78, 0x41, 0x30, 0x37, 0x30, 0x30, 0x31,
+    0x36, 0x34, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x32, 0x30, 0x33, 0x20, 0x20, 0x23,
+    0x20, 0x43, 0x41, 0x53, 0x20, 0x6c, 0x61, 0x74,
+    0x65, 0x6e, 0x63, 0x79, 0x20, 0x69, 0x73, 0x20,
+    0x32, 0x20, 0x61, 0x74, 0x20, 0x31, 0x30, 0x30,
+    0x20, 0x4d, 0x48, 0x7a, 0x0d, 0x0a, 0x09, 0x23,
+    0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30,
+    0x78, 0x41, 0x30, 0x37, 0x30, 0x30, 0x30, 0x32,
+    0x30, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x31, 0x30, 0x33, 0x20, 0x20, 0x23, 0x20,
+    0x69, 0x73, 0x73, 0x75, 0x65, 0x20, 0x53, 0x44,
+    0x52, 0x41, 0x4d, 0x20, 0x50, 0x41, 0x4c, 0x4c,
+    0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
+    0x0d, 0x0a, 0x09, 0x23, 0x0d, 0x0a, 0x09, 0x6d,
+    0x77, 0x77, 0x20, 0x30, 0x78, 0x41, 0x30, 0x37,
+    0x30, 0x30, 0x30, 0x32, 0x34, 0x20, 0x30, 0x78,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31,
+    0x20, 0x20, 0x23, 0x20, 0x53, 0x65, 0x74, 0x20,
     0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x66, 0x72,
     0x65, 0x73, 0x68, 0x20, 0x63, 0x6f, 0x75, 0x6e,
-    0x74, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x33,
-    0x30, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
-    0x30, 0x78, 0x41, 0x30, 0x37, 0x30, 0x30, 0x30,
-    0x32, 0x30, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
-    0x30, 0x30, 0x30, 0x38, 0x33, 0x20, 0x23, 0x20,
-    0x49, 0x73, 0x73, 0x75, 0x65, 0x20, 0x53, 0x44,
-    0x52, 0x41, 0x4d, 0x20, 0x4d, 0x4f, 0x44, 0x45,
-    0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
-    0x0d, 0x0a, 0x09, 0x23, 0x0d, 0x0a, 0x09, 0x23,
-    0x20, 0x4e, 0x65, 0x78, 0x74, 0x20, 0x77, 0x65,
-    0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
-    0x20, 0x61, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20,
-    0x6f, 0x66, 0x20, 0x52, 0x41, 0x4d, 0x2e, 0x0d,
-    0x0a, 0x09, 0x23, 0x20, 0x6d, 0x77, 0x20, 0x3d,
-    0x20, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x77, 0x6f,
-    0x72, 0x64, 0x2e, 0x0d, 0x0a, 0x09, 0x6d, 0x64,
-    0x77, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x32,
-    0x32, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x09, 0x23,
-    0x20, 0x6d, 0x77, 0x20, 0x30, 0x78, 0x30, 0x30,
-    0x30, 0x32, 0x32, 0x30, 0x30, 0x30, 0x3a, 0x50,
-    0x2c, 0x20, 0x72, 0x33, 0x20, 0x20, 0x23, 0x20,
-    0x32, 0x32, 0x30, 0x30, 0x30, 0x20, 0x66, 0x6f,
-    0x72, 0x20, 0x63, 0x61, 0x73, 0x32, 0x20, 0x6c,
-    0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x2c, 0x20,
-    0x33, 0x32, 0x30, 0x30, 0x30, 0x20, 0x66, 0x6f,
-    0x72, 0x20, 0x63, 0x61, 0x73, 0x20, 0x33, 0x0d,
-    0x0a, 0x09, 0x23, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
-    0x77, 0x20, 0x30, 0x78, 0x41, 0x30, 0x37, 0x30,
-    0x30, 0x30, 0x32, 0x30, 0x20, 0x30, 0x78, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x20,
-    0x20, 0x20, 0x23, 0x20, 0x69, 0x73, 0x73, 0x75,
-    0x65, 0x20, 0x53, 0x44, 0x52, 0x41, 0x4d, 0x20,
-    0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x20, 0x63,
-    0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x0d, 0x0a,
+    0x74, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x62,
+    0x65, 0x20, 0x61, 0x73, 0x20, 0x73, 0x6d, 0x61,
+    0x6c, 0x6c, 0x20, 0x61, 0x73, 0x20, 0x70, 0x6f,
+    0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x0d, 0x0a,
+    0x09, 0x23, 0x0d, 0x0a, 0x09, 0x23, 0x20, 0x41,
+    0x64, 0x64, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20,
+    0x64, 0x75, 0x6d, 0x6d, 0x79, 0x20, 0x77, 0x72,
+    0x69, 0x74, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20,
+    0x67, 0x69, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65,
+    0x20, 0x53, 0x44, 0x52, 0x41, 0x4d, 0x20, 0x74,
+    0x69, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x73,
+    0x65, 0x74, 0x74, 0x6c, 0x65, 0x2c, 0x20, 0x69,
+    0x74, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x20,
+    0x74, 0x77, 0x6f, 0x0d, 0x0a, 0x09, 0x23, 0x20,
+    0x41, 0x48, 0x42, 0x20, 0x63, 0x6c, 0x6f, 0x63,
+    0x6b, 0x20, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73,
+    0x2c, 0x20, 0x68, 0x65, 0x72, 0x65, 0x20, 0x77,
+    0x65, 0x20, 0x70, 0x6f, 0x6b, 0x65, 0x20, 0x69,
+    0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65,
+    0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x20, 0x66,
+    0x6c, 0x61, 0x67, 0x2c, 0x20, 0x74, 0x68, 0x69,
+    0x73, 0x20, 0x6c, 0x65, 0x74, 0x73, 0x0d, 0x0a,
+    0x09, 0x23, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
+    0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20,
+    0x6b, 0x6e, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x61,
+    0x74, 0x20, 0x77, 0x65, 0x20, 0x61, 0x72, 0x65,
+    0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
+    0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72,
+    0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30,
+    0x78, 0x41, 0x30, 0x39, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x32, 0x0d, 0x0a, 0x09, 0x6d,
+    0x77, 0x77, 0x20, 0x30, 0x78, 0x41, 0x30, 0x39,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x30, 0x78,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32,
+    0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30,
+    0x78, 0x41, 0x30, 0x39, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x32, 0x0d, 0x0a, 0x09, 0x6d,
+    0x77, 0x77, 0x20, 0x30, 0x78, 0x41, 0x30, 0x39,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x30, 0x78,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32,
+    0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30,
+    0x78, 0x41, 0x30, 0x39, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x32, 0x0d, 0x0a, 0x09, 0x23,
+    0x0d, 0x0a, 0x09, 0x6d, 0x64, 0x77, 0x20, 0x30,
+    0x78, 0x41, 0x30, 0x39, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x20, 0x0d, 0x0a, 0x09, 0x6d, 0x64, 0x77,
+    0x20, 0x30, 0x78, 0x41, 0x30, 0x39, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x20, 0x0d, 0x0a, 0x09, 0x6d,
+    0x64, 0x77, 0x20, 0x30, 0x78, 0x41, 0x30, 0x39,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x0d, 0x0a,
+    0x09, 0x6d, 0x64, 0x77, 0x20, 0x30, 0x78, 0x41,
+    0x30, 0x39, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20,
+    0x0d, 0x0a, 0x09, 0x6d, 0x64, 0x77, 0x20, 0x30,
+    0x78, 0x41, 0x30, 0x39, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x20, 0x0d, 0x0a, 0x09, 0x23, 0x0d, 0x0a,
     0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x41,
-    0x30, 0x37, 0x30, 0x30, 0x31, 0x30, 0x30, 0x20,
+    0x30, 0x37, 0x30, 0x30, 0x30, 0x32, 0x34, 0x20,
+    0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x33, 0x30, 0x20, 0x23, 0x20, 0x53, 0x65, 0x74,
+    0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x66,
+    0x72, 0x65, 0x73, 0x68, 0x20, 0x63, 0x6f, 0x75,
+    0x6e, 0x74, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20,
+    0x33, 0x30, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77,
+    0x20, 0x30, 0x78, 0x41, 0x30, 0x37, 0x30, 0x30,
+    0x30, 0x32, 0x30, 0x20, 0x30, 0x78, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x38, 0x33, 0x20, 0x23,
+    0x20, 0x49, 0x73, 0x73, 0x75, 0x65, 0x20, 0x53,
+    0x44, 0x52, 0x41, 0x4d, 0x20, 0x4d, 0x4f, 0x44,
+    0x45, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
+    0x64, 0x0d, 0x0a, 0x09, 0x23, 0x0d, 0x0a, 0x09,
+    0x23, 0x20, 0x4e, 0x65, 0x78, 0x74, 0x20, 0x77,
+    0x65, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
+    0x6d, 0x20, 0x61, 0x20, 0x72, 0x65, 0x61, 0x64,
+    0x20, 0x6f, 0x66, 0x20, 0x52, 0x41, 0x4d, 0x2e,
+    0x0d, 0x0a, 0x09, 0x23, 0x20, 0x6d, 0x77, 0x20,
+    0x3d, 0x20, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x77,
+    0x6f, 0x72, 0x64, 0x2e, 0x0d, 0x0a, 0x09, 0x6d,
+    0x64, 0x77, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
+    0x32, 0x32, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x09,
+    0x23, 0x20, 0x6d, 0x77, 0x20, 0x30, 0x78, 0x30,
+    0x30, 0x30, 0x32, 0x32, 0x30, 0x30, 0x30, 0x3a,
+    0x50, 0x2c, 0x20, 0x72, 0x33, 0x20, 0x20, 0x23,
+    0x20, 0x32, 0x32, 0x30, 0x30, 0x30, 0x20, 0x66,
+    0x6f, 0x72, 0x20, 0x63, 0x61, 0x73, 0x32, 0x20,
+    0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x2c,
+    0x20, 0x33, 0x32, 0x30, 0x30, 0x30, 0x20, 0x66,
+    0x6f, 0x72, 0x20, 0x63, 0x61, 0x73, 0x20, 0x33,
+    0x0d, 0x0a, 0x09, 0x23, 0x0d, 0x0a, 0x09, 0x6d,
+    0x77, 0x77, 0x20, 0x30, 0x78, 0x41, 0x30, 0x37,
+    0x30, 0x30, 0x30, 0x32, 0x30, 0x20, 0x30, 0x78,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33,
+    0x20, 0x20, 0x20, 0x23, 0x20, 0x69, 0x73, 0x73,
+    0x75, 0x65, 0x20, 0x53, 0x44, 0x52, 0x41, 0x4d,
+    0x20, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x20,
+    0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x0d,
+    0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78,
+    0x41, 0x30, 0x37, 0x30, 0x30, 0x31, 0x30, 0x30,
+    0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x38, 0x34,
+    0x32, 0x38, 0x30, 0x20, 0x20, 0x20, 0x23, 0x20,
+    0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x62,
+    0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x61, 0x63,
+    0x63, 0x65, 0x73, 0x73, 0x0d, 0x0a, 0x09, 0x6d,
+    0x77, 0x77, 0x20, 0x30, 0x78, 0x41, 0x30, 0x37,
+    0x30, 0x30, 0x31, 0x32, 0x30, 0x20, 0x30, 0x78,
+    0x30, 0x30, 0x30, 0x38, 0x34, 0x32, 0x38, 0x30,
+    0x20, 0x20, 0x20, 0x23, 0x20, 0x45, 0x6e, 0x61,
+    0x62, 0x6c, 0x65, 0x20, 0x62, 0x75, 0x66, 0x66,
+    0x65, 0x72, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73,
+    0x73, 0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20,
+    0x30, 0x78, 0x41, 0x30, 0x37, 0x30, 0x30, 0x31,
+    0x34, 0x30, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
+    0x38, 0x34, 0x32, 0x38, 0x30, 0x20, 0x20, 0x20,
+    0x23, 0x20, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
+    0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20,
+    0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x0d, 0x0a,
+    0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x41,
+    0x30, 0x37, 0x30, 0x30, 0x31, 0x36, 0x30, 0x20,
     0x30, 0x78, 0x30, 0x30, 0x30, 0x38, 0x34, 0x32,
     0x38, 0x30, 0x20, 0x20, 0x20, 0x23, 0x20, 0x45,
     0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x62, 0x75,
     0x66, 0x66, 0x65, 0x72, 0x20, 0x61, 0x63, 0x63,
-    0x65, 0x73, 0x73, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
-    0x77, 0x20, 0x30, 0x78, 0x41, 0x30, 0x37, 0x30,
-    0x30, 0x31, 0x32, 0x30, 0x20, 0x30, 0x78, 0x30,
-    0x30, 0x30, 0x38, 0x34, 0x32, 0x38, 0x30, 0x20,
-    0x20, 0x20, 0x23, 0x20, 0x45, 0x6e, 0x61, 0x62,
-    0x6c, 0x65, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65,
-    0x72, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
+    0x65, 0x73, 0x73, 0x0d, 0x0a, 0x0d, 0x0a, 0x09,
+    0x23, 0x53, 0x65, 0x74, 0x20, 0x62, 0x79, 0x74,
+    0x65, 0x20, 0x6c, 0x61, 0x6e, 0x65, 0x20, 0x73,
+    0x74, 0x61, 0x74, 0x65, 0x20, 0x28, 0x73, 0x74,
+    0x61, 0x74, 0x69, 0x63, 0x20, 0x6d, 0x65, 0x6d,
+    0x20, 0x31, 0x29, 0x22, 0x0d, 0x0a, 0x09, 0x6d,
+    0x77, 0x77, 0x20, 0x30, 0x78, 0x41, 0x30, 0x37,
+    0x30, 0x30, 0x32, 0x32, 0x30, 0x2c, 0x20, 0x30,
+    0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38,
+    0x32, 0x0d, 0x0a, 0x09, 0x23, 0x46, 0x6c, 0x61,
+    0x73, 0x68, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74,
     0x0d, 0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30,
-    0x78, 0x41, 0x30, 0x37, 0x30, 0x30, 0x31, 0x34,
-    0x30, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x38,
-    0x34, 0x32, 0x38, 0x30, 0x20, 0x20, 0x20, 0x23,
-    0x20, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20,
-    0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x61,
-    0x63, 0x63, 0x65, 0x73, 0x73, 0x0d, 0x0a, 0x09,
-    0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x41, 0x30,
-    0x37, 0x30, 0x30, 0x31, 0x36, 0x30, 0x20, 0x30,
-    0x78, 0x30, 0x30, 0x30, 0x38, 0x34, 0x32, 0x38,
-    0x30, 0x20, 0x20, 0x20, 0x23, 0x20, 0x45, 0x6e,
-    0x61, 0x62, 0x6c, 0x65, 0x20, 0x62, 0x75, 0x66,
-    0x66, 0x65, 0x72, 0x20, 0x61, 0x63, 0x63, 0x65,
-    0x73, 0x73, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x23,
-    0x53, 0x65, 0x74, 0x20, 0x62, 0x79, 0x74, 0x65,
-    0x20, 0x6c, 0x61, 0x6e, 0x65, 0x20, 0x73, 0x74,
-    0x61, 0x74, 0x65, 0x20, 0x28, 0x73, 0x74, 0x61,
-    0x74, 0x69, 0x63, 0x20, 0x6d, 0x65, 0x6d, 0x20,
-    0x31, 0x29, 0x22, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
-    0x77, 0x20, 0x30, 0x78, 0x41, 0x30, 0x37, 0x30,
-    0x30, 0x32, 0x32, 0x30, 0x2c, 0x20, 0x30, 0x78,
-    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x32,
-    0x0d, 0x0a, 0x09, 0x23, 0x46, 0x6c, 0x61, 0x73,
-    0x68, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x0d,
+    0x78, 0x41, 0x30, 0x39, 0x30, 0x30, 0x31, 0x46,
+    0x38, 0x2c, 0x20, 0x30, 0x78, 0x35, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x09,
+    0x23, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x4d,
+    0x61, 0x73, 0x6b, 0x20, 0x52, 0x65, 0x67, 0x0d,
     0x0a, 0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78,
-    0x41, 0x30, 0x39, 0x30, 0x30, 0x31, 0x46, 0x38,
-    0x2c, 0x20, 0x30, 0x78, 0x35, 0x30, 0x30, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x09, 0x23,
-    0x46, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x4d, 0x61,
-    0x73, 0x6b, 0x20, 0x52, 0x65, 0x67, 0x0d, 0x0a,
-    0x09, 0x6d, 0x77, 0x77, 0x20, 0x30, 0x78, 0x41,
-    0x30, 0x39, 0x30, 0x30, 0x31, 0x46, 0x43, 0x2c,
-    0x20, 0x30, 0x78, 0x46, 0x46, 0x30, 0x30, 0x30,
-    0x30, 0x30, 0x31, 0x0d, 0x0a, 0x09, 0x6d, 0x77,
-    0x77, 0x20, 0x30, 0x78, 0x41, 0x30, 0x37, 0x30,
-    0x30, 0x30, 0x32, 0x38, 0x2c, 0x20, 0x30, 0x78,
-    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x23, 0x20, 0x20,
-    0x52, 0x41, 0x4d, 0x41, 0x64, 0x64, 0x72, 0x20,
-    0x3d, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x32,
-    0x30, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x09, 0x23,
-    0x20, 0x20, 0x52, 0x41, 0x4d, 0x53, 0x69, 0x7a,
-    0x65, 0x20, 0x3d, 0x20, 0x30, 0x78, 0x30, 0x30,
-    0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x0d, 0x0a,
-    0x0d, 0x0a, 0x09, 0x23, 0x20, 0x53, 0x65, 0x74,
-    0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f,
-    0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x20, 0x6d,
-    0x6f, 0x64, 0x65, 0x0d, 0x0a, 0x09, 0x72, 0x65,
-    0x67, 0x20, 0x63, 0x70, 0x73, 0x72, 0x20, 0x30,
-    0x78, 0x64, 0x33, 0x0d, 0x0a, 0x7d, 0x0d, 0x0a,
-    0x0d, 0x0a, 0x24, 0x5f, 0x54, 0x41, 0x52, 0x47,
-    0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20, 0x63,
-    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
-    0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61,
-    0x72, 0x65, 0x61, 0x2d, 0x76, 0x69, 0x72, 0x74,
-    0x20, 0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b,
-    0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d, 0x70, 0x68,
-    0x79, 0x73, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
-    0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x2d, 0x77,
+    0x41, 0x30, 0x39, 0x30, 0x30, 0x31, 0x46, 0x43,
+    0x2c, 0x20, 0x30, 0x78, 0x46, 0x46, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x31, 0x0d, 0x0a, 0x09, 0x6d,
+    0x77, 0x77, 0x20, 0x30, 0x78, 0x41, 0x30, 0x37,
+    0x30, 0x30, 0x30, 0x32, 0x38, 0x2c, 0x20, 0x30,
+    0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x31, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x23, 0x20,
+    0x20, 0x52, 0x41, 0x4d, 0x41, 0x64, 0x64, 0x72,
+    0x20, 0x3d, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,
+    0x32, 0x30, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x09,
+    0x23, 0x20, 0x20, 0x52, 0x41, 0x4d, 0x53, 0x69,
+    0x7a, 0x65, 0x20, 0x3d, 0x20, 0x30, 0x78, 0x30,
+    0x30, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x09, 0x23, 0x20, 0x53, 0x65,
+    0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72,
+    0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x20,
+    0x6d, 0x6f, 0x64, 0x65, 0x0d, 0x0a, 0x09, 0x72,
+    0x65, 0x67, 0x20, 0x63, 0x70, 0x73, 0x72, 0x20,
+    0x30, 0x78, 0x64, 0x33, 0x0d, 0x0a, 0x7d, 0x0d,
+    0x0a, 0x0d, 0x0a, 0x24, 0x5f, 0x54, 0x41, 0x52,
+    0x47, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x20,
+    0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
+    0x65, 0x20, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d,
+    0x61, 0x72, 0x65, 0x61, 0x2d, 0x76, 0x69, 0x72,
+    0x74, 0x20, 0x30, 0x20, 0x2d, 0x77, 0x6f, 0x72,
+    0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d, 0x70,
+    0x68, 0x79, 0x73, 0x20, 0x30, 0x78, 0x30, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x2d,
+    0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65,
+    0x61, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x30,
+    0x78, 0x31, 0x30, 0x30, 0x30, 0x20, 0x2d, 0x77,
     0x6f, 0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61,
-    0x2d, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x30, 0x78,
-    0x31, 0x30, 0x30, 0x30, 0x20, 0x2d, 0x77, 0x6f,
-    0x72, 0x6b, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x2d,
-    0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x20, 0x31,
-    0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x23, 0x23, 0x23,
+    0x2d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x20,
+    0x31, 0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x23, 0x23,
     0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
     0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
-    0x23, 0x0d, 0x0a, 0x23, 0x20, 0x46, 0x6c, 0x61,
-    0x73, 0x68, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
-    0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
-    0x0d, 0x0a, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x23, 0x23, 0x0d, 0x0a, 0x23, 0x20, 0x46, 0x6c,
+    0x61, 0x73, 0x68, 0x20, 0x63, 0x6f, 0x6e, 0x66,
+    0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
+    0x6e, 0x0d, 0x0a, 0x23, 0x23, 0x23, 0x23, 0x23,
     0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
-    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x0d,
-    0x0a, 0x0d, 0x0a, 0x23, 0x4d, 0x32, 0x39, 0x44,
-    0x57, 0x33, 0x32, 0x33, 0x44, 0x42, 0x20, 0x2d,
-    0x20, 0x6e, 0x6f, 0x74, 0x20, 0x77, 0x6f, 0x72,
-    0x6b, 0x69, 0x6e, 0x67, 0x0d, 0x0a, 0x23, 0x66,
-    0x6c, 0x61, 0x73, 0x68, 0x20, 0x62, 0x61, 0x6e,
-    0x6b, 0x20, 0x63, 0x66, 0x69, 0x20, 0x3c, 0x62,
-    0x61, 0x73, 0x65, 0x3e, 0x20, 0x3c, 0x73, 0x69,
-    0x7a, 0x65, 0x3e, 0x20, 0x3c, 0x63, 0x68, 0x69,
-    0x70, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3e,
-    0x20, 0x3c, 0x62, 0x75, 0x73, 0x20, 0x77, 0x69,
-    0x64, 0x74, 0x68, 0x3e, 0x20, 0x3c, 0x74, 0x61,
-    0x72, 0x67, 0x65, 0x74, 0x23, 0x3e, 0x0d, 0x0a,
+    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
+    0x0d, 0x0a, 0x0d, 0x0a, 0x23, 0x4d, 0x32, 0x39,
+    0x44, 0x57, 0x33, 0x32, 0x33, 0x44, 0x42, 0x20,
+    0x2d, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x77, 0x6f,
+    0x72, 0x6b, 0x69, 0x6e, 0x67, 0x0d, 0x0a, 0x23,
     0x66, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x62, 0x61,
-    0x6e, 0x6b, 0x20, 0x63, 0x66, 0x69, 0x20, 0x30,
-    0x78, 0x35, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
-    0x30, 0x20, 0x30, 0x78, 0x30, 0x34, 0x30, 0x30,
-    0x30, 0x30, 0x30, 0x20, 0x32, 0x20, 0x32, 0x20,
-    0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d,
-    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+    0x6e, 0x6b, 0x20, 0x63, 0x66, 0x69, 0x20, 0x3c,
+    0x62, 0x61, 0x73, 0x65, 0x3e, 0x20, 0x3c, 0x73,
+    0x69, 0x7a, 0x65, 0x3e, 0x20, 0x3c, 0x63, 0x68,
+    0x69, 0x70, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68,
+    0x3e, 0x20, 0x3c, 0x62, 0x75, 0x73, 0x20, 0x77,
+    0x69, 0x64, 0x74, 0x68, 0x3e, 0x20, 0x3c, 0x74,
+    0x61, 0x72, 0x67, 0x65, 0x74, 0x23, 0x3e, 0x0d,
+    0x0a, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x62,
+    0x61, 0x6e, 0x6b, 0x20, 0x63, 0x66, 0x69, 0x20,
+    0x30, 0x78, 0x35, 0x30, 0x30, 0x30, 0x30, 0x30,
+    0x30, 0x30, 0x20, 0x30, 0x78, 0x30, 0x34, 0x30,
+    0x30, 0x30, 0x30, 0x30, 0x20, 0x32, 0x20, 0x32,
+    0x20, 0x30, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a,
+    0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x23, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e,
     0x20, 0x62, 0x79, 0x3a, 0x20, 0x4d, 0x69, 0x63,
     0x68, 0x61, 0x65, 0x6c, 0x20, 0x53, 0x63, 0x68,

Modified: zy1000/trunk/build/menu/zy1000menu.xml
===================================================================
--- zy1000/trunk/build/menu/zy1000menu.xml	2009-04-30 09:50:14 UTC (rev 1580)
+++ zy1000/trunk/build/menu/zy1000menu.xml	2009-04-30 10:07:39 UTC (rev 1581)
@@ -185,14 +185,16 @@
 			append buffer {<form enctype="multipart/form-data" action="preconfig.tcl" method="post">}
 			if {[string compare $form_action "Select and reload"]==0} {
 				capture "trunc /config/settings/openocd.cfg"
-				capture "append_file /config/settings/openocd.cfg script target/$form_target"
+				capture "append_file /config/settings/openocd.cfg script $form_target"
 				reboot 
 			}
 			
 			set form_target [load_target] 
 			
-			set files [ls /rom/target]
-			set files [lunion $files [ls /config/settings/target]]
+			set files [prepend target/ [ls /rom/target]]
+			set files [lunion $files [prepend target/ [ls /config/settings/target]]]
+			set files [lunion $files [prepend board/ [ls /rom/board]]]
+			set files [lunion $files [prepend board/ [ls /config/settings/board]]]
 			set files [lsort $files]
 			 
 			if {[string compare $form_action "Select and reload"]!=0} {
@@ -229,7 +231,7 @@
 					<input type="submit" name="form_action" value="Select and reload">
 					
 					&nbsp;&nbsp;&nbsp;&nbsp;
-					<a href="editconfigs.tcl?form_action=Load&form_selected=<tcl>append buffer "target/$form_target"</tcl>">Edit target configuration</a>
+					<a href="editconfigs.tcl?form_action=Load&form_selected=<tcl>append buffer "$form_target"</tcl>">Edit target configuration</a>
 				</td>
 				</tr></table>
 			<tcl>
@@ -292,19 +294,11 @@
 				set form_edittext_subst [to_textarea $form_edittext]
 			
 				
-				proc prepend { val list } {
-					set res ""				
-			        foreach value $list {
-			        	set t $val
-			        	append t $value
-			            lappend res $t
-			        }
-			        return $res
-				 }				
 				
 				set files [prepend target/ [ls /rom/target]]
-				set files [lunion $files [prepend event/ [ls /config/settings/event]]]
 				set files [lunion $files [prepend target/ [ls /config/settings/target]]]
+				set files [lunion $files [prepend board/ [ls /rom/board]]]
+				set files [lunion $files [prepend board/ [ls /config/settings/board]]]
 				set files [lsort $files]
 				
 				</tcl>
@@ -1559,7 +1553,7 @@
 			Before contacting Zylin, please submit a support request with relevant information. 
 			<tcl>
 			
-			set form_config [load_config "target/[load_target]"]
+			set form_config [load_config "[load_target]"]
 			set support_id [string range [rand] 0 7]
 			set form_log ""
 			append form_log "Version: [capture "zy1000_version zy1000"]"

Modified: zy1000/trunk/build/tcl/editconfigs.tcl
===================================================================
--- zy1000/trunk/build/tcl/editconfigs.tcl	2009-04-30 09:50:14 UTC (rev 1580)
+++ zy1000/trunk/build/tcl/editconfigs.tcl	2009-04-30 10:07:39 UTC (rev 1581)
@@ -171,19 +171,11 @@
 				set form_edittext_subst [to_textarea $form_edittext]
 			
 				
-				proc prepend { val list } {
-					set res ""				
-			        foreach value $list {
-			        	set t $val
-			        	append t $value
-			            lappend res $t
-			        }
-			        return $res
-				 }				
 				
 				set files [prepend target/ [ls /rom/target]]
-				set files [lunion $files [prepend event/ [ls /config/settings/event]]]
 				set files [lunion $files [prepend target/ [ls /config/settings/target]]]
+				set files [lunion $files [prepend board/ [ls /rom/board]]]
+				set files [lunion $files [prepend board/ [ls /config/settings/board]]]
 				set files [lsort $files]
 				
 				</tcl>

Modified: zy1000/trunk/build/tcl/index.tcl
===================================================================
--- zy1000/trunk/build/tcl/index.tcl	2009-04-30 09:50:14 UTC (rev 1580)
+++ zy1000/trunk/build/tcl/index.tcl	2009-04-30 10:07:39 UTC (rev 1581)
@@ -212,10 +212,10 @@
 								append console [encode [capture_catch "reset run"]]
 							}
 							
-							if {[string compare $form_action "Power on"]==0} {
+							if {[string compare $form_action "Relay on"]==0} {
 								append console [encode [capture_catch "power on"]]
 							}
-							if {[string compare $form_action "Power off"]==0} {
+							if {[string compare $form_action "Relay off"]==0} {
 								append console [encode [capture_catch "power off"]]
 							}
 						</tcl>
@@ -230,8 +230,8 @@
 					<td><input type="submit" name="form_action" value="Reset and run"></td>
 					<td class="buttonspacesmall"></td><td><input type="submit" name="form_action" value="Halt"></td>
 					<td class="buttonspacesmall"></td><td><input type="submit" name="form_action" value="Resume"></td>
-					<td style="width:50px;"></td><td><input type="submit" name="form_action" value="Power on"></td>
-					<td class="buttonspacesmall"></td><td><input type="submit" name="form_action" value="Power off"></td>
+					<td style="width:50px;"></td><td><input type="submit" name="form_action" value="Relay on"></td>
+					<td class="buttonspacesmall"></td><td><input type="submit" name="form_action" value="Relay off"></td>
 				</tr></table>
 
 				<br>						
@@ -373,8 +373,8 @@
 					See log for details. <br>
 					<p><b>Target power</b> - Detects power on target. <br>
 					If the JTAG cable is not connected, or the target has no power, then no target power will be detected.</p>
-					<p><b>Power on</b> - Turn on ZY1000 target power relay.</p>
-					<p><b>Power off</b> - Turn off ZY1000  target power relay.</p>
+					<p><b>Relay on</b> - Turn on ZY1000 target power relay.</p>
+					<p><b>Relay off</b> - Turn off ZY1000  target power relay.</p>
 					<p>Type "help power" in telnet for command to control power relay.</p>
 					<p><b>Reboot ZY1000</b> - Reboots ZY1000 unit. Type "help reboot" in telnet.</p>
 				

Modified: zy1000/trunk/build/tcl/openocd.cfg
===================================================================
--- zy1000/trunk/build/tcl/openocd.cfg	2009-04-30 09:50:14 UTC (rev 1580)
+++ zy1000/trunk/build/tcl/openocd.cfg	2009-04-30 10:07:39 UTC (rev 1581)
@@ -1,6 +1,15 @@
 #This is executed *BEFORE* /config/settings/openocd.cfg 
 
 
+proc prepend { val list } {
+	set res ""				
+    foreach value $list {
+    	set t $val
+    	append t $value
+        lappend res $t
+    }
+    return $res
+ }				
 
 
 proc tohex {a} {
@@ -59,9 +68,9 @@
 	
 	# fish out target name
 	set form_target ""
-	set found [string first "script target/" $configFile]
+	set found [string first "script " $configFile]
 	if {$found==0} {
-		set form_target [string range $configFile [string length "script target/"] [expr [string first \n $configFile]-1]]
+		set form_target [string range $configFile [string length "script "] [expr [string first \n $configFile]-1]]
 	}
 	
 	return $form_target

Modified: zy1000/trunk/build/tcl/preconfig.tcl
===================================================================
--- zy1000/trunk/build/tcl/preconfig.tcl	2009-04-30 09:50:14 UTC (rev 1580)
+++ zy1000/trunk/build/tcl/preconfig.tcl	2009-04-30 10:07:39 UTC (rev 1581)
@@ -144,14 +144,16 @@
 			append buffer {<form enctype="multipart/form-data" action="preconfig.tcl" method="post">}
 			if {[string compare $form_action "Select and reload"]==0} {
 				capture "trunc /config/settings/openocd.cfg"
-				capture "append_file /config/settings/openocd.cfg script target/$form_target"
+				capture "append_file /config/settings/openocd.cfg script $form_target"
 				reboot 
 			}
 			
 			set form_target [load_target] 
 			
-			set files [ls /rom/target]
-			set files [lunion $files [ls /config/settings/target]]
+			set files [prepend target/ [ls /rom/target]]
+			set files [lunion $files [prepend target/ [ls /config/settings/target]]]
+			set files [lunion $files [prepend board/ [ls /rom/board]]]
+			set files [lunion $files [prepend board/ [ls /config/settings/board]]]
 			set files [lsort $files]
 			 
 			if {[string compare $form_action "Select and reload"]!=0} {
@@ -188,7 +190,7 @@
 					<input type="submit" name="form_action" value="Select and reload">
 					
 					&nbsp;&nbsp;&nbsp;&nbsp;
-					<a href="editconfigs.tcl?form_action=Load&form_selected=<tcl>append buffer "target/$form_target"</tcl>">Edit target configuration</a>
+					<a href="editconfigs.tcl?form_action=Load&form_selected=<tcl>append buffer "$form_target"</tcl>">Edit target configuration</a>
 				</td>
 				</tr></table>
 			<tcl>

Modified: zy1000/trunk/build/tcl/production.tcl
===================================================================
--- zy1000/trunk/build/tcl/production.tcl	2009-04-30 09:50:14 UTC (rev 1580)
+++ zy1000/trunk/build/tcl/production.tcl	2009-04-30 10:07:39 UTC (rev 1581)
@@ -179,10 +179,10 @@
 							
 							append console [encode [capture_catch production_test]]
 						}
-						if {[string compare $form_action "Power on"]==0} {
+						if {[string compare $form_action "Relay on"]==0} {
 							append console [encode [capture_catch "power on"]]
 						}
-						if {[string compare $form_action "Power off"]==0} {
+						if {[string compare $form_action "Relay off"]==0} {
 							append console [encode [capture_catch "power off"]]
 						}
 					</tcl>
@@ -201,8 +201,8 @@
 				<table><tr>
 					<td><input type="submit" name="form_action" value="Upload firmware" ></td>
 					<td class="buttonspacesmall">&nbsp</td><td><input type="submit" name="form_action" value="Test"></td>
-					<td class="buttonspacesmall">&nbsp</td><td><input type="submit" name="form_action" value="Power on"></td>
-					<td class="buttonspacesmall">&nbsp</td><td><input type="submit" name="form_action" value="Power off">
+					<td class="buttonspacesmall">&nbsp</td><td><input type="submit" name="form_action" value="Relay on"></td>
+					<td class="buttonspacesmall">&nbsp</td><td><input type="submit" name="form_action" value="Relay off">
 				</tr></table>
 			</form>
 			
@@ -326,8 +326,8 @@
 				
 				<p><b>Upload firmware</b> - Power cycle target, reset target and program raw binary file to flash bank 0, offset 0 and verify flash programming. Leave target powered on.</p>
 				<p><b>Test</b> -  Power up target, run 10 second target test. Output is provided via the DCC output channel. </p>
-				<p><b>Power on</b> - Power on target.</p>
-				<p><b>Power off</b> - Power off target.</p>
+				<p><b>Relay on</b> - Relay on.</p>
+				<p><b>Relay off</b> - Relay off.</p>
 				<p><b>Serial number</b> - A target script can use this string in the production procedure. Type "help production" for more info.</p>
 					 
 			</td>

Modified: zy1000/trunk/build/tcl/support.tcl
===================================================================
--- zy1000/trunk/build/tcl/support.tcl	2009-04-30 09:50:14 UTC (rev 1580)
+++ zy1000/trunk/build/tcl/support.tcl	2009-04-30 10:07:39 UTC (rev 1581)
@@ -199,7 +199,7 @@
 			Before contacting Zylin, please submit a support request with relevant information. 
 			<tcl>
 			
-			set form_config [load_config "target/[load_target]"]
+			set form_config [load_config "[load_target]"]
 			set support_id [string range [rand] 0 7]
 			set form_log ""
 			append form_log "Version: [capture "zy1000_version zy1000"]"

Modified: zy1000/trunk/snapshots/athttpd.zip
===================================================================
(Binary files differ)

Modified: zy1000/trunk/snapshots/discover.zip
===================================================================
(Binary files differ)

Modified: zy1000/trunk/snapshots/jimtcl.zip
===================================================================
(Binary files differ)



From oharboe at mail.berlios.de  Thu Apr 30 12:08:11 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Thu, 30 Apr 2009 12:08:11 +0200
Subject: [Openocd-svn] r1582 - trunk/src/jtag
Message-ID: <200904301008.n3UA8BjI019618@sheep.berlios.de>

Author: oharboe
Date: 2009-04-30 12:08:11 +0200 (Thu, 30 Apr 2009)
New Revision: 1582

Modified:
   trunk/src/jtag/zy1000.c
Log:
zy1000 1.51

Modified: trunk/src/jtag/zy1000.c
===================================================================
--- trunk/src/jtag/zy1000.c	2009-04-30 10:07:39 UTC (rev 1581)
+++ trunk/src/jtag/zy1000.c	2009-04-30 10:08:11 UTC (rev 1582)
@@ -32,7 +32,7 @@
 
 #include <stdlib.h>
 
-#define ZYLIN_VERSION "1.50"
+#define ZYLIN_VERSION "1.51"
 #define ZYLIN_DATE __DATE__
 #define ZYLIN_TIME __TIME__
 #define ZYLIN_OPENOCD "$Revision$"



From oharboe at mail.berlios.de  Thu Apr 30 12:15:29 2009
From: oharboe at mail.berlios.de (oharboe at BerliOS)
Date: Thu, 30 Apr 2009 12:15:29 +0200
Subject: [Openocd-svn] r1583 - zy1000/trunk/build/include
Message-ID: <200904301015.n3UAFT91020543@sheep.berlios.de>

Author: oharboe
Date: 2009-04-30 12:15:20 +0200 (Thu, 30 Apr 2009)
New Revision: 1583

Modified:
   zy1000/trunk/build/include/rom.h
Log:
zy1000 1.51

Modified: zy1000/trunk/build/include/rom.h
===================================================================
--- zy1000/trunk/build/include/rom.h	2009-04-30 10:08:11 UTC (rev 1582)
+++ zy1000/trunk/build/include/rom.h	2009-04-30 10:15:20 UTC (rev 1583)
@@ -7,811 +7,811 @@
     0x2e, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x01, 0x00, 0x6f, 0x01, 0x0a, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x05, 0x00, 0x00,
-    0xa7, 0x77, 0xf9, 0x49, 0x60, 0x19, 0x00, 0x00,
+    0x91, 0x79, 0xf9, 0x49, 0x60, 0x19, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xe0, 0x8f, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0x00, 0x37, 0x00, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0x00, 0x37, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x00, 0x03, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0xc0, 0x1e, 0x00, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0xc0, 0x1e, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xa8, 0x37, 0x00, 0x00,
-    0x65, 0x77, 0xf9, 0x49, 0xe0, 0xc6, 0x00, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0xe0, 0xc6, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x96, 0x2b, 0x00, 0x00,
-    0x66, 0x77, 0xf9, 0x49, 0xa0, 0xfe, 0x00, 0x00,
+    0x49, 0x79, 0xf9, 0x49, 0xa0, 0xfe, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x34, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0xc0, 0x21, 0x00, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0xc0, 0x21, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x16, 0x37, 0x00, 0x00,
-    0x66, 0x77, 0xf9, 0x49, 0x40, 0x2a, 0x01, 0x00,
+    0x49, 0x79, 0xf9, 0x49, 0x40, 0x2a, 0x01, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x9d, 0x2f, 0x00, 0x00,
-    0x66, 0x77, 0xf9, 0x49, 0x60, 0x61, 0x01, 0x00,
+    0x49, 0x79, 0xf9, 0x49, 0x60, 0x61, 0x01, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xff, 0x2d, 0x00, 0x00,
-    0x66, 0x77, 0xf9, 0x49, 0x00, 0x91, 0x01, 0x00,
+    0x49, 0x79, 0xf9, 0x49, 0x00, 0x91, 0x01, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x9e, 0x00, 0x00, 0x00,
-    0x67, 0x77, 0xf9, 0x49, 0x00, 0xbf, 0x01, 0x00,
+    0x4a, 0x79, 0xf9, 0x49, 0x00, 0xbf, 0x01, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x90, 0x38, 0x00, 0x00,
-    0x67, 0x77, 0xf9, 0x49, 0xa0, 0xbf, 0x01, 0x00,
+    0x4a, 0x79, 0xf9, 0x49, 0xa0, 0xbf, 0x01, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x18, 0x2e, 0x00, 0x00,
-    0x67, 0x77, 0xf9, 0x49, 0x40, 0xf8, 0x01, 0x00,
+    0x4a, 0x79, 0xf9, 0x49, 0x40, 0xf8, 0x01, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x8b, 0x65, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0x60, 0x26, 0x02, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0x60, 0x26, 0x02, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x32, 0x3e,
     0x08, 0x00, 0x6f, 0x01, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x92, 0x02, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0x80, 0x4c, 0x08, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0x80, 0x4c, 0x08, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x5b, 0x2f, 0x00, 0x00,
-    0x68, 0x77, 0xf9, 0x49, 0x00, 0x8c, 0x02, 0x00,
+    0x4b, 0x79, 0xf9, 0x49, 0x00, 0x8c, 0x02, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xbb, 0x39, 0x00, 0x00,
-    0x68, 0x77, 0xf9, 0x49, 0x60, 0xbb, 0x02, 0x00,
+    0x4b, 0x79, 0xf9, 0x49, 0x60, 0xbb, 0x02, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x35, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x40, 0x04, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x20, 0x22, 0x00, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x20, 0x22, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x59, 0x26, 0x00, 0x00,
-    0x68, 0x77, 0xf9, 0x49, 0x20, 0xf5, 0x02, 0x00,
+    0x4b, 0x79, 0xf9, 0x49, 0x20, 0xf5, 0x02, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x22, 0x03, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0x80, 0x1b, 0x03, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0x80, 0x1b, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x6a, 0x08, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0xc0, 0x1e, 0x03, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0xc0, 0x1e, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x31, 0x39, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xc0, 0x02, 0x00, 0x00,
-    0x65, 0x77, 0xf9, 0x49, 0x60, 0x26, 0x00, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0x60, 0x26, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x83, 0x09, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0x40, 0x27, 0x03, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0x40, 0x27, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xdd, 0x2a, 0x00, 0x00,
-    0x6e, 0x77, 0xf9, 0x49, 0xe0, 0x30, 0x03, 0x00,
+    0x50, 0x79, 0xf9, 0x49, 0xe0, 0x30, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xb9, 0x30, 0x00, 0x00,
-    0x6e, 0x77, 0xf9, 0x49, 0xc0, 0x5b, 0x03, 0x00,
+    0x50, 0x79, 0xf9, 0x49, 0xc0, 0x5b, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xcd, 0x32, 0x00, 0x00,
-    0x6e, 0x77, 0xf9, 0x49, 0x80, 0x8c, 0x03, 0x00,
+    0x51, 0x79, 0xf9, 0x49, 0x80, 0x8c, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x0d, 0x29, 0x00, 0x00,
-    0x6e, 0x77, 0xf9, 0x49, 0x60, 0xbf, 0x03, 0x00,
+    0x51, 0x79, 0xf9, 0x49, 0x60, 0xbf, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x07, 0x2e, 0x00, 0x00,
-    0x6f, 0x77, 0xf9, 0x49, 0x80, 0xe8, 0x03, 0x00,
+    0x51, 0x79, 0xf9, 0x49, 0x80, 0xe8, 0x03, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x26, 0x01, 0x00, 0x00,
-    0x6f, 0x77, 0xf9, 0x49, 0xa0, 0x16, 0x04, 0x00,
+    0x51, 0x79, 0xf9, 0x49, 0xa0, 0x16, 0x04, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x3f, 0x0b, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0xe0, 0x17, 0x04, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0xe0, 0x17, 0x04, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x8a, 0x30, 0x00, 0x00,
-    0x6f, 0x77, 0xf9, 0x49, 0x20, 0x23, 0x04, 0x00,
+    0x52, 0x79, 0xf9, 0x49, 0x20, 0x23, 0x04, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x32, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x41, 0x07, 0x00, 0x00,
-    0x70, 0x77, 0xf9, 0x49, 0xc0, 0x53, 0x04, 0x00,
+    0x52, 0x79, 0xf9, 0x49, 0xc0, 0x53, 0x04, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x30, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x00, 0x08, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x20, 0x29, 0x00, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x20, 0x29, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x22, 0x48, 0x00, 0x00,
-    0x70, 0x77, 0xf9, 0x49, 0x20, 0x5b, 0x04, 0x00,
+    0x52, 0x79, 0xf9, 0x49, 0x20, 0x5b, 0x04, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x32, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x04, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x00, 0x01, 0x00, 0x00,
-    0xa7, 0x77, 0xf9, 0x49, 0x20, 0x31, 0x00, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x20, 0x31, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xca, 0x2e, 0x00, 0x00,
-    0x70, 0x77, 0xf9, 0x49, 0x60, 0xa3, 0x04, 0x00,
+    0x52, 0x79, 0xf9, 0x49, 0x60, 0xa3, 0x04, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x34, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x00, 0x00, 0x00,
-    0xa7, 0x77, 0xf9, 0x49, 0x20, 0x32, 0x00, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x20, 0x32, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xab, 0x30, 0x00, 0x00,
-    0x70, 0x77, 0xf9, 0x49, 0x40, 0xd2, 0x04, 0x00,
+    0x53, 0x79, 0xf9, 0x49, 0x40, 0xd2, 0x04, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x70, 0x01, 0x00, 0x00,
-    0x71, 0x77, 0xf9, 0x49, 0x00, 0x03, 0x05, 0x00,
+    0x53, 0x79, 0xf9, 0x49, 0x00, 0x03, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x37, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x00, 0x00, 0x00,
-    0xa7, 0x77, 0xf9, 0x49, 0x80, 0x32, 0x00, 0x00,
+    0x91, 0x79, 0xf9, 0x49, 0x80, 0x32, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xb3, 0x35, 0x00, 0x00,
-    0x71, 0x77, 0xf9, 0x49, 0x80, 0x04, 0x05, 0x00,
+    0x53, 0x79, 0xf9, 0x49, 0x80, 0x04, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x33, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x13, 0x06, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0x40, 0x3a, 0x05, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0x40, 0x3a, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x65, 0x03, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0x60, 0x40, 0x05, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0x60, 0x40, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xce, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0xe0, 0x43, 0x05, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0xe0, 0x43, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x51, 0x08, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0xc0, 0x44, 0x05, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0xc0, 0x44, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x62, 0x09, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x20, 0x4d, 0x05, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0x20, 0x4d, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x14, 0x04, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0xa0, 0x56, 0x05, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0xa0, 0x56, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0xc0, 0x5a, 0x05, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0xc0, 0x5a, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xbe, 0x07, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x20, 0x5b, 0x05, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0x20, 0x5b, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x11, 0x0a, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0xe0, 0x62, 0x05, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0xe0, 0x62, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x75, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x00, 0x6d, 0x05, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0x00, 0x6d, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x34, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x23, 0x01, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x80, 0x6d, 0x05, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0x80, 0x6d, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x15, 0x01, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0xc0, 0x6e, 0x05, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0xc0, 0x6e, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x7a, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0xe0, 0x6f, 0x05, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0xe0, 0x6f, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x64, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x60, 0x70, 0x05, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0x60, 0x70, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xc4, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0xe0, 0x70, 0x05, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0xe0, 0x70, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x76, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0xc0, 0x71, 0x05, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0xc0, 0x71, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x89, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x40, 0x72, 0x05, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0x40, 0x72, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x8c, 0x10, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0xe0, 0x72, 0x05, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0xe0, 0x72, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x69, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x80, 0x83, 0x05, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0x80, 0x83, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x6b, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x00, 0x84, 0x05, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0x00, 0x84, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x35, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x90, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x80, 0x84, 0x05, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0x80, 0x84, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x4b, 0x0c, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x20, 0x85, 0x05, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0x20, 0x85, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x5c, 0x03, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x80, 0x91, 0x05, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0x80, 0x91, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xe0, 0x8f, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0xe0, 0x94, 0x05, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0xe0, 0x94, 0x05, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x68, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0xc0, 0x24, 0x06, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0xc0, 0x24, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xca, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x40, 0x25, 0x06, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0x40, 0x25, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x6f, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x20, 0x26, 0x06, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0x20, 0x26, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xaf, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0xa0, 0x26, 0x06, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0xa0, 0x26, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x60, 0x27, 0x06, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0x60, 0x27, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x80, 0x28, 0x06, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0x80, 0x28, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x36, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xb7, 0x01, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0xa0, 0x29, 0x06, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0xa0, 0x29, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x7c, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x60, 0x2b, 0x06, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0x60, 0x2b, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x45, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0xe0, 0x2b, 0x06, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0xe0, 0x2b, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xde, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x40, 0x2c, 0x06, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0x40, 0x2c, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x82, 0x02, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x20, 0x2d, 0x06, 0x00,
+    0x8e, 0x79, 0xf9, 0x49, 0x20, 0x2d, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x53, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0xc0, 0x2f, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0xc0, 0x2f, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xb8, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x20, 0x30, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x20, 0x30, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xb7, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0xe0, 0x30, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0xe0, 0x30, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xa5, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0xa0, 0x31, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0xa0, 0x31, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xea, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x60, 0x32, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x60, 0x32, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x37, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x0a, 0x01, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x60, 0x33, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x60, 0x33, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xc8, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x80, 0x34, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x80, 0x34, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xb7, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x60, 0x35, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x60, 0x35, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xcf, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x20, 0x36, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x20, 0x36, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xda, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x00, 0x37, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x00, 0x37, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x0b, 0x01, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0xe0, 0x37, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0xe0, 0x37, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x97, 0x00, 0x00, 0x00,
-    0xa3, 0x77, 0xf9, 0x49, 0x00, 0x39, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x00, 0x39, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xda, 0x00, 0x00, 0x00,
-    0xa4, 0x77, 0xf9, 0x49, 0xa0, 0x39, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0xa0, 0x39, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xa3, 0x00, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x80, 0x3a, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x80, 0x3a, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x17, 0x01, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x40, 0x3b, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x40, 0x3b, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x38, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xf7, 0x00, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x60, 0x3c, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x60, 0x3c, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xcf, 0x00, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x60, 0x3d, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x60, 0x3d, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xbb, 0x00, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x40, 0x3e, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x40, 0x3e, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xe1, 0x00, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x00, 0x3f, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x00, 0x3f, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x73, 0x00, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x00, 0x40, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x00, 0x40, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xf0, 0x01, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x80, 0x40, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x80, 0x40, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x35, 0x01, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0x80, 0x42, 0x06, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0x80, 0x42, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x33, 0x01, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0xc0, 0x43, 0x06, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0xc0, 0x43, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x6c, 0x01, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0x00, 0x45, 0x06, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0x00, 0x45, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x36, 0x01, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0x80, 0x46, 0x06, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0x80, 0x46, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x20, 0x39, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x5d, 0x01, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0xc0, 0x47, 0x06, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0xc0, 0x47, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x4a, 0x01, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0x20, 0x49, 0x06, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0x20, 0x49, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xc6, 0x01, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0x80, 0x4a, 0x06, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0x80, 0x4a, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xc0, 0x03, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0x60, 0x4c, 0x06, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0x60, 0x4c, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x0a, 0x0c, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0x20, 0x50, 0x06, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0x20, 0x50, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x5f, 0x01, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0x40, 0x5c, 0x06, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0x40, 0x5c, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x19, 0x01, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0xa0, 0x5d, 0x06, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0xa0, 0x5d, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x09, 0x01, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0xc0, 0x5e, 0x06, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0xc0, 0x5e, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x01, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0xe0, 0x5f, 0x06, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0xe0, 0x5f, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x31, 0x01, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0x40, 0x61, 0x06, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0x40, 0x61, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x30, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xa9, 0x00, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0x80, 0x62, 0x06, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0x80, 0x62, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xf1, 0x08, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0x40, 0x63, 0x06, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0x40, 0x63, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x86, 0x01, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0x40, 0x6c, 0x06, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0x40, 0x6c, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x65, 0x01, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0xe0, 0x6d, 0x06, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0xe0, 0x6d, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x84, 0x0f, 0x00, 0x00,
-    0x64, 0x77, 0xf9, 0x49, 0x60, 0x6f, 0x06, 0x00,
+    0x48, 0x79, 0xf9, 0x49, 0x60, 0x6f, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x8a, 0x06, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x00, 0x7f, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x00, 0x7f, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x27, 0x07, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0xa0, 0x85, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0xa0, 0x85, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x47, 0x05, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0xe0, 0x8c, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0xe0, 0x8c, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x37, 0x06, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x40, 0x92, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x40, 0x92, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xfa, 0x03, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x80, 0x98, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x80, 0x98, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x31, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x95, 0x0f, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x80, 0x9c, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x80, 0x9c, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x9f, 0x03, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x20, 0xac, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x20, 0xac, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xdf, 0x02, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0xc0, 0xaf, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0xc0, 0xaf, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xf2, 0x05, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0xa0, 0xb2, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0xa0, 0xb2, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x01, 0x03, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0xa0, 0xb8, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0xa0, 0xb8, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x77, 0x04, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0xc0, 0xbb, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0xc0, 0xbb, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x1d, 0x07, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x40, 0xc0, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x40, 0xc0, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x3c, 0x05, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x60, 0xc7, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x60, 0xc7, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x17, 0x03, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0xa0, 0xcc, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0xa0, 0xcc, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xe2, 0x05, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0xc0, 0xcf, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0xc0, 0xcf, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x32, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x17, 0x03, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0xc0, 0xd5, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0xc0, 0xd5, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x19, 0x05, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0xe0, 0xd8, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0xe0, 0xd8, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xc2, 0x04, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x00, 0xde, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x00, 0xde, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xbd, 0x04, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0xe0, 0xe2, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0xe0, 0xe2, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x24, 0x04, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0xa0, 0xe7, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0xa0, 0xe7, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x0d, 0x04, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0xe0, 0xeb, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0xe0, 0xeb, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xf6, 0x03, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x00, 0xf0, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x00, 0xf0, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x1e, 0x07, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x00, 0xf4, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x00, 0xf4, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x34, 0x00, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x20, 0xfb, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x20, 0xfb, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x31, 0x00, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x60, 0xfb, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x60, 0xfb, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x33, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x4c, 0x04, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0xa0, 0xfb, 0x06, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0xa0, 0xfb, 0x06, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xda, 0x05, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x00, 0x00, 0x07, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x00, 0x00, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x04, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0xe0, 0x05, 0x07, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0xe0, 0x05, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xb2, 0x03, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x40, 0x0a, 0x07, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x40, 0x0a, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x25, 0x03, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x00, 0x0e, 0x07, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x00, 0x0e, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x14, 0x01, 0x00, 0x00,
-    0xa5, 0x77, 0xf9, 0x49, 0x40, 0x11, 0x07, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x40, 0x11, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x58, 0x04, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x60, 0x12, 0x07, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x60, 0x12, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x3d, 0x06, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0xc0, 0x16, 0x07, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0xc0, 0x16, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x55, 0x04, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x00, 0x1d, 0x07, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x00, 0x1d, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x88, 0x09, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x60, 0x21, 0x07, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x60, 0x21, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x34, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x15, 0x02, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x00, 0x2b, 0x07, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x00, 0x2b, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x9d, 0x05, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x20, 0x2d, 0x07, 0x00,
+    0x8f, 0x79, 0xf9, 0x49, 0x20, 0x2d, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x18, 0x03, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0xc0, 0x32, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0xc0, 0x32, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0xe0, 0x35, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0xe0, 0x35, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x98, 0x05, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x00, 0x3a, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x00, 0x3a, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xe3, 0x03, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0xa0, 0x3f, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0xa0, 0x3f, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x3f, 0x04, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0xa0, 0x43, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0xa0, 0x43, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x4e, 0x02, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0xe0, 0x47, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0xe0, 0x47, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x97, 0x05, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x40, 0x4a, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x40, 0x4a, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x67, 0x02, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0xe0, 0x4f, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0xe0, 0x4f, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x35, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x33, 0x01, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x60, 0x52, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x60, 0x52, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x02, 0x03, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0xa0, 0x53, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0xa0, 0x53, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x2e, 0x06, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0xc0, 0x56, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0xc0, 0x56, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x2c, 0x05, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x00, 0x5d, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x00, 0x5d, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x49, 0x05, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x40, 0x62, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x40, 0x62, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xfd, 0x04, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0xa0, 0x67, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0xa0, 0x67, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x5e, 0x05, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0xa0, 0x6c, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0xa0, 0x6c, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x9e, 0x06, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x00, 0x72, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x00, 0x72, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x84, 0x07, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0xa0, 0x78, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0xa0, 0x78, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x19, 0x07, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x40, 0x80, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x40, 0x80, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x36, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xcc, 0x01, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x60, 0x87, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x60, 0x87, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x5a, 0x00, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x40, 0x89, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x40, 0x89, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x1a, 0x0f, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0xa0, 0x89, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0xa0, 0x89, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xfa, 0x09, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0xc0, 0x98, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0xc0, 0x98, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xf5, 0x0b, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0xc0, 0xa2, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0xc0, 0xa2, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x7f, 0x06, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0xc0, 0xae, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0xc0, 0xae, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x35, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x04, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x80, 0x00, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0xe0, 0x32, 0x00, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0xe0, 0x32, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x36, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x03, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x00, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x60, 0x33, 0x00, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x60, 0x33, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x88, 0x0e, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x40, 0xb5, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x40, 0xb5, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xe0, 0x06, 0x00, 0x00,
-    0xa7, 0x77, 0xf9, 0x49, 0xe0, 0xc3, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0xe0, 0xc3, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x37, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x5e, 0x02, 0x00, 0x00,
-    0xa7, 0x77, 0xf9, 0x49, 0xc0, 0xca, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0xc0, 0xca, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x30, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x03, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x00, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0xc0, 0x33, 0x00, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0xc0, 0x33, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x31, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x03, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x60, 0x00, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x20, 0x34, 0x00, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x20, 0x34, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x32, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x00, 0x01, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x80, 0x34, 0x00, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x80, 0x34, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x33, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x18, 0x0c, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x20, 0xcd, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x20, 0xcd, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x21, 0x0f, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x40, 0xd9, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x40, 0xd9, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xa9, 0x10, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x80, 0xe8, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x80, 0xe8, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x66, 0x01, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x40, 0xf9, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x40, 0xf9, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xaf, 0x05, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0xc0, 0xfa, 0x07, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0xc0, 0xfa, 0x07, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xcf, 0x0e, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x80, 0x00, 0x08, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x80, 0x00, 0x08, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x38, 0x39, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xa0, 0x00, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x80, 0x35, 0x00, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x80, 0x35, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x39, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xec, 0x00, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x60, 0x0f, 0x08, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x60, 0x0f, 0x08, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x39, 0x31, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xf1, 0x1d, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x60, 0x10, 0x08, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x60, 0x10, 0x08, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x39, 0x32, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xf6, 0x11, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x60, 0x2e, 0x08, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x60, 0x2e, 0x08, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x39, 0x33, 0x3e,
     0x01, 0x00, 0x6f, 0x01, 0x02, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0xe0, 0x00, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x20, 0x36, 0x00, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x20, 0x36, 0x00, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x39, 0x34, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x79, 0x00, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x60, 0x40, 0x08, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x60, 0x40, 0x08, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x39, 0x35, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x77, 0x00, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0xe0, 0x40, 0x08, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0xe0, 0x40, 0x08, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x39, 0x36, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x78, 0x00, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x60, 0x41, 0x08, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x60, 0x41, 0x08, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x39, 0x37, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x78, 0x00, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0xe0, 0x41, 0x08, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0xe0, 0x41, 0x08, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x39, 0x38, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x79, 0x00, 0x00, 0x00,
-    0xa6, 0x77, 0xf9, 0x49, 0x60, 0x42, 0x08, 0x00,
+    0x90, 0x79, 0xf9, 0x49, 0x60, 0x42, 0x08, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x31, 0x39, 0x39, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x58, 0x03, 0x00, 0x00,
-    0xa7, 0x77, 0xf9, 0x49, 0xe0, 0x42, 0x08, 0x00,
+    0x91, 0x79, 0xf9, 0x49, 0xe0, 0x42, 0x08, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x32, 0x30, 0x30, 0x3e,
     0x08, 0x00, 0x4b, 0x00, 0x01, 0x00, 0x00, 0x00,
     0xeb, 0x03, 0x01, 0x02, 0x38, 0x06, 0x00, 0x00,
-    0xa7, 0x77, 0xf9, 0x49, 0x40, 0x46, 0x08, 0x00,
+    0x91, 0x79, 0xf9, 0x49, 0x40, 0x46, 0x08, 0x00,
     0x3c, 0x20, 0x20, 0x20, 0x32, 0x30, 0x31, 0x3e,
     0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
     0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,



From zwelch at mail.berlios.de  Thu Apr 30 23:04:39 2009
From: zwelch at mail.berlios.de (zwelch at mail.berlios.de)
Date: Thu, 30 Apr 2009 23:04:39 +0200
Subject: [Openocd-svn] r1584 - in trunk: contrib src/target/interface
Message-ID: <200904302104.n3UL4dbE020324@sheep.berlios.de>

Author: zwelch
Date: 2009-04-30 23:04:34 +0200 (Thu, 30 Apr 2009)
New Revision: 1584

Modified:
   trunk/contrib/openocd.udev
   trunk/src/target/interface/icebear.cfg
Log:
Uwe Hermann <uwe at hermann-uwe.de>: Make ICEbear look like other targets

Modified: trunk/contrib/openocd.udev
===================================================================
--- trunk/contrib/openocd.udev	2009-04-30 10:15:20 UTC (rev 1583)
+++ trunk/contrib/openocd.udev	2009-04-30 21:04:34 UTC (rev 1584)
@@ -52,9 +52,9 @@
 # Marvell Sheevaplug
 SYSFS{idVendor}=="9e88", SYSFS{idProduct}=="9e8f", MODE="664", GROUP="plugdev"
 
-# Icebear (Section5)
-SYSFS{idProduct}=="c140", SYSFS{idVendor}=="0403", MODE="666", GROUP="usb"
-SYSFS{idProduct}=="c141", SYSFS{idVendor}=="0403", MODE="666", GROUP="usb"
+# Section5 ICEbear
+SYSFS{idVendor}=="0403", SYSFS{idProduct}=="c140", MODE="664", GROUP="plugdev"
+SYSFS{idVendor}=="0403", SYSFS{idProduct}=="c141", MODE="664", GROUP="plugdev"
 
 LABEL="openocd_rules_end"
 

Modified: trunk/src/target/interface/icebear.cfg
===================================================================
--- trunk/src/target/interface/icebear.cfg	2009-04-30 10:15:20 UTC (rev 1583)
+++ trunk/src/target/interface/icebear.cfg	2009-04-30 21:04:34 UTC (rev 1584)
@@ -1,23 +1,11 @@
-#####################################################
-# IceBear Configuration
 #
+# Section5 ICEBear
+#
 # http://section5.ch/icebear
 #
-# Author: Sten, debian at sansys-electronic.com
-#####################################################
-#
-# Add file /etc/udev/rules.d/45-icebear.rules
-#
-#BUS!="usb", ACTION!="add", SUBSYSTEM!=="usb_device", GOTO="kcontrol_rules_end"
-#
-#SYSFS{idProduct}=="c140", SYSFS{idVendor}=="0403", MODE="666", GROUP="usb"
-#SYSFS{idProduct}=="c141", SYSFS{idVendor}=="0403", MODE="666", GROUP="usb"
-#
-#LABEL="kcontrol_rules_end"
-#
 
 interface ft2232
-#ft2232_device_desc ""
+# ft2232_device_desc ""
 ft2232_layout icebear
 ft2232_vid_pid 0x0403 0xc140
 



